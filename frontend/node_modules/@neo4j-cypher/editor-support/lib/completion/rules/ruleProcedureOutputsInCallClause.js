"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CypherTypes = _interopRequireWildcard(require("../../lang/CypherTypes"));
var CompletionTypes = _interopRequireWildcard(require("../CompletionTypes"));
var _TreeUtils = require("../../util/TreeUtils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Return procedure output completion if we are inside procedure
var _default = element => {
  const call = _TreeUtils.TreeUtils.findAnyParent(element, [CypherTypes.CALL_CONTEXT]);
  if (call != null) {
    const procedure = _TreeUtils.TreeUtils.findChild(call, CypherTypes.PROCEDURE_NAME_CONTEXT);
    const resultOutput = _TreeUtils.TreeUtils.findAnyParent(element, [CypherTypes.PROCEDURE_RESULTS_CONTEXT]);
    if (procedure == null || resultOutput == null) {
      return [];
    }
    return [{
      type: CompletionTypes.PROCEDURE_OUTPUT,
      name: procedure.getText()
    }];
  }
  return [];
};
exports.default = _default;