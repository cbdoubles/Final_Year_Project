import {
  require_jsx_runtime
} from "./chunk-SSJGAJRW.js";
import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/lodash.includes/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.includes/index.js"(exports, module) {
    var INFINITY2 = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeParseInt = parseInt;
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    function arrayLikeKeys(value, inherited) {
      var result = isArray2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike2(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject3(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject3(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike2(value) {
      return !!value && typeof value == "object";
    }
    function isString2(value) {
      return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && objectToString.call(value) == stringTag;
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike2(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY2 || value === -INFINITY2) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject3(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject3(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function values(object) {
      return object ? baseValues(object, keys2(object)) : [];
    }
    module.exports = includes;
  }
});

// node_modules/lodash.find/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.find/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY2 = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reTrim = /^\s+|\s+$/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var Uint8Array = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject3(value) && !isObjectLike2(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag2(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag2(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays2(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject3(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike2(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function baseToString2(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
    }
    function castPath(value) {
      return isArray2(value) ? value : stringToPath(value);
    }
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate, 3);
          collection = keys2(collection);
          predicate = function(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
      };
    }
    function equalArrays2(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays2(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys2(object), objLength = objProps.length, othProps = keys2(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys2(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag2 = baseGetTag;
    if (DataView && getTag2(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag2(new Map2()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) {
      getTag2 = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result, index = -1, length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray2(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject3(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string2) {
      string2 = toString2(string2);
      var result = [];
      if (reLeadingDot.test(string2)) {
        result.push("");
      }
      string2.replace(rePropName, function(match, number2, quote, string3) {
        result.push(quote ? string3.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function findIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee(predicate, 3), index);
    }
    var find2 = createFind(findIndex);
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike2(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject3(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject3(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike2(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike2(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY2 || value === -INFINITY2) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject3(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject3(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function toString2(value) {
      return value == null ? "" : baseToString2(value);
    }
    function get2(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = find2;
  }
});

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t2, r) {
  if ("object" != _typeof(t2) || !t2)
    return t2;
  var e = t2[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t2, r || "default");
    if ("object" != _typeof(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t2);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t2) {
  var i = toPrimitive(t2, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@neo4j-cypher/react-codemirror/es/CypherEditor.js
var import_react = __toESM(require_react());

// node_modules/@codemirror/state/dist/index.js
var Text = class _Text {
  /**
  Get the line description around the given position.
  */
  lineAt(pos) {
    if (pos < 0 || pos > this.length)
      throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
    return this.lineInner(pos, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(n) {
    if (n < 1 || n > this.lines)
      throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
    return this.lineInner(n, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(from, to, text) {
    [from, to] = clip(this, from, to);
    let parts = [];
    this.decompose(
      0,
      from,
      parts,
      2
      /* Open.To */
    );
    if (text.length)
      text.decompose(
        0,
        text.length,
        parts,
        1 | 2
        /* Open.To */
      );
    this.decompose(
      to,
      this.length,
      parts,
      1
      /* Open.From */
    );
    return TextNode.from(parts, this.length - (to - from) + text.length);
  }
  /**
  Append another document to this one.
  */
  append(other) {
    return this.replace(this.length, this.length, other);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(from, to = this.length) {
    [from, to] = clip(this, from, to);
    let parts = [];
    this.decompose(from, to, parts, 0);
    return TextNode.from(parts, to - from);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(other) {
    if (other == this)
      return true;
    if (other.length != this.length || other.lines != this.lines)
      return false;
    let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
    let a = new RawTextCursor(this), b = new RawTextCursor(other);
    for (let skip = start, pos = start; ; ) {
      a.next(skip);
      b.next(skip);
      skip = 0;
      if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
        return false;
      pos += a.value.length;
      if (a.done || pos >= end)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(dir = 1) {
    return new RawTextCursor(this, dir);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(from, to = this.length) {
    return new PartialTextCursor(this, from, to);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(from, to) {
    let inner;
    if (from == null) {
      inner = this.iter();
    } else {
      if (to == null)
        to = this.lines + 1;
      let start = this.line(from).from;
      inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
    }
    return new LineCursor(inner);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let lines = [];
    this.flatten(lines);
    return lines;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(text) {
    if (text.length == 0)
      throw new RangeError("A document must have at least one line");
    if (text.length == 1 && !text[0])
      return _Text.empty;
    return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
  }
};
var TextLeaf = class _TextLeaf extends Text {
  constructor(text, length = textLength(text)) {
    super();
    this.text = text;
    this.length = length;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(target, isLine, line, offset) {
    for (let i = 0; ; i++) {
      let string2 = this.text[i], end = offset + string2.length;
      if ((isLine ? line : end) >= target)
        return new Line(offset, end, line, string2);
      offset = end + 1;
      line++;
    }
  }
  decompose(from, to, target, open) {
    let text = from <= 0 && to >= this.length ? this : new _TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
    if (open & 1) {
      let prev = target.pop();
      let joined = appendText(text.text, prev.text.slice(), 0, text.length);
      if (joined.length <= 32) {
        target.push(new _TextLeaf(joined, prev.length + text.length));
      } else {
        let mid = joined.length >> 1;
        target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
      }
    } else {
      target.push(text);
    }
  }
  replace(from, to, text) {
    if (!(text instanceof _TextLeaf))
      return super.replace(from, to, text);
    [from, to] = clip(this, from, to);
    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
    let newLen = this.length + text.length - (to - from);
    if (lines.length <= 32)
      return new _TextLeaf(lines, newLen);
    return TextNode.from(_TextLeaf.split(lines, []), newLen);
  }
  sliceString(from, to = this.length, lineSep = "\n") {
    [from, to] = clip(this, from, to);
    let result = "";
    for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
      let line = this.text[i], end = pos + line.length;
      if (pos > from && i)
        result += lineSep;
      if (from < end && to > pos)
        result += line.slice(Math.max(0, from - pos), to - pos);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let line of this.text)
      target.push(line);
  }
  scanIdentical() {
    return 0;
  }
  static split(text, target) {
    let part = [], len = -1;
    for (let line of text) {
      part.push(line);
      len += line.length + 1;
      if (part.length == 32) {
        target.push(new _TextLeaf(part, len));
        part = [];
        len = -1;
      }
    }
    if (len > -1)
      target.push(new _TextLeaf(part, len));
    return target;
  }
};
var TextNode = class _TextNode extends Text {
  constructor(children, length) {
    super();
    this.children = children;
    this.length = length;
    this.lines = 0;
    for (let child of children)
      this.lines += child.lines;
  }
  lineInner(target, isLine, line, offset) {
    for (let i = 0; ; i++) {
      let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
      if ((isLine ? endLine : end) >= target)
        return child.lineInner(target, isLine, line, offset);
      offset = end + 1;
      line = endLine + 1;
    }
  }
  decompose(from, to, target, open) {
    for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (from <= end && to >= pos) {
        let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to ? 2 : 0));
        if (pos >= from && end <= to && !childOpen)
          target.push(child);
        else
          child.decompose(from - pos, to - pos, target, childOpen);
      }
      pos = end + 1;
    }
  }
  replace(from, to, text) {
    [from, to] = clip(this, from, to);
    if (text.lines < this.lines)
      for (let i = 0, pos = 0; i < this.children.length; i++) {
        let child = this.children[i], end = pos + child.length;
        if (from >= pos && to <= end) {
          let updated = child.replace(from - pos, to - pos, text);
          let totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
            let copy = this.children.slice();
            copy[i] = updated;
            return new _TextNode(copy, this.length - (to - from) + text.length);
          }
          return super.replace(pos, end, updated);
        }
        pos = end + 1;
      }
    return super.replace(from, to, text);
  }
  sliceString(from, to = this.length, lineSep = "\n") {
    [from, to] = clip(this, from, to);
    let result = "";
    for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
      let child = this.children[i], end = pos + child.length;
      if (pos > from && i)
        result += lineSep;
      if (from < end && to > pos)
        result += child.sliceString(from - pos, to - pos, lineSep);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let child of this.children)
      child.flatten(target);
  }
  scanIdentical(other, dir) {
    if (!(other instanceof _TextNode))
      return 0;
    let length = 0;
    let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
    for (; ; iA += dir, iB += dir) {
      if (iA == eA || iB == eB)
        return length;
      let chA = this.children[iA], chB = other.children[iB];
      if (chA != chB)
        return length + chA.scanIdentical(chB, dir);
      length += chA.length + 1;
    }
  }
  static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
    let lines = 0;
    for (let ch of children)
      lines += ch.lines;
    if (lines < 32) {
      let flat = [];
      for (let ch of children)
        ch.flatten(flat);
      return new TextLeaf(flat, length);
    }
    let chunk = Math.max(
      32,
      lines >> 5
      /* Tree.BranchShift */
    ), maxChunk = chunk << 1, minChunk = chunk >> 1;
    let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
    function add2(child) {
      let last;
      if (child.lines > maxChunk && child instanceof _TextNode) {
        for (let node of child.children)
          add2(node);
      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
        flush();
        chunked.push(child);
      } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
      } else {
        if (currentLines + child.lines > chunk)
          flush();
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk.push(child);
      }
    }
    function flush() {
      if (currentLines == 0)
        return;
      chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
      currentLen = -1;
      currentLines = currentChunk.length = 0;
    }
    for (let child of children)
      add2(child);
    flush();
    return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length);
  }
};
Text.empty = new TextLeaf([""], 0);
function textLength(text) {
  let length = -1;
  for (let line of text)
    length += line.length + 1;
  return length;
}
function appendText(text, target, from = 0, to = 1e9) {
  for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
    let line = text[i], end = pos + line.length;
    if (end >= from) {
      if (end > to)
        line = line.slice(0, to - pos);
      if (pos < from)
        line = line.slice(from - pos);
      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else
        target.push(line);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}
var RawTextCursor = class {
  constructor(text, dir = 1) {
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  nextInner(skip, dir) {
    this.done = this.lineBreak = false;
    for (; ; ) {
      let last = this.nodes.length - 1;
      let top2 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
      let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
      if (offset == (dir > 0 ? size : 0)) {
        if (last == 0) {
          this.done = true;
          this.value = "";
          return this;
        }
        if (dir > 0)
          this.offsets[last - 1]++;
        this.nodes.pop();
        this.offsets.pop();
      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
        this.offsets[last] += dir;
        if (skip == 0) {
          this.lineBreak = true;
          this.value = "\n";
          return this;
        }
        skip--;
      } else if (top2 instanceof TextLeaf) {
        let next = top2.text[offset + (dir < 0 ? -1 : 0)];
        this.offsets[last] += dir;
        if (next.length > Math.max(0, skip)) {
          this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
          return this;
        }
        skip -= next.length;
      } else {
        let next = top2.children[offset + (dir < 0 ? -1 : 0)];
        if (skip > next.length) {
          skip -= next.length;
          this.offsets[last] += dir;
        } else {
          if (dir < 0)
            this.offsets[last]--;
          this.nodes.push(next);
          this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
        }
      }
    }
  }
  next(skip = 0) {
    if (skip < 0) {
      this.nextInner(-skip, -this.dir);
      skip = this.value.length;
    }
    return this.nextInner(skip, this.dir);
  }
};
var PartialTextCursor = class {
  constructor(text, start, end) {
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  nextInner(skip, dir) {
    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
      this.value = "";
      this.done = true;
      return this;
    }
    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
    if (skip > limit)
      skip = limit;
    limit -= skip;
    let { value } = this.cursor.next(skip);
    this.pos += (value.length + skip) * dir;
    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
    this.done = !this.value;
    return this;
  }
  next(skip = 0) {
    if (skip < 0)
      skip = Math.max(skip, this.from - this.pos);
    else if (skip > 0)
      skip = Math.min(skip, this.to - this.pos);
    return this.nextInner(skip, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
var LineCursor = class {
  constructor(inner) {
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  next(skip = 0) {
    let { done, lineBreak, value } = this.inner.next(skip);
    if (done && this.afterBreak) {
      this.value = "";
      this.afterBreak = false;
    } else if (done) {
      this.done = true;
      this.value = "";
    } else if (lineBreak) {
      if (this.afterBreak) {
        this.value = "";
      } else {
        this.afterBreak = true;
        this.next();
      }
    } else {
      this.value = value;
      this.afterBreak = false;
    }
    return this;
  }
  get lineBreak() {
    return false;
  }
};
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function() {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
var Line = class {
  /**
  @internal
  */
  constructor(from, to, number2, text) {
    this.from = from;
    this.to = to;
    this.number = number2;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function clip(text, from, to) {
  from = Math.max(0, Math.min(text.length, from));
  return [from, Math.max(from, Math.min(text.length, to))];
}
var extend = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s) => s ? parseInt(s, 36) : 1);
for (let i = 1; i < extend.length; i++)
  extend[i] += extend[i - 1];
function isExtendingChar(code) {
  for (let i = 1; i < extend.length; i += 2)
    if (extend[i] > code)
      return extend[i - 1] <= code;
  return false;
}
function isRegionalIndicator(code) {
  return code >= 127462 && code <= 127487;
}
var ZWJ = 8205;
function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length)
    return pos;
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
    pos--;
  let prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    let next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      let countBefore = 0, i = pos - 2;
      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
        countBefore++;
        i -= 2;
      }
      if (countBefore % 2 == 0)
        break;
      else
        pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos)
      return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch) {
  return ch >= 56320 && ch < 57344;
}
function surrogateHigh(ch) {
  return ch >= 55296 && ch < 56320;
}
function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length)
    return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1))
    return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function fromCodePoint(code) {
  if (code <= 65535)
    return String.fromCharCode(code);
  code -= 65536;
  return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
}
function codePointSize(code) {
  return code < 65536 ? 1 : 2;
}
var DefaultSplit = /\r\n?|\n/;
var MapMode = function(MapMode2) {
  MapMode2[MapMode2["Simple"] = 0] = "Simple";
  MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
  MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
  MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
  return MapMode2;
}(MapMode || (MapMode = {}));
var ChangeDesc = class _ChangeDesc {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(sections) {
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let result = 0;
    for (let i = 0; i < this.sections.length; i += 2)
      result += this.sections[i];
    return result;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let result = 0;
    for (let i = 0; i < this.sections.length; i += 2) {
      let ins = this.sections[i + 1];
      result += ins < 0 ? this.sections[i] : ins;
    }
    return result;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(f) {
    for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      if (ins < 0) {
        f(posA, posB, len);
        posB += len;
      } else {
        posB += ins;
      }
      posA += len;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(f, individual = false) {
    iterChanges(this, f, individual);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let sections = [];
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      if (ins < 0)
        sections.push(len, ins);
      else
        sections.push(ins, len);
    }
    return new _ChangeDesc(sections);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(other, before = false) {
    return other.empty ? this : mapSet(this, other, before);
  }
  mapPos(pos, assoc = -1, mode = MapMode.Simple) {
    let posA = 0, posB = 0;
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
      if (ins < 0) {
        if (endA > pos)
          return posB + (pos - posA);
        posB += len;
      } else {
        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
          return null;
        if (endA > pos || endA == pos && assoc < 0 && !len)
          return pos == posA || assoc < 0 ? posB : posB + ins;
        posB += ins;
      }
      posA = endA;
    }
    if (pos > posA)
      throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
    return posB;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(from, to = from) {
    for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
      let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
      if (ins >= 0 && pos <= to && end >= from)
        return pos < from && end > to ? "cover" : true;
      pos = end;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let result = "";
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
    }
    return result;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json) || json.length % 2 || json.some((a) => typeof a != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new _ChangeDesc(json);
  }
  /**
  @internal
  */
  static create(sections) {
    return new _ChangeDesc(sections);
  }
};
var ChangeSet = class _ChangeSet extends ChangeDesc {
  constructor(sections, inserted) {
    super(sections);
    this.inserted = inserted;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(doc2) {
    if (this.length != doc2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
    return doc2;
  }
  mapDesc(other, before = false) {
    return mapSet(this, other, before, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(doc2) {
    let sections = this.sections.slice(), inserted = [];
    for (let i = 0, pos = 0; i < sections.length; i += 2) {
      let len = sections[i], ins = sections[i + 1];
      if (ins >= 0) {
        sections[i] = ins;
        sections[i + 1] = len;
        let index = i >> 1;
        while (inserted.length < index)
          inserted.push(Text.empty);
        inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
      }
      pos += len;
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(other, before = false) {
    return other.empty ? this : mapSet(this, other, before, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(f, individual = false) {
    iterChanges(this, f, individual);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return ChangeDesc.create(this.sections);
  }
  /**
  @internal
  */
  filter(ranges) {
    let resultSections = [], resultInserted = [], filteredSections = [];
    let iter = new SectionIter(this);
    done:
      for (let i = 0, pos = 0; ; ) {
        let next = i == ranges.length ? 1e9 : ranges[i++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0)
            addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        let end = ranges[i++];
        while (pos < end) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, end - pos);
          addSection(resultSections, len, -1);
          addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(len);
          pos += len;
        }
      }
    return {
      changes: new _ChangeSet(resultSections, resultInserted),
      filtered: ChangeDesc.create(filteredSections)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let parts = [];
    for (let i = 0; i < this.sections.length; i += 2) {
      let len = this.sections[i], ins = this.sections[i + 1];
      if (ins < 0)
        parts.push(len);
      else if (ins == 0)
        parts.push([len]);
      else
        parts.push([len].concat(this.inserted[i >> 1].toJSON()));
    }
    return parts;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(changes, length, lineSep) {
    let sections = [], inserted = [], pos = 0;
    let total = null;
    function flush(force = false) {
      if (!force && !sections.length)
        return;
      if (pos < length)
        addSection(sections, length - pos, -1);
      let set = new _ChangeSet(sections, inserted);
      total = total ? total.compose(set.map(total)) : set;
      sections = [];
      inserted = [];
      pos = 0;
    }
    function process(spec) {
      if (Array.isArray(spec)) {
        for (let sub of spec)
          process(sub);
      } else if (spec instanceof _ChangeSet) {
        if (spec.length != length)
          throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
        flush();
        total = total ? total.compose(spec.map(total)) : spec;
      } else {
        let { from, to = from, insert: insert2 } = spec;
        if (from > to || from < 0 || to > length)
          throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
        let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
        let insLen = insText.length;
        if (from == to && insLen == 0)
          return;
        if (from < pos)
          flush();
        if (from > pos)
          addSection(sections, from - pos, -1);
        addSection(sections, to - from, insLen);
        addInsert(inserted, sections, insText);
        pos = to;
      }
    }
    process(changes);
    flush(!total);
    return total;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(length) {
    return new _ChangeSet(length ? [length, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let sections = [], inserted = [];
    for (let i = 0; i < json.length; i++) {
      let part = json[i];
      if (typeof part == "number") {
        sections.push(part, -1);
      } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
        throw new RangeError("Invalid JSON representation of ChangeSet");
      } else if (part.length == 1) {
        sections.push(part[0], 0);
      } else {
        while (inserted.length < i)
          inserted.push(Text.empty);
        inserted[i] = Text.of(part.slice(1));
        sections.push(part[0], inserted[i].length);
      }
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  @internal
  */
  static createSet(sections, inserted) {
    return new _ChangeSet(sections, inserted);
  }
};
function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0)
    return;
  let last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1])
    sections[last] += len;
  else if (len == 0 && sections[last] == 0)
    sections[last + 1] += ins;
  else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else
    sections.push(len, ins);
}
function addInsert(values, sections, value) {
  if (value.length == 0)
    return;
  let index = sections.length - 2 >> 1;
  if (index < values.length) {
    values[values.length - 1] = values[values.length - 1].append(value);
  } else {
    while (values.length < index)
      values.push(Text.empty);
    values.push(value);
  }
}
function iterChanges(desc, f, individual) {
  let inserted = desc.inserted;
  for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
    let len = desc.sections[i++], ins = desc.sections[i++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA, endB = posB, text = Text.empty;
      for (; ; ) {
        endA += len;
        endB += ins;
        if (ins && inserted)
          text = text.append(inserted[i - 2 >> 1]);
        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
          break;
        len = desc.sections[i++];
        ins = desc.sections[i++];
      }
      f(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before, mkSet = false) {
  let sections = [], insert2 = mkSet ? [] : null;
  let a = new SectionIter(setA), b = new SectionIter(setB);
  for (let inserted = -1; ; ) {
    if (a.ins == -1 && b.ins == -1) {
      let len = Math.min(a.len, b.len);
      addSection(sections, len, -1);
      a.forward(len);
      b.forward(len);
    } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
      let len = b.len;
      addSection(sections, b.ins, -1);
      while (len) {
        let piece = Math.min(a.len, len);
        if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
          addSection(sections, 0, a.ins);
          if (insert2)
            addInsert(insert2, sections, a.text);
          inserted = a.i;
        }
        a.forward(piece);
        len -= piece;
      }
      b.next();
    } else if (a.ins >= 0) {
      let len = 0, left = a.len;
      while (left) {
        if (b.ins == -1) {
          let piece = Math.min(left, b.len);
          len += piece;
          left -= piece;
          b.forward(piece);
        } else if (b.ins == 0 && b.len < left) {
          left -= b.len;
          b.next();
        } else {
          break;
        }
      }
      addSection(sections, len, inserted < a.i ? a.ins : 0);
      if (insert2 && inserted < a.i)
        addInsert(insert2, sections, a.text);
      inserted = a.i;
      a.forward(a.len - left);
    } else if (a.done && b.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert2 = mkSet ? [] : null;
  let a = new SectionIter(setA), b = new SectionIter(setB);
  for (let open = false; ; ) {
    if (a.done && b.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else if (a.ins == 0) {
      addSection(sections, a.len, 0, open);
      a.next();
    } else if (b.len == 0 && !b.done) {
      addSection(sections, 0, b.ins, open);
      if (insert2)
        addInsert(insert2, sections, b.text);
      b.next();
    } else if (a.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a.len2, b.len), sectionLen = sections.length;
      if (a.ins == -1) {
        let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert2 && insB)
          addInsert(insert2, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a.off ? 0 : a.len, len, open);
        if (insert2)
          addInsert(insert2, sections, a.textBit(len));
      } else {
        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
        if (insert2 && !b.off)
          addInsert(insert2, sections, b.text);
      }
      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a.forward2(len);
      b.forward(len);
    }
  }
}
var SectionIter = class {
  constructor(set) {
    this.set = set;
    this.i = 0;
    this.next();
  }
  next() {
    let { sections } = this.set;
    if (this.i < sections.length) {
      this.len = sections[this.i++];
      this.ins = sections[this.i++];
    } else {
      this.len = 0;
      this.ins = -2;
    }
    this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length ? Text.empty : inserted[index];
  }
  textBit(len) {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
  }
  forward(len) {
    if (len == this.len)
      this.next();
    else {
      this.len -= len;
      this.off += len;
    }
  }
  forward2(len) {
    if (this.ins == -1)
      this.forward(len);
    else if (len == this.ins)
      this.next();
    else {
      this.ins -= len;
      this.off += len;
    }
  }
};
var SelectionRange = class _SelectionRange {
  constructor(from, to, flags) {
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let level = this.flags & 7;
    return level == 7 ? null : level;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let value = this.flags >> 6;
    return value == 16777215 ? void 0 : value;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(change, assoc = -1) {
    let from, to;
    if (this.empty) {
      from = to = change.mapPos(this.from, assoc);
    } else {
      from = change.mapPos(this.from, 1);
      to = change.mapPos(this.to, -1);
    }
    return from == this.from && to == this.to ? this : new _SelectionRange(from, to, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(from, to = from) {
    if (from <= this.anchor && to >= this.anchor)
      return EditorSelection.range(from, to);
    let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
    return EditorSelection.range(this.anchor, head);
  }
  /**
  Compare this range to another range.
  */
  eq(other, includeAssoc = false) {
    return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(json) {
    if (!json || typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return EditorSelection.range(json.anchor, json.head);
  }
  /**
  @internal
  */
  static create(from, to, flags) {
    return new _SelectionRange(from, to, flags);
  }
};
var EditorSelection = class _EditorSelection {
  constructor(ranges, mainIndex) {
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(change, assoc = -1) {
    if (change.empty)
      return this;
    return _EditorSelection.create(this.ranges.map((r) => r.map(change, assoc)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(other, includeAssoc = false) {
    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
      return false;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(range, main = true) {
    return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(range, which = this.mainIndex) {
    let ranges = this.ranges.slice();
    ranges[which] = range;
    return _EditorSelection.create(ranges, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((r) => r.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(json) {
    if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new _EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(anchor, head = anchor) {
    return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(ranges, mainIndex = 0) {
    if (ranges.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let pos = 0, i = 0; i < ranges.length; i++) {
      let range = ranges[i];
      if (range.empty ? range.from <= pos : range.from < pos)
        return _EditorSelection.normalized(ranges.slice(), mainIndex);
      pos = range.to;
    }
    return new _EditorSelection(ranges, mainIndex);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
    return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(anchor, head, goalColumn, bidiLevel) {
    let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
    return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
  }
  /**
  @internal
  */
  static normalized(ranges, mainIndex = 0) {
    let main = ranges[mainIndex];
    ranges.sort((a, b) => a.from - b.from);
    mainIndex = ranges.indexOf(main);
    for (let i = 1; i < ranges.length; i++) {
      let range = ranges[i], prev = ranges[i - 1];
      if (range.empty ? range.from <= prev.to : range.from < prev.to) {
        let from = prev.from, to = Math.max(range.to, prev.to);
        if (i <= mainIndex)
          mainIndex--;
        ranges.splice(--i, 2, range.anchor > range.head ? _EditorSelection.range(to, from) : _EditorSelection.range(from, to));
      }
    }
    return new _EditorSelection(ranges, mainIndex);
  }
};
function checkSelection(selection, docLength) {
  for (let range of selection.ranges)
    if (range.to > docLength)
      throw new RangeError("Selection points outside of document");
}
var nextID = 0;
var Facet = class _Facet {
  constructor(combine, compareInput, compare2, isStatic, enables) {
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare2;
    this.isStatic = isStatic;
    this.id = nextID++;
    this.default = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(config2 = {}) {
    return new _Facet(config2.combine || ((a) => a), config2.compareInput || ((a, b) => a === b), config2.compare || (!config2.combine ? sameArray : (a, b) => a === b), !!config2.static, config2.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(value) {
    return new FacetProvider([], this, 0, value);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(deps, get2) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 1, get2);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(deps, get2) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 2, get2);
  }
  from(field, get2) {
    if (!get2)
      get2 = (x) => x;
    return this.compute([field], (state) => get2(state.field(field)));
  }
};
function sameArray(a, b) {
  return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
}
var FacetProvider = class {
  constructor(dependencies, facet, type, value) {
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  dynamicSlot(addresses) {
    var _a2;
    let getter = this.value;
    let compare2 = this.facet.compareInput;
    let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2;
    let depDoc = false, depSel = false, depAddrs = [];
    for (let dep of this.dependencies) {
      if (dep == "doc")
        depDoc = true;
      else if (dep == "selection")
        depSel = true;
      else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
        depAddrs.push(addresses[dep.id]);
    }
    return {
      create(state) {
        state.values[idx] = getter(state);
        return 1;
      },
      update(state, tr) {
        if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
          let newVal = getter(state);
          if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
            state.values[idx] = newVal;
            return 1;
          }
        }
        return 0;
      },
      reconfigure: (state, oldState) => {
        let newVal, oldAddr = oldState.config.address[id];
        if (oldAddr != null) {
          let oldVal = getAddr(oldState, oldAddr);
          if (this.dependencies.every((dep) => {
            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
          }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
            state.values[idx] = oldVal;
            return 0;
          }
        } else {
          newVal = getter(state);
        }
        state.values[idx] = newVal;
        return 1;
      }
    };
  }
};
function compareArray(a, b, compare2) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (!compare2(a[i], b[i]))
      return false;
  return true;
}
function ensureAll(state, addrs) {
  let changed = false;
  for (let addr of addrs)
    if (ensureAddr(state, addr) & 1)
      changed = true;
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  let providerAddrs = providers.map((p) => addresses[p.id]);
  let providerTypes = providers.map((p) => p.type);
  let dynamic = providerAddrs.filter((p) => !(p & 1));
  let idx = addresses[facet.id] >> 1;
  function get2(state) {
    let values = [];
    for (let i = 0; i < providerAddrs.length; i++) {
      let value = getAddr(state, providerAddrs[i]);
      if (providerTypes[i] == 2)
        for (let val of value)
          values.push(val);
      else
        values.push(value);
    }
    return facet.combine(values);
  }
  return {
    create(state) {
      for (let addr of providerAddrs)
        ensureAddr(state, addr);
      state.values[idx] = get2(state);
      return 1;
    },
    update(state, tr) {
      if (!ensureAll(state, dynamic))
        return 0;
      let value = get2(state);
      if (facet.compare(value, state.values[idx]))
        return 0;
      state.values[idx] = value;
      return 1;
    },
    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      let value = get2(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1;
    }
  };
}
var initField = Facet.define({ static: true });
var StateField = class _StateField {
  constructor(id, createF, updateF, compareF, spec) {
    this.id = id;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(config2) {
    let field = new _StateField(nextID++, config2.create, config2.update, config2.compare || ((a, b) => a === b), config2);
    if (config2.provide)
      field.provides = config2.provide(field);
    return field;
  }
  create(state) {
    let init = state.facet(initField).find((i) => i.field == this);
    return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
  }
  /**
  @internal
  */
  slot(addresses) {
    let idx = addresses[this.id] >> 1;
    return {
      create: (state) => {
        state.values[idx] = this.create(state);
        return 1;
      },
      update: (state, tr) => {
        let oldVal = state.values[idx];
        let value = this.updateF(oldVal, tr);
        if (this.compareF(oldVal, value))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure: (state, oldState) => {
        if (oldState.config.address[this.id] != null) {
          state.values[idx] = oldState.field(this);
          return 0;
        }
        state.values[idx] = this.create(state);
        return 1;
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(create) {
    return [this, initField.of({ field: this, create })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
};
var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function prec(value) {
  return (ext) => new PrecExtension(ext, value);
}
var Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: prec(Prec_.default),
  /**
  A lower-than-default precedence.
  */
  low: prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: prec(Prec_.lowest)
};
var PrecExtension = class {
  constructor(inner, prec2) {
    this.inner = inner;
    this.prec = prec2;
  }
};
var Compartment = class _Compartment {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(ext) {
    return new CompartmentInstance(this, ext);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(content2) {
    return _Compartment.reconfigure.of({ compartment: this, extension: content2 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(state) {
    return state.config.compartments.get(this);
  }
};
var CompartmentInstance = class {
  constructor(compartment, inner) {
    this.compartment = compartment;
    this.inner = inner;
  }
};
var Configuration = class _Configuration {
  constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
    this.base = base2;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length)
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(facet) {
    let addr = this.address[facet.id];
    return addr == null ? facet.default : this.staticValues[addr >> 1];
  }
  static resolve(base2, compartments, oldState) {
    let fields = [];
    let facets = /* @__PURE__ */ Object.create(null);
    let newCompartments = /* @__PURE__ */ new Map();
    for (let ext of flatten(base2, compartments, newCompartments)) {
      if (ext instanceof StateField)
        fields.push(ext);
      else
        (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
    }
    let address = /* @__PURE__ */ Object.create(null);
    let staticValues = [];
    let dynamicSlots = [];
    for (let field of fields) {
      address[field.id] = dynamicSlots.length << 1;
      dynamicSlots.push((a) => field.slot(a));
    }
    let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
    for (let id in facets) {
      let providers = facets[id], facet = providers[0].facet;
      let oldProviders = oldFacets && oldFacets[id] || [];
      if (providers.every(
        (p) => p.type == 0
        /* Provider.Static */
      )) {
        address[facet.id] = staticValues.length << 1 | 1;
        if (sameArray(oldProviders, providers)) {
          staticValues.push(oldState.facet(facet));
        } else {
          let value = facet.combine(providers.map((p) => p.value));
          staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
        }
      } else {
        for (let p of providers) {
          if (p.type == 0) {
            address[p.id] = staticValues.length << 1 | 1;
            staticValues.push(p.value);
          } else {
            address[p.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a) => p.dynamicSlot(a));
          }
        }
        address[facet.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a) => dynamicFacetSlot(a, facet, providers));
      }
    }
    let dynamic = dynamicSlots.map((f) => f(address));
    return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
  }
};
function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen = /* @__PURE__ */ new Map();
  function inner(ext, prec2) {
    let known = seen.get(ext);
    if (known != null) {
      if (known <= prec2)
        return;
      let found = result[known].indexOf(ext);
      if (found > -1)
        result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance)
        newCompartments.delete(ext.compartment);
    }
    seen.set(ext, prec2);
    if (Array.isArray(ext)) {
      for (let e of ext)
        inner(e, prec2);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment))
        throw new RangeError(`Duplicate use of compartment in extensions`);
      let content2 = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content2);
      inner(content2, prec2);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec2].push(ext);
      if (ext.provides)
        inner(ext.provides, prec2);
    } else if (ext instanceof FacetProvider) {
      result[prec2].push(ext);
      if (ext.facet.extensions)
        inner(ext.facet.extensions, Prec_.default);
    } else {
      let content2 = ext.extension;
      if (!content2)
        throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content2, prec2);
    }
  }
  inner(extension, Prec_.default);
  return result.reduce((a, b) => a.concat(b));
}
function ensureAddr(state, addr) {
  if (addr & 1)
    return 2;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2)
    return status;
  state.status[idx] = 4;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = Facet.define();
var allowMultipleSelections = Facet.define({
  combine: (values) => values.some((v) => v),
  static: true
});
var lineSeparator = Facet.define({
  combine: (values) => values.length ? values[0] : void 0,
  static: true
});
var changeFilter = Facet.define();
var transactionFilter = Facet.define();
var transactionExtender = Facet.define();
var readOnly = Facet.define({
  combine: (values) => values.length ? values[0] : false
});
var Annotation = class {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new AnnotationType();
  }
};
var AnnotationType = class {
  /**
  Create an instance of this annotation.
  */
  of(value) {
    return new Annotation(this, value);
  }
};
var StateEffectType = class {
  /**
  @internal
  */
  constructor(map) {
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(value) {
    return new StateEffect(this, value);
  }
};
var StateEffect = class _StateEffect {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(mapping) {
    let mapped = this.type.map(this.value, mapping);
    return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(type) {
    return this.type == type;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(spec = {}) {
    return new StateEffectType(spec.map || ((v) => v));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(effects, mapping) {
    if (!effects.length)
      return effects;
    let result = [];
    for (let effect of effects) {
      let mapped = effect.map(mapping);
      if (mapped)
        result.push(mapped);
    }
    return result;
  }
};
StateEffect.reconfigure = StateEffect.define();
StateEffect.appendConfig = StateEffect.define();
var Transaction = class _Transaction {
  constructor(startState, changes, selection, effects, annotations, scrollIntoView3) {
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView3;
    this._doc = null;
    this._state = null;
    if (selection)
      checkSelection(selection, changes.newLength);
    if (!annotations.some((a) => a.type == _Transaction.time))
      this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  static create(startState, changes, selection, effects, annotations, scrollIntoView3) {
    return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView3);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    if (!this._state)
      this.startState.applyTransaction(this);
    return this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(type) {
    for (let ann of this.annotations)
      if (ann.type == type)
        return ann.value;
    return void 0;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(event) {
    let e = this.annotation(_Transaction.userEvent);
    return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
  }
};
Transaction.time = Annotation.define();
Transaction.userEvent = Annotation.define();
Transaction.addToHistory = Annotation.define();
Transaction.remote = Annotation.define();
function joinRanges(a, b) {
  let result = [];
  for (let iA = 0, iB = 0; ; ) {
    let from, to;
    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
      from = a[iA++];
      to = a[iA++];
    } else if (iB < b.length) {
      from = b[iB++];
      to = b[iB++];
    } else
      return result;
    if (!result.length || result[result.length - 1] < from)
      result.push(from, to);
    else if (result[result.length - 1] < to)
      result[result.length - 1] = to;
  }
}
function mergeTransaction(a, b, sequential) {
  var _a2;
  let mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a.changes);
    mapForB = a.changes.mapDesc(b.changes, true);
    changes = a.changes.compose(mapForA);
  }
  return {
    changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a2 = a.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a.scrollIntoView || b.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection, annotations = asArray(spec.annotations);
  if (spec.userEvent)
    annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false)
    filter = false;
  for (let i = 1; i < specs.length; i++) {
    if (specs[i].filter === false)
      filter = false;
    let seq = !!specs[i].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
  }
  let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr) : tr);
}
function filterTransaction(tr) {
  let state = tr.startState;
  let result = true;
  for (let filter of state.facet(changeFilter)) {
    let value = filter(tr);
    if (value === false) {
      result = false;
      break;
    }
    if (Array.isArray(value))
      result = result === true ? value : joinRanges(result, value);
  }
  if (result !== true) {
    let changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  let filters = state.facet(transactionFilter);
  for (let i = filters.length - 1; i >= 0; i--) {
    let filtered = filters[i](tr);
    if (filtered instanceof Transaction)
      tr = filtered;
    else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
      tr = filtered[0];
    else
      tr = resolveTransaction(state, asArray(filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
  for (let i = extenders.length - 1; i >= 0; i--) {
    let extension = extenders[i](tr);
    if (extension && Object.keys(extension).length)
      spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none = [];
function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}
var CharCategory = function(CharCategory2) {
  CharCategory2[CharCategory2["Word"] = 0] = "Word";
  CharCategory2[CharCategory2["Space"] = 1] = "Space";
  CharCategory2[CharCategory2["Other"] = 2] = "Other";
  return CharCategory2;
}(CharCategory || (CharCategory = {}));
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {
}
function hasWordChar(str) {
  if (wordChar)
    return wordChar.test(str);
  for (let i = 0; i < str.length; i++) {
    let ch = str[i];
    if (/\w/.test(ch) || ch > "" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
      return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return (char) => {
    if (!/\S/.test(char))
      return CharCategory.Space;
    if (hasWordChar(char))
      return CharCategory.Word;
    for (let i = 0; i < wordChars.length; i++)
      if (char.indexOf(wordChars[i]) > -1)
        return CharCategory.Word;
    return CharCategory.Other;
  };
}
var EditorState = class _EditorState {
  constructor(config2, doc2, selection, values, computeSlot, tr) {
    this.config = config2;
    this.doc = doc2;
    this.selection = selection;
    this.values = values;
    this.status = config2.statusTemplate.slice();
    this.computeSlot = computeSlot;
    if (tr)
      tr._state = this;
    for (let i = 0; i < this.config.dynamicSlots.length; i++)
      ensureAddr(this, i << 1);
    this.computeSlot = null;
  }
  field(field, require2 = true) {
    let addr = this.config.address[field.id];
    if (addr == null) {
      if (require2)
        throw new RangeError("Field is not present in this state");
      return void 0;
    }
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...specs) {
    return resolveTransaction(this, specs, true);
  }
  /**
  @internal
  */
  applyTransaction(tr) {
    let conf = this.config, { base: base2, compartments } = conf;
    for (let effect of tr.effects) {
      if (effect.is(Compartment.reconfigure)) {
        if (conf) {
          compartments = /* @__PURE__ */ new Map();
          conf.compartments.forEach((val, key) => compartments.set(key, val));
          conf = null;
        }
        compartments.set(effect.value.compartment, effect.value.extension);
      } else if (effect.is(StateEffect.reconfigure)) {
        conf = null;
        base2 = effect.value;
      } else if (effect.is(StateEffect.appendConfig)) {
        conf = null;
        base2 = asArray(base2).concat(effect.value);
      }
    }
    let startValues;
    if (!conf) {
      conf = Configuration.resolve(base2, compartments, this);
      let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
      startValues = intermediateState.values;
    } else {
      startValues = tr.startState.values.slice();
    }
    let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
    new _EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(text) {
    if (typeof text == "string")
      text = this.toText(text);
    return this.changeByRange((range) => ({
      changes: { from: range.from, to: range.to, insert: text },
      range: EditorSelection.cursor(range.from + text.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(f) {
    let sel = this.selection;
    let result1 = f(sel.ranges[0]);
    let changes = this.changes(result1.changes), ranges = [result1.range];
    let effects = asArray(result1.effects);
    for (let i = 1; i < sel.ranges.length; i++) {
      let result = f(sel.ranges[i]);
      let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
      for (let j = 0; j < i; j++)
        ranges[j] = ranges[j].map(newMapped);
      let mapBy = changes.mapDesc(newChanges, true);
      ranges.push(result.range.map(mapBy));
      changes = changes.compose(newMapped);
      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
    }
    return {
      changes,
      selection: EditorSelection.create(ranges, sel.mainIndex),
      effects
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(spec = []) {
    if (spec instanceof ChangeSet)
      return spec;
    return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(string2) {
    return Text.of(string2.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(from = 0, to = this.doc.length) {
    return this.doc.sliceString(from, to, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(facet) {
    let addr = this.config.address[facet.id];
    if (addr == null)
      return facet.default;
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(fields) {
    let result = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (fields)
      for (let prop in fields) {
        let value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null)
          result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
    return result;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(json, config2 = {}, fields) {
    if (!json || typeof json.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let fieldInit = [];
    if (fields)
      for (let prop in fields) {
        if (Object.prototype.hasOwnProperty.call(json, prop)) {
          let field = fields[prop], value = json[prop];
          fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
        }
      }
    return _EditorState.create({
      doc: json.doc,
      selection: EditorSelection.fromJSON(json.selection),
      extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(config2 = {}) {
    let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
    let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
    let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
    checkSelection(selection, doc2.length);
    if (!configuration.staticFacet(allowMultipleSelections))
      selection = selection.asSingle();
    return new _EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(_EditorState.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(_EditorState.lineSeparator) || "\n";
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(readOnly);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(phrase2, ...insert2) {
    for (let map of this.facet(_EditorState.phrases))
      if (Object.prototype.hasOwnProperty.call(map, phrase2)) {
        phrase2 = map[phrase2];
        break;
      }
    if (insert2.length)
      phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m, i) => {
        if (i == "$")
          return "$";
        let n = +(i || 1);
        return !n || n > insert2.length ? m : insert2[n - 1];
      });
    return phrase2;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(name2, pos, side = -1) {
    let values = [];
    for (let provider of this.facet(languageData)) {
      for (let result of provider(this, pos, side)) {
        if (Object.prototype.hasOwnProperty.call(result, name2))
          values.push(result[name2]);
      }
    }
    return values;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(at) {
    return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(pos) {
    let { text, from, length } = this.doc.lineAt(pos);
    let cat = this.charCategorizer(pos);
    let start = pos - from, end = pos - from;
    while (start > 0) {
      let prev = findClusterBreak(text, start, false);
      if (cat(text.slice(prev, start)) != CharCategory.Word)
        break;
      start = prev;
    }
    while (end < length) {
      let next = findClusterBreak(text, end);
      if (cat(text.slice(end, next)) != CharCategory.Word)
        break;
      end = next;
    }
    return start == end ? null : EditorSelection.range(start + from, end + from);
  }
};
EditorState.allowMultipleSelections = allowMultipleSelections;
EditorState.tabSize = Facet.define({
  combine: (values) => values.length ? values[0] : 4
});
EditorState.lineSeparator = lineSeparator;
EditorState.readOnly = readOnly;
EditorState.phrases = Facet.define({
  compare(a, b) {
    let kA = Object.keys(a), kB = Object.keys(b);
    return kA.length == kB.length && kA.every((k) => a[k] == b[k]);
  }
});
EditorState.languageData = languageData;
EditorState.changeFilter = changeFilter;
EditorState.transactionFilter = transactionFilter;
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = StateEffect.define();
function combineConfig(configs, defaults3, combine = {}) {
  let result = {};
  for (let config2 of configs)
    for (let key of Object.keys(config2)) {
      let value = config2[key], current = result[key];
      if (current === void 0)
        result[key] = value;
      else if (current === value || value === void 0)
        ;
      else if (Object.hasOwnProperty.call(combine, key))
        result[key] = combine[key](current, value);
      else
        throw new Error("Config merge conflict for field " + key);
    }
  for (let key in defaults3)
    if (result[key] === void 0)
      result[key] = defaults3[key];
  return result;
}
var RangeValue = class {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(other) {
    return this == other;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(from, to = from) {
    return Range.create(from, to, this);
  }
};
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
var Range = class _Range {
  constructor(from, to, value) {
    this.from = from;
    this.to = to;
    this.value = value;
  }
  /**
  @internal
  */
  static create(from, to, value) {
    return new _Range(from, to, value);
  }
};
function cmpRange(a, b) {
  return a.from - b.from || a.value.startSide - b.value.startSide;
}
var Chunk = class _Chunk {
  constructor(from, to, value, maxPoint) {
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(pos, side, end, startAt = 0) {
    let arr = end ? this.to : this.from;
    for (let lo = startAt, hi = arr.length; ; ) {
      if (lo == hi)
        return lo;
      let mid = lo + hi >> 1;
      let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
      if (mid == lo)
        return diff >= 0 ? lo : hi;
      if (diff >= 0)
        hi = mid;
      else
        lo = mid + 1;
    }
  }
  between(offset, from, to, f) {
    for (let i = this.findIndex(from, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
      if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
        return false;
  }
  map(offset, changes) {
    let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
    for (let i = 0; i < this.value.length; i++) {
      let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
      if (curFrom == curTo) {
        let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
        if (mapped == null)
          continue;
        newFrom = newTo = mapped;
        if (val.startSide != val.endSide) {
          newTo = changes.mapPos(curFrom, val.endSide);
          if (newTo < newFrom)
            continue;
        }
      } else {
        newFrom = changes.mapPos(curFrom, val.startSide);
        newTo = changes.mapPos(curTo, val.endSide);
        if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
          continue;
      }
      if ((newTo - newFrom || val.endSide - val.startSide) < 0)
        continue;
      if (newPos < 0)
        newPos = newFrom;
      if (val.point)
        maxPoint = Math.max(maxPoint, newTo - newFrom);
      value.push(val);
      from.push(newFrom - newPos);
      to.push(newTo - newPos);
    }
    return { mapped: value.length ? new _Chunk(from, to, value, maxPoint) : null, pos: newPos };
  }
};
var RangeSet = class _RangeSet {
  constructor(chunkPos, chunk, nextLayer, maxPoint) {
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  static create(chunkPos, chunk, nextLayer, maxPoint) {
    return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
  }
  /**
  @internal
  */
  get length() {
    let last = this.chunk.length - 1;
    return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let size = this.nextLayer.size;
    for (let chunk of this.chunk)
      size += chunk.value.length;
    return size;
  }
  /**
  @internal
  */
  chunkEnd(index) {
    return this.chunkPos[index] + this.chunk[index].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(updateSpec) {
    let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
    let filter = updateSpec.filter;
    if (add2.length == 0 && !filter)
      return this;
    if (sort)
      add2 = add2.slice().sort(cmpRange);
    if (this.isEmpty)
      return add2.length ? _RangeSet.of(add2) : this;
    let cur2 = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
    let builder = new RangeSetBuilder();
    while (cur2.value || i < add2.length) {
      if (i < add2.length && (cur2.from - add2[i].from || cur2.startSide - add2[i].value.startSide) >= 0) {
        let range = add2[i++];
        if (!builder.addInner(range.from, range.to, range.value))
          spill.push(range);
      } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i == add2.length || this.chunkEnd(cur2.chunkIndex) < add2[i].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
        cur2.nextChunk();
      } else {
        if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
          if (!builder.addInner(cur2.from, cur2.to, cur2.value))
            spill.push(Range.create(cur2.from, cur2.to, cur2.value));
        }
        cur2.next();
      }
    }
    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(changes) {
    if (changes.empty || this.isEmpty)
      return this;
    let chunks = [], chunkPos = [], maxPoint = -1;
    for (let i = 0; i < this.chunk.length; i++) {
      let start = this.chunkPos[i], chunk = this.chunk[i];
      let touch = changes.touchesRange(start, start + chunk.length);
      if (touch === false) {
        maxPoint = Math.max(maxPoint, chunk.maxPoint);
        chunks.push(chunk);
        chunkPos.push(changes.mapPos(start));
      } else if (touch === true) {
        let { mapped, pos } = chunk.map(start, changes);
        if (mapped) {
          maxPoint = Math.max(maxPoint, mapped.maxPoint);
          chunks.push(mapped);
          chunkPos.push(pos);
        }
      }
    }
    let next = this.nextLayer.map(changes);
    return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(from, to, f) {
    if (this.isEmpty)
      return;
    for (let i = 0; i < this.chunk.length; i++) {
      let start = this.chunkPos[i], chunk = this.chunk[i];
      if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false)
        return;
    }
    this.nextLayer.between(from, to, f);
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(from = 0) {
    return HeapCursor.from([this]).goto(from);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(sets, from = 0) {
    return HeapCursor.from(sets).goto(from);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
    let a = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let b = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let sharedChunks = findSharedChunks(a, b, textDiff);
    let sideA = new SpanCursor(a, sharedChunks, minPointSize);
    let sideB = new SpanCursor(b, sharedChunks, minPointSize);
    textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
    if (textDiff.empty && textDiff.length == 0)
      compare(sideA, 0, sideB, 0, 0, comparator);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(oldSets, newSets, from = 0, to) {
    if (to == null)
      to = 1e9 - 1;
    let a = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
    let b = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
    if (a.length != b.length)
      return false;
    if (!a.length)
      return true;
    let sharedChunks = findSharedChunks(a, b);
    let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
    for (; ; ) {
      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
        return false;
      if (sideA.to > to)
        return true;
      sideA.next();
      sideB.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(sets, from, to, iterator, minPointSize = -1) {
    let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
    let openRanges = cursor.openStart;
    for (; ; ) {
      let curTo = Math.min(cursor.to, to);
      if (cursor.point) {
        let active = cursor.activeForPoint(cursor.to);
        let openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
        iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
        openRanges = Math.min(cursor.openEnd(curTo), active.length);
      } else if (curTo > pos) {
        iterator.span(pos, curTo, cursor.active, openRanges);
        openRanges = cursor.openEnd(curTo);
      }
      if (cursor.to > to)
        return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
      pos = cursor.to;
      cursor.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(ranges, sort = false) {
    let build = new RangeSetBuilder();
    for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
      build.add(range.from, range.to, range.value);
    return build.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(sets) {
    if (!sets.length)
      return _RangeSet.empty;
    let result = sets[sets.length - 1];
    for (let i = sets.length - 2; i >= 0; i--) {
      for (let layer2 = sets[i]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
        result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
    }
    return result;
  }
};
RangeSet.empty = new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1)
    for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
      let cur2 = ranges[i];
      if (cmpRange(prev, cur2) > 0)
        return ranges.slice().sort(cmpRange);
      prev = cur2;
    }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
var RangeSetBuilder = class _RangeSetBuilder {
  finishChunk(newArrays) {
    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
    this.chunkPos.push(this.chunkStart);
    this.chunkStart = -1;
    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
    this.maxPoint = -1;
    if (newArrays) {
      this.from = [];
      this.to = [];
      this.value = [];
    }
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1e9;
    this.lastTo = -1e9;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(from, to, value) {
    if (!this.addInner(from, to, value))
      (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from, to, value);
  }
  /**
  @internal
  */
  addInner(from, to, value) {
    let diff = from - this.lastTo || value.startSide - this.last.endSide;
    if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    if (diff < 0)
      return false;
    if (this.from.length == 250)
      this.finishChunk(true);
    if (this.chunkStart < 0)
      this.chunkStart = from;
    this.from.push(from - this.chunkStart);
    this.to.push(to - this.chunkStart);
    this.last = value;
    this.lastFrom = from;
    this.lastTo = to;
    this.value.push(value);
    if (value.point)
      this.maxPoint = Math.max(this.maxPoint, to - from);
    return true;
  }
  /**
  @internal
  */
  addChunk(from, chunk) {
    if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
      return false;
    if (this.from.length)
      this.finishChunk(true);
    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
    this.chunks.push(chunk);
    this.chunkPos.push(from);
    let last = chunk.value.length - 1;
    this.last = chunk.value[last];
    this.lastFrom = chunk.from[last] + from;
    this.lastTo = chunk.to[last] + from;
    return true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(RangeSet.empty);
  }
  /**
  @internal
  */
  finishInner(next) {
    if (this.from.length)
      this.finishChunk(false);
    if (this.chunks.length == 0)
      return next;
    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
    this.from = null;
    return result;
  }
};
function findSharedChunks(a, b, textDiff) {
  let inA = /* @__PURE__ */ new Map();
  for (let set of a)
    for (let i = 0; i < set.chunk.length; i++)
      if (set.chunk[i].maxPoint <= 0)
        inA.set(set.chunk[i], set.chunkPos[i]);
  let shared = /* @__PURE__ */ new Set();
  for (let set of b)
    for (let i = 0; i < set.chunk.length; i++) {
      let known = inA.get(set.chunk[i]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
        shared.add(set.chunk[i]);
    }
  return shared;
}
var LayerCursor = class {
  constructor(layer2, skip, minPoint, rank = 0) {
    this.layer = layer2;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(pos, side = -1e9) {
    this.chunkIndex = this.rangeIndex = 0;
    this.gotoInner(pos, side, false);
    return this;
  }
  gotoInner(pos, side, forward) {
    while (this.chunkIndex < this.layer.chunk.length) {
      let next = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
        break;
      this.chunkIndex++;
      forward = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex)
        this.setRangeIndex(rangeIndex);
    }
    this.next();
  }
  forward(pos, side) {
    if ((this.to - pos || this.endSide - side) < 0)
      this.gotoInner(pos, side, true);
  }
  next() {
    for (; ; ) {
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9;
        this.value = null;
        break;
      } else {
        let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
        let from = chunkPos + chunk.from[this.rangeIndex];
        this.from = from;
        this.to = chunkPos + chunk.to[this.rangeIndex];
        this.value = chunk.value[this.rangeIndex];
        this.setRangeIndex(this.rangeIndex + 1);
        if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
    }
  }
  setRangeIndex(index) {
    if (index == this.layer.chunk[this.chunkIndex].value.length) {
      this.chunkIndex++;
      if (this.skip) {
        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
          this.chunkIndex++;
      }
      this.rangeIndex = 0;
    } else {
      this.rangeIndex = index;
    }
  }
  nextChunk() {
    this.chunkIndex++;
    this.rangeIndex = 0;
    this.next();
  }
  compare(other) {
    return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
  }
};
var HeapCursor = class _HeapCursor {
  constructor(heap) {
    this.heap = heap;
  }
  static from(sets, skip = null, minPoint = -1) {
    let heap = [];
    for (let i = 0; i < sets.length; i++) {
      for (let cur2 = sets[i]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
        if (cur2.maxPoint >= minPoint)
          heap.push(new LayerCursor(cur2, skip, minPoint, i));
      }
    }
    return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(pos, side = -1e9) {
    for (let cur2 of this.heap)
      cur2.goto(pos, side);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      heapBubble(this.heap, i);
    this.next();
    return this;
  }
  forward(pos, side) {
    for (let cur2 of this.heap)
      cur2.forward(pos, side);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      heapBubble(this.heap, i);
    if ((this.to - pos || this.value.endSide - side) < 0)
      this.next();
  }
  next() {
    if (this.heap.length == 0) {
      this.from = this.to = 1e9;
      this.value = null;
      this.rank = -1;
    } else {
      let top2 = this.heap[0];
      this.from = top2.from;
      this.to = top2.to;
      this.value = top2.value;
      this.rank = top2.rank;
      if (top2.value)
        top2.next();
      heapBubble(this.heap, 0);
    }
  }
};
function heapBubble(heap, index) {
  for (let cur2 = heap[index]; ; ) {
    let childIndex = (index << 1) + 1;
    if (childIndex >= heap.length)
      break;
    let child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur2.compare(child) < 0)
      break;
    heap[childIndex] = cur2;
    heap[index] = child;
    index = childIndex;
  }
}
var SpanCursor = class {
  constructor(sets, skip, minPoint) {
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1e9;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  goto(pos, side = -1e9) {
    this.cursor.goto(pos, side);
    this.active.length = this.activeTo.length = this.activeRank.length = 0;
    this.minActive = -1;
    this.to = pos;
    this.endSide = side;
    this.openStart = -1;
    this.next();
    return this;
  }
  forward(pos, side) {
    while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
      this.removeActive(this.minActive);
    this.cursor.forward(pos, side);
  }
  removeActive(index) {
    remove(this.active, index);
    remove(this.activeTo, index);
    remove(this.activeRank, index);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  addActive(trackOpen) {
    let i = 0, { value, to, rank } = this.cursor;
    while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
      i++;
    insert(this.active, i, value);
    insert(this.activeTo, i, to);
    insert(this.activeRank, i, rank);
    if (trackOpen)
      insert(trackOpen, i, this.cursor.from);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let from = this.to, wasPoint = this.point;
    this.point = null;
    let trackOpen = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let a = this.minActive;
      if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[a] > from) {
          this.to = this.activeTo[a];
          this.endSide = this.active[a].endSide;
          break;
        }
        this.removeActive(a);
        if (trackOpen)
          remove(trackOpen, a);
      } else if (!this.cursor.value) {
        this.to = this.endSide = 1e9;
        break;
      } else if (this.cursor.from > from) {
        this.to = this.cursor.from;
        this.endSide = this.cursor.startSide;
        break;
      } else {
        let nextVal = this.cursor.value;
        if (!nextVal.point) {
          this.addActive(trackOpen);
          this.cursor.next();
        } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
          this.cursor.next();
        } else {
          this.point = nextVal;
          this.pointFrom = this.cursor.from;
          this.pointRank = this.cursor.rank;
          this.to = this.cursor.to;
          this.endSide = nextVal.endSide;
          this.cursor.next();
          this.forward(this.to, this.endSide);
          break;
        }
      }
    }
    if (trackOpen) {
      this.openStart = 0;
      for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
        this.openStart++;
    }
  }
  activeForPoint(to) {
    if (!this.active.length)
      return this.active;
    let active = [];
    for (let i = this.active.length - 1; i >= 0; i--) {
      if (this.activeRank[i] < this.pointRank)
        break;
      if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
        active.push(this.active[i]);
    }
    return active.reverse();
  }
  openEnd(to) {
    let open = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
      open++;
    return open;
  }
};
function compare(a, startA, b, startB, length, comparator) {
  a.goto(startA);
  b.goto(startB);
  let endB = startB + length;
  let pos = startB, dPos = startB - startA;
  for (; ; ) {
    let diff = a.to + dPos - b.to || a.endSide - b.endSide;
    let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
    if (a.point || b.point) {
      if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
        comparator.comparePoint(pos, clipEnd, a.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a.active, b.active))
        comparator.compareRange(pos, clipEnd, a.active, b.active);
    }
    if (end > endB)
      break;
    pos = end;
    if (diff <= 0)
      a.next();
    if (diff >= 0)
      b.next();
  }
}
function sameValues(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (a[i] != b[i] && !a[i].eq(b[i]))
      return false;
  return true;
}
function remove(array, index) {
  for (let i = index, e = array.length - 1; i < e; i++)
    array[i] = array[i + 1];
  array.pop();
}
function insert(array, index, value) {
  for (let i = array.length - 1; i >= index; i--)
    array[i + 1] = array[i];
  array[index] = value;
}
function findMinIndex(value, array) {
  let found = -1, foundPos = 1e9;
  for (let i = 0; i < array.length; i++)
    if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array[i];
    }
  return found;
}
function countColumn(string2, tabSize, to = string2.length) {
  let n = 0;
  for (let i = 0; i < to; ) {
    if (string2.charCodeAt(i) == 9) {
      n += tabSize - n % tabSize;
      i++;
    } else {
      n++;
      i = findClusterBreak(string2, i);
    }
  }
  return n;
}
function findColumn(string2, col, tabSize, strict) {
  for (let i = 0, n = 0; ; ) {
    if (n >= col)
      return i;
    if (i == string2.length)
      break;
    n += string2.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
    i = findClusterBreak(string2, i);
  }
  return strict === true ? -1 : string2.length;
}

// node_modules/style-mod/src/style-mod.js
var C = "ͼ";
var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
var StyleModule = class {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(spec, options) {
    this.rules = [];
    let { finish } = options || {};
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec2, target, isKeyframes) {
      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec2 == null)
        return target.push(selectors[0] + ";");
      for (let prop in spec2) {
        let value = spec2[prop];
        if (/&/.test(prop)) {
          render(
            prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
            value,
            target
          );
        } else if (value && typeof value == "object") {
          if (!isAt)
            throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l) => "-" + l.toLowerCase()) + ": " + value + ";");
        }
      }
      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (let prop in spec)
      render(splitSelector(prop), spec[prop], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join("\n");
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let id = top[COUNT] || 1;
    top[COUNT] = id + 1;
    return C + id.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(root, modules, options) {
    let set = root[SET], nonce = options && options.nonce;
    if (!set)
      set = new StyleSet(root, nonce);
    else if (nonce)
      set.setNonce(nonce);
    set.mount(Array.isArray(modules) ? modules : [modules], root);
  }
};
var adoptedSet = /* @__PURE__ */ new Map();
var StyleSet = class {
  constructor(root, nonce) {
    let doc2 = root.ownerDocument || root, win = doc2.defaultView;
    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
      let adopted = adoptedSet.get(doc2);
      if (adopted)
        return root[SET] = adopted;
      this.sheet = new win.CSSStyleSheet();
      adoptedSet.set(doc2, this);
    } else {
      this.styleTag = doc2.createElement("style");
      if (nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
    this.modules = [];
    root[SET] = this;
  }
  mount(modules, root) {
    let sheet = this.sheet;
    let pos = 0, j = 0;
    for (let i = 0; i < modules.length; i++) {
      let mod = modules[i], index = this.modules.indexOf(mod);
      if (index < j && index > -1) {
        this.modules.splice(index, 1);
        j--;
        index = -1;
      }
      if (index == -1) {
        this.modules.splice(j++, 0, mod);
        if (sheet)
          for (let k = 0; k < mod.rules.length; k++)
            sheet.insertRule(mod.rules[k], pos++);
      } else {
        while (j < index)
          pos += this.modules[j++].rules.length;
        pos += mod.rules.length;
        j++;
      }
    }
    if (sheet) {
      if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
        root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
    } else {
      let text = "";
      for (let i = 0; i < this.modules.length; i++)
        text += this.modules[i].getRules() + "\n";
      this.styleTag.textContent = text;
      let target = root.head || root;
      if (this.styleTag.parentNode != target)
        target.insertBefore(this.styleTag, target.firstChild);
    }
  }
  setNonce(nonce) {
    if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
      this.styleTag.setAttribute("nonce", nonce);
  }
};

// node_modules/w3c-keyname/index.js
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (i = 0; i < 10; i++)
  base[48 + i] = base[96 + i] = String(i);
var i;
for (i = 1; i <= 24; i++)
  base[i + 111] = "F" + i;
var i;
for (i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}
var i;
for (code in base)
  if (!shift.hasOwnProperty(code))
    shift[code] = base[code];
var code;
function keyName(event) {
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name2 == "Esc")
    name2 = "Escape";
  if (name2 == "Del")
    name2 = "Delete";
  if (name2 == "Left")
    name2 = "ArrowLeft";
  if (name2 == "Up")
    name2 = "ArrowUp";
  if (name2 == "Right")
    name2 = "ArrowRight";
  if (name2 == "Down")
    name2 = "ArrowDown";
  return name2;
}

// node_modules/@codemirror/view/dist/index.js
function getSelection(root) {
  let target;
  if (root.nodeType == 11) {
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function deepActiveElement(doc2) {
  let elt = doc2.activeElement;
  while (elt && elt.shadowRoot)
    elt = elt.shadowRoot.activeElement;
  return elt;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode)
    return false;
  try {
    return contains(dom, selection.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3)
    return textRange(dom, 0, dom.nodeValue.length).getClientRects();
  else if (dom.nodeType == 1)
    return dom.getClientRects();
  else
    return [];
}
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0; ; index++) {
    node = node.previousSibling;
    if (!node)
      return index;
  }
}
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV")
        return false;
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1)
        return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false")
        return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect, left) {
  let x = left ? rect.left : rect.right;
  return { left: x, right: x, top: rect.top, bottom: rect.bottom };
}
function windowRect(win) {
  let vp = win.visualViewport;
  if (vp)
    return {
      left: 0,
      right: vp.width,
      top: 0,
      bottom: vp.height
    };
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function getScale(elt, rect) {
  let scaleX = rect.width / elt.offsetWidth;
  let scaleY = rect.height / elt.offsetHeight;
  if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
    scaleX = 1;
  if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
    scaleY = 1;
  return { scaleX, scaleY };
}
function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  for (let cur2 = dom, stop = false; cur2 && !stop; ) {
    if (cur2.nodeType == 1) {
      let bounding, top2 = cur2 == doc2.body;
      let scaleX = 1, scaleY = 1;
      if (top2) {
        bounding = windowRect(win);
      } else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
          stop = true;
        if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
          cur2 = cur2.assignedSlot || cur2.parentNode;
          continue;
        }
        let rect2 = cur2.getBoundingClientRect();
        ({ scaleX, scaleY } = getScale(cur2, rect2));
        bounding = {
          left: rect2.left,
          right: rect2.left + cur2.clientWidth * scaleX,
          top: rect2.top,
          bottom: rect2.top + cur2.clientHeight * scaleY
        };
      }
      let moveX = 0, moveY = 0;
      if (y == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY)
            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top)
            moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX)
            moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX)
            moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top2) {
          win.scrollBy(moveX, moveY);
        } else {
          let movedX = 0, movedY = 0;
          if (moveY) {
            let start = cur2.scrollTop;
            cur2.scrollTop += moveY / scaleY;
            movedY = (cur2.scrollTop - start) * scaleY;
          }
          if (moveX) {
            let start = cur2.scrollLeft;
            cur2.scrollLeft += moveX / scaleX;
            movedX = (cur2.scrollLeft - start) * scaleX;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1)
            x = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1)
            y = "nearest";
        }
      }
      if (top2)
        break;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
}
function scrollableParent(dom) {
  let doc2 = dom.ownerDocument;
  for (let cur2 = dom.parentNode; cur2; ) {
    if (cur2 == doc2.body) {
      break;
    } else if (cur2.nodeType == 1) {
      if (cur2.scrollHeight > cur2.clientHeight || cur2.scrollWidth > cur2.clientWidth)
        return cur2;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
  return null;
}
var DOMSelectionState = class {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  eq(domSel) {
    return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
  }
  setRange(range) {
    let { anchorNode, focusNode } = range;
    this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
  }
  set(anchorNode, anchorOffset, focusNode, focusOffset) {
    this.anchorNode = anchorNode;
    this.anchorOffset = anchorOffset;
    this.focusNode = focusNode;
    this.focusOffset = focusOffset;
  }
};
var preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stack = [];
  for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
    stack.push(cur2, cur2.scrollTop, cur2.scrollLeft);
    if (cur2 == cur2.ownerDocument)
      break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (let i = 0; i < stack.length; ) {
      let elt = stack[i++], top2 = stack[i++], left = stack[i++];
      if (elt.scrollTop != top2)
        elt.scrollTop = top2;
      if (elt.scrollLeft != left)
        elt.scrollLeft = left;
    }
  }
}
var scratchRange;
function textRange(node, from, to = from) {
  let range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to);
  range.setStart(node, from);
  return range;
}
function dispatchKey(elt, name2, code, mods) {
  let options = { key: name2, code: name2, keyCode: code, which: code, cancelable: true };
  if (mods)
    ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  let up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
      return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length)
    node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc2, selection) {
  let node = selection.focusNode, offset = selection.focusOffset;
  if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
    return false;
  offset = Math.min(offset, maxOffset(node));
  for (; ; ) {
    if (offset) {
      if (node.nodeType != 1)
        return false;
      let prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false")
        offset--;
      else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc2) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
function isScrolledToBottom(elt) {
  return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
}
function textNodeBefore(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset > 0) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset > 0) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node);
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
function textNodeAfter(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset < node.nodeValue.length) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset < node.childNodes.length) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset];
      offset = 0;
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node) + 1;
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
var DOMPos = class _DOMPos {
  constructor(node, offset, precise = true) {
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  static before(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom), precise);
  }
  static after(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
  }
};
var noChildren = [];
var ContentView = class _ContentView {
  constructor() {
    this.parent = null;
    this.dom = null;
    this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(view) {
    let pos = this.posAtStart;
    for (let child of this.children) {
      if (child == view)
        return pos;
      pos += child.length + child.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(view) {
    return this.posBefore(view) + view.length;
  }
  sync(view, track) {
    if (this.flags & 2) {
      let parent = this.dom;
      let prev = null, next;
      for (let child of this.children) {
        if (child.flags & 7) {
          if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
            let contentView = _ContentView.get(next);
            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
              child.reuseDOM(next);
          }
          child.sync(view, track);
          child.flags &= ~7;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (track && !track.written && track.node == parent && next != child.dom)
          track.written = true;
        if (child.dom.parentNode == parent) {
          while (next && next != child.dom)
            next = rm$1(next);
        } else {
          parent.insertBefore(child.dom, next);
        }
        prev = child.dom;
      }
      next = prev ? prev.nextSibling : parent.firstChild;
      if (next && track && track.node == parent)
        track.written = true;
      while (next)
        next = rm$1(next);
    } else if (this.flags & 1) {
      for (let child of this.children)
        if (child.flags & 7) {
          child.sync(view, track);
          child.flags &= ~7;
        }
    }
  }
  reuseDOM(_dom) {
  }
  localPosFromDOM(node, offset) {
    let after;
    if (node == this.dom) {
      after = this.dom.childNodes[offset];
    } else {
      let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
      for (; ; ) {
        let parent = node.parentNode;
        if (parent == this.dom)
          break;
        if (bias == 0 && parent.firstChild != parent.lastChild) {
          if (node == parent.firstChild)
            bias = -1;
          else
            bias = 1;
        }
        node = parent;
      }
      if (bias < 0)
        after = node;
      else
        after = node.nextSibling;
    }
    if (after == this.dom.firstChild)
      return 0;
    while (after && !_ContentView.get(after))
      after = after.nextSibling;
    if (!after)
      return this.length;
    for (let i = 0, pos = 0; ; i++) {
      let child = this.children[i];
      if (child.dom == after)
        return pos;
      pos += child.length + child.breakAfter;
    }
  }
  domBoundsAround(from, to, offset = 0) {
    let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
    for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (pos < from && end > to)
        return child.domBoundsAround(from, to, pos);
      if (end >= from && fromI == -1) {
        fromI = i;
        fromStart = pos;
      }
      if (pos > to && child.dom.parentNode == this.dom) {
        toI = i;
        toEnd = prevEnd;
        break;
      }
      prevEnd = end;
      pos = end + child.breakAfter;
    }
    return {
      from: fromStart,
      to: toEnd < 0 ? offset + this.length : toEnd,
      startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
    };
  }
  markDirty(andParent = false) {
    this.flags |= 2;
    this.markParentsDirty(andParent);
  }
  markParentsDirty(childList) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      if (childList)
        parent.flags |= 2;
      if (parent.flags & 1)
        return;
      parent.flags |= 1;
      childList = false;
    }
  }
  setParent(parent) {
    if (this.parent != parent) {
      this.parent = parent;
      if (this.flags & 7)
        this.markParentsDirty(true);
    }
  }
  setDOM(dom) {
    if (this.dom == dom)
      return;
    if (this.dom)
      this.dom.cmView = null;
    this.dom = dom;
    dom.cmView = this;
  }
  get rootView() {
    for (let v = this; ; ) {
      let parent = v.parent;
      if (!parent)
        return v;
      v = parent;
    }
  }
  replaceChildren(from, to, children = noChildren) {
    this.markDirty();
    for (let i = from; i < to; i++) {
      let child = this.children[i];
      if (child.parent == this && children.indexOf(child) < 0)
        child.destroy();
    }
    this.children.splice(from, to - from, ...children);
    for (let i = 0; i < children.length; i++)
      children[i].setParent(this);
  }
  ignoreMutation(_rec) {
    return false;
  }
  ignoreEvent(_event) {
    return false;
  }
  childCursor(pos = this.length) {
    return new ChildCursor(this.children, pos, this.children.length);
  }
  childPos(pos, bias = 1) {
    return this.childCursor().findPos(pos, bias);
  }
  toString() {
    let name2 = this.constructor.name.replace("View", "");
    return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(node) {
    return node.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(from, to, source, hasStart, openStart, openEnd) {
    return false;
  }
  become(other) {
    return false;
  }
  canReuseDOM(other) {
    return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let child of this.children)
      if (child.parent == this)
        child.destroy();
    this.parent = null;
  }
};
ContentView.prototype.breakAfter = 0;
function rm$1(dom) {
  let next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
var ChildCursor = class {
  constructor(children, pos, i) {
    this.children = children;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }
  findPos(pos, bias = 1) {
    for (; ; ) {
      if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
        this.off = pos - this.pos;
        return this;
      }
      let next = this.children[--this.i];
      this.pos -= next.length + next.breakAfter;
    }
  }
};
function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
  let { children } = parent;
  let before = children.length ? children[fromI] : null;
  let last = insert2.length ? insert2[insert2.length - 1] : null;
  let breakAtEnd = last ? last.breakAfter : breakAtStart;
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
    return;
  if (toI < children.length) {
    let after = children[toI];
    if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert2[insert2.length - 1] = after;
      } else {
        if (toOff || after.children.length && !after.children[0].length)
          after.merge(0, toOff, null, false, 0, openEnd);
        insert2.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      if (last)
        last.breakAfter = 1;
      else
        breakAtStart = 1;
    }
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
        before.breakAfter = insert2.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  while (fromI < toI && insert2.length) {
    if (children[toI - 1].become(insert2[insert2.length - 1])) {
      toI--;
      insert2.pop();
      openEnd = insert2.length ? 0 : openStart;
    } else if (children[fromI].become(insert2[0])) {
      fromI++;
      insert2.shift();
      openStart = insert2.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
    fromI--;
  if (fromI < toI || insert2.length)
    parent.replaceChildren(fromI, toI, insert2);
}
function mergeChildrenInto(parent, from, to, insert2, openStart, openEnd) {
  let cur2 = parent.childCursor();
  let { i: toI, off: toOff } = cur2.findPos(to, 1);
  let { i: fromI, off: fromOff } = cur2.findPos(from, -1);
  let dLen = from - to;
  for (let view of insert2)
    dLen += view.length;
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
}
var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
var ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /MSIE \d/.test(nav.userAgent);
var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie2 = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie2 && /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie2 && /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = "webkitFontSmoothing" in doc.documentElement.style;
var safari = !ie2 && /Apple Computer/.test(nav.vendor);
var ios = safari && (/Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /Mac/.test(nav.platform),
  windows: /Win/.test(nav.platform),
  linux: /Linux|X11/.test(nav.platform),
  ie: ie2,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko,
  gecko_version: gecko ? +(/Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios,
  android: /Android\b/.test(nav.userAgent),
  webkit,
  safari,
  webkit_version: webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var MaxJoinLen = 256;
var TextView = class _TextView extends ContentView {
  constructor(text) {
    super();
    this.text = text;
  }
  get length() {
    return this.text.length;
  }
  createDOM(textDOM) {
    this.setDOM(textDOM || document.createTextNode(this.text));
  }
  sync(view, track) {
    if (!this.dom)
      this.createDOM();
    if (this.dom.nodeValue != this.text) {
      if (track && track.node == this.dom)
        track.written = true;
      this.dom.nodeValue = this.text;
    }
  }
  reuseDOM(dom) {
    if (dom.nodeType == 3)
      this.createDOM(dom);
  }
  merge(from, to, source) {
    if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to - from) + source.length > MaxJoinLen || source.flags & 8))
      return false;
    this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = new _TextView(this.text.slice(from));
    this.text = this.text.slice(0, from);
    this.markDirty();
    result.flags |= this.flags & 8;
    return result;
  }
  localPosFromDOM(node, offset) {
    return node == this.dom ? offset : offset ? this.text.length : 0;
  }
  domAtPos(pos) {
    return new DOMPos(this.dom, pos);
  }
  domBoundsAround(_from, _to, offset) {
    return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(pos, side) {
    return textCoords(this.dom, pos, side);
  }
};
var MarkView = class _MarkView extends ContentView {
  constructor(mark, children = [], length = 0) {
    super();
    this.mark = mark;
    this.children = children;
    this.length = length;
    for (let ch of children)
      ch.setParent(this);
  }
  setAttrs(dom) {
    clearAttributes(dom);
    if (this.mark.class)
      dom.className = this.mark.class;
    if (this.mark.attrs)
      for (let name2 in this.mark.attrs)
        dom.setAttribute(name2, this.mark.attrs[name2]);
    return dom;
  }
  canReuseDOM(other) {
    return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
  }
  reuseDOM(node) {
    if (node.nodeName == this.mark.tagName.toUpperCase()) {
      this.setDOM(node);
      this.flags |= 4 | 2;
    }
  }
  sync(view, track) {
    if (!this.dom)
      this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
    else if (this.flags & 4)
      this.setAttrs(this.dom);
    super.sync(view, track);
  }
  merge(from, to, source, _hasStart, openStart, openEnd) {
    if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = [], off = 0, detachFrom = -1, i = 0;
    for (let elt of this.children) {
      let end = off + elt.length;
      if (end > from)
        result.push(off < from ? elt.split(from - off) : elt);
      if (detachFrom < 0 && off >= from)
        detachFrom = i;
      off = end;
      i++;
    }
    let length = this.length - from;
    this.length = from;
    if (detachFrom > -1) {
      this.children.length = detachFrom;
      this.markDirty();
    }
    return new _MarkView(this.mark, result, length);
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }
};
function textCoords(text, pos, side) {
  let length = text.nodeValue.length;
  if (pos > length)
    pos = length;
  let from = pos, to = pos, flatten2 = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      if (pos) {
        from--;
        flatten2 = 1;
      } else if (to < length) {
        to++;
        flatten2 = -1;
      }
    }
  } else {
    if (side < 0)
      from--;
    else if (to < length)
      to++;
  }
  let rects = textRange(text, from, to).getClientRects();
  if (!rects.length)
    return null;
  let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten2 && rect.width == 0)
    rect = Array.prototype.find.call(rects, (r) => r.width) || rect;
  return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
}
var WidgetView = class _WidgetView extends ContentView {
  static create(widget, length, side) {
    return new _WidgetView(widget, length, side);
  }
  constructor(widget, length, side) {
    super();
    this.widget = widget;
    this.length = length;
    this.side = side;
    this.prevWidget = null;
  }
  split(from) {
    let result = _WidgetView.create(this.widget, this.length - from, this.side);
    this.length -= from;
    return result;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  getSide() {
    return this.side;
  }
  merge(from, to, source, hasStart, openStart, openEnd) {
    if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    this.length = from + (source ? source.length : 0) + (this.length - to);
    return true;
  }
  become(other) {
    if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
      if (!this.widget.compare(other.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Text.empty;
    let top2 = this;
    while (top2.parent)
      top2 = top2.parent;
    let { view } = top2, text = view && view.state.doc, start = this.posAtStart;
    return text ? text.slice(start, start + this.length) : Text.empty;
  }
  domAtPos(pos) {
    return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    let rects = this.dom.getClientRects(), rect = null;
    if (!rects.length)
      return null;
    let fromBack = this.side ? this.side < 0 : pos > 0;
    for (let i = fromBack ? rects.length - 1 : 0; ; i += fromBack ? -1 : 1) {
      rect = rects[i];
      if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
        break;
    }
    return flattenRect(rect, !fromBack);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
};
var WidgetBufferView = class _WidgetBufferView extends ContentView {
  constructor(side) {
    super();
    this.side = side;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(other) {
    return other instanceof _WidgetBufferView && other.side == this.side;
  }
  split() {
    return new _WidgetBufferView(this.side);
  }
  sync() {
    if (!this.dom) {
      let dom = document.createElement("img");
      dom.className = "cm-widgetBuffer";
      dom.setAttribute("aria-hidden", "true");
      this.setDOM(dom);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(pos) {
    return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Text.empty;
  }
  get isHidden() {
    return true;
  }
};
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  let dom = parent.dom, { children } = parent, i = 0;
  for (let off = 0; i < children.length; i++) {
    let child = children[i], end = off + child.length;
    if (end == off && child.getSide() <= 0)
      continue;
    if (pos > off && pos < end && child.dom.parentNode == dom)
      return child.domAtPos(pos - off);
    if (pos <= off)
      break;
    off = end;
  }
  for (let j = i; j > 0; j--) {
    let prev = children[j - 1];
    if (prev.dom.parentNode == dom)
      return prev.domAtPos(prev.length);
  }
  for (let j = i; j < children.length; j++) {
    let next = children[j];
    if (next.dom.parentNode == dom)
      return next.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
function joinInlineInto(parent, view, open) {
  let last, { children } = parent;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  let before = null, beforePos = -1, after = null, afterPos = -1;
  function scan(view2, pos2) {
    for (let i = 0, off = 0; i < view2.children.length && off <= pos2; i++) {
      let child = view2.children[i], end = off + child.length;
      if (end >= pos2) {
        if (child.children.length) {
          scan(child, pos2 - off);
        } else if ((!after || after.isHidden && side > 0) && (end > pos2 || off == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos2 - off;
        } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos2 - off;
        }
      }
      off = end;
    }
  }
  scan(view, pos);
  let target = (side < 0 ? before : after) || before || after;
  if (target)
    return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  let last = view.dom.lastChild;
  if (!last)
    return view.dom.getBoundingClientRect();
  let rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}
function combineAttrs(source, target) {
  for (let name2 in source) {
    if (name2 == "class" && target.class)
      target.class += " " + source.class;
    else if (name2 == "style" && target.style)
      target.style += ";" + source.style;
    else
      target[name2] = source[name2];
  }
  return target;
}
var noAttrs = /* @__PURE__ */ Object.create(null);
function attrsEq(a, b, ignore) {
  if (a == b)
    return true;
  if (!a)
    a = noAttrs;
  if (!b)
    b = noAttrs;
  let keysA = Object.keys(a), keysB = Object.keys(b);
  if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
    return false;
  for (let key of keysA) {
    if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
      return false;
  }
  return true;
}
function updateAttrs(dom, prev, attrs) {
  let changed = false;
  if (prev) {
    for (let name2 in prev)
      if (!(attrs && name2 in attrs)) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = "";
        else
          dom.removeAttribute(name2);
      }
  }
  if (attrs) {
    for (let name2 in attrs)
      if (!(prev && prev[name2] == attrs[name2])) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = attrs[name2];
        else
          dom.setAttribute(name2, attrs[name2]);
      }
  }
  return changed;
}
function getAttrs(dom) {
  let attrs = /* @__PURE__ */ Object.create(null);
  for (let i = 0; i < dom.attributes.length; i++) {
    let attr = dom.attributes[i];
    attrs[attr.name] = attr.value;
  }
  return attrs;
}
var LineView = class _LineView extends ContentView {
  constructor() {
    super(...arguments);
    this.children = [];
    this.length = 0;
    this.prevAttrs = void 0;
    this.attrs = null;
    this.breakAfter = 0;
  }
  // Consumes source
  merge(from, to, source, hasStart, openStart, openEnd) {
    if (source) {
      if (!(source instanceof _LineView))
        return false;
      if (!this.dom)
        source.transferDOM(this);
    }
    if (hasStart)
      this.setDeco(source ? source.attrs : null);
    mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
    return true;
  }
  split(at) {
    let end = new _LineView();
    end.breakAfter = this.breakAfter;
    if (this.length == 0)
      return end;
    let { i, off } = this.childPos(at);
    if (off) {
      end.append(this.children[i].split(off), 0);
      this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
      i++;
    }
    for (let j = i; j < this.children.length; j++)
      end.append(this.children[j], 0);
    while (i > 0 && this.children[i - 1].length == 0)
      this.children[--i].destroy();
    this.children.length = i;
    this.markDirty();
    this.length = at;
    return end;
  }
  transferDOM(other) {
    if (!this.dom)
      return;
    this.markDirty();
    other.setDOM(this.dom);
    other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
    this.prevAttrs = void 0;
    this.dom = null;
  }
  setDeco(attrs) {
    if (!attrsEq(this.attrs, attrs)) {
      if (this.dom) {
        this.prevAttrs = this.attrs;
        this.markDirty();
      }
      this.attrs = attrs;
    }
  }
  append(child, openStart) {
    joinInlineInto(this, child, openStart);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(deco) {
    let attrs = deco.spec.attributes, cls = deco.spec.class;
    if (attrs)
      this.attrs = combineAttrs(attrs, this.attrs || {});
    if (cls)
      this.attrs = combineAttrs({ class: cls }, this.attrs || {});
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  reuseDOM(node) {
    if (node.nodeName == "DIV") {
      this.setDOM(node);
      this.flags |= 4 | 2;
    }
  }
  sync(view, track) {
    var _a2;
    if (!this.dom) {
      this.setDOM(document.createElement("div"));
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    } else if (this.flags & 4) {
      clearAttributes(this.dom);
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    }
    if (this.prevAttrs !== void 0) {
      updateAttrs(this.dom, this.prevAttrs, this.attrs);
      this.dom.classList.add("cm-line");
      this.prevAttrs = void 0;
    }
    super.sync(view, track);
    let last = this.dom.lastChild;
    while (last && ContentView.get(last) instanceof MarkView)
      last = last.lastChild;
    if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
      let hack = document.createElement("BR");
      hack.cmIgnore = true;
      this.dom.appendChild(hack);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let totalWidth = 0, textHeight;
    for (let child of this.children) {
      if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
        return null;
      let rects = clientRectsFor(child.dom);
      if (rects.length != 1)
        return null;
      totalWidth += rects[0].width;
      textHeight = rects[0].height;
    }
    return !totalWidth ? null : {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: totalWidth / this.length,
      textHeight
    };
  }
  coordsAt(pos, side) {
    let rect = coordsInChildren(this, pos, side);
    if (!this.children.length && rect && this.parent) {
      let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
      if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
        let dist2 = (height - heightOracle.textHeight) / 2;
        return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
      }
    }
    return rect;
  }
  become(_other) {
    return false;
  }
  covers() {
    return true;
  }
  static find(docView, pos) {
    for (let i = 0, off = 0; i < docView.children.length; i++) {
      let block = docView.children[i], end = off + block.length;
      if (end >= pos) {
        if (block instanceof _LineView)
          return block;
        if (end > pos)
          break;
      }
      off = end + block.breakAfter;
    }
    return null;
  }
};
var BlockWidgetView = class _BlockWidgetView extends ContentView {
  constructor(widget, length, deco) {
    super();
    this.widget = widget;
    this.length = length;
    this.deco = deco;
    this.breakAfter = 0;
    this.prevWidget = null;
  }
  merge(from, to, source, _takeDeco, openStart, openEnd) {
    if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    this.length = from + (source ? source.length : 0) + (this.length - to);
    return true;
  }
  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  split(at) {
    let len = this.length - at;
    this.length = at;
    let end = new _BlockWidgetView(this.widget, len, this.deco);
    end.breakAfter = this.breakAfter;
    return end;
  }
  get children() {
    return noChildren;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(other) {
    if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
      if (!other.widget.compare(this.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      this.deco = other.deco;
      this.breakAfter = other.breakAfter;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(pos, side) {
    return this.widget.coordsAt(this.dom, pos, side);
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
  covers(side) {
    let { startSide, endSide } = this.deco;
    return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
  }
};
var WidgetType = class {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(widget) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(dom, view) {
    return false;
  }
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(event) {
    return true;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(dom, pos, side) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return false;
  }
  /**
  @internal
  */
  get editable() {
    return false;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(dom) {
  }
};
var BlockType = function(BlockType2) {
  BlockType2[BlockType2["Text"] = 0] = "Text";
  BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
  BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
  BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
  return BlockType2;
}(BlockType || (BlockType = {}));
var Decoration = class extends RangeValue {
  constructor(startSide, endSide, widget, spec) {
    super();
    this.startSide = startSide;
    this.endSide = endSide;
    this.widget = widget;
    this.spec = spec;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(spec) {
    return new MarkDecoration(spec);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(spec) {
    let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
    side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
    return new PointDecoration(spec, side, side, block, spec.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(spec) {
    let block = !!spec.block, startSide, endSide;
    if (spec.isBlockGap) {
      startSide = -5e8;
      endSide = 4e8;
    } else {
      let { start, end } = getInclusive(spec, block);
      startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
      endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
    }
    return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(spec) {
    return new LineDecoration(spec);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(of, sort = false) {
    return RangeSet.of(of, sort);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
Decoration.none = RangeSet.empty;
var MarkDecoration = class _MarkDecoration extends Decoration {
  constructor(spec) {
    let { start, end } = getInclusive(spec);
    super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
    this.tagName = spec.tagName || "span";
    this.class = spec.class || "";
    this.attrs = spec.attributes || null;
  }
  eq(other) {
    var _a2, _b;
    return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && attrsEq(this.attrs, other.attrs, "class");
  }
  range(from, to = from) {
    if (from >= to)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(from, to);
  }
};
MarkDecoration.prototype.point = false;
var LineDecoration = class _LineDecoration extends Decoration {
  constructor(spec) {
    super(-2e8, -2e8, null, spec);
  }
  eq(other) {
    return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
  }
  range(from, to = from) {
    if (to != from)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(from, to);
  }
};
LineDecoration.prototype.mapMode = MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = class _PointDecoration extends Decoration {
  constructor(spec, startSide, endSide, block, widget, isReplace) {
    super(startSide, endSide, widget, spec);
    this.block = block;
    this.isReplace = isReplace;
    this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(other) {
    return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
  }
  range(from, to = from) {
    if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && to != from)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(from, to);
  }
};
PointDecoration.prototype.point = true;
function getInclusive(spec, block = false) {
  let { inclusiveStart: start, inclusiveEnd: end } = spec;
  if (start == null)
    start = spec.inclusive;
  if (end == null)
    end = spec.inclusive;
  return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
}
function widgetsEq(a, b) {
  return a == b || !!(a && b && a.compare(b));
}
function addRange(from, to, ranges, margin = 0) {
  let last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from)
    ranges[last] = Math.max(ranges[last], to);
  else
    ranges.push(from, to);
}
var ContentBuilder = class _ContentBuilder {
  constructor(doc2, pos, end, disallowBlockEffectsFor) {
    this.doc = doc2;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0;
    this.bufferMarks = [];
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc2.iter();
    this.skip = pos;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let last = this.content[this.content.length - 1];
    return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
  }
  getLine() {
    if (!this.curLine) {
      this.content.push(this.curLine = new LineView());
      this.atCursorPos = true;
    }
    return this.curLine;
  }
  flushBuffer(active = this.bufferMarks) {
    if (this.pendingBuffer) {
      this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
      this.pendingBuffer = 0;
    }
  }
  addBlockWidget(view) {
    this.flushBuffer();
    this.curLine = null;
    this.content.push(view);
  }
  finish(openEnd) {
    if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
      this.flushBuffer();
    else
      this.pendingBuffer = 0;
    if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
      this.getLine();
  }
  buildText(length, active, openStart) {
    while (length > 0) {
      if (this.textOff == this.text.length) {
        let { value, lineBreak, done } = this.cursor.next(this.skip);
        this.skip = 0;
        if (done)
          throw new Error("Ran out of text content when drawing inline views");
        if (lineBreak) {
          if (!this.posCovered())
            this.getLine();
          if (this.content.length)
            this.content[this.content.length - 1].breakAfter = 1;
          else
            this.breakAtStart = 1;
          this.flushBuffer();
          this.curLine = null;
          this.atCursorPos = true;
          length--;
          continue;
        } else {
          this.text = value;
          this.textOff = 0;
        }
      }
      let take = Math.min(
        this.text.length - this.textOff,
        length,
        512
        /* T.Chunk */
      );
      this.flushBuffer(active.slice(active.length - openStart));
      this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
      this.atCursorPos = true;
      this.textOff += take;
      length -= take;
      openStart = 0;
    }
  }
  span(from, to, active, openStart) {
    this.buildText(to - from, active, openStart);
    this.pos = to;
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  point(from, to, deco, active, openStart, index) {
    if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
      if (deco.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (to > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let len = to - from;
    if (deco instanceof PointDecoration) {
      if (deco.block) {
        if (deco.startSide > 0 && !this.posCovered())
          this.getLine();
        this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
      } else {
        let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
        let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
        let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
        let line = this.getLine();
        if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
          this.pendingBuffer = 0;
        this.flushBuffer(active);
        if (cursorBefore) {
          line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
          openStart = active.length + Math.max(0, openStart - active.length);
        }
        line.append(wrapMarks(view, active), openStart);
        this.atCursorPos = cursorAfter;
        this.pendingBuffer = !cursorAfter ? 0 : from < to || openStart > active.length ? 1 : 2;
        if (this.pendingBuffer)
          this.bufferMarks = active.slice();
      }
    } else if (this.doc.lineAt(this.pos).from == this.pos) {
      this.getLine().addLineDeco(deco);
    }
    if (len) {
      if (this.textOff + len <= this.text.length) {
        this.textOff += len;
      } else {
        this.skip += len - (this.text.length - this.textOff);
        this.text = "";
        this.textOff = 0;
      }
      this.pos = to;
    }
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  static build(text, from, to, decorations2, dynamicDecorationMap) {
    let builder = new _ContentBuilder(text, from, to, dynamicDecorationMap);
    builder.openEnd = RangeSet.spans(decorations2, from, to, builder);
    if (builder.openStart < 0)
      builder.openStart = builder.openEnd;
    builder.finish(builder.openEnd);
    return builder;
  }
};
function wrapMarks(view, active) {
  for (let mark of active)
    view = new MarkView(mark, [view], view.length);
  return view;
}
var NullWidget = class extends WidgetType {
  constructor(tag) {
    super();
    this.tag = tag;
  }
  eq(other) {
    return other.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(elt) {
    return elt.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
};
NullWidget.inline = new NullWidget("span");
NullWidget.block = new NullWidget("div");
var Direction = function(Direction2) {
  Direction2[Direction2["LTR"] = 0] = "LTR";
  Direction2[Direction2["RTL"] = 1] = "RTL";
  return Direction2;
}(Direction || (Direction = {}));
var LTR = Direction.LTR;
var RTL = Direction.RTL;
function dec(str) {
  let result = [];
  for (let i = 0; i < str.length; i++)
    result.push(1 << +str[i]);
  return result;
}
var LowTypes = dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
var ArabicTypes = dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /* @__PURE__ */ Object.create(null);
var BracketStack = [];
for (let p of ["()", "[]", "{}"]) {
  let l = p.charCodeAt(0), r = p.charCodeAt(1);
  Brackets[l] = r;
  Brackets[r] = -l;
}
function charType(ch) {
  return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8204 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : 1;
}
var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
var BidiSpan = class {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? RTL : LTR;
  }
  /**
  @internal
  */
  constructor(from, to, level) {
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  @internal
  */
  side(end, dir) {
    return this.dir == dir == end ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(forward, dir) {
    return forward == (this.dir == dir);
  }
  /**
  @internal
  */
  static find(order, index, level, assoc) {
    let maybe = -1;
    for (let i = 0; i < order.length; i++) {
      let span = order[i];
      if (span.from <= index && span.to >= index) {
        if (span.level == level)
          return i;
        if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
          maybe = i;
      }
    }
    if (maybe < 0)
      throw new RangeError("Index out of range");
    return maybe;
  }
};
function isolatesEq(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    let iA = a[i], iB = b[i];
    if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
      return false;
  }
  return true;
}
var types = [];
function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
  for (let iI = 0; iI <= isolates.length; iI++) {
    let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    let prevType = iI ? 256 : outerType;
    for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
      let type = charType(line.charCodeAt(i));
      if (type == 512)
        type = prev;
      else if (type == 8 && prevStrong == 4)
        type = 16;
      types[i] = type == 4 ? 2 : type;
      if (type & 7)
        prevStrong = type;
      prev = type;
    }
    for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
      let type = types[i];
      if (type == 128) {
        if (i < to - 1 && prev == types[i + 1] && prev & 24)
          type = types[i] = prev;
        else
          types[i] = 256;
      } else if (type == 64) {
        let end = i + 1;
        while (end < to && types[end] == 64)
          end++;
        let replace = i && prev == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
        for (let j = i; j < end; j++)
          types[j] = replace;
        i = end - 1;
      } else if (type == 8 && prevStrong == 1) {
        types[i] = 1;
      }
      prev = type;
      if (type & 7)
        prevStrong = type;
    }
  }
}
function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
  let oppositeType = outerType == 1 ? 2 : 1;
  for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
    let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i = from, ch, br, type; i < to; i++) {
      if (br = Brackets[ch = line.charCodeAt(i)]) {
        if (br < 0) {
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br) {
              let flags = BracketStack[sJ + 2];
              let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
              if (type2)
                types[i] = types[BracketStack[sJ]] = type2;
              sI = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189) {
          break;
        } else {
          BracketStack[sI++] = i;
          BracketStack[sI++] = ch;
          BracketStack[sI++] = context;
        }
      } else if ((type = types[i]) == 2 || type == 1) {
        let embed = type == outerType;
        context = embed ? 0 : 1;
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          let cur2 = BracketStack[sJ + 2];
          if (cur2 & 2)
            break;
          if (embed) {
            BracketStack[sJ + 2] |= 2;
          } else {
            if (cur2 & 4)
              break;
            BracketStack[sJ + 2] |= 4;
          }
        }
      }
    }
  }
}
function processNeutrals(rFrom, rTo, isolates, outerType) {
  for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
    let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i = from; i < to; ) {
      let type = types[i];
      if (type == 256) {
        let end = i + 1;
        for (; ; ) {
          if (end == to) {
            if (iI == isolates.length)
              break;
            end = isolates[iI++].to;
            to = iI < isolates.length ? isolates[iI].from : rTo;
          } else if (types[end] == 256) {
            end++;
          } else {
            break;
          }
        }
        let beforeL = prev == 1;
        let afterL = (end < rTo ? types[end] : outerType) == 1;
        let replace = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
        for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i; ) {
          if (j == fromJ) {
            j = isolates[--jI].from;
            fromJ = jI ? isolates[jI - 1].to : rFrom;
          }
          types[--j] = replace;
        }
        i = end;
      } else {
        prev = type;
        i++;
      }
    }
  }
}
function emitSpans(line, from, to, level, baseLevel, isolates, order) {
  let ourType = level % 2 ? 2 : 1;
  if (level % 2 == baseLevel % 2) {
    for (let iCh = from, iI = 0; iCh < to; ) {
      let sameDir = true, isNum = false;
      if (iI == isolates.length || iCh < isolates[iI].from) {
        let next = types[iCh];
        if (next != ourType) {
          sameDir = false;
          isNum = next == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run:
        for (; ; ) {
          if (iI < isolates.length && iScan == isolates[iI].from) {
            if (isNum)
              break run;
            let iso = isolates[iI];
            if (!sameDir)
              for (let upto = iso.to, jI = iI + 1; ; ) {
                if (upto == to)
                  break run;
                if (jI < isolates.length && isolates[jI].from == upto)
                  upto = isolates[jI++].to;
                else if (types[upto] == ourType)
                  break run;
                else
                  break;
              }
            iI++;
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.from > iCh)
                order.push(new BidiSpan(iCh, iso.from, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.to;
            }
            iScan = iso.to;
          } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
            break;
          } else {
            iScan++;
          }
        }
      if (recurse)
        emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
      else if (iCh < iScan)
        order.push(new BidiSpan(iCh, iScan, localLevel));
      iCh = iScan;
    }
  } else {
    for (let iCh = to, iI = isolates.length; iCh > from; ) {
      let sameDir = true, isNum = false;
      if (!iI || iCh > isolates[iI - 1].to) {
        let next = types[iCh - 1];
        if (next != ourType) {
          sameDir = false;
          isNum = next == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run:
        for (; ; ) {
          if (iI && iScan == isolates[iI - 1].to) {
            if (isNum)
              break run;
            let iso = isolates[--iI];
            if (!sameDir)
              for (let upto = iso.from, jI = iI; ; ) {
                if (upto == from)
                  break run;
                if (jI && isolates[jI - 1].to == upto)
                  upto = isolates[--jI].from;
                else if (types[upto - 1] == ourType)
                  break run;
                else
                  break;
              }
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.to < iCh)
                order.push(new BidiSpan(iso.to, iCh, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.from;
            }
            iScan = iso.from;
          } else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
            break;
          } else {
            iScan--;
          }
        }
      if (recurse)
        emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
      else if (iScan < iCh)
        order.push(new BidiSpan(iScan, iCh, localLevel));
      iCh = iScan;
    }
  }
}
function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
  let outerType = level % 2 ? 2 : 1;
  computeCharTypes(line, from, to, isolates, outerType);
  processBracketPairs(line, from, to, isolates, outerType);
  processNeutrals(from, to, isolates, outerType);
  emitSpans(line, from, to, level, baseLevel, isolates, order);
}
function computeOrder(line, direction, isolates) {
  if (!line)
    return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
  if (direction == LTR && !isolates.length && !BidiRE.test(line))
    return trivialOrder(line.length);
  if (isolates.length)
    while (line.length > types.length)
      types[types.length] = 256;
  let order = [], level = direction == LTR ? 0 : 1;
  computeSectionOrder(line, level, level, isolates, 0, line.length, order);
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
var movedOver = "";
function moveVisually(line, order, dir, start, forward) {
  var _a2;
  let startIndex = start.head - line.from;
  let spanI = BidiSpan.find(order, startIndex, (_a2 = start.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start.assoc);
  let span = order[spanI], spanEnd = span.side(forward, dir);
  if (startIndex == spanEnd) {
    let nextI = spanI += forward ? 1 : -1;
    if (nextI < 0 || nextI >= order.length)
      return null;
    span = order[spanI = nextI];
    startIndex = span.side(!forward, dir);
    spanEnd = span.side(forward, dir);
  }
  let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
  if (nextIndex < span.from || nextIndex > span.to)
    nextIndex = spanEnd;
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
    return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
}
function autoDirection(text, from, to) {
  for (let i = from; i < to; i++) {
    let type = charType(text.charCodeAt(i));
    if (type == 1)
      return LTR;
    if (type == 2 || type == 4)
      return RTL;
  }
  return LTR;
}
var clickAddsSelectionRange = Facet.define();
var dragMovesSelection$1 = Facet.define();
var mouseSelectionStyle = Facet.define();
var exceptionSink = Facet.define();
var updateListener = Facet.define();
var inputHandler = Facet.define();
var focusChangeEffect = Facet.define();
var perLineTextDirection = Facet.define({
  combine: (values) => values.some((x) => x)
});
var nativeSelectionHidden = Facet.define({
  combine: (values) => values.some((x) => x)
});
var scrollHandler = Facet.define();
var ScrollTarget = class _ScrollTarget {
  constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
    this.range = range;
    this.y = y;
    this.x = x;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
    this.isSnapshot = isSnapshot;
  }
  map(changes) {
    return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(state) {
    return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
var scrollIntoView = StateEffect.define({ map: (t2, ch) => t2.map(ch) });
function logException(state, exception, context) {
  let handler = state.facet(exceptionSink);
  if (handler.length)
    handler[0](exception);
  else if (window.onerror)
    window.onerror(String(exception), context, void 0, void 0, exception);
  else if (context)
    console.error(context + ":", exception);
  else
    console.error(exception);
}
var editable = Facet.define({ combine: (values) => values.length ? values[0] : true });
var nextPluginID = 0;
var viewPlugin = Facet.define();
var ViewPlugin = class _ViewPlugin {
  constructor(id, create, domEventHandlers, domEventObservers, buildExtensions) {
    this.id = id;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.domEventObservers = domEventObservers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(create, spec) {
    const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
    return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin2) => {
      let ext = [viewPlugin.of(plugin2)];
      if (deco)
        ext.push(decorations.of((view) => {
          let pluginInst = view.plugin(plugin2);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
      if (provide)
        ext.push(provide(plugin2));
      return ext;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(cls, spec) {
    return _ViewPlugin.define((view) => new cls(view), spec);
  }
};
var PluginInstance = class {
  constructor(spec) {
    this.spec = spec;
    this.mustUpdate = null;
    this.value = null;
  }
  update(view) {
    if (!this.value) {
      if (this.spec) {
        try {
          this.value = this.spec.create(view);
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
          this.deactivate();
        }
      }
    } else if (this.mustUpdate) {
      let update = this.mustUpdate;
      this.mustUpdate = null;
      if (this.value.update) {
        try {
          this.value.update(update);
        } catch (e) {
          logException(update.state, e, "CodeMirror plugin crashed");
          if (this.value.destroy)
            try {
              this.value.destroy();
            } catch (_) {
            }
          this.deactivate();
        }
      }
    }
    return this;
  }
  destroy(view) {
    var _a2;
    if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
      try {
        this.value.destroy();
      } catch (e) {
        logException(view.state, e, "CodeMirror plugin crashed");
      }
    }
  }
  deactivate() {
    this.spec = this.value = null;
  }
};
var editorAttributes = Facet.define();
var contentAttributes = Facet.define();
var decorations = Facet.define();
var outerDecorations = Facet.define();
var atomicRanges = Facet.define();
var bidiIsolatedRanges = Facet.define();
function getIsolatedRanges(view, line) {
  let isolates = view.state.facet(bidiIsolatedRanges);
  if (!isolates.length)
    return isolates;
  let sets = isolates.map((i) => i instanceof Function ? i(view) : i);
  let result = [];
  RangeSet.spans(sets, line.from, line.to, {
    point() {
    },
    span(fromDoc, toDoc, active, open) {
      let from = fromDoc - line.from, to = toDoc - line.from;
      let level = result;
      for (let i = active.length - 1; i >= 0; i--, open--) {
        let direction = active[i].spec.bidiIsolate, update;
        if (direction == null)
          direction = autoDirection(line.text, from, to);
        if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
          update.to = to;
          level = update.inner;
        } else {
          let add2 = { from, to, direction, inner: [] };
          level.push(add2);
          level = add2.inner;
        }
      }
    }
  });
  return result;
}
var scrollMargins = Facet.define();
function getScrollMargins(view) {
  let left = 0, right = 0, top2 = 0, bottom = 0;
  for (let source of view.state.facet(scrollMargins)) {
    let m = source(view);
    if (m) {
      if (m.left != null)
        left = Math.max(left, m.left);
      if (m.right != null)
        right = Math.max(right, m.right);
      if (m.top != null)
        top2 = Math.max(top2, m.top);
      if (m.bottom != null)
        bottom = Math.max(bottom, m.bottom);
    }
  }
  return { left, right, top: top2, bottom };
}
var styleModule = Facet.define();
var ChangedRange = class _ChangedRange {
  constructor(fromA, toA, fromB, toB) {
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  join(other) {
    return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
  }
  addToSet(set) {
    let i = set.length, me = this;
    for (; i > 0; i--) {
      let range = set[i - 1];
      if (range.fromA > me.toA)
        continue;
      if (range.toA < me.fromA)
        break;
      me = me.join(range);
      set.splice(i - 1, 1);
    }
    set.splice(i, 0, me);
    return set;
  }
  static extendWithRanges(diff, ranges) {
    if (ranges.length == 0)
      return diff;
    let result = [];
    for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
      let next = dI == diff.length ? null : diff[dI], off = posA - posB;
      let end = next ? next.fromB : 1e9;
      while (rI < ranges.length && ranges[rI] < end) {
        let from = ranges[rI], to = ranges[rI + 1];
        let fromB = Math.max(posB, from), toB = Math.min(end, to);
        if (fromB <= toB)
          new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
        if (to > end)
          break;
        else
          rI += 2;
      }
      if (!next)
        return result;
      new _ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
      posA = next.toA;
      posB = next.toB;
    }
  }
};
var ViewUpdate = class _ViewUpdate {
  constructor(view, state, transactions) {
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    this.flags = 0;
    this.startState = view.state;
    this.changes = ChangeSet.empty(this.startState.doc.length);
    for (let tr of transactions)
      this.changes = this.changes.compose(tr.changes);
    let changedRanges = [];
    this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  static create(view, state, transactions) {
    return new _ViewUpdate(view, state, transactions);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & (8 | 2)) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((tr) => tr.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
};
var DocView = class extends ContentView {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(view) {
    super();
    this.view = view;
    this.decorations = [];
    this.dynamicDecorationMap = [];
    this.domChanged = null;
    this.hasComposition = null;
    this.markedForComposition = /* @__PURE__ */ new Set();
    this.lastCompositionAfterCursor = false;
    this.minWidth = 0;
    this.minWidthFrom = 0;
    this.minWidthTo = 0;
    this.impreciseAnchor = null;
    this.impreciseHead = null;
    this.forceSelection = false;
    this.lastUpdate = Date.now();
    this.setDOM(view.contentDOM);
    this.children = [new LineView()];
    this.children[0].setParent(this);
    this.updateDeco();
    this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(update) {
    var _a2;
    let changedRanges = update.changedRanges;
    if (this.minWidth > 0 && changedRanges.length) {
      if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
        this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
      } else {
        this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
        this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
      }
    }
    let readCompositionAt = -1;
    if (this.view.inputState.composing >= 0) {
      if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
        readCompositionAt = this.domChanged.newSel.head;
      else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
        readCompositionAt = update.state.selection.main.head;
    }
    let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
    this.domChanged = null;
    if (this.hasComposition) {
      this.markedForComposition.clear();
      let { from, to } = this.hasComposition;
      changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
    }
    this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
    if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
      this.forceSelection = true;
    let prevDeco = this.decorations, deco = this.updateDeco();
    let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
    changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
    if (!(this.flags & 7) && changedRanges.length == 0) {
      return false;
    } else {
      this.updateInner(changedRanges, update.startState.doc.length, composition);
      if (update.transactions.length)
        this.lastUpdate = Date.now();
      return true;
    }
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(changes, oldLength, composition) {
    this.view.viewState.mustMeasureContent = true;
    this.updateChildren(changes, oldLength, composition);
    let { observer } = this.view;
    observer.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
      this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, track);
      this.flags &= ~7;
      if (track && (track.written || observer.selectionRange.focusNode != track.node))
        this.forceSelection = true;
      this.dom.style.height = "";
    });
    this.markedForComposition.forEach(
      (cView) => cView.flags &= ~8
      /* ViewFlag.Composition */
    );
    let gaps = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
      for (let child of this.children)
        if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
          gaps.push(child.dom);
    }
    observer.updateGaps(gaps);
  }
  updateChildren(changes, oldLength, composition) {
    let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
    let cursor = this.childCursor(oldLength);
    for (let i = ranges.length - 1; ; i--) {
      let next = i >= 0 ? ranges[i] : null;
      if (!next)
        break;
      let { fromA, toA, fromB, toB } = next, content2, breakAtStart, openStart, openEnd;
      if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
        let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
        let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
        breakAtStart = before.breakAtStart;
        openStart = before.openStart;
        openEnd = after.openEnd;
        let compLine = this.compositionView(composition);
        if (after.breakAtStart) {
          compLine.breakAfter = 1;
        } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
          compLine.breakAfter = after.content[0].breakAfter;
          after.content.shift();
        }
        if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
          before.content.pop();
        }
        content2 = before.content.concat(compLine).concat(after.content);
      } else {
        ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
      }
      let { i: toI, off: toOff } = cursor.findPos(toA, 1);
      let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
      replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
    }
    if (composition)
      this.fixCompositionDOM(composition);
  }
  compositionView(composition) {
    let cur2 = new TextView(composition.text.nodeValue);
    cur2.flags |= 8;
    for (let { deco } of composition.marks)
      cur2 = new MarkView(deco, [cur2], cur2.length);
    let line = new LineView();
    line.append(cur2, 0);
    return line;
  }
  fixCompositionDOM(composition) {
    let fix = (dom, cView2) => {
      cView2.flags |= 8 | (cView2.children.some(
        (c) => c.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0);
      this.markedForComposition.add(cView2);
      let prev = ContentView.get(dom);
      if (prev && prev != cView2)
        prev.dom = null;
      cView2.setDOM(dom);
    };
    let pos = this.childPos(composition.range.fromB, 1);
    let cView = this.children[pos.i];
    fix(composition.line, cView);
    for (let i = composition.marks.length - 1; i >= -1; i--) {
      pos = cView.childPos(pos.off, 1);
      cView = cView.children[pos.i];
      fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(mustRead = false, fromPointer = false) {
    if (mustRead || !this.view.observer.selectionRange.focusNode)
      this.view.observer.readSelectionRange();
    let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
    let selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
    if (!(focused || fromPointer || selectionNotFocus))
      return;
    let force = this.forceSelection;
    this.forceSelection = false;
    let main = this.view.state.selection.main;
    let anchor = this.moveToLine(this.domAtPos(main.anchor));
    let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
    if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
      let dummy = document.createTextNode("");
      this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
      anchor = head = new DOMPos(dummy, 0);
      force = true;
    }
    let domSel = this.view.observer.selectionRange;
    if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
      this.view.observer.ignore(() => {
        if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
          this.dom.blur();
          this.dom.focus({ preventScroll: true });
        }
        let rawSel = getSelection(this.view.root);
        if (!rawSel)
          ;
        else if (main.empty) {
          if (browser.gecko) {
            let nextTo = nextToUneditable(anchor.node, anchor.offset);
            if (nextTo && nextTo != (1 | 2)) {
              let text = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
              if (text)
                anchor = new DOMPos(text.node, text.offset);
            }
          }
          rawSel.collapse(anchor.node, anchor.offset);
          if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
            rawSel.caretBidiLevel = main.bidiLevel;
        } else if (rawSel.extend) {
          rawSel.collapse(anchor.node, anchor.offset);
          try {
            rawSel.extend(head.node, head.offset);
          } catch (_) {
          }
        } else {
          let range = document.createRange();
          if (main.anchor > main.head)
            [anchor, head] = [head, anchor];
          range.setEnd(head.node, head.offset);
          range.setStart(anchor.node, anchor.offset);
          rawSel.removeAllRanges();
          rawSel.addRange(range);
        }
        if (selectionNotFocus && this.view.root.activeElement == this.dom) {
          this.dom.blur();
          if (activeElt)
            activeElt.focus();
        }
      });
      this.view.observer.setSelectionRange(anchor, head);
    }
    this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
    this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(sel, cursor) {
    return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view } = this, cursor = view.state.selection.main;
    let sel = getSelection(view.root);
    let { anchorNode, anchorOffset } = view.observer.selectionRange;
    if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
      return;
    let line = LineView.find(this, cursor.head);
    if (!line)
      return;
    let lineStart = line.posAtStart;
    if (cursor.head == lineStart || cursor.head == lineStart + line.length)
      return;
    let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
    if (!before || !after || before.bottom > after.top)
      return;
    let dom = this.domAtPos(cursor.head + cursor.assoc);
    sel.collapse(dom.node, dom.offset);
    sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
    view.observer.readSelectionRange();
    let newRange = view.observer.selectionRange;
    if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
      sel.collapse(anchorNode, anchorOffset);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(pos) {
    let dom = this.dom, newPos;
    if (pos.node != dom)
      return pos;
    for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
      let view = ContentView.get(dom.childNodes[i]);
      if (view instanceof LineView)
        newPos = view.domAtPos(0);
    }
    for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
      let view = ContentView.get(dom.childNodes[i]);
      if (view instanceof LineView)
        newPos = view.domAtPos(view.length);
    }
    return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
  }
  nearest(dom) {
    for (let cur2 = dom; cur2; ) {
      let domView = ContentView.get(cur2);
      if (domView && domView.rootView == this)
        return domView;
      cur2 = cur2.parentNode;
    }
    return null;
  }
  posFromDOM(node, offset) {
    let view = this.nearest(node);
    if (!view)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return view.localPosFromDOM(node, offset) + view.posAtStart;
  }
  domAtPos(pos) {
    let { i, off } = this.childCursor().findPos(pos, -1);
    for (; i < this.children.length - 1; ) {
      let child = this.children[i];
      if (off < child.length || child instanceof LineView)
        break;
      i++;
      off = 0;
    }
    return this.children[i].domAtPos(off);
  }
  coordsAt(pos, side) {
    let best = null, bestPos = 0;
    for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
      let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
      if (end < pos)
        break;
      if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
        best = child;
        bestPos = start;
      }
      off = start;
    }
    return best ? best.coordsAt(pos - bestPos, side) : null;
  }
  coordsForChar(pos) {
    let { i, off } = this.childPos(pos, 1), child = this.children[i];
    if (!(child instanceof LineView))
      return null;
    while (child.children.length) {
      let { i: i2, off: childOff } = child.childPos(off, 1);
      for (; ; i2++) {
        if (i2 == child.children.length)
          return null;
        if ((child = child.children[i2]).length)
          break;
      }
      off = childOff;
    }
    if (!(child instanceof TextView))
      return null;
    let end = findClusterBreak(child.text, off);
    if (end == off)
      return null;
    let rects = textRange(child.dom, off, end).getClientRects();
    for (let i2 = 0; i2 < rects.length; i2++) {
      let rect = rects[i2];
      if (i2 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
        return rect;
    }
    return null;
  }
  measureVisibleLineHeights(viewport) {
    let result = [], { from, to } = viewport;
    let contentWidth = this.view.contentDOM.clientWidth;
    let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
    let widest = -1, ltr = this.view.textDirection == Direction.LTR;
    for (let pos = 0, i = 0; i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (end > to)
        break;
      if (pos >= from) {
        let childRect = child.dom.getBoundingClientRect();
        result.push(childRect.height);
        if (isWider) {
          let last = child.dom.lastChild;
          let rects = last ? clientRectsFor(last) : [];
          if (rects.length) {
            let rect = rects[rects.length - 1];
            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
            if (width > widest) {
              widest = width;
              this.minWidth = contentWidth;
              this.minWidthFrom = pos;
              this.minWidthTo = end;
            }
          }
        }
      }
      pos = end + child.breakAfter;
    }
    return result;
  }
  textDirectionAt(pos) {
    let { i } = this.childPos(pos, 1);
    return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
  }
  measureTextSize() {
    for (let child of this.children) {
      if (child instanceof LineView) {
        let measure = child.measureTextSize();
        if (measure)
          return measure;
      }
    }
    let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
    dummy.className = "cm-line";
    dummy.style.width = "99999px";
    dummy.style.position = "absolute";
    dummy.textContent = "abc def ghi jkl mno pqr stu";
    this.view.observer.ignore(() => {
      this.dom.appendChild(dummy);
      let rect = clientRectsFor(dummy.firstChild)[0];
      lineHeight = dummy.getBoundingClientRect().height;
      charWidth = rect ? rect.width / 27 : 7;
      textHeight = rect ? rect.height : lineHeight;
      dummy.remove();
    });
    return { lineHeight, charWidth, textHeight };
  }
  childCursor(pos = this.length) {
    let i = this.children.length;
    if (i)
      pos -= this.children[--i].length;
    return new ChildCursor(this.children, pos, i);
  }
  computeBlockGapDeco() {
    let deco = [], vs = this.view.viewState;
    for (let pos = 0, i = 0; ; i++) {
      let next = i == vs.viewports.length ? null : vs.viewports[i];
      let end = next ? next.from - 1 : this.length;
      if (end > pos) {
        let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
        deco.push(Decoration.replace({
          widget: new BlockGapWidget(height),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(pos, end));
      }
      if (!next)
        break;
      pos = next.to + 1;
    }
    return Decoration.set(deco);
  }
  updateDeco() {
    let i = 0;
    let allDeco = this.view.state.facet(decorations).map((d) => {
      let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
      return dynamic ? d(this.view) : d;
    });
    let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i2) => {
      let dynamic = typeof d == "function";
      if (dynamic)
        dynamicOuter = true;
      return dynamic ? d(this.view) : d;
    });
    if (outerDeco.length) {
      this.dynamicDecorationMap[i++] = dynamicOuter;
      allDeco.push(RangeSet.join(outerDeco));
    }
    this.decorations = [
      ...allDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
    while (i < this.decorations.length)
      this.dynamicDecorationMap[i++] = false;
    return this.decorations;
  }
  scrollIntoView(target) {
    if (target.isSnapshot) {
      let ref = this.view.viewState.lineBlockAt(target.range.head);
      this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
      this.view.scrollDOM.scrollLeft = target.xMargin;
      return;
    }
    for (let handler of this.view.state.facet(scrollHandler)) {
      try {
        if (handler(this.view, target.range, target))
          return true;
      } catch (e) {
        logException(this.view.state, e, "scroll handler");
      }
    }
    let { range } = target;
    let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
    if (!rect)
      return;
    if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
      rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
    let margins = getScrollMargins(this.view);
    let targetRect = {
      left: rect.left - margins.left,
      top: rect.top - margins.top,
      right: rect.right + margins.right,
      bottom: rect.bottom + margins.bottom
    };
    let { offsetWidth, offsetHeight } = this.view.scrollDOM;
    scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
  }
};
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
var BlockGapWidget = class extends WidgetType {
  constructor(height) {
    super();
    this.height = height;
  }
  toDOM() {
    let elt = document.createElement("div");
    elt.className = "cm-gap";
    this.updateDOM(elt);
    return elt;
  }
  eq(other) {
    return other.height == this.height;
  }
  updateDOM(elt) {
    elt.style.height = this.height + "px";
    return true;
  }
  get editable() {
    return true;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return false;
  }
};
function findCompositionNode(view, headPos) {
  let sel = view.observer.selectionRange;
  if (!sel.focusNode)
    return null;
  let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
  let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
  let textNode = textBefore || textAfter;
  if (textAfter && textBefore && textAfter.node != textBefore.node) {
    let descAfter = ContentView.get(textAfter.node);
    if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
      textNode = textAfter;
    } else if (view.docView.lastCompositionAfterCursor) {
      let descBefore = ContentView.get(textBefore.node);
      if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
        textNode = textAfter;
    }
  }
  view.docView.lastCompositionAfterCursor = textNode != textBefore;
  if (!textNode)
    return null;
  let from = headPos - textNode.offset;
  return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
}
function findCompositionRange(view, changes, headPos) {
  let found = findCompositionNode(view, headPos);
  if (!found)
    return null;
  let { node: textNode, from, to } = found, text = textNode.nodeValue;
  if (/[\n\r]/.test(text))
    return null;
  if (view.state.doc.sliceString(found.from, found.to) != text)
    return null;
  let inv = changes.invertedDesc;
  let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
  let marks2 = [];
  for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
    let parentView = ContentView.get(parent);
    if (parentView instanceof MarkView)
      marks2.push({ node: parent, deco: parentView.mark });
    else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
      return { range, text: textNode, marks: marks2, line: parent };
    else if (parent != view.contentDOM)
      marks2.push({ node: parent, deco: new MarkDecoration({
        inclusive: true,
        attributes: getAttrs(parent),
        tagName: parent.tagName.toLowerCase()
      }) });
    else
      return null;
  }
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1)
    return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
}
var DecorationComparator$1 = class DecorationComparator {
  constructor() {
    this.changes = [];
  }
  compareRange(from, to) {
    addRange(from, to, this.changes);
  }
  comparePoint(from, to) {
    addRange(from, to, this.changes);
  }
};
function findChangedDeco(a, b, diff) {
  let comp = new DecorationComparator$1();
  RangeSet.compare(a, b, diff, comp);
  return comp.changes;
}
function inUneditable(node, inside2) {
  for (let cur2 = node; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
    if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
      return true;
    }
  }
  return false;
}
function touchesComposition(changes, composition) {
  let touched = false;
  if (composition)
    changes.iterChangedRanges((from, to) => {
      if (from < composition.to && to > composition.from)
        touched = true;
    });
  return touched;
}
function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line = state.doc.lineAt(pos), linePos = pos - line.from;
  if (line.length == 0)
    return EditorSelection.cursor(pos);
  if (linePos == 0)
    bias = 1;
  else if (linePos == line.length)
    bias = -1;
  let from = linePos, to = linePos;
  if (bias < 0)
    from = findClusterBreak(line.text, linePos, false);
  else
    to = findClusterBreak(line.text, linePos);
  let cat = categorize(line.text.slice(from, to));
  while (from > 0) {
    let prev = findClusterBreak(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat)
      break;
    from = prev;
  }
  while (to < line.length) {
    let next = findClusterBreak(line.text, to);
    if (categorize(line.text.slice(to, next)) != cat)
      break;
    to = next;
  }
  return EditorSelection.range(from + line.from, to + line.from);
}
function getdx(x, rect) {
  return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
}
function getdy(y, rect) {
  return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
}
function yOverlap(a, b) {
  return a.top < b.bottom - 1 && a.bottom > b.top + 1;
}
function upTop(rect, top2) {
  return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
}
function domPosAtCoords(parent, x, y) {
  let closest, closestRect, closestX, closestY, closestOverlap = false;
  let above, below, aboveRect, belowRect;
  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect))
        rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      let dx = getdx(x, rect), dy = getdy(y, rect);
      if (dx == 0 && dy == 0)
        return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        let side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
      }
      if (dx == 0) {
        if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest)
    return { node: parent, offset: 0 };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
  if (closest.nodeType == 3)
    return domPosInText(closest, clipX, y);
  if (closestOverlap && closest.contentEditable != "false")
    return domPosAtCoords(closest, clipX, y);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return { node: parent, offset };
}
function domPosInText(node, x, y) {
  let len = node.nodeValue.length;
  let closestOffset = -1, closestDY = 1e9, generalSide = 0;
  for (let i = 0; i < len; i++) {
    let rects = textRange(node, i, i + 1).getClientRects();
    for (let j = 0; j < rects.length; j++) {
      let rect = rects[j];
      if (rect.top == rect.bottom)
        continue;
      if (!generalSide)
        generalSide = x - rect.left;
      let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
      if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
        let right = x >= (rect.left + rect.right) / 2, after = right;
        if (browser.chrome || browser.gecko) {
          let rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right)
            after = !right;
        }
        if (dy <= 0)
          return { node, offset: i + (after ? 1 : 0) };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
}
function posAtCoords(view, coords, precise, bias = -1) {
  var _a2, _b;
  let content2 = view.contentDOM.getBoundingClientRect(), docTop = content2.top + view.viewState.paddingTop;
  let block, { docHeight } = view.viewState;
  let { x, y } = coords, yOffset = y - docTop;
  if (yOffset < 0)
    return 0;
  if (yOffset > docHeight)
    return view.state.doc.length;
  for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text)
      break;
    for (; ; ) {
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight)
        break;
      if (bounced)
        return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y = docTop + yOffset;
  let lineStart = block.from;
  if (lineStart < view.viewport.from)
    return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content2, block, x, y);
  if (lineStart > view.viewport.to)
    return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content2, block, x, y);
  let doc2 = view.dom.ownerDocument;
  let root = view.root.elementFromPoint ? view.root : doc2;
  let element = root.elementFromPoint(x, y);
  if (element && !view.contentDOM.contains(element))
    element = null;
  if (!element) {
    x = Math.max(content2.left + 1, Math.min(content2.right - 1, x));
    element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element))
      element = null;
  }
  let node, offset = -1;
  if (element && ((_a2 = view.docView.nearest(element)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
    if (doc2.caretPositionFromPoint) {
      let pos = doc2.caretPositionFromPoint(x, y);
      if (pos)
        ({ offsetNode: node, offset } = pos);
    } else if (doc2.caretRangeFromPoint) {
      let range = doc2.caretRangeFromPoint(x, y);
      if (range) {
        ({ startContainer: node, startOffset: offset } = range);
        if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
          node = void 0;
      }
    }
  }
  if (!node || !view.docView.dom.contains(node)) {
    let line = LineView.find(view.docView, lineStart);
    if (!line)
      return yOffset > block.top + block.height / 2 ? block.to : block.from;
    ({ node, offset } = domPosAtCoords(line.dom, x, y));
  }
  let nearest = view.docView.nearest(node);
  if (!nearest)
    return null;
  if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
    let rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block, x, y) {
  let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    let textHeight = view.viewState.heightOracle.textHeight;
    let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  let content2 = view.state.sliceDoc(block.from, block.to);
  return block.from + findColumn(content2, into, view.state.tabSize);
}
function isSuspiciousSafariCaretResult(node, offset, x) {
  let len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
    return false;
  for (let next = node.nextSibling; next; next = next.nextSibling)
    if (next.nodeType != 1 || next.nodeName != "BR")
      return false;
  return textRange(node, len - 1, len).getBoundingClientRect().left > x;
}
function isSuspiciousChromeCaretResult(node, offset, x) {
  if (offset != 0)
    return false;
  for (let cur2 = node; ; ) {
    let parent = cur2.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
      return false;
    if (parent.classList.contains("cm-line"))
      break;
    cur2 = parent;
  }
  let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x - rect.left > 5;
}
function blockAt(view, pos) {
  let line = view.lineBlockAt(pos);
  if (Array.isArray(line.type))
    for (let l of line.type) {
      if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
        return l;
    }
  return line;
}
function moveToLineBoundary(view, start, forward, includeWrap) {
  let line = blockAt(view, start.head);
  let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
  if (coords) {
    let editorRect = view.dom.getBoundingClientRect();
    let direction = view.textDirectionAt(line.from);
    let pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null)
      return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
}
function moveByChar(view, start, forward, by) {
  let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
  let direction = view.textDirectionAt(line.from);
  for (let cur2 = start, check = null; ; ) {
    let next = moveVisually(line, spans, direction, cur2, forward), char = movedOver;
    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1))
        return cur2;
      char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = view.visualLineSide(line, !forward);
    }
    if (!check) {
      if (!by)
        return next;
      check = by(char);
    } else if (!check(char)) {
      return cur2;
    }
    cur2 = next;
  }
}
function byGroup(view, pos, start) {
  let categorize = view.state.charCategorizer(pos);
  let cat = categorize(start);
  return (next) => {
    let nextCat = categorize(next);
    if (cat == CharCategory.Space)
      cat = nextCat;
    return cat == nextCat;
  };
}
function moveVertically(view, start, forward, distance) {
  let startPos = start.head, dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0))
    return EditorSelection.cursor(startPos, start.assoc);
  let goal = start.goalColumn, startY;
  let rect = view.contentDOM.getBoundingClientRect();
  let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
  if (startCoords) {
    if (goal == null)
      goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line = view.viewState.lineBlockAt(startPos);
    if (goal == null)
      goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }
  let resolvedGoal = rect.left + goal;
  let dist2 = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
  for (let extra = 0; ; extra += 10) {
    let curY = startY + (dist2 + extra) * dir;
    let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
      let charRect = view.docView.coordsForChar(pos);
      let assoc = !charRect || curY < charRect.top ? -1 : 1;
      return EditorSelection.cursor(pos, assoc, void 0, goal);
    }
  }
}
function skipAtomicRanges(atoms, pos, bias) {
  for (; ; ) {
    let moved = 0;
    for (let set of atoms) {
      set.between(pos - 1, pos + 1, (from, to, value) => {
        if (pos > from && pos < to) {
          let side = moved || bias || (pos - from < to - pos ? -1 : 1);
          pos = side < 0 ? from : to;
          moved = side;
        }
      });
    }
    if (!moved)
      return pos;
  }
}
function skipAtoms(view, oldPos, pos) {
  let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f) => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}
var InputState = class {
  setSelectionOrigin(origin) {
    this.lastSelectionOrigin = origin;
    this.lastSelectionTime = Date.now();
  }
  constructor(view) {
    this.view = view;
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.pendingIOSKey = void 0;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastEscPress = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.composing = -1;
    this.compositionFirstChange = null;
    this.compositionEndedAt = 0;
    this.compositionPendingKey = false;
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    this.draggedContent = null;
    this.handleEvent = this.handleEvent.bind(this);
    this.notifiedFocused = view.hasFocus;
    if (browser.safari)
      view.contentDOM.addEventListener("input", () => null);
    if (browser.gecko)
      firefoxCopyCutHack(view.contentDOM.ownerDocument);
  }
  handleEvent(event) {
    if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
      return;
    if (event.type == "keydown" && this.keydown(event))
      return;
    this.runHandlers(event.type, event);
  }
  runHandlers(type, event) {
    let handlers2 = this.handlers[type];
    if (handlers2) {
      for (let observer of handlers2.observers)
        observer(this.view, event);
      for (let handler of handlers2.handlers) {
        if (event.defaultPrevented)
          break;
        if (handler(this.view, event)) {
          event.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(plugins) {
    let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
    for (let type in handlers2)
      if (type != "scroll") {
        let passive = !handlers2[type].handlers.length;
        let exists = prev[type];
        if (exists && passive != !exists.handlers.length) {
          dom.removeEventListener(type, this.handleEvent);
          exists = null;
        }
        if (!exists)
          dom.addEventListener(type, this.handleEvent, { passive });
      }
    for (let type in prev)
      if (type != "scroll" && !handlers2[type])
        dom.removeEventListener(type, this.handleEvent);
    this.handlers = handlers2;
  }
  keydown(event) {
    this.lastKeyCode = event.keyCode;
    this.lastKeyTime = Date.now();
    if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return true;
    if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
      this.view.inputState.lastEscPress = 0;
    if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
      this.view.observer.delayAndroidKey(event.key, event.keyCode);
      return true;
    }
    let pending;
    if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
      this.pendingIOSKey = pending || event;
      setTimeout(() => this.flushIOSKey(), 250);
      return true;
    }
    if (event.keyCode != 229)
      this.view.observer.forceFlush();
    return false;
  }
  flushIOSKey(change) {
    let key = this.pendingIOSKey;
    if (!key)
      return false;
    if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
      return false;
    this.pendingIOSKey = void 0;
    return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
  }
  ignoreDuringComposition(event) {
    if (!/^key/.test(event.type))
      return false;
    if (this.composing > 0)
      return true;
    if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
      this.compositionPendingKey = false;
      return true;
    }
    return false;
  }
  startMouseSelection(mouseSelection) {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
    this.mouseSelection = mouseSelection;
  }
  update(update) {
    if (this.mouseSelection)
      this.mouseSelection.update(update);
    if (this.draggedContent && update.docChanged)
      this.draggedContent = this.draggedContent.map(update.changes);
    if (update.transactions.length)
      this.lastKeyCode = this.lastSelectionTime = 0;
  }
  destroy() {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
  }
};
function bindHandler(plugin2, handler) {
  return (view, event) => {
    try {
      return handler.call(plugin2, event, view);
    } catch (e) {
      logException(view.state, e);
    }
  };
}
function computeHandlers(plugins) {
  let result = /* @__PURE__ */ Object.create(null);
  function record(type) {
    return result[type] || (result[type] = { observers: [], handlers: [] });
  }
  for (let plugin2 of plugins) {
    let spec = plugin2.spec;
    if (spec && spec.domEventHandlers)
      for (let type in spec.domEventHandlers) {
        let f = spec.domEventHandlers[type];
        if (f)
          record(type).handlers.push(bindHandler(plugin2.value, f));
      }
    if (spec && spec.domEventObservers)
      for (let type in spec.domEventObservers) {
        let f = spec.domEventObservers[type];
        if (f)
          record(type).observers.push(bindHandler(plugin2.value, f));
      }
  }
  for (let type in handlers)
    record(type).handlers.push(handlers[type]);
  for (let type in observers)
    record(type).observers.push(observers[type]);
  return result;
}
var PendingKeys = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
];
var EmacsyPendingKeys = "dthko";
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var dragScrollMargin = 6;
function dragScrollSpeed(dist2) {
  return Math.max(0, dist2) * 0.7 + 8;
}
function dist(a, b) {
  return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
}
var MouseSelection = class {
  constructor(view, startEvent, style, mustSelect) {
    this.view = view;
    this.startEvent = startEvent;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = { x: 0, y: 0 };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParent = scrollableParent(view.contentDOM);
    this.atoms = view.state.facet(atomicRanges).map((f) => f(view));
    let doc2 = view.contentDOM.ownerDocument;
    doc2.addEventListener("mousemove", this.move = this.move.bind(this));
    doc2.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  start(event) {
    if (this.dragging === false)
      this.select(event);
  }
  move(event) {
    var _a2;
    if (event.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
      return;
    this.select(this.lastEvent = event);
    let sx = 0, sy = 0;
    let rect = ((_a2 = this.scrollParent) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
    let margins = getScrollMargins(this.view);
    if (event.clientX - margins.left <= rect.left + dragScrollMargin)
      sx = -dragScrollSpeed(rect.left - event.clientX);
    else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
      sx = dragScrollSpeed(event.clientX - rect.right);
    if (event.clientY - margins.top <= rect.top + dragScrollMargin)
      sy = -dragScrollSpeed(rect.top - event.clientY);
    else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
      sy = dragScrollSpeed(event.clientY - rect.bottom);
    this.setScrollSpeed(sx, sy);
  }
  up(event) {
    if (this.dragging == null)
      this.select(this.lastEvent);
    if (!this.dragging)
      event.preventDefault();
    this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let doc2 = this.view.contentDOM.ownerDocument;
    doc2.removeEventListener("mousemove", this.move);
    doc2.removeEventListener("mouseup", this.up);
    this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(sx, sy) {
    this.scrollSpeed = { x: sx, y: sy };
    if (sx || sy) {
      if (this.scrolling < 0)
        this.scrolling = setInterval(() => this.scroll(), 50);
    } else if (this.scrolling > -1) {
      clearInterval(this.scrolling);
      this.scrolling = -1;
    }
  }
  scroll() {
    if (this.scrollParent) {
      this.scrollParent.scrollLeft += this.scrollSpeed.x;
      this.scrollParent.scrollTop += this.scrollSpeed.y;
    } else {
      this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
    }
    if (this.dragging === false)
      this.select(this.lastEvent);
  }
  skipAtoms(sel) {
    let ranges = null;
    for (let i = 0; i < sel.ranges.length; i++) {
      let range = sel.ranges[i], updated = null;
      if (range.empty) {
        let pos = skipAtomicRanges(this.atoms, range.from, 0);
        if (pos != range.from)
          updated = EditorSelection.cursor(pos, -1);
      } else {
        let from = skipAtomicRanges(this.atoms, range.from, -1);
        let to = skipAtomicRanges(this.atoms, range.to, 1);
        if (from != range.from || to != range.to)
          updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
      }
      if (updated) {
        if (!ranges)
          ranges = sel.ranges.slice();
        ranges[i] = updated;
      }
    }
    return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
  }
  select(event) {
    let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
    if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
      this.view.dispatch({
        selection,
        userEvent: "select.pointer"
      });
    this.mustSelect = false;
  }
  update(update) {
    if (this.style.update(update))
      setTimeout(() => this.select(this.lastEvent), 20);
  }
};
function addsSelectionRange(view, event) {
  let facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  let facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  let { main } = view.state.selection;
  if (main.empty)
    return false;
  let sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0)
    return true;
  let rects = sel.getRangeAt(0).getClientRects();
  for (let i = 0; i < rects.length; i++) {
    let rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
      return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
    if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
      return false;
  return true;
}
var handlers = /* @__PURE__ */ Object.create(null);
var observers = /* @__PURE__ */ Object.create(null);
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function doPaste(view, input) {
  let { state } = view, changes, i = 1, text = state.toText(input);
  let byLine = text.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r) => r.empty) && lastLinewiseCopy == text.toString();
  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange((range) => {
      let line = state.doc.lineAt(range.from);
      if (line.from == lastLine)
        return { range };
      lastLine = line.from;
      let insert2 = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: { from: line.from, insert: insert2 },
        range: EditorSelection.cursor(range.from + insert2.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange((range) => {
      let line = text.line(i++);
      return {
        changes: { from: range.from, to: range.to, insert: line.text },
        range: EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
observers.scroll = (view) => {
  view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
  view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
};
handlers.keydown = (view, event) => {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27)
    view.inputState.lastEscPress = Date.now();
  return false;
};
observers.touchstart = (view, e) => {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};
observers.touchmove = (view) => {
  view.inputState.setSelectionOrigin("select.pointer");
};
handlers.mousedown = (view, event) => {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2e3)
    return false;
  let style = null;
  for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
    style = makeStyle(view, event);
    if (style)
      break;
  }
  if (!style && event.button == 0)
    style = basicMouseSelection(view, event);
  if (style) {
    let mustFocus = !view.hasFocus;
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    if (mustFocus)
      view.observer.ignore(() => focusPreventScroll(view.contentDOM));
    let mouseSel = view.inputState.mouseSelection;
    if (mouseSel) {
      mouseSel.start(event);
      return mouseSel.dragging === false;
    }
  }
  return false;
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    return EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    return groupAt(view.state, pos, bias);
  } else {
    let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to)
      to++;
    return EditorSelection.range(from, to);
  }
}
var insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
var inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
function findPositionSide(view, pos, x, y) {
  let line = LineView.find(view.docView, pos);
  if (!line)
    return 1;
  let off = pos - line.posAtStart;
  if (off == 0)
    return 1;
  if (off == line.length)
    return -1;
  let before = line.coordsAt(off, -1);
  if (before && inside(x, y, before))
    return -1;
  let after = line.coordsAt(off, 1);
  if (after && inside(x, y, after))
    return 1;
  return before && insideY(y, before) ? -1 : 1;
}
function queryPos(view, event) {
  let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null;
var lastMouseDownCount = 0;
var lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail)
    return event.detail;
  let last = lastMouseDown, lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  let start = queryPos(view, event), type = getClickType(event);
  let startSel = view.state.selection;
  return {
    update(update) {
      if (update.docChanged) {
        start.pos = update.changes.mapPos(start.pos);
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, extend2, multiple) {
      let cur2 = queryPos(view, event2), removed;
      let range = rangeForClick(view, cur2.pos, cur2.bias, type);
      if (start.pos != cur2.pos && !extend2) {
        let startRange = rangeForClick(view, start.pos, start.bias, type);
        let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
        range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
      }
      if (extend2)
        return startSel.replaceRange(startSel.main.extend(range.from, range.to));
      else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
        return removed;
      else if (multiple)
        return startSel.addRange(range);
      else
        return EditorSelection.create([range]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (let i = 0; i < sel.ranges.length; i++) {
    let { from, to } = sel.ranges[i];
    if (from <= pos && to >= pos)
      return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
  return null;
}
handlers.dragstart = (view, event) => {
  let { selection: { main: range } } = view.state;
  if (event.target.draggable) {
    let cView = view.docView.nearest(event.target);
    if (cView && cView.isWidget) {
      let from = cView.posAtStart, to = from + cView.length;
      if (from >= range.to || to <= range.from)
        range = EditorSelection.range(from, to);
    }
  }
  let { inputState } = view;
  if (inputState.mouseSelection)
    inputState.mouseSelection.dragging = true;
  inputState.draggedContent = range;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(range.from, range.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
  return false;
};
handlers.dragend = (view) => {
  view.inputState.draggedContent = null;
  return false;
};
function dropText(view, event, text, direct) {
  if (!text)
    return;
  let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let { draggedContent } = view.inputState;
  let del = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
  let ins = { from: dropPos, insert: text };
  let changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes,
    selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
    userEvent: del ? "move.drop" : "input.drop"
  });
  view.inputState.draggedContent = null;
}
handlers.drop = (view, event) => {
  if (!event.dataTransfer)
    return false;
  if (view.state.readOnly)
    return true;
  let files = event.dataTransfer.files;
  if (files && files.length) {
    let text = Array(files.length), read = 0;
    let finishFile = () => {
      if (++read == files.length)
        dropText(view, event, text.filter((s) => s != null).join(view.state.lineBreak), false);
    };
    for (let i = 0; i < files.length; i++) {
      let reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = () => {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
          text[i] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i]);
    }
    return true;
  } else {
    let text = event.dataTransfer.getData("Text");
    if (text) {
      dropText(view, event, text, true);
      return true;
    }
  }
  return false;
};
handlers.paste = (view, event) => {
  if (view.state.readOnly)
    return true;
  view.observer.flush();
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
    return true;
  } else {
    capturePaste(view);
    return false;
  }
};
function captureCopy(view, text) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  let content2 = [], ranges = [], linewise = false;
  for (let range of state.selection.ranges)
    if (!range.empty) {
      content2.push(state.sliceDoc(range.from, range.to));
      ranges.push(range);
    }
  if (!content2.length) {
    let upto = -1;
    for (let { from } of state.selection.ranges) {
      let line = state.doc.lineAt(from);
      if (line.number > upto) {
        content2.push(line.text);
        ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
      }
      upto = line.number;
    }
    linewise = true;
  }
  return { text: content2.join(state.lineBreak), ranges, linewise };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = (view, event) => {
  let { text, ranges, linewise } = copiedRange(view.state);
  if (!text && !linewise)
    return false;
  lastLinewiseCopy = linewise ? text : null;
  if (event.type == "cut" && !view.state.readOnly)
    view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    data.clearData();
    data.setData("text/plain", text);
    return true;
  } else {
    captureCopy(view, text);
    return false;
  }
};
var isFocusChange = Annotation.define();
function focusChangeTransaction(state, focus) {
  let effects = [];
  for (let getEffect of state.facet(focusChangeEffect)) {
    let effect = getEffect(state, focus);
    if (effect)
      effects.push(effect);
  }
  return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
}
function updateForFocusChange(view) {
  setTimeout(() => {
    let focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      let tr = focusChangeTransaction(view.state, focus);
      if (tr)
        view.dispatch(tr);
      else
        view.update([]);
    }
  }, 10);
}
observers.focus = (view) => {
  view.inputState.lastFocusTime = Date.now();
  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }
  updateForFocusChange(view);
};
observers.blur = (view) => {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};
observers.compositionstart = observers.compositionupdate = (view) => {
  if (view.inputState.compositionFirstChange == null)
    view.inputState.compositionFirstChange = true;
  if (view.inputState.composing < 0) {
    view.inputState.composing = 0;
  }
};
observers.compositionend = (view) => {
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionPendingKey = true;
  view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
  view.inputState.compositionFirstChange = null;
  if (browser.chrome && browser.android) {
    view.observer.flushSoon();
  } else if (view.inputState.compositionPendingChange) {
    Promise.resolve().then(() => view.observer.flush());
  } else {
    setTimeout(() => {
      if (view.inputState.composing < 0 && view.docView.hasComposition)
        view.update([]);
    }, 50);
  }
};
observers.contextmenu = (view) => {
  view.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = (view, event) => {
  var _a2;
  let pending;
  if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      let startViewHeight = ((_a2 = window.visualViewport) === null || _a2 === void 0 ? void 0 : _a2.height) || 0;
      setTimeout(() => {
        var _a3;
        if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
  if (browser.ios && event.inputType == "deleteContentForward") {
    view.observer.flushSoon();
  }
  if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
    setTimeout(() => observers.compositionend(view, event), 20);
  }
  return false;
};
var appliedFirefoxHack = /* @__PURE__ */ new Set();
function firefoxCopyCutHack(doc2) {
  if (!appliedFirefoxHack.has(doc2)) {
    appliedFirefoxHack.add(doc2);
    doc2.addEventListener("copy", () => {
    });
    doc2.addEventListener("cut", () => {
    });
  }
}
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var HeightOracle = class {
  constructor(lineWrapping) {
    this.lineWrapping = lineWrapping;
    this.doc = Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.textHeight = 14;
    this.lineLength = 30;
    this.heightChanged = false;
  }
  heightForGap(from, to) {
    let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
    if (this.lineWrapping)
      lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
    return this.lineHeight * lines;
  }
  heightForLine(length) {
    if (!this.lineWrapping)
      return this.lineHeight;
    let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
    return lines * this.lineHeight;
  }
  setDoc(doc2) {
    this.doc = doc2;
    return this;
  }
  mustRefreshForWrapping(whiteSpace) {
    return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(lineHeights) {
    let newHeight = false;
    for (let i = 0; i < lineHeights.length; i++) {
      let h = lineHeights[i];
      if (h < 0) {
        i++;
      } else if (!this.heightSamples[Math.floor(h * 10)]) {
        newHeight = true;
        this.heightSamples[Math.floor(h * 10)] = true;
      }
    }
    return newHeight;
  }
  refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
    let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
    let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
    this.lineWrapping = lineWrapping;
    this.lineHeight = lineHeight;
    this.charWidth = charWidth;
    this.textHeight = textHeight;
    this.lineLength = lineLength;
    if (changed) {
      this.heightSamples = {};
      for (let i = 0; i < knownHeights.length; i++) {
        let h = knownHeights[i];
        if (h < 0)
          i++;
        else
          this.heightSamples[Math.floor(h * 10)] = true;
      }
    }
    return changed;
  }
};
var MeasuredHeights = class {
  constructor(from, heights) {
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
};
var BlockInfo = class _BlockInfo {
  /**
  @internal
  */
  constructor(from, length, top2, height, _content) {
    this.from = from;
    this.length = length;
    this.top = top2;
    this.height = height;
    this._content = _content;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof PointDecoration ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(other) {
    let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
    return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
  }
};
var QueryType = function(QueryType3) {
  QueryType3[QueryType3["ByPos"] = 0] = "ByPos";
  QueryType3[QueryType3["ByHeight"] = 1] = "ByHeight";
  QueryType3[QueryType3["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType3;
}(QueryType || (QueryType = {}));
var Epsilon = 1e-3;
var HeightMap = class _HeightMap {
  constructor(length, height, flags = 2) {
    this.length = length;
    this.height = height;
    this.flags = flags;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(value) {
    this.flags = (value ? 2 : 0) | this.flags & ~2;
  }
  setHeight(oracle, height) {
    if (this.height != height) {
      if (Math.abs(this.height - height) > Epsilon)
        oracle.heightChanged = true;
      this.height = height;
    }
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(_from, _to, nodes) {
    return _HeightMap.of(nodes);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(_to, result) {
    result.push(this);
  }
  decomposeRight(_from, result) {
    result.push(this);
  }
  applyChanges(decorations2, oldDoc, oracle, changes) {
    let me = this, doc2 = oracle.doc;
    for (let i = changes.length - 1; i >= 0; i--) {
      let { fromA, toA, fromB, toB } = changes[i];
      let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
      let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
      toB += end.to - toA;
      toA = end.to;
      while (i > 0 && start.from <= changes[i - 1].toA) {
        fromA = changes[i - 1].fromA;
        fromB = changes[i - 1].fromB;
        i--;
        if (fromA < start.from)
          start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
      }
      fromB += start.from - fromA;
      fromA = start.from;
      let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
      me = me.replace(fromA, toA, nodes);
    }
    return me.updateHeight(oracle, 0);
  }
  static empty() {
    return new HeightMapText(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(nodes) {
    if (nodes.length == 1)
      return nodes[0];
    let i = 0, j = nodes.length, before = 0, after = 0;
    for (; ; ) {
      if (i == j) {
        if (before > after * 2) {
          let split = nodes[i - 1];
          if (split.break)
            nodes.splice(--i, 1, split.left, null, split.right);
          else
            nodes.splice(--i, 1, split.left, split.right);
          j += 1 + split.break;
          before -= split.size;
        } else if (after > before * 2) {
          let split = nodes[j];
          if (split.break)
            nodes.splice(j, 1, split.left, null, split.right);
          else
            nodes.splice(j, 1, split.left, split.right);
          j += 2 + split.break;
          after -= split.size;
        } else {
          break;
        }
      } else if (before < after) {
        let next = nodes[i++];
        if (next)
          before += next.size;
      } else {
        let next = nodes[--j];
        if (next)
          after += next.size;
      }
    }
    let brk = 0;
    if (nodes[i - 1] == null) {
      brk = 1;
      i--;
    } else if (nodes[i] == null) {
      brk = 1;
      j++;
    }
    return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i)), brk, _HeightMap.of(nodes.slice(j)));
  }
};
HeightMap.prototype.size = 1;
var HeightMapBlock = class extends HeightMap {
  constructor(length, height, deco) {
    super(length, height);
    this.deco = deco;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
  }
  lineAt(_value, _type, oracle, top2, offset) {
    return this.blockAt(0, oracle, top2, offset);
  }
  forEachLine(from, to, oracle, top2, offset, f) {
    if (from <= offset + this.length && to >= offset)
      f(this.blockAt(0, oracle, top2, offset));
  }
  updateHeight(oracle, offset = 0, _force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(oracle, measured.heights[measured.index++]);
    this.outdated = false;
    return this;
  }
  toString() {
    return `block(${this.length})`;
  }
};
var HeightMapText = class _HeightMapText extends HeightMapBlock {
  constructor(length, height) {
    super(length, height, null);
    this.collapsed = 0;
    this.widgetHeight = 0;
    this.breaks = 0;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
  }
  replace(_from, _to, nodes) {
    let node = nodes[0];
    if (nodes.length == 1 && (node instanceof _HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
      if (node instanceof HeightMapGap)
        node = new _HeightMapText(node.length, this.height);
      else
        node.height = this.height;
      if (!this.outdated)
        node.outdated = false;
      return node;
    } else {
      return HeightMap.of(nodes);
    }
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(oracle, measured.heights[measured.index++]);
    else if (force || this.outdated)
      this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
    this.outdated = false;
    return this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
};
var HeightMapGap = class _HeightMapGap extends HeightMap {
  constructor(length) {
    super(length, 0);
  }
  heightMetrics(oracle, offset) {
    let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
    let lines = lastLine - firstLine + 1;
    let perLine, perChar = 0;
    if (oracle.lineWrapping) {
      let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
      perLine = totalPerLine / lines;
      if (this.length > lines + 1)
        perChar = (this.height - totalPerLine) / (this.length - lines - 1);
    } else {
      perLine = this.height / lines;
    }
    return { firstLine, lastLine, perLine, perChar };
  }
  blockAt(height, oracle, top2, offset) {
    let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    if (oracle.lineWrapping) {
      let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
      let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
      let lineTop = Math.max(top2, height - lineHeight / 2);
      return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
    } else {
      let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
      let { from, length } = oracle.doc.line(firstLine + line);
      return new BlockInfo(from, length, top2 + perLine * line, perLine, 0);
    }
  }
  lineAt(value, type, oracle, top2, offset) {
    if (type == QueryType.ByHeight)
      return this.blockAt(value, oracle, top2, offset);
    if (type == QueryType.ByPosNoHeight) {
      let { from, to } = oracle.doc.lineAt(value);
      return new BlockInfo(from, to - from, 0, 0, 0);
    }
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
    let linesAbove = line.number - firstLine;
    let lineTop = top2 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
    return new BlockInfo(line.from, line.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
  }
  forEachLine(from, to, oracle, top2, offset, f) {
    from = Math.max(from, offset);
    to = Math.min(to, offset + this.length);
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    for (let pos = from, lineTop = top2; pos <= to; ) {
      let line = oracle.doc.lineAt(pos);
      if (pos == from) {
        let linesAbove = line.number - firstLine;
        lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
      }
      let lineHeight = perLine + perChar * line.length;
      f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
      lineTop += lineHeight;
      pos = line.to + 1;
    }
  }
  replace(from, to, nodes) {
    let after = this.length - to;
    if (after > 0) {
      let last = nodes[nodes.length - 1];
      if (last instanceof _HeightMapGap)
        nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
      else
        nodes.push(null, new _HeightMapGap(after - 1));
    }
    if (from > 0) {
      let first = nodes[0];
      if (first instanceof _HeightMapGap)
        nodes[0] = new _HeightMapGap(from + first.length);
      else
        nodes.unshift(new _HeightMapGap(from - 1), null);
    }
    return HeightMap.of(nodes);
  }
  decomposeLeft(to, result) {
    result.push(new _HeightMapGap(to - 1), null);
  }
  decomposeRight(from, result) {
    result.push(null, new _HeightMapGap(this.length - from - 1));
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let end = offset + this.length;
    if (measured && measured.from <= offset + this.length && measured.more) {
      let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
      if (measured.from > offset)
        nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
      while (pos <= end && measured.more) {
        let len = oracle.doc.lineAt(pos).length;
        if (nodes.length)
          nodes.push(null);
        let height = measured.heights[measured.index++];
        if (singleHeight == -1)
          singleHeight = height;
        else if (Math.abs(height - singleHeight) >= Epsilon)
          singleHeight = -2;
        let line = new HeightMapText(len, height);
        line.outdated = false;
        nodes.push(line);
        pos += len + 1;
      }
      if (pos <= end)
        nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
      let result = HeightMap.of(nodes);
      if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
        oracle.heightChanged = true;
      return result;
    } else if (force || this.outdated) {
      this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
      this.outdated = false;
    }
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
};
var HeightMapBranch = class extends HeightMap {
  constructor(left, brk, right) {
    super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
    this.left = left;
    this.right = right;
    this.size = left.size + right.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(height, oracle, top2, offset) {
    let mid = top2 + this.left.height;
    return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
  }
  lineAt(value, type, oracle, top2, offset) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
    let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
    if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
      return base2;
    let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
    if (left)
      return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
    else
      return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
  }
  forEachLine(from, to, oracle, top2, offset, f) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    if (this.break) {
      if (from < rightOffset)
        this.left.forEachLine(from, to, oracle, top2, offset, f);
      if (to >= rightOffset)
        this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
    } else {
      let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
      if (from < mid.from)
        this.left.forEachLine(from, mid.from - 1, oracle, top2, offset, f);
      if (mid.to >= from && mid.from <= to)
        f(mid);
      if (to > mid.to)
        this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
    }
  }
  replace(from, to, nodes) {
    let rightStart = this.left.length + this.break;
    if (to < rightStart)
      return this.balanced(this.left.replace(from, to, nodes), this.right);
    if (from > this.left.length)
      return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
    let result = [];
    if (from > 0)
      this.decomposeLeft(from, result);
    let left = result.length;
    for (let node of nodes)
      result.push(node);
    if (from > 0)
      mergeGaps(result, left - 1);
    if (to < this.length) {
      let right = result.length;
      this.decomposeRight(to, result);
      mergeGaps(result, right);
    }
    return HeightMap.of(result);
  }
  decomposeLeft(to, result) {
    let left = this.left.length;
    if (to <= left)
      return this.left.decomposeLeft(to, result);
    result.push(this.left);
    if (this.break) {
      left++;
      if (to >= left)
        result.push(null);
    }
    if (to > left)
      this.right.decomposeLeft(to - left, result);
  }
  decomposeRight(from, result) {
    let left = this.left.length, right = left + this.break;
    if (from >= right)
      return this.right.decomposeRight(from - right, result);
    if (from < left)
      this.left.decomposeRight(from, result);
    if (this.break && from < right)
      result.push(null);
    result.push(this.right);
  }
  balanced(left, right) {
    if (left.size > 2 * right.size || right.size > 2 * left.size)
      return HeightMap.of(this.break ? [left, null, right] : [left, right]);
    this.left = left;
    this.right = right;
    this.height = left.height + right.height;
    this.outdated = left.outdated || right.outdated;
    this.size = left.size + right.size;
    this.length = left.length + this.break + right.length;
    return this;
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
    if (measured && measured.from <= offset + left.length && measured.more)
      rebalance = left = left.updateHeight(oracle, offset, force, measured);
    else
      left.updateHeight(oracle, offset, force);
    if (measured && measured.from <= rightStart + right.length && measured.more)
      rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
    else
      right.updateHeight(oracle, rightStart, force);
    if (rebalance)
      return this.balanced(left, right);
    this.height = this.left.height + this.right.height;
    this.outdated = false;
    return this;
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
};
function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
    nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = class _NodeBuilder {
  constructor(pos, oracle) {
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(_from, to) {
    if (this.lineStart > -1) {
      let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
      if (last instanceof HeightMapText)
        last.length += end - this.pos;
      else if (end > this.pos || !this.isCovered)
        this.nodes.push(new HeightMapText(end - this.pos, -1));
      this.writtenTo = end;
      if (to > end) {
        this.nodes.push(null);
        this.writtenTo++;
        this.lineStart = -1;
      }
    }
    this.pos = to;
  }
  point(from, to, deco) {
    if (from < to || deco.heightRelevant) {
      let height = deco.widget ? deco.widget.estimatedHeight : 0;
      let breaks = deco.widget ? deco.widget.lineBreaks : 0;
      if (height < 0)
        height = this.oracle.lineHeight;
      let len = to - from;
      if (deco.block) {
        this.addBlock(new HeightMapBlock(len, height, deco));
      } else if (len || breaks || height >= relevantWidgetHeight) {
        this.addLineDeco(height, breaks, len);
      }
    } else if (to > from) {
      this.span(from, to);
    }
    if (this.lineEnd > -1 && this.lineEnd < this.pos)
      this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from, to } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = from;
    this.lineEnd = to;
    if (this.writtenTo < from) {
      if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
        this.nodes.push(this.blankContent(this.writtenTo, from - 1));
      this.nodes.push(null);
    }
    if (this.pos > from)
      this.nodes.push(new HeightMapText(this.pos - from, -1));
    this.writtenTo = this.pos;
  }
  blankContent(from, to) {
    let gap = new HeightMapGap(to - from);
    if (this.oracle.doc.lineAt(from).to == to)
      gap.flags |= 4;
    return gap;
  }
  ensureLine() {
    this.enterLine();
    let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (last instanceof HeightMapText)
      return last;
    let line = new HeightMapText(0, -1);
    this.nodes.push(line);
    return line;
  }
  addBlock(block) {
    this.enterLine();
    let deco = block.deco;
    if (deco && deco.startSide > 0 && !this.isCovered)
      this.ensureLine();
    this.nodes.push(block);
    this.writtenTo = this.pos = this.pos + block.length;
    if (deco && deco.endSide > 0)
      this.covering = block;
  }
  addLineDeco(height, breaks, length) {
    let line = this.ensureLine();
    line.length += length;
    line.collapsed += length;
    line.widgetHeight = Math.max(line.widgetHeight, height);
    line.breaks += breaks;
    this.writtenTo = this.pos = this.pos + length;
  }
  finish(from) {
    let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
      this.nodes.push(new HeightMapText(0, -1));
    else if (this.writtenTo < this.pos || last == null)
      this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let pos = from;
    for (let node of this.nodes) {
      if (node instanceof HeightMapText)
        node.updateHeight(this.oracle, pos);
      pos += node ? node.length : 1;
    }
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(oracle, decorations2, from, to) {
    let builder = new _NodeBuilder(from, oracle);
    RangeSet.spans(decorations2, from, to, builder, 0);
    return builder.finish(from);
  }
};
function heightRelevantDecoChanges(a, b, diff) {
  let comp = new DecorationComparator2();
  RangeSet.compare(a, b, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator2 = class {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(from, to, a, b) {
    if (from < to || a && a.heightRelevant || b && b.heightRelevant)
      addRange(from, to, this.changes, 5);
  }
};
function visiblePixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
  let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
  for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
    if (parent.nodeType == 1) {
      let elt = parent;
      let style = window.getComputedStyle(elt);
      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        let parentRect = elt.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top2 = Math.max(top2, parentRect.top);
        bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top2 - (rect.top + paddingTop),
    bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
  };
}
function fullPixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
var LineGap = class {
  constructor(from, to, size) {
    this.from = from;
    this.to = to;
    this.size = size;
  }
  static same(a, b) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      let gA = a[i], gB = b[i];
      if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
        return false;
    }
    return true;
  }
  draw(viewState, wrapping) {
    return Decoration.replace({
      widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
    }).range(this.from, this.to);
  }
};
var LineGapWidget = class extends WidgetType {
  constructor(size, vertical) {
    super();
    this.size = size;
    this.vertical = vertical;
  }
  eq(other) {
    return other.size == this.size && other.vertical == this.vertical;
  }
  toDOM() {
    let elt = document.createElement("div");
    if (this.vertical) {
      elt.style.height = this.size + "px";
    } else {
      elt.style.width = this.size + "px";
      elt.style.height = "2px";
      elt.style.display = "inline-block";
    }
    return elt;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
};
var ViewState = class {
  constructor(state) {
    this.state = state;
    this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.scrollTop = 0;
    this.scrolledToBottom = false;
    this.scaleX = 1;
    this.scaleY = 1;
    this.scrollAnchorPos = 0;
    this.scrollAnchorHeight = -1;
    this.scaler = IdScaler;
    this.scrollTarget = null;
    this.printing = false;
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    this.mustEnforceCursorAssoc = false;
    let guessWrapping = state.facet(contentAttributes).some((v) => typeof v != "function" && v.class == "cm-lineWrapping");
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter((d) => typeof d != "function");
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    this.viewport = this.getViewport(0, null);
    this.updateViewportLines();
    this.updateForViewport();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
    this.computeVisibleRanges();
  }
  updateForViewport() {
    let viewports = [this.viewport], { main } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let pos = i ? main.head : main.anchor;
      if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
        let { from, to } = this.lineBlockAt(pos);
        viewports.push(new Viewport(from, to));
      }
    }
    this.viewports = viewports.sort((a, b) => a.from - b.from);
    this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [];
    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
      this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
    });
  }
  update(update, scrollTarget = null) {
    this.state = update.state;
    let prevDeco = this.stateDeco;
    this.stateDeco = this.state.facet(decorations).filter((d) => typeof d != "function");
    let contentChanges = update.changedRanges;
    let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
    let prevHeight = this.heightMap.height;
    let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
    if (this.heightMap.height != prevHeight)
      update.flags |= 2;
    if (scrollAnchor) {
      this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
      this.scrollAnchorHeight = scrollAnchor.top;
    } else {
      this.scrollAnchorPos = -1;
      this.scrollAnchorHeight = this.heightMap.height;
    }
    let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
    if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
      viewport = this.getViewport(0, scrollTarget);
    let updateLines = !update.changes.empty || update.flags & 2 || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
    this.viewport = viewport;
    this.updateForViewport();
    if (updateLines)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
    update.flags |= this.computeVisibleRanges();
    if (scrollTarget)
      this.scrollTarget = scrollTarget;
    if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
      this.mustEnforceCursorAssoc = true;
  }
  measure(view) {
    let dom = view.contentDOM, style = window.getComputedStyle(dom);
    let oracle = this.heightOracle;
    let whiteSpace = style.whiteSpace;
    this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
    let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
    let domRect = dom.getBoundingClientRect();
    let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
    this.contentDOMHeight = domRect.height;
    this.mustMeasureContent = false;
    let result = 0, bias = 0;
    if (domRect.width && domRect.height) {
      let { scaleX, scaleY } = getScale(dom, domRect);
      if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        result |= 8;
        refresh = measureContent = true;
      }
    }
    let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
    let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
    if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
      this.paddingTop = paddingTop;
      this.paddingBottom = paddingBottom;
      result |= 8 | 2;
    }
    if (this.editorWidth != view.scrollDOM.clientWidth) {
      if (oracle.lineWrapping)
        measureContent = true;
      this.editorWidth = view.scrollDOM.clientWidth;
      result |= 8;
    }
    let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
    if (this.scrollTop != scrollTop) {
      this.scrollAnchorHeight = -1;
      this.scrollTop = scrollTop;
    }
    this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
    let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
    let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
    this.pixelViewport = pixelViewport;
    let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (inView != this.inView) {
      this.inView = inView;
      if (inView)
        measureContent = true;
    }
    if (!this.inView && !this.scrollTarget)
      return 0;
    let contentWidth = domRect.width;
    if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
      this.contentDOMWidth = domRect.width;
      this.editorHeight = view.scrollDOM.clientHeight;
      result |= 8;
    }
    if (measureContent) {
      let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
      if (oracle.mustRefreshForHeights(lineHeights))
        refresh = true;
      if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
        let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
        refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
        if (refresh) {
          view.docView.minWidth = 0;
          result |= 8;
        }
      }
      if (dTop > 0 && dBottom > 0)
        bias = Math.max(dTop, dBottom);
      else if (dTop < 0 && dBottom < 0)
        bias = Math.min(dTop, dBottom);
      oracle.heightChanged = false;
      for (let vp of this.viewports) {
        let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
        this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
      }
      if (oracle.heightChanged)
        result |= 2;
    }
    let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    if (viewportChange)
      this.viewport = this.getViewport(bias, this.scrollTarget);
    this.updateForViewport();
    if (result & 2 || viewportChange)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
    result |= this.computeVisibleRanges();
    if (this.mustEnforceCursorAssoc) {
      this.mustEnforceCursorAssoc = false;
      view.docView.enforceCursorAssoc();
    }
    return result;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(bias, scrollTarget) {
    let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
    let map = this.heightMap, oracle = this.heightOracle;
    let { visibleTop, visibleBottom } = this;
    let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
    if (scrollTarget) {
      let { head } = scrollTarget.range;
      if (head < viewport.from || head > viewport.to) {
        let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
        let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
        if (scrollTarget.y == "center")
          topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
        else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
          topPos = block.top;
        else
          topPos = block.bottom - viewHeight;
        viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
      }
    }
    return viewport;
  }
  mapViewport(viewport, changes) {
    let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
    return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from, to }, bias = 0) {
    if (!this.inView)
      return true;
    let { top: top2 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
    let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
    let { visibleTop, visibleBottom } = this;
    return (from == 0 || top2 <= visibleTop - Math.max(10, Math.min(
      -bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
      bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
  }
  mapLineGaps(gaps, changes) {
    if (!gaps.length || changes.empty)
      return gaps;
    let mapped = [];
    for (let gap of gaps)
      if (!changes.touchesRange(gap.from, gap.to))
        mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
    return mapped;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(current, mayMeasure) {
    let wrapping = this.heightOracle.lineWrapping;
    let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
    if (this.defaultTextDirection != Direction.LTR && !wrapping)
      return [];
    let gaps = [];
    let addGap = (from, to, line, structure) => {
      if (to - from < halfMargin)
        return;
      let sel = this.state.selection.main, avoid = [sel.from];
      if (!sel.empty)
        avoid.push(sel.to);
      for (let pos of avoid) {
        if (pos > from && pos < to) {
          addGap(from, pos - 10, line, structure);
          addGap(pos + 10, to, line, structure);
          return;
        }
      }
      let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
      if (!gap) {
        if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r) => r.from <= to && r.to >= to)) {
          let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
          if (lineStart > from)
            to = lineStart;
        }
        gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
      }
      gaps.push(gap);
    };
    for (let line of this.viewportLines) {
      if (line.length < doubleMargin)
        continue;
      let structure = lineStructure(line.from, line.to, this.stateDeco);
      if (structure.total < doubleMargin)
        continue;
      let target = this.scrollTarget ? this.scrollTarget.range.head : null;
      let viewFrom, viewTo;
      if (wrapping) {
        let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        let top2, bot;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
          top2 = targetFrac - spaceFrac;
          bot = targetFrac + spaceFrac;
        } else {
          top2 = (this.visibleTop - line.top - marginHeight) / line.height;
          bot = (this.visibleBottom - line.top + marginHeight) / line.height;
        }
        viewFrom = findPosition(structure, top2);
        viewTo = findPosition(structure, bot);
      } else {
        let totalWidth = structure.total * this.heightOracle.charWidth;
        let marginWidth = margin * this.heightOracle.charWidth;
        let left, right;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
          left = targetFrac - spaceFrac;
          right = targetFrac + spaceFrac;
        } else {
          left = (this.pixelViewport.left - marginWidth) / totalWidth;
          right = (this.pixelViewport.right + marginWidth) / totalWidth;
        }
        viewFrom = findPosition(structure, left);
        viewTo = findPosition(structure, right);
      }
      if (viewFrom > line.from)
        addGap(line.from, viewFrom, line, structure);
      if (viewTo < line.to)
        addGap(viewTo, line.to, line, structure);
    }
    return gaps;
  }
  gapSize(line, from, to, structure) {
    let fraction = findFraction(structure, to) - findFraction(structure, from);
    if (this.heightOracle.lineWrapping) {
      return line.height * fraction;
    } else {
      return structure.total * this.heightOracle.charWidth * fraction;
    }
  }
  updateLineGaps(gaps) {
    if (!LineGap.same(gaps, this.lineGaps)) {
      this.lineGaps = gaps;
      this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
    }
  }
  computeVisibleRanges() {
    let deco = this.stateDeco;
    if (this.lineGaps.length)
      deco = deco.concat(this.lineGapDeco);
    let ranges = [];
    RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
      span(from, to) {
        ranges.push({ from, to });
      },
      point() {
      }
    }, 20);
    let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
    this.visibleRanges = ranges;
    return changed ? 4 : 0;
  }
  lineBlockAt(pos) {
    return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(height) {
    return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(scrollTop) {
    let block = this.lineBlockAtHeight(scrollTop + 8);
    return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
  }
  elementAtHeight(height) {
    return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
};
var Viewport = class {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }
};
function lineStructure(from, to, stateDeco) {
  let ranges = [], pos = from, total = 0;
  RangeSet.spans(stateDeco, from, to, {
    span() {
    },
    point(from2, to2) {
      if (from2 > pos) {
        ranges.push({ from: pos, to: from2 });
        total += from2 - pos;
      }
      pos = to2;
    }
  }, 20);
  if (pos < to) {
    ranges.push({ from: pos, to });
    total += to - pos;
  }
  return { total, ranges };
}
function findPosition({ total, ranges }, ratio) {
  if (ratio <= 0)
    return ranges[0].from;
  if (ratio >= 1)
    return ranges[ranges.length - 1].to;
  let dist2 = Math.floor(total * ratio);
  for (let i = 0; ; i++) {
    let { from, to } = ranges[i], size = to - from;
    if (dist2 <= size)
      return from + dist2;
    dist2 -= size;
  }
}
function findFraction(structure, pos) {
  let counted = 0;
  for (let { from, to } of structure.ranges) {
    if (pos <= to) {
      counted += pos - from;
      break;
    }
    counted += to - from;
  }
  return counted / structure.total;
}
function find(array, f) {
  for (let val of array)
    if (f(val))
      return val;
  return void 0;
}
var IdScaler = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1
};
var BigScaler = class {
  constructor(oracle, heightMap, viewports) {
    let vpHeight = 0, base2 = 0, domBase = 0;
    this.viewports = viewports.map(({ from, to }) => {
      let top2 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
      let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom - top2;
      return { from, to, top: top2, bottom, domTop: 0, domBottom: 0 };
    });
    this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
    for (let obj of this.viewports) {
      obj.domTop = domBase + (obj.top - base2) * this.scale;
      domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
      base2 = obj.bottom;
    }
  }
  toDOM(n) {
    for (let i = 0, base2 = 0, domBase = 0; ; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n < vp.top)
        return domBase + (n - base2) * this.scale;
      if (n <= vp.bottom)
        return vp.domTop + (n - vp.top);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
  fromDOM(n) {
    for (let i = 0, base2 = 0, domBase = 0; ; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n < vp.domTop)
        return base2 + (n - domBase) / this.scale;
      if (n <= vp.domBottom)
        return vp.top + (n - vp.domTop);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
};
function scaleBlock(block, scaler) {
  if (scaler.scale == 1)
    return block;
  let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b) => scaleBlock(b, scaler)) : block._content);
}
var theme = Facet.define({ combine: (strs) => strs.join(" ") });
var darkTheme = Facet.define({ combine: (values) => values.indexOf(true) > -1 });
var baseThemeID = StyleModule.newName();
var baseLightID = StyleModule.newName();
var baseDarkID = StyleModule.newName();
var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
function buildTheme(main, spec, scopes) {
  return new StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, (m) => {
        if (m == "&")
          return main;
        if (!scopes || !scopes[m])
          throw new RangeError(`Unsupported selector: ${m}`);
        return scopes[m];
      }) : main + " " + sel;
    }
  });
}
var baseTheme$1 = buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var LineBreakPlaceholder = "￿";
var DOMReader = class {
  constructor(points, state) {
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(EditorState.lineSeparator);
  }
  append(text) {
    this.text += text;
  }
  lineBreak() {
    this.text += LineBreakPlaceholder;
  }
  readRange(start, end) {
    if (!start)
      return this;
    let parent = start.parentNode;
    for (let cur2 = start; ; ) {
      this.findPointBefore(parent, cur2);
      let oldLen = this.text.length;
      this.readNode(cur2);
      let next = cur2.nextSibling;
      if (next == end)
        break;
      let view = ContentView.get(cur2), nextView = ContentView.get(next);
      if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
        this.lineBreak();
      cur2 = next;
    }
    this.findPointBefore(parent, end);
    return this;
  }
  readTextNode(node) {
    let text = node.nodeValue;
    for (let point of this.points)
      if (point.node == node)
        point.pos = this.text.length + Math.min(point.offset, text.length);
    for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let nextBreak = -1, breakSize = 1, m;
      if (this.lineSeparator) {
        nextBreak = text.indexOf(this.lineSeparator, off);
        breakSize = this.lineSeparator.length;
      } else if (m = re.exec(text)) {
        nextBreak = m.index;
        breakSize = m[0].length;
      }
      this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
      if (nextBreak < 0)
        break;
      this.lineBreak();
      if (breakSize > 1) {
        for (let point of this.points)
          if (point.node == node && point.pos > this.text.length)
            point.pos -= breakSize - 1;
      }
      off = nextBreak + breakSize;
    }
  }
  readNode(node) {
    if (node.cmIgnore)
      return;
    let view = ContentView.get(node);
    let fromView = view && view.overrideDOMText;
    if (fromView != null) {
      this.findPointInside(node, fromView.length);
      for (let i = fromView.iter(); !i.next().done; ) {
        if (i.lineBreak)
          this.lineBreak();
        else
          this.append(i.value);
      }
    } else if (node.nodeType == 3) {
      this.readTextNode(node);
    } else if (node.nodeName == "BR") {
      if (node.nextSibling)
        this.lineBreak();
    } else if (node.nodeType == 1) {
      this.readRange(node.firstChild, null);
    }
  }
  findPointBefore(node, next) {
    for (let point of this.points)
      if (point.node == node && node.childNodes[point.offset] == next)
        point.pos = this.text.length;
  }
  findPointInside(node, length) {
    for (let point of this.points)
      if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
        point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
  }
};
function isAtEnd(parent, node, offset) {
  for (; ; ) {
    if (!node || offset < maxOffset(node))
      return false;
    if (node == parent)
      return true;
    offset = domIndex(node) + 1;
    node = node.parentNode;
  }
}
var DOMPoint = class {
  constructor(node, offset) {
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  }
};
var DOMChange = class {
  constructor(view, start, end, typeOver) {
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
    if (view.state.readOnly && start > -1) {
      this.newSel = null;
    } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
      let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
      let reader = new DOMReader(selPoints, view.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      let domSel = view.observer.selectionRange;
      let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      let vp = view.viewport;
      if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
        let from = Math.min(head, anchor), to = Math.max(head, anchor);
        let offFrom = vp.from - from, offTo = vp.to - to;
        if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
          head = 0;
          anchor = view.state.doc.length;
        }
      }
      this.newSel = EditorSelection.single(anchor, head);
    }
  }
};
function applyDOMChange(view, domChange) {
  let change;
  let { newSel } = domChange, sel = view.state.selection.main;
  let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    let { from, to } = domChange.bounds;
    let preferredPos = sel.from, preferredSide = null;
    if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
    if (diff) {
      if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
        diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel)
    return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    if (newSel && change.insert.length == 2)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    if (newSel)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  }
  if (change) {
    if (browser.ios && view.inputState.flushIOSKey(change))
      return true;
    if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
    // after a completion when you press enter
    (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
      return true;
    let text = change.insert.toString();
    if (view.inputState.composing >= 0)
      view.inputState.composing++;
    let defaultTr;
    let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
    if (!view.state.facet(inputHandler).some((h) => h(view, change.from, change.to, text, defaultInsert)))
      view.dispatch(defaultInsert());
    return true;
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView3 = false, userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select")
        scrollIntoView3 = true;
      userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView3, userEvent });
    return true;
  } else {
    return false;
  }
}
function applyDefaultInsert(view, change, newSel) {
  let tr, startState = view.state, sel = startState.selection.main;
  if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
    let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
    let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
    tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
  } else {
    let changes = startState.changes(change);
    let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
    if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
      let replaced = view.state.sliceDoc(change.from, change.to);
      let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
      if (composition) {
        let dLen = change.insert.length - (change.to - change.from);
        compositionRange = { from: composition.from, to: composition.to - dLen };
      } else {
        compositionRange = view.state.doc.lineAt(sel.head);
      }
      let offset = sel.to - change.to, size = sel.to - sel.from;
      tr = startState.changeByRange((range) => {
        if (range.from == sel.from && range.to == sel.to)
          return { changes, range: mainSel || range.map(changes) };
        let to = range.to - offset, from = to - replaced.length;
        if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        range.to >= compositionRange.from && range.from <= compositionRange.to)
          return { range };
        let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
        return {
          changes: rangeChanges,
          range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
        };
      });
    } else {
      tr = {
        changes,
        selection: mainSel && startState.selection.replaceRange(mainSel)
      };
    }
  }
  let userEvent = "input.type";
  if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
    view.inputState.compositionPendingChange = false;
    userEvent += ".compose";
    if (view.inputState.compositionFirstChange) {
      userEvent += ".start";
      view.inputState.compositionFirstChange = false;
    }
  }
  return startState.update(tr, { userEvent, scrollIntoView: true });
}
function findDiff(a, b, preferredPos, preferredSide) {
  let minLen = Math.min(a.length, b.length);
  let from = 0;
  while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
    from++;
  if (from == minLen && a.length == b.length)
    return null;
  let toA = a.length, toB = b.length;
  while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    let adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a.length < b.length) {
    let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= move;
    toA = from + (toA - toB);
    toB = from;
  }
  return { from, toA, toB };
}
function selectionPoints(view) {
  let result = [];
  if (view.root.activeElement != view.contentDOM)
    return result;
  let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset)
      result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base2) {
  if (points.length == 0)
    return null;
  let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
}
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = class {
  constructor(view) {
    this.view = view;
    this.active = false;
    this.selectionRange = new DOMSelectionState();
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    this.printQuery = null;
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver((mutations) => {
      for (let mut of mutations)
        this.queue.push(mut);
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (useCharData)
      this.onCharData = (event) => {
        this.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        this.flushSoon();
      };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (window.matchMedia)
      this.printQuery = window.matchMedia("print");
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(() => {
        var _a2;
        if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
          this.onResize();
      });
      this.resizeScroll.observe(view.scrollDOM);
    }
    this.addWindowListeners(this.win = view.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver((entries) => {
        if (this.parentCheck < 0)
          this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
          this.intersecting = !this.intersecting;
          if (this.intersecting != this.view.inView)
            this.onScrollChanged(document.createEvent("Event"));
        }
      }, { threshold: [0, 1e-3] });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver((entries) => {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
          this.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e);
    if (this.intersecting)
      this.view.measure();
  }
  onScroll(e) {
    if (this.intersecting)
      this.flush(false);
    this.onScrollChanged(e);
  }
  onResize() {
    if (this.resizeTimeout < 0)
      this.resizeTimeout = setTimeout(() => {
        this.resizeTimeout = -1;
        this.view.requestMeasure();
      }, 50);
  }
  onPrint(event) {
    if (event.type == "change" && !event.matches)
      return;
    this.view.viewState.printing = true;
    this.view.measure();
    setTimeout(() => {
      this.view.viewState.printing = false;
      this.view.requestMeasure();
    }, 500);
  }
  updateGaps(gaps) {
    if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
      this.gapIntersection.disconnect();
      for (let gap of gaps)
        this.gapIntersection.observe(gap);
      this.gaps = gaps;
    }
  }
  onSelectionChange(event) {
    let wasChanged = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view } = this, sel = this.selectionRange;
    if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
      return;
    let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
    if (context && context.ignoreEvent(event)) {
      if (!wasChanged)
        this.selectionChanged = false;
      return;
    }
    if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
      this.flushSoon();
    else
      this.flush(false);
  }
  readSelectionRange() {
    let { view } = this;
    let selection = getSelection(view.root);
    if (!selection)
      return false;
    let range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
    if (!range || this.selectionRange.eq(range))
      return false;
    let local = hasSelection(this.dom, range);
    if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
      this.view.inputState.lastFocusTime = 0;
      view.docView.updateSelection();
      return false;
    }
    this.selectionRange.setRange(range);
    if (local)
      this.selectionChanged = true;
    return true;
  }
  setSelectionRange(anchor, head) {
    this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
    this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let i = 0, changed = null;
    for (let dom = this.dom; dom; ) {
      if (dom.nodeType == 1) {
        if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
          i++;
        else if (!changed)
          changed = this.scrollTargets.slice(0, i);
        if (changed)
          changed.push(dom);
        dom = dom.assignedSlot || dom.parentNode;
      } else if (dom.nodeType == 11) {
        dom = dom.host;
      } else {
        break;
      }
    }
    if (i < this.scrollTargets.length && !changed)
      changed = this.scrollTargets.slice(0, i);
    if (changed) {
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      for (let dom of this.scrollTargets = changed)
        dom.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(f) {
    if (!this.active)
      return f();
    try {
      this.stop();
      return f();
    } finally {
      this.start();
      this.clear();
    }
  }
  start() {
    if (this.active)
      return;
    this.observer.observe(this.dom, observeOptions);
    if (useCharData)
      this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.active = true;
  }
  stop() {
    if (!this.active)
      return;
    this.active = false;
    this.observer.disconnect();
    if (useCharData)
      this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
  }
  // Throw away any pending changes
  clear() {
    this.processRecords();
    this.queue.length = 0;
    this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(key, keyCode) {
    var _a2;
    if (!this.delayedAndroidKey) {
      let flush = () => {
        let key2 = this.delayedAndroidKey;
        if (key2) {
          this.clearDelayedAndroidKey();
          this.view.inputState.lastKeyCode = key2.keyCode;
          this.view.inputState.lastKeyTime = Date.now();
          let flushed = this.flush();
          if (!flushed && key2.force)
            dispatchKey(this.dom, key2.key, key2.keyCode);
        }
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
    }
    if (!this.delayedAndroidKey || key == "Enter")
      this.delayedAndroidKey = {
        key,
        keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
      };
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
  }
  flushSoon() {
    if (this.delayedFlush < 0)
      this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        this.delayedFlush = -1;
        this.flush();
      });
  }
  forceFlush() {
    if (this.delayedFlush >= 0) {
      this.view.win.cancelAnimationFrame(this.delayedFlush);
      this.delayedFlush = -1;
    }
    this.flush();
  }
  pendingRecords() {
    for (let mut of this.observer.takeRecords())
      this.queue.push(mut);
    return this.queue;
  }
  processRecords() {
    let records = this.pendingRecords();
    if (records.length)
      this.queue = [];
    let from = -1, to = -1, typeOver = false;
    for (let record of records) {
      let range = this.readMutation(record);
      if (!range)
        continue;
      if (range.typeOver)
        typeOver = true;
      if (from == -1) {
        ({ from, to } = range);
      } else {
        from = Math.min(range.from, from);
        to = Math.max(range.to, to);
      }
    }
    return { from, to, typeOver };
  }
  readChange() {
    let { from, to, typeOver } = this.processRecords();
    let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
    if (from < 0 && !newSel)
      return null;
    if (from > -1)
      this.lastChange = Date.now();
    this.view.inputState.lastFocusTime = 0;
    this.selectionChanged = false;
    let change = new DOMChange(this.view, from, to, typeOver);
    this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
    return change;
  }
  // Apply pending changes, if any
  flush(readSelection = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    if (readSelection)
      this.readSelectionRange();
    let domChange = this.readChange();
    if (!domChange) {
      this.view.requestMeasure();
      return false;
    }
    let startState = this.view.state;
    let handled = applyDOMChange(this.view, domChange);
    if (this.view.state == startState)
      this.view.update([]);
    return handled;
  }
  readMutation(rec) {
    let cView = this.view.docView.nearest(rec.target);
    if (!cView || cView.ignoreMutation(rec))
      return null;
    cView.markDirty(rec.type == "attributes");
    if (rec.type == "attributes")
      cView.flags |= 4;
    if (rec.type == "childList") {
      let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
      let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
      return {
        from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
        to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
        typeOver: false
      };
    } else if (rec.type == "characterData") {
      return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
    } else {
      return null;
    }
  }
  setWindow(win) {
    if (win != this.win) {
      this.removeWindowListeners(this.win);
      this.win = win;
      this.addWindowListeners(this.win);
    }
  }
  addWindowListeners(win) {
    win.addEventListener("resize", this.onResize);
    if (this.printQuery)
      this.printQuery.addEventListener("change", this.onPrint);
    else
      win.addEventListener("beforeprint", this.onPrint);
    win.addEventListener("scroll", this.onScroll);
    win.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(win) {
    win.removeEventListener("scroll", this.onScroll);
    win.removeEventListener("resize", this.onResize);
    if (this.printQuery)
      this.printQuery.removeEventListener("change", this.onPrint);
    else
      win.removeEventListener("beforeprint", this.onPrint);
    win.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var _a2, _b, _c;
    this.stop();
    (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
    (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
    for (let dom of this.scrollTargets)
      dom.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win);
    clearTimeout(this.parentCheck);
    clearTimeout(this.resizeTimeout);
    this.win.cancelAnimationFrame(this.delayedFlush);
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
};
function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView)
      return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function buildSelectionRangeFromRange(view, range) {
  let anchorNode = range.startContainer, anchorOffset = range.startOffset;
  let focusNode = range.endContainer, focusOffset = range.endOffset;
  let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function safariSelectionRangeHack(view, selection) {
  if (selection.getComposedRanges) {
    let range = selection.getComposedRanges(view.root)[0];
    if (range)
      return buildSelectionRangeFromRange(view, range);
  }
  let found = null;
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  return found ? buildSelectionRangeFromRange(view, found) : null;
}
var EditorView = class _EditorView {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(config2 = {}) {
    this.plugins = [];
    this.pluginMap = /* @__PURE__ */ new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    this.updateState = 2;
    this.measureScheduled = -1;
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.className = "cm-announced";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    if (config2.parent)
      config2.parent.appendChild(this.dom);
    let { dispatch } = config2;
    this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));
    this.dispatch = this.dispatch.bind(this);
    this._root = config2.root || getRoot(config2.parent) || document;
    this.viewState = new ViewState(config2.state || EditorState.create(config2));
    if (config2.scrollTo && config2.scrollTo.is(scrollIntoView))
      this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
    this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
    for (let plugin2 of this.plugins)
      plugin2.update(this);
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0;
    this.requestMeasure();
  }
  dispatch(...input) {
    let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
    this.dispatchTransactions(trs, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(transactions) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let redrawn = false, attrsChanged = false, update;
    let state = this.state;
    for (let tr of transactions) {
      if (tr.startState != state)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      state = tr.state;
    }
    if (this.destroyed) {
      this.viewState.state = state;
      return;
    }
    let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
    if (transactions.some((tr) => tr.annotation(isFocusChange))) {
      this.inputState.notifiedFocused = focus;
      focusFlag = 1;
    } else if (focus != this.inputState.notifiedFocused) {
      this.inputState.notifiedFocused = focus;
      dispatchFocus = focusChangeTransaction(state, focus);
      if (!dispatchFocus)
        focusFlag = 1;
    }
    let pendingKey = this.observer.delayedAndroidKey, domChange = null;
    if (pendingKey) {
      this.observer.clearDelayedAndroidKey();
      domChange = this.observer.readChange();
      if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
        domChange = null;
    } else {
      this.observer.clear();
    }
    if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
      return this.setState(state);
    update = ViewUpdate.create(this, state, transactions);
    update.flags |= focusFlag;
    let scrollTarget = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let tr of transactions) {
        if (scrollTarget)
          scrollTarget = scrollTarget.map(tr.changes);
        if (tr.scrollIntoView) {
          let { main } = tr.state.selection;
          scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
        }
        for (let e of tr.effects)
          if (e.is(scrollIntoView))
            scrollTarget = e.value.clip(this.state);
      }
      this.viewState.update(update, scrollTarget);
      this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
      if (!update.empty) {
        this.updatePlugins(update);
        this.inputState.update(update);
      }
      redrawn = this.docView.update(update);
      if (this.state.facet(styleModule) != this.styleModules)
        this.mountStyles();
      attrsChanged = this.updateAttrs();
      this.showAnnouncements(transactions);
      this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (update.startState.facet(theme) != update.state.facet(theme))
      this.viewState.mustMeasureContent = true;
    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
      this.requestMeasure();
    if (redrawn)
      this.docViewUpdate();
    if (!update.empty)
      for (let listener of this.state.facet(updateListener)) {
        try {
          listener(update);
        } catch (e) {
          logException(this.state, e, "update listener");
        }
      }
    if (dispatchFocus || domChange)
      Promise.resolve().then(() => {
        if (dispatchFocus && this.state == dispatchFocus.startState)
          this.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(this, domChange) && pendingKey.force)
            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(newState) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = newState;
      return;
    }
    this.updateState = 2;
    let hadFocus = this.hasFocus;
    try {
      for (let plugin2 of this.plugins)
        plugin2.destroy(this);
      this.viewState = new ViewState(newState);
      this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      this.pluginMap.clear();
      for (let plugin2 of this.plugins)
        plugin2.update(this);
      this.docView.destroy();
      this.docView = new DocView(this);
      this.inputState.ensureHandlers(this.plugins);
      this.mountStyles();
      this.updateAttrs();
      this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    if (hadFocus)
      this.focus();
    this.requestMeasure();
  }
  updatePlugins(update) {
    let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
    if (prevSpecs != specs) {
      let newPlugins = [];
      for (let spec of specs) {
        let found = prevSpecs.indexOf(spec);
        if (found < 0) {
          newPlugins.push(new PluginInstance(spec));
        } else {
          let plugin2 = this.plugins[found];
          plugin2.mustUpdate = update;
          newPlugins.push(plugin2);
        }
      }
      for (let plugin2 of this.plugins)
        if (plugin2.mustUpdate != update)
          plugin2.destroy(this);
      this.plugins = newPlugins;
      this.pluginMap.clear();
    } else {
      for (let p of this.plugins)
        p.mustUpdate = update;
    }
    for (let i = 0; i < this.plugins.length; i++)
      this.plugins[i].update(this);
    if (prevSpecs != specs)
      this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let plugin2 of this.plugins) {
      let val = plugin2.value;
      if (val && val.docViewUpdate) {
        try {
          val.docViewUpdate(this);
        } catch (e) {
          logException(this.state, e, "doc view update listener");
        }
      }
    }
  }
  /**
  @internal
  */
  measure(flush = true) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    if (this.observer.delayedAndroidKey) {
      this.measureScheduled = -1;
      this.requestMeasure();
      return;
    }
    this.measureScheduled = 0;
    if (flush)
      this.observer.forceFlush();
    let updated = null;
    let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
    let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
    if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
      scrollAnchorHeight = -1;
    this.viewState.scrollAnchorHeight = -1;
    try {
      for (let i = 0; ; i++) {
        if (scrollAnchorHeight < 0) {
          if (isScrolledToBottom(sDOM)) {
            scrollAnchorPos = -1;
            scrollAnchorHeight = this.viewState.heightMap.height;
          } else {
            let block = this.viewState.scrollAnchorAt(scrollTop);
            scrollAnchorPos = block.from;
            scrollAnchorHeight = block.top;
          }
        }
        this.updateState = 1;
        let changed = this.viewState.measure(this);
        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (i > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let measuring = [];
        if (!(changed & 4))
          [this.measureRequests, measuring] = [measuring, this.measureRequests];
        let measured = measuring.map((m) => {
          try {
            return m.read(this);
          } catch (e) {
            logException(this.state, e);
            return BadMeasure;
          }
        });
        let update = ViewUpdate.create(this, this.state, []), redrawn = false;
        update.flags |= changed;
        if (!updated)
          updated = update;
        else
          updated.flags |= changed;
        this.updateState = 2;
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
          this.updateAttrs();
          redrawn = this.docView.update(update);
          if (redrawn)
            this.docViewUpdate();
        }
        for (let i2 = 0; i2 < measuring.length; i2++)
          if (measured[i2] != BadMeasure) {
            try {
              let m = measuring[i2];
              if (m.write)
                m.write(measured[i2], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
        if (redrawn)
          this.docView.updateSelection(true);
        if (!update.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrollAnchorHeight = -1;
              continue;
            } else {
              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
              let diff = newAnchorHeight - scrollAnchorHeight;
              if (diff > 1 || diff < -1) {
                scrollTop = scrollTop + diff;
                sDOM.scrollTop = scrollTop / this.scaleY;
                scrollAnchorHeight = -1;
                continue;
              }
            }
          }
          break;
        }
      }
    } finally {
      this.updateState = 0;
      this.measureScheduled = -1;
    }
    if (updated && !updated.empty)
      for (let listener of this.state.facet(updateListener))
        listener(updated);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
  }
  updateAttrs() {
    let editorAttrs = attrsFromFacet(this, editorAttributes, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    });
    let contentAttrs = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: !this.state.facet(editable) ? "false" : "true",
      class: "cm-content",
      style: `${browser.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    if (this.state.readOnly)
      contentAttrs["aria-readonly"] = "true";
    attrsFromFacet(this, contentAttributes, contentAttrs);
    let changed = this.observer.ignore(() => {
      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      return changedContent || changedEditor;
    });
    this.editorAttrs = editorAttrs;
    this.contentAttrs = contentAttrs;
    return changed;
  }
  showAnnouncements(trs) {
    let first = true;
    for (let tr of trs)
      for (let effect of tr.effects)
        if (effect.is(_EditorView.announce)) {
          if (first)
            this.announceDOM.textContent = "";
          first = false;
          let div = this.announceDOM.appendChild(document.createElement("div"));
          div.textContent = effect.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(styleModule);
    let nonce = this.state.facet(_EditorView.cspNonce);
    StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    if (this.updateState == 0 && this.measureScheduled > -1)
      this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(request) {
    if (this.measureScheduled < 0)
      this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
    if (request) {
      if (this.measureRequests.indexOf(request) > -1)
        return;
      if (request.key != null)
        for (let i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request.key) {
            this.measureRequests[i] = request;
            return;
          }
        }
      this.measureRequests.push(request);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(plugin2) {
    let known = this.pluginMap.get(plugin2);
    if (known === void 0 || known && known.spec != plugin2)
      this.pluginMap.set(plugin2, known = this.plugins.find((p) => p.spec == plugin2) || null);
    return known && known.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(height) {
    this.readMeasured();
    return this.viewState.elementAtHeight(height);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(height) {
    this.readMeasured();
    return this.viewState.lineBlockAtHeight(height);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(pos) {
    return this.viewState.lineBlockAt(pos);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(start, forward, by) {
    return skipAtoms(this, start, moveByChar(this, start, forward, by));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(start, forward) {
    return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(line, end) {
    let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
    let span = order[end ? order.length - 1 : 0];
    return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(start, forward, includeWrap = true) {
    return moveToLineBoundary(this, start, forward, includeWrap);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(start, forward, distance) {
    return skipAtoms(this, start, moveVertically(this, start, forward, distance));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(pos) {
    return this.docView.domAtPos(pos);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(node, offset = 0) {
    return this.docView.posFromDOM(node, offset);
  }
  posAtCoords(coords, precise = true) {
    this.readMeasured();
    return posAtCoords(this, coords, precise);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(pos, side = 1) {
    this.readMeasured();
    let rect = this.docView.coordsAt(pos, side);
    if (!rect || rect.left == rect.right)
      return rect;
    let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
    let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
    return flattenRect(rect, span.dir == Direction.LTR == side > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(pos) {
    this.readMeasured();
    return this.docView.coordsForChar(pos);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(pos) {
    let perLine = this.state.facet(perLineTextDirection);
    if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
      return this.textDirection;
    this.readMeasured();
    return this.docView.textDirectionAt(pos);
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(line) {
    if (line.length > MaxBidiLine)
      return trivialOrder(line.length);
    let dir = this.textDirectionAt(line.from), isolates;
    for (let entry of this.bidiCache) {
      if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
        return entry.order;
    }
    if (!isolates)
      isolates = getIsolatedRanges(this, line);
    let order = computeOrder(line.text, dir, isolates);
    this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
    return order;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var _a2;
    return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      focusPreventScroll(this.contentDOM);
      this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(root) {
    if (this._root != root) {
      this._root = root;
      this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
      this.mountStyles();
    }
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let plugin2 of this.plugins)
      plugin2.destroy(this);
    this.plugins = [];
    this.inputState.destroy();
    this.docView.destroy();
    this.dom.remove();
    this.observer.destroy();
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(pos, options = {}) {
    return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop, scrollLeft } = this.scrollDOM;
    let ref = this.viewState.scrollAnchorAt(scrollTop);
    return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(handlers2) {
    return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(observers2) {
    return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(spec, options) {
    let prefix = StyleModule.newName();
    let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
    if (options && options.dark)
      result.push(darkTheme.of(true));
    return result;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(spec) {
    return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(dom) {
    var _a2;
    let content2 = dom.querySelector(".cm-content");
    let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
    return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
  }
};
EditorView.styleModule = styleModule;
EditorView.inputHandler = inputHandler;
EditorView.scrollHandler = scrollHandler;
EditorView.focusChangeEffect = focusChangeEffect;
EditorView.perLineTextDirection = perLineTextDirection;
EditorView.exceptionSink = exceptionSink;
EditorView.updateListener = updateListener;
EditorView.editable = editable;
EditorView.mouseSelectionStyle = mouseSelectionStyle;
EditorView.dragMovesSelection = dragMovesSelection$1;
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
EditorView.decorations = decorations;
EditorView.outerDecorations = outerDecorations;
EditorView.atomicRanges = atomicRanges;
EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
EditorView.scrollMargins = scrollMargins;
EditorView.darkTheme = darkTheme;
EditorView.cspNonce = Facet.define({ combine: (values) => values.length ? values[0] : "" });
EditorView.contentAttributes = contentAttributes;
EditorView.editorAttributes = editorAttributes;
EditorView.lineWrapping = EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
EditorView.announce = StateEffect.define();
var MaxBidiLine = 4096;
var BadMeasure = {};
var CachedOrder = class _CachedOrder {
  constructor(from, to, dir, isolates, fresh, order) {
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.isolates = isolates;
    this.fresh = fresh;
    this.order = order;
  }
  static update(cache, changes) {
    if (changes.empty && !cache.some((c) => c.fresh))
      return cache;
    let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
    for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
      let entry = cache[i];
      if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
        result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
    }
    return result;
  }
};
function attrsFromFacet(view, facet, base2) {
  for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    let source = sources[i], value = typeof source == "function" ? source(view) : source;
    if (value)
      combineAttrs(value, base2);
  }
  return base2;
}
var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
function normalizeKeyName(name2, platform) {
  const parts = name2.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift2, meta2;
  for (let i = 0; i < parts.length - 1; ++i) {
    const mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (platform == "mac")
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function modifiers(name2, event, shift2) {
  if (event.altKey)
    name2 = "Alt-" + name2;
  if (event.ctrlKey)
    name2 = "Ctrl-" + name2;
  if (event.metaKey)
    name2 = "Meta-" + name2;
  if (shift2 !== false && event.shiftKey)
    name2 = "Shift-" + name2;
  return name2;
}
var handleKeyEvents = Prec.default(EditorView.domEventHandlers({
  keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
}));
var keymap = Facet.define({ enables: handleKeyEvents });
var Keymaps = /* @__PURE__ */ new WeakMap();
function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map = Keymaps.get(bindings);
  if (!map)
    Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
  return map;
}
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
var storedPrefix = null;
var PrefixTimeout = 4e3;
function buildKeymap(bindings, platform = currentPlatform) {
  let bound = /* @__PURE__ */ Object.create(null);
  let isPrefix = /* @__PURE__ */ Object.create(null);
  let checkPrefix = (name2, is) => {
    let current = isPrefix[name2];
    if (current == null)
      isPrefix[name2] = is;
    else if (current != is)
      throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
  };
  let add2 = (scope, key, command2, preventDefault, stopPropagation) => {
    var _a2, _b;
    let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
    let parts = key.split(/ (?!$)/).map((k) => normalizeKeyName(k, platform));
    for (let i = 1; i < parts.length; i++) {
      let prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix])
        scopeObj[prefix] = {
          preventDefault: true,
          stopPropagation: false,
          run: [(view) => {
            let ourObj = storedPrefix = { view, prefix, scope };
            setTimeout(() => {
              if (storedPrefix == ourObj)
                storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
    }
    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      stopPropagation: false,
      run: ((_b = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
    });
    if (command2)
      binding.run.push(command2);
    if (preventDefault)
      binding.preventDefault = true;
    if (stopPropagation)
      binding.stopPropagation = true;
  };
  for (let b of bindings) {
    let scopes = b.scope ? b.scope.split(" ") : ["editor"];
    if (b.any)
      for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        if (!scopeObj._any)
          scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
        for (let key in scopeObj)
          scopeObj[key].run.push(b.any);
      }
    let name2 = b[platform] || b.key;
    if (!name2)
      continue;
    for (let scope of scopes) {
      add2(scope, name2, b.run, b.preventDefault, b.stopPropagation);
      if (b.shift)
        add2(scope, "Shift-" + name2, b.shift, b.preventDefault, b.stopPropagation);
    }
  }
  return bound;
}
function runHandlers(map, event, view, scope) {
  let name2 = keyName(event);
  let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
  let prefix = "", handled = false, prevented = false, stopPropagation = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (modifierCodes.indexOf(event.keyCode) < 0) {
      prevented = true;
      storedPrefix = null;
    }
  }
  let ran = /* @__PURE__ */ new Set();
  let runFor = (binding) => {
    if (binding) {
      for (let cmd2 of binding.run)
        if (!ran.has(cmd2)) {
          ran.add(cmd2);
          if (cmd2(view, event)) {
            if (binding.stopPropagation)
              stopPropagation = true;
            return true;
          }
        }
      if (binding.preventDefault) {
        if (binding.stopPropagation)
          stopPropagation = true;
        prevented = true;
      }
    }
    return false;
  };
  let scopeObj = map[scope], baseName, shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)])) {
      handled = true;
    } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
        handled = true;
      } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
        handled = true;
      }
    } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name2, event, true)])) {
      handled = true;
    }
    if (!handled && runFor(scopeObj._any))
      handled = true;
  }
  if (prevented)
    handled = true;
  if (handled && stopPropagation)
    event.stopPropagation();
  return handled;
}
var RectangleMarker = class _RectangleMarker {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(className, left, top2, width, height) {
    this.className = className;
    this.left = left;
    this.top = top2;
    this.width = width;
    this.height = height;
  }
  draw() {
    let elt = document.createElement("div");
    elt.className = this.className;
    this.adjust(elt);
    return elt;
  }
  update(elt, prev) {
    if (prev.className != this.className)
      return false;
    this.adjust(elt);
    return true;
  }
  adjust(elt) {
    elt.style.left = this.left + "px";
    elt.style.top = this.top + "px";
    if (this.width != null)
      elt.style.width = this.width + "px";
    elt.style.height = this.height + "px";
  }
  eq(p) {
    return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(view, className, range) {
    if (range.empty) {
      let pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (!pos)
        return [];
      let base2 = getBase(view);
      return [new _RectangleMarker(className, pos.left - base2.left, pos.top - base2.top, null, pos.bottom - pos.top)];
    } else {
      return rectanglesForRange(view, className, range);
    }
  }
};
function getBase(view) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
  return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
}
function wrappedLine(view, pos, inside2) {
  let range = EditorSelection.cursor(pos);
  return {
    from: Math.max(inside2.from, view.moveToLineBoundary(range, false, true).from),
    to: Math.min(inside2.to, view.moveToLineBoundary(range, true, true).from),
    type: BlockType.Text
  };
}
function rectanglesForRange(view, className, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to)
    return [];
  let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
  let ltr = view.textDirection == Direction.LTR;
  let content2 = view.contentDOM, contentRect = content2.getBoundingClientRect(), base2 = getBase(view);
  let lineElt = content2.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
  let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
  let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
  let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
  let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
    visualStart = wrappedLine(view, from, visualStart);
  if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
    visualEnd = wrappedLine(view, to, visualEnd);
  if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    let between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view.defaultLineHeight / 2 < bottom.top)
      between.push(piece(leftSide, top2.bottom, rightSide, bottom.top));
    else if (top2.bottom < bottom.top && view.elementAtHeight((top2.bottom + bottom.top) / 2).type == BlockType.Text)
      top2.bottom = bottom.top = (top2.bottom + bottom.top) / 2;
    return pieces(top2).concat(between).concat(pieces(bottom));
  }
  function piece(left, top2, right, bottom) {
    return new RectangleMarker(
      className,
      left - base2.left,
      top2 - base2.top - 0.01,
      right - left,
      bottom - top2 + 0.01
      /* C.Epsilon */
    );
  }
  function pieces({ top: top2, bottom, horizontal }) {
    let pieces2 = [];
    for (let i = 0; i < horizontal.length; i += 2)
      pieces2.push(piece(horizontal[i], top2, horizontal[i + 1], bottom));
    return pieces2;
  }
  function drawForLine(from2, to2, line) {
    let top2 = 1e9, bottom = -1e9, horizontal = [];
    function addSpan(from3, fromOpen, to3, toOpen, dir) {
      let fromCoords = view.coordsAtPos(from3, from3 == line.to ? -2 : 2);
      let toCoords = view.coordsAtPos(to3, to3 == line.from ? 2 : -2);
      if (!fromCoords || !toCoords)
        return;
      top2 = Math.min(fromCoords.top, toCoords.top, top2);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR)
        horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
      else
        horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    let start = from2 !== null && from2 !== void 0 ? from2 : line.from, end = to2 !== null && to2 !== void 0 ? to2 : line.to;
    for (let r of view.visibleRanges)
      if (r.to > start && r.from < end) {
        for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end); ; ) {
          let docLine = view.state.doc.lineAt(pos);
          for (let span of view.bidiSpans(docLine)) {
            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
            if (spanFrom >= endPos)
              break;
            if (spanTo > pos)
              addSpan(Math.max(spanFrom, pos), from2 == null && spanFrom <= start, Math.min(spanTo, endPos), to2 == null && spanTo >= end, span.dir);
          }
          pos = docLine.to + 1;
          if (pos >= endPos)
            break;
        }
      }
    if (horizontal.length == 0)
      addSpan(start, from2 == null, end, to2 == null, view.textDirection);
    return { top: top2, bottom, horizontal };
  }
  function drawForWidget(block, top2) {
    let y = contentRect.top + (top2 ? block.top : block.bottom);
    return { top: y, bottom: y, horizontal: [] };
  }
}
function sameMarker(a, b) {
  return a.constructor == b.constructor && a.eq(b);
}
var LayerView = class {
  constructor(view, layer2) {
    this.view = view;
    this.layer = layer2;
    this.drawn = [];
    this.scaleX = 1;
    this.scaleY = 1;
    this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
    this.dom = view.scrollDOM.appendChild(document.createElement("div"));
    this.dom.classList.add("cm-layer");
    if (layer2.above)
      this.dom.classList.add("cm-layer-above");
    if (layer2.class)
      this.dom.classList.add(layer2.class);
    this.scale();
    this.dom.setAttribute("aria-hidden", "true");
    this.setOrder(view.state);
    view.requestMeasure(this.measureReq);
    if (layer2.mount)
      layer2.mount(this.dom, view);
  }
  update(update) {
    if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
      this.setOrder(update.state);
    if (this.layer.update(update, this.dom) || update.geometryChanged) {
      this.scale();
      update.view.requestMeasure(this.measureReq);
    }
  }
  docViewUpdate(view) {
    if (this.layer.updateOnDocViewUpdate !== false)
      view.requestMeasure(this.measureReq);
  }
  setOrder(state) {
    let pos = 0, order = state.facet(layerOrder);
    while (pos < order.length && order[pos] != this.layer)
      pos++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX, scaleY } = this.view;
    if (scaleX != this.scaleX || scaleY != this.scaleY) {
      this.scaleX = scaleX;
      this.scaleY = scaleY;
      this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
    }
  }
  draw(markers) {
    if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
      let old = this.dom.firstChild, oldI = 0;
      for (let marker of markers) {
        if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
          old = old.nextSibling;
          oldI++;
        } else {
          this.dom.insertBefore(marker.draw(), old);
        }
      }
      while (old) {
        let next = old.nextSibling;
        old.remove();
        old = next;
      }
      this.drawn = markers;
    }
  }
  destroy() {
    if (this.layer.destroy)
      this.layer.destroy(this.dom, this.view);
    this.dom.remove();
  }
};
var layerOrder = Facet.define();
function layer(config2) {
  return [
    ViewPlugin.define((v) => new LayerView(v, config2)),
    layerOrder.of(config2)
  ];
}
var CanHidePrimary = !browser.ios;
var selectionConfig = Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: (a, b) => Math.min(a, b),
      drawRangeCursor: (a, b) => a || b
    });
  }
});
function drawSelection(config2 = {}) {
  return [
    selectionConfig.of(config2),
    cursorLayer,
    selectionLayer,
    hideNativeSelection,
    nativeSelectionHidden.of(true)
  ];
}
function configChanged(update) {
  return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
}
var cursorLayer = layer({
  above: true,
  markers(view) {
    let { state } = view, conf = state.facet(selectionConfig);
    let cursors = [];
    for (let r of state.selection.ranges) {
      let prim = r == state.selection.main;
      if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
        let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
        let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
        for (let piece of RectangleMarker.forRange(view, className, cursor))
          cursors.push(piece);
      }
    }
    return cursors;
  },
  update(update, dom) {
    if (update.transactions.some((tr) => tr.selection))
      dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
    let confChange = configChanged(update);
    if (confChange)
      setBlinkRate(update.state, dom);
    return update.docChanged || update.selectionSet || confChange;
  },
  mount(dom, view) {
    setBlinkRate(view.state, dom);
  },
  class: "cm-cursorLayer"
});
function setBlinkRate(state, dom) {
  dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
}
var selectionLayer = layer({
  above: false,
  markers(view) {
    return view.state.selection.ranges.map((r) => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r)).reduce((a, b) => a.concat(b));
  },
  update(update, dom) {
    return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
  },
  class: "cm-selectionLayer"
});
var themeSpec = {
  ".cm-line": {
    "& ::selection": { backgroundColor: "transparent !important" },
    "&::selection": { backgroundColor: "transparent !important" }
  }
};
if (CanHidePrimary) {
  themeSpec[".cm-line"].caretColor = "transparent !important";
  themeSpec[".cm-content"] = { caretColor: "transparent !important" };
}
var hideNativeSelection = Prec.highest(EditorView.theme(themeSpec));
var setDropCursorPos = StateEffect.define({
  map(pos, mapping) {
    return pos == null ? null : mapping.mapPos(pos);
  }
});
var dropCursorPos = StateField.define({
  create() {
    return null;
  },
  update(pos, tr) {
    if (pos != null)
      pos = tr.changes.mapPos(pos);
    return tr.effects.reduce((pos2, e) => e.is(setDropCursorPos) ? e.value : pos2, pos);
  }
});
var drawDropCursor = ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.cursor = null;
    this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(update) {
    var _a2;
    let cursorPos = update.state.field(dropCursorPos);
    if (cursorPos == null) {
      if (this.cursor != null) {
        (_a2 = this.cursor) === null || _a2 === void 0 ? void 0 : _a2.remove();
        this.cursor = null;
      }
    } else {
      if (!this.cursor) {
        this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
        this.cursor.className = "cm-dropCursor";
      }
      if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
        this.view.requestMeasure(this.measureReq);
    }
  }
  readPos() {
    let { view } = this;
    let pos = view.state.field(dropCursorPos);
    let rect = pos != null && view.coordsAtPos(pos);
    if (!rect)
      return null;
    let outer = view.scrollDOM.getBoundingClientRect();
    return {
      left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
      top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
      height: rect.bottom - rect.top
    };
  }
  drawCursor(pos) {
    if (this.cursor) {
      let { scaleX, scaleY } = this.view;
      if (pos) {
        this.cursor.style.left = pos.left / scaleX + "px";
        this.cursor.style.top = pos.top / scaleY + "px";
        this.cursor.style.height = pos.height / scaleY + "px";
      } else {
        this.cursor.style.left = "-100000px";
      }
    }
  }
  destroy() {
    if (this.cursor)
      this.cursor.remove();
  }
  setDropPos(pos) {
    if (this.view.state.field(dropCursorPos) != pos)
      this.view.dispatch({ effects: setDropCursorPos.of(pos) });
  }
}, {
  eventObservers: {
    dragover(event) {
      this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
    },
    dragleave(event) {
      if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
        this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function iterMatches(doc2, re, from, to, f) {
  re.lastIndex = 0;
  for (let cursor = doc2.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak)
      while (m = re.exec(cursor.value))
        f(pos + m.index, m);
  }
}
function matchRanges(view, maxLength) {
  let visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
    return visible;
  let result = [];
  for (let { from, to } of visible) {
    from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
    to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
    if (result.length && result[result.length - 1].to >= from)
      result[result.length - 1].to = to;
    else
      result.push({ from, to });
  }
  return result;
}
var MatchDecorator = class {
  /**
  Create a decorator.
  */
  constructor(config2) {
    const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
    if (!regexp.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    if (decorate) {
      this.addMatch = (match, view, from, add2) => decorate(add2, from, from + match[0].length, match, view);
    } else if (typeof decoration == "function") {
      this.addMatch = (match, view, from, add2) => {
        let deco = decoration(match, view, from);
        if (deco)
          add2(from, from + match[0].length, deco);
      };
    } else if (decoration) {
      this.addMatch = (match, _view, from, add2) => add2(from, from + match[0].length, decoration);
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }
    this.boundary = boundary;
    this.maxLength = maxLength;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(view) {
    let build = new RangeSetBuilder(), add2 = build.add.bind(build);
    for (let { from, to } of matchRanges(view, this.maxLength))
      iterMatches(view.state.doc, this.regexp, from, to, (from2, m) => this.addMatch(m, view, from2, add2));
    return build.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(update, deco) {
    let changeFrom = 1e9, changeTo = -1;
    if (update.docChanged)
      update.changes.iterChanges((_f, _t, from, to) => {
        if (to > update.view.viewport.from && from < update.view.viewport.to) {
          changeFrom = Math.min(from, changeFrom);
          changeTo = Math.max(to, changeTo);
        }
      });
    if (update.viewportChanged || changeTo - changeFrom > 1e3)
      return this.createDeco(update.view);
    if (changeTo > -1)
      return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
    return deco;
  }
  updateRange(view, deco, updateFrom, updateTo) {
    for (let r of view.visibleRanges) {
      let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
      if (to > from) {
        let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
        let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
        if (this.boundary) {
          for (; from > fromLine.from; from--)
            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
              start = from;
              break;
            }
          for (; to < toLine.to; to++)
            if (this.boundary.test(toLine.text[to - toLine.from])) {
              end = to;
              break;
            }
        }
        let ranges = [], m;
        let add2 = (from2, to2, deco2) => ranges.push(deco2.range(from2, to2));
        if (fromLine == toLine) {
          this.regexp.lastIndex = start - fromLine.from;
          while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
            this.addMatch(m, view, m.index + fromLine.from, add2);
        } else {
          iterMatches(view.state.doc, this.regexp, start, end, (from2, m2) => this.addMatch(m2, view, from2, add2));
        }
        deco = deco.update({ filterFrom: start, filterTo: end, filter: (from2, to2) => from2 < start || to2 > end, add: ranges });
      }
    }
    return deco;
  }
};
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var Specials = new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]", UnicodeRegexpSupport);
var _supportsTabSize = null;
function supportsTabSize() {
  var _a2;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    let styles = document.body.style;
    _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
var specialCharConfig = Facet.define({
  combine(configs) {
    let config2 = combineConfig(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config2.replaceTabs = !supportsTabSize())
      config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
    if (config2.addSpecialChars)
      config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
    return config2;
  }
});
var plugin = ViewPlugin.fromClass(class {
  constructor() {
    this.height = 1e3;
    this.attrs = { style: "padding-bottom: 1000px" };
  }
  update(update) {
    let { view } = update;
    let height = view.viewState.editorHeight - view.defaultLineHeight - view.documentPadding.top - 0.5;
    if (height >= 0 && height != this.height) {
      this.height = height;
      this.attrs = { style: `padding-bottom: ${height}px` };
    }
  }
});
var lineDeco = Decoration.line({ class: "cm-activeLine" });
var activeLineHighlighter = ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.docChanged || update.selectionSet)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let lastLineStart = -1, deco = [];
    for (let r of view.state.selection.ranges) {
      let line = view.lineBlockAt(r.head);
      if (line.from > lastLineStart) {
        deco.push(lineDeco.range(line.from));
        lastLineStart = line.from;
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v) => v.decorations
});
var Placeholder = class extends WidgetType {
  constructor(content2) {
    super();
    this.content = content2;
  }
  toDOM() {
    let wrap = document.createElement("span");
    wrap.className = "cm-placeholder";
    wrap.style.pointerEvents = "none";
    wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
    if (typeof this.content == "string")
      wrap.setAttribute("aria-label", "placeholder " + this.content);
    else
      wrap.setAttribute("aria-hidden", "true");
    return wrap;
  }
  coordsAt(dom) {
    let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];
    if (!rects.length)
      return null;
    let style = window.getComputedStyle(dom.parentNode);
    let rect = flattenRect(rects[0], style.direction != "rtl");
    let lineHeight = parseInt(style.lineHeight);
    if (rect.bottom - rect.top > lineHeight * 1.5)
      return { left: rect.left, right: rect.right, top: rect.top, bottom: rect.top + lineHeight };
    return rect;
  }
  ignoreEvent() {
    return false;
  }
};
function placeholder(content2) {
  return ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.placeholder = content2 ? Decoration.set([Decoration.widget({ widget: new Placeholder(content2), side: 1 }).range(0)]) : Decoration.none;
    }
    get decorations() {
      return this.view.state.doc.length ? Decoration.none : this.placeholder;
    }
  }, { decorations: (v) => v.decorations });
}
var MaxOff = 2e3;
function rectangleFor(state, a, b) {
  let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
  let ranges = [];
  if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
    let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
    for (let i = startLine; i <= endLine; i++) {
      let line = state.doc.line(i);
      if (line.length <= endOff)
        ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
    for (let i = startLine; i <= endLine; i++) {
      let line = state.doc.line(i);
      let start = findColumn(line.text, startCol, state.tabSize, true);
      if (start < 0) {
        ranges.push(EditorSelection.cursor(line.to));
      } else {
        let end = findColumn(line.text, endCol, state.tabSize);
        ranges.push(EditorSelection.range(line.from + start, line.from + end));
      }
    }
  }
  return ranges;
}
function absoluteColumn(view, x) {
  let ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let line = view.state.doc.lineAt(offset), off = offset - line.from;
  let col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
  return { line: line.number, col, off };
}
function rectangleSelectionStyle(view, event) {
  let start = getPos(view, event), startSel = view.state.selection;
  if (!start)
    return null;
  return {
    update(update) {
      if (update.docChanged) {
        let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
        let newLine = update.state.doc.lineAt(newStart);
        start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, _extend, multiple) {
      let cur2 = getPos(view, event2);
      if (!cur2)
        return startSel;
      let ranges = rectangleFor(view.state, start, cur2);
      if (!ranges.length)
        return startSel;
      if (multiple)
        return EditorSelection.create(ranges.concat(startSel.ranges));
      else
        return EditorSelection.create(ranges);
    }
  };
}
function rectangularSelection(options) {
  let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e) => e.altKey && e.button == 0);
  return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
}
var keys = {
  Alt: [18, (e) => !!e.altKey],
  Control: [17, (e) => !!e.ctrlKey],
  Shift: [16, (e) => !!e.shiftKey],
  Meta: [91, (e) => !!e.metaKey]
};
var showCrosshair = { style: "cursor: crosshair" };
function crosshairCursor(options = {}) {
  let [code, getter] = keys[options.key || "Alt"];
  let plugin2 = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.isDown = false;
    }
    set(isDown) {
      if (this.isDown != isDown) {
        this.isDown = isDown;
        this.view.update([]);
      }
    }
  }, {
    eventObservers: {
      keydown(e) {
        this.set(e.keyCode == code || getter(e));
      },
      keyup(e) {
        if (e.keyCode == code || !getter(e))
          this.set(false);
      },
      mousemove(e) {
        this.set(getter(e));
      }
    }
  });
  return [
    plugin2,
    EditorView.contentAttributes.of((view) => {
      var _a2;
      return ((_a2 = view.plugin(plugin2)) === null || _a2 === void 0 ? void 0 : _a2.isDown) ? showCrosshair : null;
    })
  ];
}
var Outside = "-10000px";
var TooltipViewManager = class {
  constructor(view, facet, createTooltipView, removeTooltipView) {
    this.facet = facet;
    this.createTooltipView = createTooltipView;
    this.removeTooltipView = removeTooltipView;
    this.input = view.state.facet(facet);
    this.tooltips = this.input.filter((t2) => t2);
    let prev = null;
    this.tooltipViews = this.tooltips.map((t2) => prev = createTooltipView(t2, prev));
  }
  update(update, above) {
    var _a2;
    let input = update.state.facet(this.facet);
    let tooltips2 = input.filter((x) => x);
    if (input === this.input) {
      for (let t2 of this.tooltipViews)
        if (t2.update)
          t2.update(update);
      return false;
    }
    let tooltipViews = [], newAbove = above ? [] : null;
    for (let i = 0; i < tooltips2.length; i++) {
      let tip = tooltips2[i], known = -1;
      if (!tip)
        continue;
      for (let i2 = 0; i2 < this.tooltips.length; i2++) {
        let other = this.tooltips[i2];
        if (other && other.create == tip.create)
          known = i2;
      }
      if (known < 0) {
        tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
        if (newAbove)
          newAbove[i] = !!tip.above;
      } else {
        let tooltipView = tooltipViews[i] = this.tooltipViews[known];
        if (newAbove)
          newAbove[i] = above[known];
        if (tooltipView.update)
          tooltipView.update(update);
      }
    }
    for (let t2 of this.tooltipViews)
      if (tooltipViews.indexOf(t2) < 0) {
        this.removeTooltipView(t2);
        (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
      }
    if (above) {
      newAbove.forEach((val, i) => above[i] = val);
      above.length = newAbove.length;
    }
    this.input = input;
    this.tooltips = tooltips2;
    this.tooltipViews = tooltipViews;
    return true;
  }
};
function tooltips(config2 = {}) {
  return tooltipConfig.of(config2);
}
function windowSpace(view) {
  let { win } = view;
  return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
}
var tooltipConfig = Facet.define({
  combine: (values) => {
    var _a2, _b, _c;
    return {
      position: browser.ios ? "absolute" : ((_a2 = values.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
      parent: ((_b = values.find((conf) => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
      tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
    };
  }
});
var knownHeight = /* @__PURE__ */ new WeakMap();
var tooltipPlugin = ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.above = [];
    this.inView = true;
    this.madeAbsolute = false;
    this.lastTransaction = 0;
    this.measureTimeout = -1;
    let config2 = view.state.facet(tooltipConfig);
    this.position = config2.position;
    this.parent = config2.parent;
    this.classes = view.themeClasses;
    this.createContainer();
    this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
    this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
    this.manager = new TooltipViewManager(view, showTooltip, (t2, p) => this.createTooltip(t2, p), (t2) => {
      if (this.resizeObserver)
        this.resizeObserver.unobserve(t2.dom);
      t2.dom.remove();
    });
    this.above = this.manager.tooltips.map((t2) => !!t2.above);
    this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
      if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
        this.measureSoon();
    }, { threshold: [1] }) : null;
    this.observeIntersection();
    view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
    this.maybeMeasure();
  }
  createContainer() {
    if (this.parent) {
      this.container = document.createElement("div");
      this.container.style.position = "relative";
      this.container.className = this.view.themeClasses;
      this.parent.appendChild(this.container);
    } else {
      this.container = this.view.dom;
    }
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let tooltip of this.manager.tooltipViews)
        this.intersectionObserver.observe(tooltip.dom);
    }
  }
  measureSoon() {
    if (this.measureTimeout < 0)
      this.measureTimeout = setTimeout(() => {
        this.measureTimeout = -1;
        this.maybeMeasure();
      }, 50);
  }
  update(update) {
    if (update.transactions.length)
      this.lastTransaction = Date.now();
    let updated = this.manager.update(update, this.above);
    if (updated)
      this.observeIntersection();
    let shouldMeasure = updated || update.geometryChanged;
    let newConfig = update.state.facet(tooltipConfig);
    if (newConfig.position != this.position && !this.madeAbsolute) {
      this.position = newConfig.position;
      for (let t2 of this.manager.tooltipViews)
        t2.dom.style.position = this.position;
      shouldMeasure = true;
    }
    if (newConfig.parent != this.parent) {
      if (this.parent)
        this.container.remove();
      this.parent = newConfig.parent;
      this.createContainer();
      for (let t2 of this.manager.tooltipViews)
        this.container.appendChild(t2.dom);
      shouldMeasure = true;
    } else if (this.parent && this.view.themeClasses != this.classes) {
      this.classes = this.container.className = this.view.themeClasses;
    }
    if (shouldMeasure)
      this.maybeMeasure();
  }
  createTooltip(tooltip, prev) {
    let tooltipView = tooltip.create(this.view);
    let before = prev ? prev.dom : null;
    tooltipView.dom.classList.add("cm-tooltip");
    if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let arrow = document.createElement("div");
      arrow.className = "cm-tooltip-arrow";
      tooltipView.dom.appendChild(arrow);
    }
    tooltipView.dom.style.position = this.position;
    tooltipView.dom.style.top = Outside;
    tooltipView.dom.style.left = "0px";
    this.container.insertBefore(tooltipView.dom, before);
    if (tooltipView.mount)
      tooltipView.mount(this.view);
    if (this.resizeObserver)
      this.resizeObserver.observe(tooltipView.dom);
    return tooltipView;
  }
  destroy() {
    var _a2, _b, _c;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let tooltipView of this.manager.tooltipViews) {
      tooltipView.dom.remove();
      (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
    }
    if (this.parent)
      this.container.remove();
    (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
    clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let editor = this.view.dom.getBoundingClientRect();
    let scaleX = 1, scaleY = 1, makeAbsolute = false;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom } = this.manager.tooltipViews[0];
      if (browser.gecko) {
        makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
      } else if (dom.style.top == Outside && dom.style.left == "0px") {
        let rect = dom.getBoundingClientRect();
        makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
      }
    }
    if (makeAbsolute || this.position == "absolute") {
      if (this.parent) {
        let rect = this.parent.getBoundingClientRect();
        if (rect.width && rect.height) {
          scaleX = rect.width / this.parent.offsetWidth;
          scaleY = rect.height / this.parent.offsetHeight;
        }
      } else {
        ({ scaleX, scaleY } = this.view.viewState);
      }
    }
    return {
      editor,
      parent: this.parent ? this.container.getBoundingClientRect() : editor,
      pos: this.manager.tooltips.map((t2, i) => {
        let tv = this.manager.tooltipViews[i];
        return tv.getCoords ? tv.getCoords(t2.pos) : this.view.coordsAtPos(t2.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
      space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
      scaleX,
      scaleY,
      makeAbsolute
    };
  }
  writeMeasure(measured) {
    var _a2;
    if (measured.makeAbsolute) {
      this.madeAbsolute = true;
      this.position = "absolute";
      for (let t2 of this.manager.tooltipViews)
        t2.dom.style.position = "absolute";
    }
    let { editor, space, scaleX, scaleY } = measured;
    let others = [];
    for (let i = 0; i < this.manager.tooltips.length; i++) {
      let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
      let pos = measured.pos[i], size = measured.size[i];
      if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right < Math.max(editor.left, space.left) - 0.1 || pos.left > Math.min(editor.right, space.right) + 0.1) {
        dom.style.top = Outside;
        continue;
      }
      let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
      let arrowHeight = arrow ? 7 : 0;
      let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
      let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
      let left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 : 0) - offset.x);
      let above = this.above[i];
      if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top)
        above = this.above[i] = !above;
      let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
      if (spaceVert < height && tView.resize !== false) {
        if (spaceVert < this.view.defaultLineHeight) {
          dom.style.top = Outside;
          continue;
        }
        knownHeight.set(tView, height);
        dom.style.height = (height = spaceVert) / scaleY + "px";
      } else if (dom.style.height) {
        dom.style.height = "";
      }
      let top2 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
      let right = left + width;
      if (tView.overlap !== true) {
        for (let r of others)
          if (r.left < right && r.right > left && r.top < top2 + height && r.bottom > top2)
            top2 = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
      }
      if (this.position == "absolute") {
        dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
        dom.style.left = (left - measured.parent.left) / scaleX + "px";
      } else {
        dom.style.top = top2 / scaleY + "px";
        dom.style.left = left / scaleX + "px";
      }
      if (arrow) {
        let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
        arrow.style.left = arrowLeft / scaleX + "px";
      }
      if (tView.overlap !== true)
        others.push({ left, top: top2, right, bottom: top2 + height });
      dom.classList.toggle("cm-tooltip-above", above);
      dom.classList.toggle("cm-tooltip-below", !above);
      if (tView.positioned)
        tView.positioned(measured.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length) {
      if (this.view.inView)
        this.view.requestMeasure(this.measureReq);
      if (this.inView != this.view.inView) {
        this.inView = this.view.inView;
        if (!this.inView)
          for (let tv of this.manager.tooltipViews)
            tv.dom.style.top = Outside;
      }
    }
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
var baseTheme = EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: `${7}px`,
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: `${7}px solid transparent`,
      borderRight: `${7}px solid transparent`
    },
    ".cm-tooltip-above &": {
      bottom: `-${7}px`,
      "&:before": {
        borderTop: `${7}px solid #bbb`
      },
      "&:after": {
        borderTop: `${7}px solid #f5f5f5`,
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: `-${7}px`,
      "&:before": {
        borderBottom: `${7}px solid #bbb`
      },
      "&:after": {
        borderBottom: `${7}px solid #f5f5f5`,
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
var noOffset = { x: 0, y: 0 };
var showTooltip = Facet.define({
  enables: [tooltipPlugin, baseTheme]
});
var showHoverTooltip = Facet.define({
  combine: (inputs) => inputs.reduce((a, i) => a.concat(i), [])
});
var HoverTooltipHost = class _HoverTooltipHost {
  // Needs to be static so that host tooltip instances always match
  static create(view) {
    return new _HoverTooltipHost(view);
  }
  constructor(view) {
    this.view = view;
    this.mounted = false;
    this.dom = document.createElement("div");
    this.dom.classList.add("cm-tooltip-hover");
    this.manager = new TooltipViewManager(view, showHoverTooltip, (t2, p) => this.createHostedView(t2, p), (t2) => t2.dom.remove());
  }
  createHostedView(tooltip, prev) {
    let hostedView = tooltip.create(this.view);
    hostedView.dom.classList.add("cm-tooltip-section");
    this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
    if (this.mounted && hostedView.mount)
      hostedView.mount(this.view);
    return hostedView;
  }
  mount(view) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.mount)
        hostedView.mount(view);
    }
    this.mounted = true;
  }
  positioned(space) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.positioned)
        hostedView.positioned(space);
    }
  }
  update(update) {
    this.manager.update(update);
  }
  destroy() {
    var _a2;
    for (let t2 of this.manager.tooltipViews)
      (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
  }
  passProp(name2) {
    let value = void 0;
    for (let view of this.manager.tooltipViews) {
      let given = view[name2];
      if (given !== void 0) {
        if (value === void 0)
          value = given;
        else if (value !== given)
          return void 0;
      }
    }
    return value;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
};
var showHoverTooltipHost = showTooltip.compute([showHoverTooltip], (state) => {
  let tooltips2 = state.facet(showHoverTooltip);
  if (tooltips2.length === 0)
    return null;
  return {
    pos: Math.min(...tooltips2.map((t2) => t2.pos)),
    end: Math.max(...tooltips2.map((t2) => {
      var _a2;
      return (_a2 = t2.end) !== null && _a2 !== void 0 ? _a2 : t2.pos;
    })),
    create: HoverTooltipHost.create,
    above: tooltips2[0].above,
    arrow: tooltips2.some((t2) => t2.arrow)
  };
});
var HoverPlugin = class {
  constructor(view, source, field, setHover, hoverTime) {
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.hoverTime = hoverTime;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    if (this.pending) {
      this.pending = null;
      clearTimeout(this.restartTimeout);
      this.restartTimeout = setTimeout(() => this.startHover(), 20);
    }
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    this.hoverTimeout = -1;
    if (this.active.length)
      return;
    let hovered = Date.now() - this.lastMove.time;
    if (hovered < this.hoverTime)
      this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
    else
      this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view, lastMove } = this;
    let desc = view.docView.nearest(lastMove.target);
    if (!desc)
      return;
    let pos, side = 1;
    if (desc instanceof WidgetView) {
      pos = desc.posAtStart;
    } else {
      pos = view.posAtCoords(lastMove);
      if (pos == null)
        return;
      let posCoords = view.coordsAtPos(pos);
      if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
        return;
      let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find((s) => s.from <= pos && s.to >= pos);
      let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
      side = lastMove.x < posCoords.left ? -rtl : rtl;
    }
    let open = this.source(view, pos, side);
    if (open === null || open === void 0 ? void 0 : open.then) {
      let pending = this.pending = { pos };
      open.then((result) => {
        if (this.pending == pending) {
          this.pending = null;
          if (result && !(Array.isArray(result) && !result.length))
            view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
        }
      }, (e) => logException(view.state, e, "hover tooltip"));
    } else if (open && !(Array.isArray(open) && !open.length)) {
      view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
    }
  }
  get tooltip() {
    let plugin2 = this.view.plugin(tooltipPlugin);
    let index = plugin2 ? plugin2.manager.tooltips.findIndex((t2) => t2.create == HoverTooltipHost.create) : -1;
    return index > -1 ? plugin2.manager.tooltipViews[index] : null;
  }
  mousemove(event) {
    var _a2, _b;
    this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
    if (this.hoverTimeout < 0)
      this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
    let { active, tooltip } = this;
    if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
      let { pos } = active[0] || this.pending, end = (_b = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b !== void 0 ? _b : pos;
      if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
        this.view.dispatch({ effects: this.setHover.of([]) });
        this.pending = null;
      }
    }
  }
  mouseleave(event) {
    clearTimeout(this.hoverTimeout);
    this.hoverTimeout = -1;
    let { active } = this;
    if (active.length) {
      let { tooltip } = this;
      let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
      if (!inTooltip)
        this.view.dispatch({ effects: this.setHover.of([]) });
      else
        this.watchTooltipLeave(tooltip.dom);
    }
  }
  watchTooltipLeave(tooltip) {
    let watch = (event) => {
      tooltip.removeEventListener("mouseleave", watch);
      if (this.active.length && !this.view.dom.contains(event.relatedTarget))
        this.view.dispatch({ effects: this.setHover.of([]) });
    };
    tooltip.addEventListener("mouseleave", watch);
  }
  destroy() {
    clearTimeout(this.hoverTimeout);
    this.view.dom.removeEventListener("mouseleave", this.mouseleave);
    this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
};
var tooltipMargin = 4;
function isInTooltip(tooltip, event) {
  let rect = tooltip.getBoundingClientRect();
  return event.clientX >= rect.left - tooltipMargin && event.clientX <= rect.right + tooltipMargin && event.clientY >= rect.top - tooltipMargin && event.clientY <= rect.bottom + tooltipMargin;
}
function isOverRange(view, from, to, x, y, margin) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
  if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)
    return false;
  let pos = view.posAtCoords({ x, y }, false);
  return pos >= from && pos <= to;
}
function hoverTooltip(source, options = {}) {
  let setHover = StateEffect.define();
  let hoverState = StateField.define({
    create() {
      return [];
    },
    update(value, tr) {
      if (value.length) {
        if (options.hideOnChange && (tr.docChanged || tr.selection))
          value = [];
        else if (options.hideOn)
          value = value.filter((v) => !options.hideOn(tr, v));
        if (tr.docChanged) {
          let mapped = [];
          for (let tooltip of value) {
            let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
            if (newPos != null) {
              let copy = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
              copy.pos = newPos;
              if (copy.end != null)
                copy.end = tr.changes.mapPos(copy.end);
              mapped.push(copy);
            }
          }
          value = mapped;
        }
      }
      for (let effect of tr.effects) {
        if (effect.is(setHover))
          value = effect.value;
        if (effect.is(closeHoverTooltipEffect))
          value = [];
      }
      return value;
    },
    provide: (f) => showHoverTooltip.from(f)
  });
  return [
    hoverState,
    ViewPlugin.define((view) => new HoverPlugin(
      view,
      source,
      hoverState,
      setHover,
      options.hoverTime || 300
      /* Hover.Time */
    )),
    showHoverTooltipHost
  ];
}
function getTooltip(view, tooltip) {
  let plugin2 = view.plugin(tooltipPlugin);
  if (!plugin2)
    return null;
  let found = plugin2.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin2.manager.tooltipViews[found];
}
var closeHoverTooltipEffect = StateEffect.define();
var closeHoverTooltips = closeHoverTooltipEffect.of(null);
var panelConfig = Facet.define({
  combine(configs) {
    let topContainer, bottomContainer;
    for (let c of configs) {
      topContainer = topContainer || c.topContainer;
      bottomContainer = bottomContainer || c.bottomContainer;
    }
    return { topContainer, bottomContainer };
  }
});
function getPanel(view, panel) {
  let plugin2 = view.plugin(panelPlugin);
  let index = plugin2 ? plugin2.specs.indexOf(panel) : -1;
  return index > -1 ? plugin2.panels[index] : null;
}
var panelPlugin = ViewPlugin.fromClass(class {
  constructor(view) {
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter((s) => s);
    this.panels = this.specs.map((spec) => spec(view));
    let conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter((p) => p.top));
    this.bottom.sync(this.panels.filter((p) => !p.top));
    for (let p of this.panels) {
      p.dom.classList.add("cm-panel");
      if (p.mount)
        p.mount();
    }
  }
  update(update) {
    let conf = update.state.facet(panelConfig);
    if (this.top.container != conf.topContainer) {
      this.top.sync([]);
      this.top = new PanelGroup(update.view, true, conf.topContainer);
    }
    if (this.bottom.container != conf.bottomContainer) {
      this.bottom.sync([]);
      this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
    }
    this.top.syncClasses();
    this.bottom.syncClasses();
    let input = update.state.facet(showPanel);
    if (input != this.input) {
      let specs = input.filter((x) => x);
      let panels = [], top2 = [], bottom = [], mount = [];
      for (let spec of specs) {
        let known = this.specs.indexOf(spec), panel;
        if (known < 0) {
          panel = spec(update.view);
          mount.push(panel);
        } else {
          panel = this.panels[known];
          if (panel.update)
            panel.update(update);
        }
        panels.push(panel);
        (panel.top ? top2 : bottom).push(panel);
      }
      this.specs = specs;
      this.panels = panels;
      this.top.sync(top2);
      this.bottom.sync(bottom);
      for (let p of mount) {
        p.dom.classList.add("cm-panel");
        if (p.mount)
          p.mount();
      }
    } else {
      for (let p of this.panels)
        if (p.update)
          p.update(update);
    }
  }
  destroy() {
    this.top.sync([]);
    this.bottom.sync([]);
  }
}, {
  provide: (plugin2) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin2);
    return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
  })
});
var PanelGroup = class {
  constructor(view, top2, container) {
    this.view = view;
    this.top = top2;
    this.container = container;
    this.dom = void 0;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }
  sync(panels) {
    for (let p of this.panels)
      if (p.destroy && panels.indexOf(p) < 0)
        p.destroy();
    this.panels = panels;
    this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      if (this.dom) {
        this.dom.remove();
        this.dom = void 0;
      }
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div");
      this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
      this.dom.style[this.top ? "top" : "bottom"] = "0";
      let parent = this.container || this.view.dom;
      parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
    }
    let curDOM = this.dom.firstChild;
    for (let panel of this.panels) {
      if (panel.dom.parentNode == this.dom) {
        while (curDOM != panel.dom)
          curDOM = rm(curDOM);
        curDOM = curDOM.nextSibling;
      } else {
        this.dom.insertBefore(panel.dom, curDOM);
      }
    }
    while (curDOM)
      curDOM = rm(curDOM);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!this.container || this.classes == this.view.themeClasses)
      return;
    for (let cls of this.classes.split(" "))
      if (cls)
        this.container.classList.remove(cls);
    for (let cls of (this.classes = this.view.themeClasses).split(" "))
      if (cls)
        this.container.classList.add(cls);
  }
};
function rm(node) {
  let next = node.nextSibling;
  node.remove();
  return next;
}
var showPanel = Facet.define({
  enables: panelPlugin
});
var GutterMarker = class extends RangeValue {
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(other) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(dom) {
  }
};
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = void 0;
GutterMarker.prototype.mapMode = MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
var gutterLineClass = Facet.define();
var defaults = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => RangeSet.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};
var activeGutters = Facet.define();
function gutter(config2) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config2))];
}
var unfixGutters = Facet.define({
  combine: (values) => values.some((x) => x)
});
function gutters(config2) {
  let result = [
    gutterView
  ];
  if (config2 && config2.fixed === false)
    result.push(unfixGutters.of(true));
  return result;
}
var gutterView = ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
    for (let gutter2 of this.gutters)
      this.dom.appendChild(gutter2.dom);
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }
  update(update) {
    if (this.updateGutters(update)) {
      let vpA = this.prevViewport, vpB = update.view.viewport;
      let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
      this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
    }
    if (update.geometryChanged) {
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    }
    if (this.view.state.facet(unfixGutters) != !this.fixed) {
      this.fixed = !this.fixed;
      this.dom.style.position = this.fixed ? "sticky" : "";
    }
    this.prevViewport = update.view.viewport;
  }
  syncGutters(detach) {
    let after = this.dom.nextSibling;
    if (detach)
      this.dom.remove();
    let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
    let classSet = [];
    let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
    for (let line of this.view.viewportLineBlocks) {
      if (classSet.length)
        classSet = [];
      if (Array.isArray(line.type)) {
        let first = true;
        for (let b of line.type) {
          if (b.type == BlockType.Text && first) {
            advanceCursor(lineClasses, classSet, b.from);
            for (let cx of contexts)
              cx.line(this.view, b, classSet);
            first = false;
          } else if (b.widget) {
            for (let cx of contexts)
              cx.widget(this.view, b);
          }
        }
      } else if (line.type == BlockType.Text) {
        advanceCursor(lineClasses, classSet, line.from);
        for (let cx of contexts)
          cx.line(this.view, line, classSet);
      } else if (line.widget) {
        for (let cx of contexts)
          cx.widget(this.view, line);
      }
    }
    for (let cx of contexts)
      cx.finish();
    if (detach)
      this.view.scrollDOM.insertBefore(this.dom, after);
  }
  updateGutters(update) {
    let prev = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
    let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
    if (prev == cur2) {
      for (let gutter2 of this.gutters)
        if (gutter2.update(update))
          change = true;
    } else {
      change = true;
      let gutters2 = [];
      for (let conf of cur2) {
        let known = prev.indexOf(conf);
        if (known < 0) {
          gutters2.push(new SingleGutterView(this.view, conf));
        } else {
          this.gutters[known].update(update);
          gutters2.push(this.gutters[known]);
        }
      }
      for (let g of this.gutters) {
        g.dom.remove();
        if (gutters2.indexOf(g) < 0)
          g.destroy();
      }
      for (let g of gutters2)
        this.dom.appendChild(g.dom);
      this.gutters = gutters2;
    }
    return change;
  }
  destroy() {
    for (let view of this.gutters)
      view.destroy();
    this.dom.remove();
  }
}, {
  provide: (plugin2) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin2);
    if (!value || value.gutters.length == 0 || !value.fixed)
      return null;
    return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view.scaleX } : { right: value.dom.offsetWidth * view.scaleX };
  })
});
function asArray2(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos)
      collect.push(cursor.value);
    cursor.next();
  }
}
var UpdateContext = class {
  constructor(gutter2, viewport, height) {
    this.gutter = gutter2;
    this.height = height;
    this.i = 0;
    this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
  }
  addElement(view, block, markers) {
    let { gutter: gutter2 } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
    if (this.i == gutter2.elements.length) {
      let newElt = new GutterElement(view, height, above, markers);
      gutter2.elements.push(newElt);
      gutter2.dom.appendChild(newElt.dom);
    } else {
      gutter2.elements[this.i].update(view, height, above, markers);
    }
    this.height = block.bottom;
    this.i++;
  }
  line(view, line, extraMarkers) {
    let localMarkers = [];
    advanceCursor(this.cursor, localMarkers, line.from);
    if (extraMarkers.length)
      localMarkers = localMarkers.concat(extraMarkers);
    let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
    if (forLine)
      localMarkers.unshift(forLine);
    let gutter2 = this.gutter;
    if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
      return;
    this.addElement(view, line, localMarkers);
  }
  widget(view, block) {
    let marker = this.gutter.config.widgetMarker(view, block.widget, block);
    if (marker)
      this.addElement(view, block, [marker]);
  }
  finish() {
    let gutter2 = this.gutter;
    while (gutter2.elements.length > this.i) {
      let last = gutter2.elements.pop();
      gutter2.dom.removeChild(last.dom);
      last.destroy();
    }
  }
};
var SingleGutterView = class {
  constructor(view, config2) {
    this.view = view;
    this.config = config2;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let prop in config2.domEventHandlers) {
      this.dom.addEventListener(prop, (event) => {
        let target = event.target, y;
        if (target != this.dom && this.dom.contains(target)) {
          while (target.parentNode != this.dom)
            target = target.parentNode;
          let rect = target.getBoundingClientRect();
          y = (rect.top + rect.bottom) / 2;
        } else {
          y = event.clientY;
        }
        let line = view.lineBlockAtHeight(y - view.documentTop);
        if (config2.domEventHandlers[prop](view, line, event))
          event.preventDefault();
      });
    }
    this.markers = asArray2(config2.markers(view));
    if (config2.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  update(update) {
    let prevMarkers = this.markers;
    this.markers = asArray2(this.config.markers(update.view));
    if (this.spacer && this.config.updateSpacer) {
      let updated = this.config.updateSpacer(this.spacer.markers[0], update);
      if (updated != this.spacer.markers[0])
        this.spacer.update(update.view, 0, 0, [updated]);
    }
    let vp = update.view.viewport;
    return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
  }
  destroy() {
    for (let elt of this.elements)
      elt.destroy();
  }
};
var GutterElement = class {
  constructor(view, height, above, markers) {
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }
  update(view, height, above, markers) {
    if (this.height != height) {
      this.height = height;
      this.dom.style.height = height + "px";
    }
    if (this.above != above)
      this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
    if (!sameMarkers(this.markers, markers))
      this.setMarkers(view, markers);
  }
  setMarkers(view, markers) {
    let cls = "cm-gutterElement", domPos = this.dom.firstChild;
    for (let iNew = 0, iOld = 0; ; ) {
      let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
      if (marker) {
        let c = marker.elementClass;
        if (c)
          cls += " " + c;
        for (let i = iOld; i < this.markers.length; i++)
          if (this.markers[i].compare(marker)) {
            skipTo = i;
            matched = true;
            break;
          }
      } else {
        skipTo = this.markers.length;
      }
      while (iOld < skipTo) {
        let next = this.markers[iOld++];
        if (next.toDOM) {
          next.destroy(domPos);
          let after = domPos.nextSibling;
          domPos.remove();
          domPos = after;
        }
      }
      if (!marker)
        break;
      if (marker.toDOM) {
        if (matched)
          domPos = domPos.nextSibling;
        else
          this.dom.insertBefore(marker.toDOM(view), domPos);
      }
      if (matched)
        iOld++;
    }
    this.dom.className = cls;
    this.markers = markers;
  }
  destroy() {
    this.setMarkers(null, []);
  }
};
function sameMarkers(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (!a[i].compare(b[i]))
      return false;
  return true;
}
var lineNumberMarkers = Facet.define();
var lineNumberConfig = Facet.define({
  combine(values) {
    return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(a, b) {
        let result = Object.assign({}, a);
        for (let event in b) {
          let exists = result[event], add2 = b[event];
          result[event] = exists ? (view, line, event2) => exists(view, line, event2) || add2(view, line, event2) : add2;
        }
        return result;
      }
    });
  }
});
var NumberMarker = class extends GutterMarker {
  constructor(number2) {
    super();
    this.number = number2;
  }
  eq(other) {
    return this.number == other.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
};
function formatNumber(view, number2) {
  return view.state.facet(lineNumberConfig).formatNumber(number2, view.state);
}
var lineNumberGutter = activeGutters.compute([lineNumberConfig], (state) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: false,
  markers(view) {
    return view.state.facet(lineNumberMarkers);
  },
  lineMarker(view, line, others) {
    if (others.some((m) => m.toDOM))
      return null;
    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
  },
  widgetMarker: () => null,
  lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
  initialSpacer(view) {
    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
  },
  updateSpacer(spacer, update) {
    let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
    return max == spacer.number ? spacer : new NumberMarker(max);
  },
  domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
}));
function lineNumbers(config2 = {}) {
  return [
    lineNumberConfig.of(config2),
    gutters(),
    lineNumberGutter
  ];
}
function maxLineNumber(lines) {
  let last = 9;
  while (last < lines)
    last = last * 10 + 9;
  return last;
}
var activeLineGutterMarker = new class extends GutterMarker {
  constructor() {
    super(...arguments);
    this.elementClass = "cm-activeLineGutter";
  }
}();
var activeLineGutterHighlighter = gutterLineClass.compute(["selection"], (state) => {
  let marks2 = [], last = -1;
  for (let range of state.selection.ranges) {
    let linePos = state.doc.lineAt(range.head).from;
    if (linePos > last) {
      last = linePos;
      marks2.push(activeLineGutterMarker.range(linePos));
    }
  }
  return RangeSet.of(marks2);
});
var WhitespaceDeco = /* @__PURE__ */ new Map();
function getWhitespaceDeco(space) {
  let deco = WhitespaceDeco.get(space);
  if (!deco)
    WhitespaceDeco.set(space, deco = Decoration.mark({
      attributes: space === "	" ? {
        class: "cm-highlightTab"
      } : {
        class: "cm-highlightSpace",
        "data-display": space.replace(/ /g, "·")
      }
    }));
  return deco;
}
function matcher(decorator) {
  return ViewPlugin.define((view) => ({
    decorations: decorator.createDeco(view),
    update(u) {
      this.decorations = decorator.updateDeco(u, this.decorations);
    }
  }), {
    decorations: (v) => v.decorations
  });
}
var whitespaceHighlighter = matcher(new MatchDecorator({
  regexp: /\t| +/g,
  decoration: (match) => getWhitespaceDeco(match[0]),
  boundary: /\S/
}));
var trailingHighlighter = matcher(new MatchDecorator({
  regexp: /\s+$/g,
  decoration: Decoration.mark({ class: "cm-trailingSpace" }),
  boundary: /\S/
}));

// node_modules/@lezer/common/dist/index.js
var DefaultBufferLength = 1024;
var nextPropID = 0;
var Range2 = class {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }
};
var NodeProp = class {
  /**
  Create a new node prop type.
  */
  constructor(config2 = {}) {
    this.id = nextPropID++;
    this.perNode = !!config2.perNode;
    this.deserialize = config2.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(match) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    if (typeof match != "function")
      match = NodeType.match(match);
    return (type) => {
      let result = match(type);
      return result === void 0 ? null : [this, result];
    };
  }
};
NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.isolate = new NodeProp({ deserialize: (value) => {
  if (value && value != "rtl" && value != "ltr" && value != "auto")
    throw new RangeError("Invalid value for isolate: " + value);
  return value || "auto";
} });
NodeProp.contextHash = new NodeProp({ perNode: true });
NodeProp.lookAhead = new NodeProp({ perNode: true });
NodeProp.mounted = new NodeProp({ perNode: true });
var MountedTree = class {
  constructor(tree, overlay, parser) {
    this.tree = tree;
    this.overlay = overlay;
    this.parser = parser;
  }
  /**
  @internal
  */
  static get(tree) {
    return tree && tree.props && tree.props[NodeProp.mounted.id];
  }
};
var noProps = /* @__PURE__ */ Object.create(null);
var NodeType = class _NodeType {
  /**
  @internal
  */
  constructor(name2, props, id, flags = 0) {
    this.name = name2;
    this.props = props;
    this.id = id;
    this.flags = flags;
  }
  /**
  Define a node type.
  */
  static define(spec) {
    let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
    let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
    let type = new _NodeType(spec.name || "", props, spec.id, flags);
    if (spec.props)
      for (let src of spec.props) {
        if (!Array.isArray(src))
          src = src(type);
        if (src) {
          if (src[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          props[src[0].id] = src[1];
        }
      }
    return type;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(prop) {
    return this.props[prop.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(name2) {
    if (typeof name2 == "string") {
      if (this.name == name2)
        return true;
      let group = this.prop(NodeProp.group);
      return group ? group.indexOf(name2) > -1 : false;
    }
    return this.id == name2;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(map) {
    let direct = /* @__PURE__ */ Object.create(null);
    for (let prop in map)
      for (let name2 of prop.split(" "))
        direct[name2] = map[prop];
    return (node) => {
      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
        let found = direct[i < 0 ? node.name : groups[i]];
        if (found)
          return found;
      }
    };
  }
};
NodeType.none = new NodeType(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
var NodeSet = class _NodeSet {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(types2) {
    this.types = types2;
    for (let i = 0; i < types2.length; i++)
      if (types2[i].id != i)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...props) {
    let newTypes = [];
    for (let type of this.types) {
      let newProps = null;
      for (let source of props) {
        let add2 = source(type);
        if (add2) {
          if (!newProps)
            newProps = Object.assign({}, type.props);
          newProps[add2[0].id] = add2[1];
        }
      }
      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
    }
    return new _NodeSet(newTypes);
  }
};
var CachedNode = /* @__PURE__ */ new WeakMap();
var CachedInnerNode = /* @__PURE__ */ new WeakMap();
var IterMode;
(function(IterMode2) {
  IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
  IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (IterMode = {}));
var Tree = class _Tree {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(type, children, positions, length, props) {
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length;
    this.props = null;
    if (props && props.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [prop, value] of props)
        this.props[typeof prop == "number" ? prop : prop.id] = value;
    }
  }
  /**
  @internal
  */
  toString() {
    let mounted = MountedTree.get(this);
    if (mounted && !mounted.overlay)
      return mounted.tree.toString();
    let children = "";
    for (let ch of this.children) {
      let str = ch.toString();
      if (str) {
        if (children)
          children += ",";
        children += str;
      }
    }
    return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(mode = 0) {
    return new TreeCursor(this.topNode, mode);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(pos, side = 0, mode = 0) {
    let scope = CachedNode.get(this) || this.topNode;
    let cursor = new TreeCursor(scope);
    cursor.moveTo(pos, side);
    CachedNode.set(this, cursor._tree);
    return cursor;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new TreeNode(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(pos, side = 0) {
    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
    CachedNode.set(this, node);
    return node;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(pos, side = 0) {
    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
    CachedInnerNode.set(this, node);
    return node;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(pos, side = 0) {
    return stackIterator(this, pos, side);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(spec) {
    let { enter, leave, from = 0, to = this.length } = spec;
    let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
    for (let c = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
      let entered = false;
      if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
        if (c.firstChild())
          continue;
        entered = true;
      }
      for (; ; ) {
        if (entered && leave && (anon || !c.type.isAnonymous))
          leave(c);
        if (c.nextSibling())
          break;
        if (!c.parent())
          return;
        entered = true;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(prop) {
    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let result = [];
    if (this.props)
      for (let id in this.props)
        result.push([+id, this.props[id]]);
    return result;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(config2 = {}) {
    return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new _Tree(this.type, children, positions, length, this.propValues), config2.makeTree || ((children, positions, length) => new _Tree(NodeType.none, children, positions, length)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(data) {
    return buildTree(data);
  }
};
Tree.empty = new Tree(NodeType.none, [], [], 0);
var FlatBufferCursor = class _FlatBufferCursor {
  constructor(buffer, index) {
    this.buffer = buffer;
    this.index = index;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new _FlatBufferCursor(this.buffer, this.index);
  }
};
var TreeBuffer = class _TreeBuffer {
  /**
  Create a tree buffer.
  */
  constructor(buffer, length, set) {
    this.buffer = buffer;
    this.length = length;
    this.set = set;
  }
  /**
  @internal
  */
  get type() {
    return NodeType.none;
  }
  /**
  @internal
  */
  toString() {
    let result = [];
    for (let index = 0; index < this.buffer.length; ) {
      result.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result.join(",");
  }
  /**
  @internal
  */
  childString(index) {
    let id = this.buffer[index], endIndex = this.buffer[index + 3];
    let type = this.set.types[id], result = type.name;
    if (/\W/.test(result) && !type.isError)
      result = JSON.stringify(result);
    index += 4;
    if (endIndex == index)
      return result;
    let children = [];
    while (index < endIndex) {
      children.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result + "(" + children.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(startIndex, endIndex, dir, pos, side) {
    let { buffer } = this, pick = -1;
    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
        pick = i;
        if (dir > 0)
          break;
      }
    }
    return pick;
  }
  /**
  @internal
  */
  slice(startI, endI, from) {
    let b = this.buffer;
    let copy = new Uint16Array(endI - startI), len = 0;
    for (let i = startI, j = 0; i < endI; ) {
      copy[j++] = b[i++];
      copy[j++] = b[i++] - from;
      let to = copy[j++] = b[i++] - from;
      copy[j++] = b[i++] - startI;
      len = Math.max(len, to);
    }
    return new _TreeBuffer(copy, len, this.set);
  }
};
function checkSide(side, pos, from, to) {
  switch (side) {
    case -2:
      return from < pos;
    case -1:
      return to >= pos && from < pos;
    case 0:
      return from < pos && to > pos;
    case 1:
      return from <= pos && to > pos;
    case 2:
      return to > pos;
    case 4:
      return true;
  }
}
function resolveNode(node, pos, side, overlays) {
  var _a2;
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent)
      return node;
    node = parent;
  }
  let mode = overlays ? 0 : IterMode.IgnoreOverlays;
  if (overlays)
    for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
        node = parent;
    }
  for (; ; ) {
    let inner = node.enter(pos, side, mode);
    if (!inner)
      return node;
    node = inner;
  }
}
var BaseNode = class {
  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }
  getChild(type, before = null, after = null) {
    let r = getChildren(this, type, before, after);
    return r.length ? r[0] : null;
  }
  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  }
  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }
  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }
  matchContext(context) {
    return matchNodeContext(this, context);
  }
  enterUnfinishedNodesBefore(pos) {
    let scan = this.childBefore(pos), node = this;
    while (scan) {
      let last = scan.lastChild;
      if (!last || last.to != scan.to)
        break;
      if (last.type.isError && last.from == last.to) {
        node = scan;
        scan = last.prevSibling;
      } else {
        scan = last;
      }
    }
    return node;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
};
var TreeNode = class _TreeNode extends BaseNode {
  constructor(_tree, from, index, _parent) {
    super();
    this._tree = _tree;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(i, dir, pos, side, mode = 0) {
    for (let parent = this; ; ) {
      for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
        let next = children[i], start = positions[i] + parent.from;
        if (!checkSide(side, pos, start, start + next.length))
          continue;
        if (next instanceof TreeBuffer) {
          if (mode & IterMode.ExcludeBuffers)
            continue;
          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
          if (index > -1)
            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
        } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
          let mounted;
          if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
            return new _TreeNode(mounted.tree, start, i, parent);
          let inner = new _TreeNode(next, start, i, parent);
          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
        }
      }
      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
        return null;
      if (parent.index >= 0)
        i = parent.index + dir;
      else
        i = dir < 0 ? -1 : parent._parent._tree.children.length;
      parent = parent._parent;
      if (!parent)
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.nextChild(
      0,
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    let mounted;
    if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
      let rPos = pos - this.from;
      for (let { from, to } of mounted.overlay) {
        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
          return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
      }
    }
    return this.nextChild(0, 1, pos, side, mode);
  }
  nextSignificantParent() {
    let val = this;
    while (val.type.isAnonymous && val._parent)
      val = val._parent;
    return val;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
};
function getChildren(node, type, before, after) {
  let cur2 = node.cursor(), result = [];
  if (!cur2.firstChild())
    return result;
  if (before != null)
    for (let found = false; !found; ) {
      found = cur2.type.is(before);
      if (!cur2.nextSibling())
        return result;
    }
  for (; ; ) {
    if (after != null && cur2.type.is(after))
      return result;
    if (cur2.type.is(type))
      result.push(cur2.node);
    if (!cur2.nextSibling())
      return after == null ? result : [];
  }
}
function matchNodeContext(node, context, i = context.length - 1) {
  for (let p = node.parent; i >= 0; p = p.parent) {
    if (!p)
      return false;
    if (!p.type.isAnonymous) {
      if (context[i] && context[i] != p.name)
        return false;
      i--;
    }
  }
  return true;
}
var BufferContext = class {
  constructor(parent, buffer, index, start) {
    this.parent = parent;
    this.buffer = buffer;
    this.index = index;
    this.start = start;
  }
};
var BufferNode = class _BufferNode extends BaseNode {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(context, _parent, index) {
    super();
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  child(dir, pos, side) {
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
    return index < 0 ? null : new _BufferNode(this.context, this, index);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.child(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.child(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    if (mode & IterMode.ExcludeBuffers)
      return null;
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
    return index < 0 ? null : new _BufferNode(this.context, this, index);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(dir) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + dir,
      dir,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer } = this.context;
    let after = buffer.buffer[this.index + 3];
    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
      return new _BufferNode(this.context, this._parent, after);
    return this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer } = this.context;
    let parentStart = this._parent ? this._parent.index + 4 : 0;
    if (this.index == parentStart)
      return this.externalSibling(-1);
    return new _BufferNode(this.context, this._parent, buffer.findChild(
      parentStart,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let children = [], positions = [];
    let { buffer } = this.context;
    let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
    if (endI > startI) {
      let from = buffer.buffer[this.index + 1];
      children.push(buffer.slice(startI, endI, from));
      positions.push(0);
    }
    return new Tree(this.type, children, positions, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
};
function iterStack(heads) {
  if (!heads.length)
    return null;
  let pick = 0, picked = heads[0];
  for (let i = 1; i < heads.length; i++) {
    let node = heads[i];
    if (node.from > picked.from || node.to < picked.to) {
      picked = node;
      pick = i;
    }
  }
  let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
  let newHeads = heads.slice();
  if (next)
    newHeads[pick] = next;
  else
    newHeads.splice(pick, 1);
  return new StackIterator(newHeads, picked);
}
var StackIterator = class {
  constructor(heads, node) {
    this.heads = heads;
    this.node = node;
  }
  get next() {
    return iterStack(this.heads);
  }
};
function stackIterator(tree, pos, side) {
  let inner = tree.resolveInner(pos, side), layers = null;
  for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
    if (scan.index < 0) {
      let parent = scan.parent;
      (layers || (layers = [inner])).push(parent.resolve(pos, side));
      scan = parent;
    } else {
      let mount = MountedTree.get(scan.tree);
      if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
        let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
        (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
      }
    }
  }
  return layers ? iterStack(layers) : inner;
}
var TreeCursor = class {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(node, mode = 0) {
    this.mode = mode;
    this.buffer = null;
    this.stack = [];
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (let n = node._parent; n; n = n._parent)
        this.stack.unshift(n.index);
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  yieldNode(node) {
    if (!node)
      return false;
    this._tree = node;
    this.type = node.type;
    this.from = node.from;
    this.to = node.to;
    return true;
  }
  yieldBuf(index, type) {
    this.index = index;
    let { start, buffer } = this.buffer;
    this.type = type || buffer.set.types[buffer.buffer[index]];
    this.from = start + buffer.buffer[index + 1];
    this.to = start + buffer.buffer[index + 2];
    return true;
  }
  /**
  @internal
  */
  yield(node) {
    if (!node)
      return false;
    if (node instanceof TreeNode) {
      this.buffer = null;
      return this.yieldNode(node);
    }
    this.buffer = node.context;
    return this.yieldBuf(node.index, node.type);
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(dir, pos, side) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
    let { buffer } = this.buffer;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
    if (index < 0)
      return false;
    this.stack.push(this.index);
    return this.yieldBuf(index);
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(pos) {
    return this.enterChild(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(pos) {
    return this.enterChild(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(pos, side, mode = this.mode) {
    if (!this.buffer)
      return this.yield(this._tree.enter(pos, side, mode));
    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    this.buffer = null;
    return this.yieldNode(parent);
  }
  /**
  @internal
  */
  sibling(dir) {
    if (!this.buffer)
      return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
    let { buffer } = this.buffer, d = this.stack.length - 1;
    if (dir < 0) {
      let parentStart = d < 0 ? 0 : this.stack[d] + 4;
      if (this.index != parentStart)
        return this.yieldBuf(buffer.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let after = buffer.buffer[this.index + 3];
      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
        return this.yieldBuf(after);
    }
    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(dir) {
    let index, parent, { buffer } = this;
    if (buffer) {
      if (dir > 0) {
        if (this.index < buffer.buffer.buffer.length)
          return false;
      } else {
        for (let i = 0; i < this.index; i++)
          if (buffer.buffer.buffer[i + 3] < this.index)
            return false;
      }
      ({ index, parent } = buffer);
    } else {
      ({ index, _parent: parent } = this._tree);
    }
    for (; parent; { index, _parent: parent } = parent) {
      if (index > -1)
        for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
          let child = parent._tree.children[i];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
            return false;
        }
    }
    return true;
  }
  move(dir, enter) {
    if (enter && this.enterChild(
      dir,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(dir))
        return true;
      if (this.atLastNode(dir) || !this.parent())
        return false;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(enter = true) {
    return this.move(1, enter);
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(enter = true) {
    return this.move(-1, enter);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(pos, side = 0) {
    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
      if (!this.parent())
        break;
    while (this.enterChild(1, pos, side)) {
    }
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let cache = this.bufferNode, result = null, depth2 = 0;
    if (cache && cache.context == this.buffer) {
      scan:
        for (let index = this.index, d = this.stack.length; d >= 0; ) {
          for (let c = cache; c; c = c._parent)
            if (c.index == index) {
              if (index == this.index)
                return c;
              result = c;
              depth2 = d + 1;
              break scan;
            }
          index = this.stack[--d];
        }
    }
    for (let i = depth2; i < this.stack.length; i++)
      result = new BufferNode(this.buffer, result, this.stack[i]);
    return this.bufferNode = new BufferNode(this.buffer, result, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(enter, leave) {
    for (let depth2 = 0; ; ) {
      let mustLeave = false;
      if (this.type.isAnonymous || enter(this) !== false) {
        if (this.firstChild()) {
          depth2++;
          continue;
        }
        if (!this.type.isAnonymous)
          mustLeave = true;
      }
      for (; ; ) {
        if (mustLeave && leave)
          leave(this);
        mustLeave = this.type.isAnonymous;
        if (this.nextSibling())
          break;
        if (!depth2)
          return;
        this.parent();
        depth2--;
        mustLeave = true;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(context) {
    if (!this.buffer)
      return matchNodeContext(this.node, context);
    let { buffer } = this.buffer, { types: types2 } = buffer.set;
    for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
      if (d < 0)
        return matchNodeContext(this.node, context, i);
      let type = types2[buffer.buffer[this.stack[d]]];
      if (!type.isAnonymous) {
        if (context[i] && context[i] != type.name)
          return false;
        i--;
      }
    }
    return true;
  }
};
function hasChild(tree) {
  return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
}
function buildTree(data) {
  var _a2;
  let { buffer, nodeSet: nodeSet2, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet2.types.length } = data;
  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types2 = nodeSet2.types;
  let contextHash = 0, lookAhead = 0;
  function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth2) {
    let { id, start, end, size } = cursor;
    let lookAheadAtStart = lookAhead;
    while (size < 0) {
      cursor.next();
      if (size == -1) {
        let node2 = reused[id];
        children2.push(node2);
        positions2.push(start - parentStart);
        return;
      } else if (size == -3) {
        contextHash = id;
        return;
      } else if (size == -4) {
        lookAhead = id;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size}`);
      }
    }
    let type = types2[id], node, buffer2;
    let startPos = start - parentStart;
    if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
      let data2 = new Uint16Array(buffer2.size - buffer2.skip);
      let endPos = cursor.pos - buffer2.size, index = data2.length;
      while (cursor.pos > endPos)
        index = copyToBuffer(buffer2.start, data2, index);
      node = new TreeBuffer(data2, end - buffer2.start, nodeSet2);
      startPos = buffer2.start - parentStart;
    } else {
      let endPos = cursor.pos - size;
      cursor.next();
      let localChildren = [], localPositions = [];
      let localInRepeat = id >= minRepeatType ? id : -1;
      let lastGroup = 0, lastEnd = end;
      while (cursor.pos > endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }
          cursor.next();
        } else if (depth2 > 2500) {
          takeFlatNode(start, endPos, localChildren, localPositions);
        } else {
          takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth2 + 1);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type);
        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
      }
    }
    children2.push(node);
    positions2.push(startPos);
  }
  function takeFlatNode(parentStart, minPos, children2, positions2) {
    let nodes = [];
    let nodeCount = 0, stopAt = -1;
    while (cursor.pos > minPos) {
      let { id, start, end, size } = cursor;
      if (size > 4) {
        cursor.next();
      } else if (stopAt > -1 && start < stopAt) {
        break;
      } else {
        if (stopAt < 0)
          stopAt = end - maxBufferLength;
        nodes.push(id, start, end);
        nodeCount++;
        cursor.next();
      }
    }
    if (nodeCount) {
      let buffer2 = new Uint16Array(nodeCount * 4);
      let start = nodes[nodes.length - 2];
      for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
        buffer2[j++] = nodes[i];
        buffer2[j++] = nodes[i + 1] - start;
        buffer2[j++] = nodes[i + 2] - start;
        buffer2[j++] = j;
      }
      children2.push(new TreeBuffer(buffer2, nodes[2] - start, nodeSet2));
      positions2.push(start - parentStart);
    }
  }
  function makeBalanced(type) {
    return (children2, positions2, length2) => {
      let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
      if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
        if (!lastI && last.type == type && last.length == length2)
          return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead))
          lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
      }
      return makeTree(type, children2, positions2, length2, lookAhead2);
    };
  }
  function makeRepeatLeaf(children2, positions2, base2, i, from, to, type, lookAhead2) {
    let localChildren = [], localPositions = [];
    while (children2.length > i) {
      localChildren.push(children2.pop());
      localPositions.push(positions2.pop() + base2 - from);
    }
    children2.push(makeTree(nodeSet2.types[type], localChildren, localPositions, to - from, lookAhead2 - to));
    positions2.push(from - base2);
  }
  function makeTree(type, children2, positions2, length2, lookAhead2 = 0, props) {
    if (contextHash) {
      let pair = [NodeProp.contextHash, contextHash];
      props = props ? [pair].concat(props) : [pair];
    }
    if (lookAhead2 > 25) {
      let pair = [NodeProp.lookAhead, lookAhead2];
      props = props ? [pair].concat(props) : [pair];
    }
    return new Tree(type, children2, positions2, length2, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    let fork = cursor.fork();
    let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
    let result = { size: 0, start: 0, skip: 0 };
    scan:
      for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
        let nodeSize2 = fork.size;
        if (fork.id == inRepeat && nodeSize2 >= 0) {
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        let startPos = fork.pos - nodeSize2;
        if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
          break;
        let localSkipped = fork.id >= minRepeatType ? 4 : 0;
        let nodeStart2 = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3)
              localSkipped += 4;
            else
              break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = nodeStart2;
        size += nodeSize2;
        skip += localSkipped;
      }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : void 0;
  }
  function copyToBuffer(bufferStart, buffer2, index) {
    let { id, start, end, size } = cursor;
    cursor.next();
    if (size >= 0 && id < minRepeatType) {
      let startIndex = index;
      if (size > 4) {
        let endPos = cursor.pos - (size - 4);
        while (cursor.pos > endPos)
          index = copyToBuffer(bufferStart, buffer2, index);
      }
      buffer2[--index] = startIndex;
      buffer2[--index] = end - bufferStart;
      buffer2[--index] = start - bufferStart;
      buffer2[--index] = id;
    } else if (size == -3) {
      contextHash = id;
    } else if (size == -4) {
      lookAhead = id;
    }
    return index;
  }
  let children = [], positions = [];
  while (cursor.pos > 0)
    takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
  let length = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types2[data.topID], children.reverse(), positions.reverse(), length);
}
var nodeSizeCache = /* @__PURE__ */ new WeakMap();
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
    return 1;
  let size = nodeSizeCache.get(node);
  if (size == null) {
    size = 1;
    for (let child of node.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size = 1;
        break;
      }
      size += nodeSize(balanceType, child);
    }
    nodeSizeCache.set(node, size);
  }
  return size;
}
function balanceRange(balanceType, children, positions, from, to, start, length, mkTop, mkTree) {
  let total = 0;
  for (let i = from; i < to; i++)
    total += nodeSize(balanceType, children[i]);
  let maxChild = Math.ceil(
    total * 1.5 / 8
    /* Balance.BranchFactor */
  );
  let localChildren = [], localPositions = [];
  function divide(children2, positions2, from2, to2, offset) {
    for (let i = from2; i < to2; ) {
      let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children2[i]);
      i++;
      for (; i < to2; i++) {
        let nextSize = nodeSize(balanceType, children2[i]);
        if (groupSize + nextSize >= maxChild)
          break;
        groupSize += nextSize;
      }
      if (i == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children2[groupFrom];
          divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
          continue;
        }
        localChildren.push(children2[groupFrom]);
      } else {
        let length2 = positions2[i - 1] + children2[i - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i, groupStart, length2, null, mkTree));
      }
      localPositions.push(groupStart + offset - start);
    }
  }
  divide(children, positions, from, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
}
var TreeFragment = class _TreeFragment {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(from, to, tree, offset, openStart = false, openEnd = false) {
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(tree, fragments = [], partial = false) {
    let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
    for (let f of fragments)
      if (f.to > tree.length)
        result.push(f);
    return result;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(fragments, changes, minGap = 128) {
    if (!changes.length)
      return fragments;
    let result = [];
    let fI = 1, nextF = fragments.length ? fragments[0] : null;
    for (let cI = 0, pos = 0, off = 0; ; cI++) {
      let nextC = cI < changes.length ? changes[cI] : null;
      let nextPos = nextC ? nextC.fromA : 1e9;
      if (nextPos - pos >= minGap)
        while (nextF && nextF.from < nextPos) {
          let cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut)
            result.push(cut);
          if (nextF.to > nextPos)
            break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
      if (!nextC)
        break;
      pos = nextC.toA;
      off = nextC.toA - nextC.toB;
    }
    return result;
  }
};
var Parser = class {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(input, fragments, ranges) {
    if (typeof input == "string")
      input = new StringInput(input);
    ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r) => new Range2(r.from, r.to)) : [new Range2(0, 0)];
    return this.createParse(input, fragments || [], ranges);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(input, fragments, ranges) {
    let parse3 = this.startParse(input, fragments, ranges);
    for (; ; ) {
      let done = parse3.advance();
      if (done)
        return done;
    }
  }
};
var StringInput = class {
  constructor(string2) {
    this.string = string2;
  }
  get length() {
    return this.string.length;
  }
  chunk(from) {
    return this.string.slice(from);
  }
  get lineChunks() {
    return false;
  }
  read(from, to) {
    return this.string.slice(from, to);
  }
};
var stoppedInner = new NodeProp({ perNode: true });

// node_modules/@lezer/highlight/dist/index.js
var nextTagID = 0;
var Tag = class _Tag {
  /**
  @internal
  */
  constructor(set, base2, modified) {
    this.set = set;
    this.base = base2;
    this.modified = modified;
    this.id = nextTagID++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(parent) {
    if (parent === null || parent === void 0 ? void 0 : parent.base)
      throw new Error("Can not derive from a modified tag");
    let tag = new _Tag([], null, []);
    tag.set.push(tag);
    if (parent)
      for (let t2 of parent.set)
        tag.set.push(t2);
    return tag;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let mod = new Modifier();
    return (tag) => {
      if (tag.modified.indexOf(mod) > -1)
        return tag;
      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
    };
  }
};
var nextModifierID = 0;
var Modifier = class _Modifier {
  constructor() {
    this.instances = [];
    this.id = nextModifierID++;
  }
  static get(base2, mods) {
    if (!mods.length)
      return base2;
    let exists = mods[0].instances.find((t2) => t2.base == base2 && sameArray2(mods, t2.modified));
    if (exists)
      return exists;
    let set = [], tag = new Tag(set, base2, mods);
    for (let m of mods)
      m.instances.push(tag);
    let configs = powerSet(mods);
    for (let parent of base2.set)
      if (!parent.modified.length)
        for (let config2 of configs)
          set.push(_Modifier.get(parent, config2));
    return tag;
  }
};
function sameArray2(a, b) {
  return a.length == b.length && a.every((x, i) => x == b[i]);
}
function powerSet(array) {
  let sets = [[]];
  for (let i = 0; i < array.length; i++) {
    for (let j = 0, e = sets.length; j < e; j++) {
      sets.push(sets[j].concat(array[i]));
    }
  }
  return sets.sort((a, b) => b.length - a.length);
}
function styleTags(spec) {
  let byName = /* @__PURE__ */ Object.create(null);
  for (let prop in spec) {
    let tags2 = spec[prop];
    if (!Array.isArray(tags2))
      tags2 = [tags2];
    for (let part of prop.split(" "))
      if (part) {
        let pieces = [], mode = 2, rest = part;
        for (let pos = 0; ; ) {
          if (rest == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1;
            break;
          }
          let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
          if (!m)
            throw new RangeError("Invalid path: " + part);
          pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
          pos += m[0].length;
          if (pos == part.length)
            break;
          let next = part[pos++];
          if (pos == part.length && next == "!") {
            mode = 0;
            break;
          }
          if (next != "/")
            throw new RangeError("Invalid path: " + part);
          rest = part.slice(pos);
        }
        let last = pieces.length - 1, inner = pieces[last];
        if (!inner)
          throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = new NodeProp();
var Rule = class {
  constructor(tags2, mode, context, next) {
    this.tags = tags2;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(other) {
    if (!other || other.depth < this.depth) {
      this.next = other;
      return this;
    }
    other.next = this.sort(other.next);
    return other;
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
};
Rule.empty = new Rule([], 2, null);
function tagHighlighter(tags2, options) {
  let map = /* @__PURE__ */ Object.create(null);
  for (let style of tags2) {
    if (!Array.isArray(style.tag))
      map[style.tag.id] = style.class;
    else
      for (let tag of style.tag)
        map[tag.id] = style.class;
  }
  let { scope, all = null } = options || {};
  return {
    style: (tags3) => {
      let cls = all;
      for (let tag of tags3) {
        for (let sub of tag.set) {
          let tagClass = map[sub.id];
          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }
      return cls;
    },
    scope
  };
}
function highlightTags(highlighters, tags2) {
  let result = null;
  for (let highlighter of highlighters) {
    let value = highlighter.style(tags2);
    if (value)
      result = result ? result + " " + value : value;
  }
  return result;
}
function highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {
  let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
  builder.flush(to);
}
var HighlightBuilder = class {
  constructor(at, highlighters, span) {
    this.at = at;
    this.highlighters = highlighters;
    this.span = span;
    this.class = "";
  }
  startSpan(at, cls) {
    if (cls != this.class) {
      this.flush(at);
      if (at > this.at)
        this.at = at;
      this.class = cls;
    }
  }
  flush(to) {
    if (to > this.at && this.class)
      this.span(this.at, to, this.class);
  }
  highlightRange(cursor, from, to, inheritedClass, highlighters) {
    let { type, from: start, to: end } = cursor;
    if (start >= to || end <= from)
      return;
    if (type.isTop)
      highlighters = this.highlighters.filter((h) => !h.scope || h.scope(type));
    let cls = inheritedClass;
    let rule = getStyleTags(cursor) || Rule.empty;
    let tagCls = highlightTags(highlighters, rule.tags);
    if (tagCls) {
      if (cls)
        cls += " ";
      cls += tagCls;
      if (rule.mode == 1)
        inheritedClass += (inheritedClass ? " " : "") + tagCls;
    }
    this.startSpan(Math.max(from, start), cls);
    if (rule.opaque)
      return;
    let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
    if (mounted && mounted.overlay) {
      let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
      let innerHighlighters = this.highlighters.filter((h) => !h.scope || h.scope(mounted.tree.type));
      let hasChild2 = cursor.firstChild();
      for (let i = 0, pos = start; ; i++) {
        let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
        let nextPos = next ? next.from + start : end;
        let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
        if (rangeFrom < rangeTo && hasChild2) {
          while (cursor.from < rangeTo) {
            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
            this.startSpan(Math.min(rangeTo, cursor.to), cls);
            if (cursor.to >= nextPos || !cursor.nextSibling())
              break;
          }
        }
        if (!next || nextPos > to)
          break;
        pos = next.to + start;
        if (pos > from) {
          this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
          this.startSpan(Math.min(to, pos), cls);
        }
      }
      if (hasChild2)
        cursor.parent();
    } else if (cursor.firstChild()) {
      if (mounted)
        inheritedClass = "";
      do {
        if (cursor.to <= from)
          continue;
        if (cursor.from >= to)
          break;
        this.highlightRange(cursor, from, to, inheritedClass, highlighters);
        this.startSpan(Math.min(to, cursor.to), cls);
      } while (cursor.nextSibling());
      cursor.parent();
    }
  }
};
function getStyleTags(node) {
  let rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context))
    rule = rule.next;
  return rule || null;
}
var t = Tag.define;
var comment = t();
var name = t();
var typeName = t(name);
var propertyName = t(name);
var literal = t();
var string = t(literal);
var number = t(literal);
var content = t();
var heading = t(content);
var keyword = t();
var operator = t();
var punctuation = t();
var bracket = t(punctuation);
var meta = t();
var tags = {
  /**
  A comment.
  */
  comment,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment),
  /**
  Any kind of identifier.
  */
  name,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name),
  /**
  A literal value.
  */
  literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: t(number),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier()
};
var classHighlighter = tagHighlighter([
  { tag: tags.link, class: "tok-link" },
  { tag: tags.heading, class: "tok-heading" },
  { tag: tags.emphasis, class: "tok-emphasis" },
  { tag: tags.strong, class: "tok-strong" },
  { tag: tags.keyword, class: "tok-keyword" },
  { tag: tags.atom, class: "tok-atom" },
  { tag: tags.bool, class: "tok-bool" },
  { tag: tags.url, class: "tok-url" },
  { tag: tags.labelName, class: "tok-labelName" },
  { tag: tags.inserted, class: "tok-inserted" },
  { tag: tags.deleted, class: "tok-deleted" },
  { tag: tags.literal, class: "tok-literal" },
  { tag: tags.string, class: "tok-string" },
  { tag: tags.number, class: "tok-number" },
  { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
  { tag: tags.variableName, class: "tok-variableName" },
  { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
  { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
  { tag: tags.special(tags.variableName), class: "tok-variableName2" },
  { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
  { tag: tags.typeName, class: "tok-typeName" },
  { tag: tags.namespace, class: "tok-namespace" },
  { tag: tags.className, class: "tok-className" },
  { tag: tags.macroName, class: "tok-macroName" },
  { tag: tags.propertyName, class: "tok-propertyName" },
  { tag: tags.operator, class: "tok-operator" },
  { tag: tags.comment, class: "tok-comment" },
  { tag: tags.meta, class: "tok-meta" },
  { tag: tags.invalid, class: "tok-invalid" },
  { tag: tags.punctuation, class: "tok-punctuation" }
]);

// node_modules/@codemirror/language/dist/index.js
var _a;
var languageDataProp = new NodeProp();
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? (values) => values.concat(baseData) : void 0
  });
}
var sublanguageProp = new NodeProp();
var Language = class {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(data, parser, extraExtensions = [], name2 = "") {
    this.data = data;
    this.name = name2;
    if (!EditorState.prototype.hasOwnProperty("tree"))
      Object.defineProperty(EditorState.prototype, "tree", { get() {
        return syntaxTree(this);
      } });
    this.parser = parser;
    this.extension = [
      language.of(this),
      EditorState.languageData.of((state, pos, side) => {
        let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);
        if (!data2)
          return [];
        let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);
        if (sub) {
          let innerNode = top2.resolve(pos - top2.from, side);
          for (let sublang of sub)
            if (sublang.test(innerNode, state)) {
              let data3 = state.facet(sublang.facet);
              return sublang.type == "replace" ? data3 : data3.concat(base2);
            }
        }
        return base2;
      })
    ].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(state, pos, side = -1) {
    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(state) {
    let lang = state.facet(language);
    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
      return [{ from: 0, to: state.doc.length }];
    if (!lang || !lang.allowsNesting)
      return [];
    let result = [];
    let explore = (tree, from) => {
      if (tree.prop(languageDataProp) == this.data) {
        result.push({ from, to: from + tree.length });
        return;
      }
      let mount = tree.prop(NodeProp.mounted);
      if (mount) {
        if (mount.tree.prop(languageDataProp) == this.data) {
          if (mount.overlay)
            for (let r of mount.overlay)
              result.push({ from: r.from + from, to: r.to + from });
          else
            result.push({ from, to: from + tree.length });
          return;
        } else if (mount.overlay) {
          let size = result.length;
          explore(mount.tree, mount.overlay[0].from + from);
          if (result.length > size)
            return;
        }
      }
      for (let i = 0; i < tree.children.length; i++) {
        let ch = tree.children[i];
        if (ch instanceof Tree)
          explore(ch, tree.positions[i] + from);
      }
    };
    explore(syntaxTree(state), 0);
    return result;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
};
Language.setState = StateEffect.define();
function topNodeAt(state, pos, side) {
  let topLang = state.facet(language), tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
      if (node.type.isTop)
        tree = node;
  }
  return tree;
}
function syntaxTree(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
var DocInput = class {
  /**
  Create an input object for the given document.
  */
  constructor(doc2) {
    this.doc = doc2;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc2.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(pos) {
    this.string = this.cursor.next(pos - this.cursorPos).value;
    this.cursorPos = pos + this.string.length;
    return this.cursorPos - this.string.length;
  }
  chunk(pos) {
    this.syncTo(pos);
    return this.string;
  }
  get lineChunks() {
    return true;
  }
  read(from, to) {
    let stringStart = this.cursorPos - this.string.length;
    if (from < stringStart || to >= this.cursorPos)
      return this.doc.sliceString(from, to);
    else
      return this.string.slice(from - stringStart, to - stringStart);
  }
};
var currentContext = null;
var ParseContext = class _ParseContext {
  constructor(parser, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
    this.parser = parser;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(parser, state, viewport) {
    return new _ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
  }
  startParse() {
    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(until, upto) {
    if (upto != null && upto >= this.state.doc.length)
      upto = void 0;
    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
      this.takeTree();
      return true;
    }
    return this.withContext(() => {
      var _a2;
      if (typeof until == "number") {
        let endTime = Date.now() + until;
        until = () => Date.now() > endTime;
      }
      if (!this.parse)
        this.parse = this.startParse();
      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
        this.parse.stopAt(upto);
      for (; ; ) {
        let done = this.parse.advance();
        if (done) {
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
          this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
          this.tree = done;
          this.parse = null;
          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        }
        if (until())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let pos, tree;
    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
        this.parse.stopAt(pos);
      this.withContext(() => {
        while (!(tree = this.parse.advance())) {
        }
      });
      this.treeLen = pos;
      this.tree = tree;
      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
      this.parse = null;
    }
  }
  withContext(f) {
    let prev = currentContext;
    currentContext = this;
    try {
      return f();
    } finally {
      currentContext = prev;
    }
  }
  withoutTempSkipped(fragments) {
    for (let r; r = this.tempSkipped.pop(); )
      fragments = cutFragments(fragments, r.from, r.to);
    return fragments;
  }
  /**
  @internal
  */
  changes(changes, newState) {
    let { fragments, tree, treeLen, viewport, skipped } = this;
    this.takeTree();
    if (!changes.empty) {
      let ranges = [];
      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
      fragments = TreeFragment.applyChanges(fragments, ranges);
      tree = Tree.empty;
      treeLen = 0;
      viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
      if (this.skipped.length) {
        skipped = [];
        for (let r of this.skipped) {
          let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
          if (from < to)
            skipped.push({ from, to });
        }
      }
    }
    return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(viewport) {
    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
      return false;
    this.viewport = viewport;
    let startLen = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from, to } = this.skipped[i];
      if (from < viewport.to && to > viewport.from) {
        this.fragments = cutFragments(this.fragments, from, to);
        this.skipped.splice(i--, 1);
      }
    }
    if (this.skipped.length >= startLen)
      return false;
    this.reset();
    return true;
  }
  /**
  @internal
  */
  reset() {
    if (this.parse) {
      this.takeTree();
      this.parse = null;
    }
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(from, to) {
    this.skipped.push({ from, to });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(until) {
    return new class extends Parser {
      createParse(input, fragments, ranges) {
        let from = ranges[0].from, to = ranges[ranges.length - 1].to;
        let parser = {
          parsedPos: from,
          advance() {
            let cx = currentContext;
            if (cx) {
              for (let r of ranges)
                cx.tempSkipped.push(r);
              if (until)
                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
            }
            this.parsedPos = to;
            return new Tree(NodeType.none, [], [], to - from);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
        return parser;
      }
    }();
  }
  /**
  @internal
  */
  isDone(upto) {
    upto = Math.min(upto, this.state.doc.length);
    let frags = this.fragments;
    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return currentContext;
  }
};
function cutFragments(fragments, from, to) {
  return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
}
var LanguageState = class _LanguageState {
  constructor(context) {
    this.context = context;
    this.tree = context.tree;
  }
  apply(tr) {
    if (!tr.docChanged && this.tree == this.context.tree)
      return this;
    let newCx = this.context.changes(tr.changes, tr.state);
    let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
    if (!newCx.work(20, upto))
      newCx.takeTree();
    return new _LanguageState(newCx);
  }
  static init(state) {
    let vpTo = Math.min(3e3, state.doc.length);
    let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
    if (!parseState.work(20, vpTo))
      parseState.takeTree();
    return new _LanguageState(parseState);
  }
};
Language.state = StateField.define({
  create: LanguageState.init,
  update(value, tr) {
    for (let e of tr.effects)
      if (e.is(Language.setState))
        return e.value;
    if (tr.startState.facet(language) != tr.state.facet(language))
      return LanguageState.init(tr.state);
    return value.apply(tr);
  }
});
var requestIdle = (callback) => {
  let timeout = setTimeout(
    () => callback(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(timeout);
};
if (typeof requestIdleCallback != "undefined")
  requestIdle = (callback) => {
    let idle = -1, timeout = setTimeout(
      () => {
        idle = requestIdleCallback(callback, {
          timeout: 500 - 100
          /* Work.MinPause */
        });
      },
      100
      /* Work.MinPause */
    );
    return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
var parseWorker = ViewPlugin.fromClass(class ParseWorker {
  constructor(view) {
    this.view = view;
    this.working = null;
    this.workScheduled = 0;
    this.chunkEnd = -1;
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  update(update) {
    let cx = this.view.state.field(Language.state).context;
    if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
      this.scheduleWork();
    if (update.docChanged || update.selectionSet) {
      if (this.view.hasFocus)
        this.chunkBudget += 50;
      this.scheduleWork();
    }
    this.checkAsyncSchedule(cx);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state } = this.view, field = state.field(Language.state);
    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
      this.working = requestIdle(this.work);
  }
  work(deadline) {
    this.working = null;
    let now = Date.now();
    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
      this.chunkEnd = now + 3e4;
      this.chunkBudget = 3e3;
    }
    if (this.chunkBudget <= 0)
      return;
    let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
    if (field.tree == field.context.tree && field.context.isDone(
      vpTo + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
    let done = field.context.work(() => {
      return isInputPending && isInputPending() || Date.now() > endTime;
    }, vpTo + (viewportFirst ? 0 : 1e5));
    this.chunkBudget -= Date.now() - now;
    if (done || this.chunkBudget <= 0) {
      field.context.takeTree();
      this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
    }
    if (this.chunkBudget > 0 && !(done && !viewportFirst))
      this.scheduleWork();
    this.checkAsyncSchedule(field.context);
  }
  checkAsyncSchedule(cx) {
    if (cx.scheduleOn) {
      this.workScheduled++;
      cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
      cx.scheduleOn = null;
    }
  }
  destroy() {
    if (this.working)
      this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
});
var language = Facet.define({
  combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: (language2) => [
    Language.state,
    parseWorker,
    EditorView.contentAttributes.compute([language2], (state) => {
      let lang = state.facet(language2);
      return lang && lang.name ? { "data-language": lang.name } : {};
    })
  ]
});
var indentService = Facet.define();
var indentUnit = Facet.define({
  combine: (values) => {
    if (!values.length)
      return "  ";
    let unit = values[0];
    if (!unit || /\S/.test(unit) || Array.from(unit).some((e) => e != unit[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
    return unit;
  }
});
function getIndentUnit(state) {
  let unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
function indentString(state, cols) {
  let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
  if (ch == "	") {
    while (cols >= ts) {
      result += "	";
      cols -= ts;
    }
    ch = " ";
  }
  for (let i = 0; i < cols; i++)
    result += ch;
  return result;
}
function getIndentation(context, pos) {
  if (context instanceof EditorState)
    context = new IndentContext(context);
  for (let service of context.state.facet(indentService)) {
    let result = service(context, pos);
    if (result !== void 0)
      return result;
  }
  let tree = syntaxTree(context.state);
  return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
}
var IndentContext = class {
  /**
  Create an indent context.
  */
  constructor(state, options = {}) {
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(pos, bias = 1) {
    let line = this.state.doc.lineAt(pos);
    let { simulateBreak, simulateDoubleBreak } = this.options;
    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
      if (simulateDoubleBreak && simulateBreak == pos)
        return { text: "", from: pos };
      else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
        return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
      else
        return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
    }
    return line;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(pos, bias = 1) {
    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
      return "";
    let { text, from } = this.lineAt(pos, bias);
    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
  }
  /**
  Find the column for the given position.
  */
  column(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let result = this.countColumn(text, pos - from);
    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
    if (override > -1)
      result += override - this.countColumn(text, text.search(/\S|$/));
    return result;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(line, pos = line.length) {
    return countColumn(line, this.state.tabSize, pos);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let override = this.options.overrideIndentation;
    if (override) {
      let overriden = override(from);
      if (overriden > -1)
        return overriden;
    }
    return this.countColumn(text, text.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
};
var indentNodeProp = new NodeProp();
function syntaxIndentation(cx, ast, pos) {
  let stack = ast.resolveStack(pos);
  let inner = stack.node.enterUnfinishedNodesBefore(pos);
  if (inner != stack.node) {
    let add2 = [];
    for (let cur2 = inner; cur2 != stack.node; cur2 = cur2.parent)
      add2.push(cur2);
    for (let i = add2.length - 1; i >= 0; i--)
      stack = { node: add2[i], next: stack };
  }
  return indentFor(stack, cx, pos);
}
function indentFor(stack, cx, pos) {
  for (let cur2 = stack; cur2; cur2 = cur2.next) {
    let strategy = indentStrategy(cur2.node);
    if (strategy)
      return strategy(TreeIndentContext.create(cx, pos, cur2));
  }
  return 0;
}
function ignoreClosed(cx) {
  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy)
    return strategy;
  let first = tree.firstChild, close;
  if (first && (close = first.type.prop(NodeProp.closedBy))) {
    let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
    return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last.from : void 0);
  }
  return tree.parent == null ? topIndent : null;
}
function topIndent() {
  return 0;
}
var TreeIndentContext = class _TreeIndentContext extends IndentContext {
  constructor(base2, pos, context) {
    super(base2.state, base2.options);
    this.base = base2;
    this.pos = pos;
    this.context = context;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(base2, pos, context) {
    return new _TreeIndentContext(base2, pos, context);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(node) {
    let line = this.state.doc.lineAt(node.from);
    for (; ; ) {
      let atBreak = node.resolve(line.from);
      while (atBreak.parent && atBreak.parent.from == atBreak.from)
        atBreak = atBreak.parent;
      if (isParent(atBreak, node))
        break;
      line = this.state.doc.lineAt(atBreak.from);
    }
    return this.lineIndent(line.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return indentFor(this.context.next, this.base, this.pos);
  }
};
function isParent(parent, of) {
  for (let cur2 = of; cur2; cur2 = cur2.parent)
    if (parent == cur2)
      return true;
  return false;
}
function bracketedAligned(context) {
  let tree = context.node;
  let openToken = tree.childAfter(tree.from), last = tree.lastChild;
  if (!openToken)
    return null;
  let sim = context.options.simulateBreak;
  let openLine = context.state.doc.lineAt(openToken.from);
  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (let pos = openToken.to; ; ) {
    let next = tree.childAfter(pos);
    if (!next || next == last)
      return null;
    if (!next.type.isSkipped)
      return next.from < lineEnd ? openToken : null;
    pos = next.to;
  }
}
function delimitedStrategy(context, align, units, closing2, closedAt) {
  let after = context.textAfter, space = after.match(/^\s*/)[0].length;
  let closed = closing2 && after.slice(space, space + closing2.length) == closing2 || closedAt == context.pos + space;
  let aligned = align ? bracketedAligned(context) : null;
  if (aligned)
    return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
var DontIndentBeyond = 200;
function indentOnInput() {
  return EditorState.transactionFilter.of((tr) => {
    if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
      return tr;
    let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
    if (!rules.length)
      return tr;
    let doc2 = tr.newDoc, { head } = tr.newSelection.main, line = doc2.lineAt(head);
    if (head > line.from + DontIndentBeyond)
      return tr;
    let lineStart = doc2.sliceString(line.from, head);
    if (!rules.some((r) => r.test(lineStart)))
      return tr;
    let { state } = tr, last = -1, changes = [];
    for (let { head: head2 } of state.selection.ranges) {
      let line2 = state.doc.lineAt(head2);
      if (line2.from == last)
        continue;
      last = line2.from;
      let indent = getIndentation(state, line2.from);
      if (indent == null)
        continue;
      let cur2 = /^\s*/.exec(line2.text)[0];
      let norm2 = indentString(state, indent);
      if (cur2 != norm2)
        changes.push({ from: line2.from, to: line2.from + cur2.length, insert: norm2 });
    }
    return changes.length ? [tr, { changes, sequential: true }] : tr;
  });
}
var foldService = Facet.define();
var foldNodeProp = new NodeProp();
function syntaxFolding(state, start, end) {
  let tree = syntaxTree(state);
  if (tree.length < end)
    return null;
  let stack = tree.resolveStack(end, 1);
  let found = null;
  for (let iter = stack; iter; iter = iter.next) {
    let cur2 = iter.node;
    if (cur2.to <= end || cur2.from > end)
      continue;
    if (found && cur2.from < start)
      break;
    let prop = cur2.type.prop(foldNodeProp);
    if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
      let value = prop(cur2, state);
      if (value && value.from <= end && value.from >= start && value.to > end)
        found = value;
    }
  }
  return found;
}
function isUnfinished(node) {
  let ch = node.lastChild;
  return ch && ch.to == node.to && ch.type.isError;
}
function foldable(state, lineStart, lineEnd) {
  for (let service of state.facet(foldService)) {
    let result = service(state, lineStart, lineEnd);
    if (result)
      return result;
  }
  return syntaxFolding(state, lineStart, lineEnd);
}
function mapRange(range, mapping) {
  let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
  return from >= to ? void 0 : { from, to };
}
var foldEffect = StateEffect.define({ map: mapRange });
var unfoldEffect = StateEffect.define({ map: mapRange });
function selectedLines(view) {
  let lines = [];
  for (let { head } of view.state.selection.ranges) {
    if (lines.some((l) => l.from <= head && l.to >= head))
      continue;
    lines.push(view.lineBlockAt(head));
  }
  return lines;
}
var foldState = StateField.define({
  create() {
    return Decoration.none;
  },
  update(folded, tr) {
    folded = folded.map(tr.changes);
    for (let e of tr.effects) {
      if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
        let { preparePlaceholder } = tr.state.facet(foldConfig);
        let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
        folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
      } else if (e.is(unfoldEffect)) {
        folded = folded.update({
          filter: (from, to) => e.value.from != from || e.value.to != to,
          filterFrom: e.value.from,
          filterTo: e.value.to
        });
      }
    }
    if (tr.selection) {
      let onSelection = false, { head } = tr.selection.main;
      folded.between(head, head, (a, b) => {
        if (a < head && b > head)
          onSelection = true;
      });
      if (onSelection)
        folded = folded.update({
          filterFrom: head,
          filterTo: head,
          filter: (a, b) => b <= head || a >= head
        });
    }
    return folded;
  },
  provide: (f) => EditorView.decorations.from(f),
  toJSON(folded, state) {
    let ranges = [];
    folded.between(0, state.doc.length, (from, to) => {
      ranges.push(from, to);
    });
    return ranges;
  },
  fromJSON(value) {
    if (!Array.isArray(value) || value.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let ranges = [];
    for (let i = 0; i < value.length; ) {
      let from = value[i++], to = value[i++];
      if (typeof from != "number" || typeof to != "number")
        throw new RangeError("Invalid JSON for fold state");
      ranges.push(foldWidget.range(from, to));
    }
    return Decoration.set(ranges, true);
  }
});
function findFold(state, from, to) {
  var _a2;
  let found = null;
  (_a2 = state.field(foldState, false)) === null || _a2 === void 0 ? void 0 : _a2.between(from, to, (from2, to2) => {
    if (!found || found.from > from2)
      found = { from: from2, to: to2 };
  });
  return found;
}
function foldExists(folded, from, to) {
  let found = false;
  folded.between(from, from, (a, b) => {
    if (a == from && b == to)
      found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
}
var foldCode = (view) => {
  for (let line of selectedLines(view)) {
    let range = foldable(view.state, line.from, line.to);
    if (range) {
      view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
      return true;
    }
  }
  return false;
};
var unfoldCode = (view) => {
  if (!view.state.field(foldState, false))
    return false;
  let effects = [];
  for (let line of selectedLines(view)) {
    let folded = findFold(view.state, line.from, line.to);
    if (folded)
      effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
  }
  if (effects.length)
    view.dispatch({ effects });
  return effects.length > 0;
};
function announceFold(view, range, fold = true) {
  let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
  return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
}
var foldAll = (view) => {
  let { state } = view, effects = [];
  for (let pos = 0; pos < state.doc.length; ) {
    let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
    if (range)
      effects.push(foldEffect.of(range));
    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
  }
  if (effects.length)
    view.dispatch({ effects: maybeEnable(view.state, effects) });
  return !!effects.length;
};
var unfoldAll = (view) => {
  let field = view.state.field(foldState, false);
  if (!field || !field.size)
    return false;
  let effects = [];
  field.between(0, view.state.doc.length, (from, to) => {
    effects.push(unfoldEffect.of({ from, to }));
  });
  view.dispatch({ effects });
  return true;
};
var foldKeymap = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
  { key: "Ctrl-Alt-[", run: foldAll },
  { key: "Ctrl-Alt-]", run: unfoldAll }
];
var defaultConfig = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
};
var foldConfig = Facet.define({
  combine(values) {
    return combineConfig(values, defaultConfig);
  }
});
function codeFolding(config2) {
  let result = [foldState, baseTheme$12];
  if (config2)
    result.push(foldConfig.of(config2));
  return result;
}
function widgetToDOM(view, prepared) {
  let { state } = view, conf = state.facet(foldConfig);
  let onclick = (event) => {
    let line = view.lineBlockAt(view.posAtDOM(event.target));
    let folded = findFold(view.state, line.from, line.to);
    if (folded)
      view.dispatch({ effects: unfoldEffect.of(folded) });
    event.preventDefault();
  };
  if (conf.placeholderDOM)
    return conf.placeholderDOM(view, onclick, prepared);
  let element = document.createElement("span");
  element.textContent = conf.placeholderText;
  element.setAttribute("aria-label", state.phrase("folded code"));
  element.title = state.phrase("unfold");
  element.className = "cm-foldPlaceholder";
  element.onclick = onclick;
  return element;
}
var foldWidget = Decoration.replace({ widget: new class extends WidgetType {
  toDOM(view) {
    return widgetToDOM(view, null);
  }
}() });
var PreparedFoldWidget = class extends WidgetType {
  constructor(value) {
    super();
    this.value = value;
  }
  eq(other) {
    return this.value == other.value;
  }
  toDOM(view) {
    return widgetToDOM(view, this.value);
  }
};
var baseTheme$12 = EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
var HighlightStyle = class _HighlightStyle {
  constructor(specs, options) {
    this.specs = specs;
    let modSpec;
    function def(spec) {
      let cls = StyleModule.newName();
      (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
      return cls;
    }
    const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
    const scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
    this.style = tagHighlighter(specs.map((style) => ({
      tag: style.tag,
      class: style.class || def(Object.assign({}, style, { tag: null }))
    })), {
      all
    }).style;
    this.module = modSpec ? new StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(specs, options) {
    return new _HighlightStyle(specs, options || {});
  }
};
var highlighterFacet = Facet.define();
var fallbackHighlighter = Facet.define({
  combine(values) {
    return values.length ? [values[0]] : null;
  }
});
function getHighlighters(state) {
  let main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter], themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module)
      ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback)
    ext.push(fallbackHighlighter.of(highlighter));
  else if (themeType)
    ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));
  else
    ext.push(highlighterFacet.of(highlighter));
  return ext;
}
var TreeHighlighter = class {
  constructor(view) {
    this.markCache = /* @__PURE__ */ Object.create(null);
    this.tree = syntaxTree(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
    this.decoratedTo = view.viewport.to;
  }
  update(update) {
    let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
    let styleChange = highlighters != getHighlighters(update.startState);
    let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
    if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
      this.decorations = this.decorations.map(update.changes);
      this.decoratedTo = decoratedToMapped;
    } else if (tree != this.tree || update.viewportChanged || styleChange) {
      this.tree = tree;
      this.decorations = this.buildDeco(update.view, highlighters);
      this.decoratedTo = viewport.to;
    }
  }
  buildDeco(view, highlighters) {
    if (!highlighters || !this.tree.length)
      return Decoration.none;
    let builder = new RangeSetBuilder();
    for (let { from, to } of view.visibleRanges) {
      highlightTree(this.tree, highlighters, (from2, to2, style) => {
        builder.add(from2, to2, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
      }, from, to);
    }
    return builder.finish();
  }
};
var treeHighlighter = Prec.high(ViewPlugin.fromClass(TreeHighlighter, {
  decorations: (v) => v.decorations
}));
var defaultHighlightStyle = HighlightStyle.define([
  {
    tag: tags.meta,
    color: "#404740"
  },
  {
    tag: tags.link,
    textDecoration: "underline"
  },
  {
    tag: tags.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: tags.emphasis,
    fontStyle: "italic"
  },
  {
    tag: tags.strong,
    fontWeight: "bold"
  },
  {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: tags.keyword,
    color: "#708"
  },
  {
    tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
    color: "#219"
  },
  {
    tag: [tags.literal, tags.inserted],
    color: "#164"
  },
  {
    tag: [tags.string, tags.deleted],
    color: "#a11"
  },
  {
    tag: [tags.regexp, tags.escape, tags.special(tags.string)],
    color: "#e40"
  },
  {
    tag: tags.definition(tags.variableName),
    color: "#00f"
  },
  {
    tag: tags.local(tags.variableName),
    color: "#30a"
  },
  {
    tag: [tags.typeName, tags.namespace],
    color: "#085"
  },
  {
    tag: tags.className,
    color: "#167"
  },
  {
    tag: [tags.special(tags.variableName), tags.macroName],
    color: "#256"
  },
  {
    tag: tags.definition(tags.propertyName),
    color: "#00c"
  },
  {
    tag: tags.comment,
    color: "#940"
  },
  {
    tag: tags.invalid,
    color: "#f00"
  }
]);
var baseTheme2 = EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
});
var DefaultScanDist = 1e4;
var DefaultBrackets = "()[]{}";
var bracketMatchingConfig = Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }
});
var matchingMark = Decoration.mark({ class: "cm-matchingBracket" });
var nonmatchingMark = Decoration.mark({ class: "cm-nonmatchingBracket" });
function defaultRenderMatch(match) {
  let decorations2 = [];
  let mark = match.matched ? matchingMark : nonmatchingMark;
  decorations2.push(mark.range(match.start.from, match.start.to));
  if (match.end)
    decorations2.push(mark.range(match.end.from, match.end.to));
  return decorations2;
}
var bracketMatchingState = StateField.define({
  create() {
    return Decoration.none;
  },
  update(deco, tr) {
    if (!tr.docChanged && !tr.selection)
      return deco;
    let decorations2 = [];
    let config2 = tr.state.facet(bracketMatchingConfig);
    for (let range of tr.state.selection.ranges) {
      if (!range.empty)
        continue;
      let match = matchBrackets(tr.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr.state, range.head, 1, config2) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config2));
      if (match)
        decorations2 = decorations2.concat(config2.renderMatch(match, tr.state));
    }
    return Decoration.set(decorations2, true);
  },
  provide: (f) => EditorView.decorations.from(f)
});
var bracketMatchingUnique = [
  bracketMatchingState,
  baseTheme2
];
function bracketMatching(config2 = {}) {
  return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
}
var bracketMatchingHandle = new NodeProp();
function matchingNodes(node, dir, brackets) {
  let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp)
    return byProp;
  if (node.name.length == 1) {
    let index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
      return [brackets[index + dir]];
  }
  return null;
}
function findHandle(node) {
  let hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
function matchBrackets(state, pos, dir, config2 = {}) {
  let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
  let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
  for (let cur2 = node; cur2; cur2 = cur2.parent) {
    let matches = matchingNodes(cur2.type, dir, brackets);
    if (matches && cur2.from < cur2.to) {
      let handle = findHandle(cur2);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
        return matchMarkedBrackets(state, pos, dir, cur2, handle, matches, brackets);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
  let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
  let depth2 = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
    do {
      if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
        if (depth2 == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          let endHandle = findHandle(cursor);
          return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth2++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth2 == 0) {
            let endHandle = findHandle(cursor);
            return {
              start: firstToken,
              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
              matched: false
            };
          }
          depth2--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return { start: firstToken, matched: false };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket2 = brackets.indexOf(startCh);
  if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
    return null;
  let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth2 = 0;
  for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
    let text = iter.value;
    if (dir < 0)
      distance += text.length;
    let basePos = pos + distance * dir;
    for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
      let found = brackets.indexOf(text[pos2]);
      if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
        continue;
      if (found % 2 == 0 == dir > 0) {
        depth2++;
      } else if (depth2 == 1) {
        return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
      } else {
        depth2--;
      }
    }
    if (dir > 0)
      distance += text.length;
  }
  return iter.done ? { start: startToken, matched: false } : null;
}
function countCol(string2, end, tabSize, startIndex = 0, startValue = 0) {
  if (end == null) {
    end = string2.search(/[^\s\u00a0]/);
    if (end == -1)
      end = string2.length;
  }
  let n = startValue;
  for (let i = startIndex; i < end; i++) {
    if (string2.charCodeAt(i) == 9)
      n += tabSize - n % tabSize;
    else
      n++;
  }
  return n;
}
var StringStream = class {
  /**
  Create a stream.
  */
  constructor(string2, tabSize, indentUnit2, overrideIndent) {
    this.string = string2;
    this.tabSize = tabSize;
    this.indentUnit = indentUnit2;
    this.overrideIndent = overrideIndent;
    this.pos = 0;
    this.start = 0;
    this.lastColumnPos = 0;
    this.lastColumnValue = 0;
  }
  /**
  True if we are at the end of the line.
  */
  eol() {
    return this.pos >= this.string.length;
  }
  /**
  True if we are at the start of the line.
  */
  sol() {
    return this.pos == 0;
  }
  /**
  Get the next code unit after the current position, or undefined
  if we're at the end of the line.
  */
  peek() {
    return this.string.charAt(this.pos) || void 0;
  }
  /**
  Read the next code unit and advance `this.pos`.
  */
  next() {
    if (this.pos < this.string.length)
      return this.string.charAt(this.pos++);
  }
  /**
  Match the next character against the given string, regular
  expression, or predicate. Consume and return it if it matches.
  */
  eat(match) {
    let ch = this.string.charAt(this.pos);
    let ok;
    if (typeof match == "string")
      ok = ch == match;
    else
      ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
    if (ok) {
      ++this.pos;
      return ch;
    }
  }
  /**
  Continue matching characters that match the given string,
  regular expression, or predicate function. Return true if any
  characters were consumed.
  */
  eatWhile(match) {
    let start = this.pos;
    while (this.eat(match)) {
    }
    return this.pos > start;
  }
  /**
  Consume whitespace ahead of `this.pos`. Return true if any was
  found.
  */
  eatSpace() {
    let start = this.pos;
    while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
      ++this.pos;
    return this.pos > start;
  }
  /**
  Move to the end of the line.
  */
  skipToEnd() {
    this.pos = this.string.length;
  }
  /**
  Move to directly before the given character, if found on the
  current line.
  */
  skipTo(ch) {
    let found = this.string.indexOf(ch, this.pos);
    if (found > -1) {
      this.pos = found;
      return true;
    }
  }
  /**
  Move back `n` characters.
  */
  backUp(n) {
    this.pos -= n;
  }
  /**
  Get the column position at `this.pos`.
  */
  column() {
    if (this.lastColumnPos < this.start) {
      this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
      this.lastColumnPos = this.start;
    }
    return this.lastColumnValue;
  }
  /**
  Get the indentation column of the current line.
  */
  indentation() {
    var _a2;
    return (_a2 = this.overrideIndent) !== null && _a2 !== void 0 ? _a2 : countCol(this.string, null, this.tabSize);
  }
  /**
  Match the input against the given string or regular expression
  (which should start with a `^`). Return true or the regexp match
  if it matches.
  
  Unless `consume` is set to `false`, this will move `this.pos`
  past the matched text.
  
  When matching a string `caseInsensitive` can be set to true to
  make the match case-insensitive.
  */
  match(pattern, consume, caseInsensitive) {
    if (typeof pattern == "string") {
      let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
      let substr = this.string.substr(this.pos, pattern.length);
      if (cased(substr) == cased(pattern)) {
        if (consume !== false)
          this.pos += pattern.length;
        return true;
      } else
        return null;
    } else {
      let match = this.string.slice(this.pos).match(pattern);
      if (match && match.index > 0)
        return null;
      if (match && consume !== false)
        this.pos += match[0].length;
      return match;
    }
  }
  /**
  Get the current token.
  */
  current() {
    return this.string.slice(this.start, this.pos);
  }
};
function fullParser(spec) {
  return {
    name: spec.name || "",
    token: spec.token,
    blankLine: spec.blankLine || (() => {
    }),
    startState: spec.startState || (() => true),
    copyState: spec.copyState || defaultCopyState,
    indent: spec.indent || (() => null),
    languageData: spec.languageData || {},
    tokenTable: spec.tokenTable || noTokens
  };
}
function defaultCopyState(state) {
  if (typeof state != "object")
    return state;
  let newState = {};
  for (let prop in state) {
    let val = state[prop];
    newState[prop] = val instanceof Array ? val.slice() : val;
  }
  return newState;
}
var IndentedFrom = /* @__PURE__ */ new WeakMap();
var StreamLanguage = class _StreamLanguage extends Language {
  constructor(parser) {
    let data = defineLanguageFacet(parser.languageData);
    let p = fullParser(parser), self2;
    let impl = new class extends Parser {
      createParse(input, fragments, ranges) {
        return new Parse(self2, input, fragments, ranges);
      }
    }();
    super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);
    this.topNode = docID(data);
    self2 = this;
    this.streamParser = p;
    this.stateAfter = new NodeProp({ perNode: true });
    this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
  }
  /**
  Define a stream language.
  */
  static define(spec) {
    return new _StreamLanguage(spec);
  }
  getIndent(cx, pos) {
    let tree = syntaxTree(cx.state), at = tree.resolve(pos);
    while (at && at.type != this.topNode)
      at = at.parent;
    if (!at)
      return null;
    let from = void 0;
    let { overrideIndentation } = cx.options;
    if (overrideIndentation) {
      from = IndentedFrom.get(cx.state);
      if (from != null && from < pos - 1e4)
        from = void 0;
    }
    let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;
    if (start) {
      state = start.state;
      statePos = start.pos + 1;
    } else {
      state = this.streamParser.startState(cx.unit);
      statePos = 0;
    }
    if (pos - statePos > 1e4)
      return null;
    while (statePos < pos) {
      let line2 = cx.state.doc.lineAt(statePos), end = Math.min(pos, line2.to);
      if (line2.length) {
        let indentation = overrideIndentation ? overrideIndentation(line2.from) : -1;
        let stream = new StringStream(line2.text, cx.state.tabSize, cx.unit, indentation < 0 ? void 0 : indentation);
        while (stream.pos < end - line2.from)
          readToken(this.streamParser.token, stream, state);
      } else {
        this.streamParser.blankLine(state, cx.unit);
      }
      if (end == pos)
        break;
      statePos = line2.to + 1;
    }
    let line = cx.lineAt(pos);
    if (overrideIndentation && from == null)
      IndentedFrom.set(cx.state, line.from);
    return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx);
  }
  get allowsNesting() {
    return false;
  }
};
function findState(lang, tree, off, startPos, before) {
  let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
  if (state)
    return { state: lang.streamParser.copyState(state), pos: off + tree.length };
  for (let i = tree.children.length - 1; i >= 0; i--) {
    let child = tree.children[i], pos = off + tree.positions[i];
    let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
    if (found)
      return found;
  }
  return null;
}
function cutTree(lang, tree, from, to, inside2) {
  if (inside2 && from <= 0 && to >= tree.length)
    return tree;
  if (!inside2 && tree.type == lang.topNode)
    inside2 = true;
  for (let i = tree.children.length - 1; i >= 0; i--) {
    let pos = tree.positions[i], child = tree.children[i], inner;
    if (pos < to && child instanceof Tree) {
      if (!(inner = cutTree(lang, child, from - pos, to - pos, inside2)))
        break;
      return !inside2 ? inner : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
    }
  }
  return null;
}
function findStartInFragments(lang, fragments, startPos, editorState) {
  for (let f of fragments) {
    let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
    let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
    if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
      return { state: found.state, tree };
  }
  return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
}
var Parse = class {
  constructor(lang, input, fragments, ranges) {
    this.lang = lang;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.stoppedAt = null;
    this.chunks = [];
    this.chunkPos = [];
    this.chunk = [];
    this.chunkReused = void 0;
    this.rangeIndex = 0;
    this.to = ranges[ranges.length - 1].to;
    let context = ParseContext.get(), from = ranges[0].from;
    let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);
    this.state = state;
    this.parsedPos = this.chunkStart = from + tree.length;
    for (let i = 0; i < tree.children.length; i++) {
      this.chunks.push(tree.children[i]);
      this.chunkPos.push(tree.positions[i]);
    }
    if (context && this.parsedPos < context.viewport.from - 1e5) {
      this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
      context.skipUntilInView(this.parsedPos, context.viewport.from);
      this.parsedPos = context.viewport.from;
    }
    this.moveRangeIndex();
  }
  advance() {
    let context = ParseContext.get();
    let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
    let end = Math.min(
      parseEnd,
      this.chunkStart + 2048
      /* C.ChunkSize */
    );
    if (context)
      end = Math.min(end, context.viewport.to);
    while (this.parsedPos < end)
      this.parseLine(context);
    if (this.chunkStart < this.parsedPos)
      this.finishChunk();
    if (this.parsedPos >= parseEnd)
      return this.finish();
    if (context && this.parsedPos >= context.viewport.to) {
      context.skipUntilInView(this.parsedPos, parseEnd);
      return this.finish();
    }
    return null;
  }
  stopAt(pos) {
    this.stoppedAt = pos;
  }
  lineAfter(pos) {
    let chunk = this.input.chunk(pos);
    if (!this.input.lineChunks) {
      let eol = chunk.indexOf("\n");
      if (eol > -1)
        chunk = chunk.slice(0, eol);
    } else if (chunk == "\n") {
      chunk = "";
    }
    return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
  }
  nextLine() {
    let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;
    for (let index = this.rangeIndex; ; ) {
      let rangeEnd2 = this.ranges[index].to;
      if (rangeEnd2 >= end)
        break;
      line = line.slice(0, rangeEnd2 - (end - line.length));
      index++;
      if (index == this.ranges.length)
        break;
      let rangeStart = this.ranges[index].from;
      let after = this.lineAfter(rangeStart);
      line += after;
      end = rangeStart + after.length;
    }
    return { line, end };
  }
  skipGapsTo(pos, offset, side) {
    for (; ; ) {
      let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;
      if (side > 0 ? end > offPos : end >= offPos)
        break;
      let start = this.ranges[++this.rangeIndex].from;
      offset += start - end;
    }
    return offset;
  }
  moveRangeIndex() {
    while (this.ranges[this.rangeIndex].to < this.parsedPos)
      this.rangeIndex++;
  }
  emitToken(id, from, to, size, offset) {
    if (this.ranges.length > 1) {
      offset = this.skipGapsTo(from, offset, 1);
      from += offset;
      let len0 = this.chunk.length;
      offset = this.skipGapsTo(to, offset, -1);
      to += offset;
      size += this.chunk.length - len0;
    }
    this.chunk.push(id, from, to, size);
    return offset;
  }
  parseLine(context) {
    let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;
    let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
    if (stream.eol()) {
      streamParser.blankLine(this.state, stream.indentUnit);
    } else {
      while (!stream.eol()) {
        let token = readToken(streamParser.token, stream, this.state);
        if (token)
          offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
        if (stream.start > 1e4)
          break;
      }
    }
    this.parsedPos = end;
    this.moveRangeIndex();
    if (this.parsedPos < this.to)
      this.parsedPos++;
  }
  finishChunk() {
    let tree = Tree.build({
      buffer: this.chunk,
      start: this.chunkStart,
      length: this.parsedPos - this.chunkStart,
      nodeSet,
      topID: 0,
      maxBufferLength: 2048,
      reused: this.chunkReused
    });
    tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
    this.chunks.push(tree);
    this.chunkPos.push(this.chunkStart - this.ranges[0].from);
    this.chunk = [];
    this.chunkReused = void 0;
    this.chunkStart = this.parsedPos;
  }
  finish() {
    return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
  }
};
function readToken(token, stream, state) {
  stream.start = stream.pos;
  for (let i = 0; i < 10; i++) {
    let result = token(stream, state);
    if (stream.pos > stream.start)
      return result;
  }
  throw new Error("Stream parser failed to advance stream.");
}
var noTokens = /* @__PURE__ */ Object.create(null);
var typeArray = [NodeType.none];
var nodeSet = new NodeSet(typeArray);
var warned = [];
var byTag = /* @__PURE__ */ Object.create(null);
var defaultTable = /* @__PURE__ */ Object.create(null);
for (let [legacyName, name2] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  defaultTable[legacyName] = createTokenType(noTokens, name2);
var TokenTable = class {
  constructor(extra) {
    this.extra = extra;
    this.table = Object.assign(/* @__PURE__ */ Object.create(null), defaultTable);
  }
  resolve(tag) {
    return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
  }
};
var defaultTokenTable = new TokenTable(noTokens);
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1)
    return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  let tags$1 = [];
  for (let name3 of tagStr.split(" ")) {
    let found = [];
    for (let part of name3.split(".")) {
      let value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!found.length)
          warnForPart(part, `Modifier ${part} used at start of tag`);
        else
          found = found.map(value);
      } else {
        if (found.length)
          warnForPart(part, `Tag ${part} used as modifier`);
        else
          found = Array.isArray(value) ? value : [value];
      }
    }
    for (let tag of found)
      tags$1.push(tag);
  }
  if (!tags$1.length)
    return 0;
  let name2 = tagStr.replace(/ /g, "_"), key = name2 + " " + tags$1.map((t2) => t2.id);
  let known = byTag[key];
  if (known)
    return known.id;
  let type = byTag[key] = NodeType.define({
    id: typeArray.length,
    name: name2,
    props: [styleTags({ [name2]: tags$1 })]
  });
  typeArray.push(type);
  return type.id;
}
function docID(data) {
  let type = NodeType.define({ id: typeArray.length, name: "Document", props: [languageDataProp.add(() => data)], top: true });
  typeArray.push(type);
  return type;
}
function buildForLine(line) {
  return line.length <= 4096 && /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/.test(line);
}
function textHasRTL(text) {
  for (let i = text.iter(); !i.next().done; )
    if (buildForLine(i.value))
      return true;
  return false;
}
function changeAddsRTL(change) {
  let added = false;
  change.iterChanges((fA, tA, fB, tB, ins) => {
    if (!added && textHasRTL(ins))
      added = true;
  });
  return added;
}
var alwaysIsolate = Facet.define({ combine: (values) => values.some((x) => x) });
var isolateMarks = ViewPlugin.fromClass(class {
  constructor(view) {
    this.always = view.state.facet(alwaysIsolate) || view.textDirection != Direction.LTR || view.state.facet(EditorView.perLineTextDirection);
    this.hasRTL = !this.always && textHasRTL(view.state.doc);
    this.tree = syntaxTree(view.state);
    this.decorations = this.always || this.hasRTL ? buildDeco(view, this.tree, this.always) : Decoration.none;
  }
  update(update) {
    let always = update.state.facet(alwaysIsolate) || update.view.textDirection != Direction.LTR || update.state.facet(EditorView.perLineTextDirection);
    if (!always && !this.hasRTL && changeAddsRTL(update.changes))
      this.hasRTL = true;
    if (!always && !this.hasRTL)
      return;
    let tree = syntaxTree(update.state);
    if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {
      this.tree = tree;
      this.always = always;
      this.decorations = buildDeco(update.view, tree, always);
    }
  }
}, {
  provide: (plugin2) => {
    function access(view) {
      var _a2, _b;
      return (_b = (_a2 = view.plugin(plugin2)) === null || _a2 === void 0 ? void 0 : _a2.decorations) !== null && _b !== void 0 ? _b : Decoration.none;
    }
    return [
      EditorView.outerDecorations.of(access),
      Prec.lowest(EditorView.bidiIsolatedRanges.of(access))
    ];
  }
});
function buildDeco(view, tree, always) {
  let deco = new RangeSetBuilder();
  let ranges = view.visibleRanges;
  if (!always)
    ranges = clipRTLLines(ranges, view.state.doc);
  for (let { from, to } of ranges) {
    tree.iterate({
      enter: (node) => {
        let iso = node.type.prop(NodeProp.isolate);
        if (iso)
          deco.add(node.from, node.to, marks[iso]);
      },
      from,
      to
    });
  }
  return deco.finish();
}
function clipRTLLines(ranges, doc2) {
  let cur2 = doc2.iter(), pos = 0, result = [], last = null;
  for (let { from, to } of ranges) {
    if (from != pos) {
      if (pos < from)
        cur2.next(from - pos);
      pos = from;
    }
    for (; ; ) {
      let start = pos, end = pos + cur2.value.length;
      if (!cur2.lineBreak && buildForLine(cur2.value)) {
        if (last && last.to > start - 10)
          last.to = Math.min(to, end);
        else
          result.push(last = { from: start, to: Math.min(to, end) });
      }
      if (pos >= to)
        break;
      pos = end;
      cur2.next();
    }
  }
  return result;
}
var marks = {
  rtl: Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
  ltr: Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
  auto: Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
};

// node_modules/@codemirror/autocomplete/dist/index.js
var CompletionContext = class {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(state, pos, explicit) {
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(types2) {
    let token = syntaxTree(this.state).resolveInner(this.pos, -1);
    while (token && types2.indexOf(token.name) < 0)
      token = token.parent;
    return token ? {
      from: token.from,
      to: this.pos,
      text: this.state.sliceDoc(token.from, this.pos),
      type: token.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(expr) {
    let line = this.state.doc.lineAt(this.pos);
    let start = Math.max(line.from, this.pos - 250);
    let str = line.text.slice(start - line.from, this.pos - line.from);
    let found = str.search(ensureAnchor(expr, false));
    return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */
  addEventListener(type, listener) {
    if (type == "abort" && this.abortListeners)
      this.abortListeners.push(listener);
  }
};
function toSet(chars) {
  let flat = Object.keys(chars).join("");
  let words = /\w/.test(flat);
  if (words)
    flat = flat.replace(/\w/g, "");
  return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}
function prefixMatch(options) {
  let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
  for (let { label } of options) {
    first[label[0]] = true;
    for (let i = 1; i < label.length; i++)
      rest[label[i]] = true;
  }
  let source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
function completeFromList(list) {
  let options = list.map((o) => typeof o == "string" ? { label: o } : o);
  let [validFor, match] = options.every((o) => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return (context) => {
    let token = context.matchBefore(match);
    return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
  };
}
var Option = class {
  constructor(completion, source, match, score2) {
    this.completion = completion;
    this.source = source;
    this.match = match;
    this.score = score2;
  }
};
function cur(state) {
  return state.selection.main.from;
}
function ensureAnchor(expr, start) {
  var _a2;
  let { source } = expr;
  let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd)
    return expr;
  return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
}
var pickedCompletion = Annotation.define();
function insertCompletionText(state, text, from, to) {
  let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
  return Object.assign(Object.assign({}, state.changeByRange((range) => {
    if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
      return { range };
    return {
      changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text },
      range: EditorSelection.cursor(range.from + fromOff + text.length)
    };
  })), { scrollIntoView: true, userEvent: "input.complete" });
}
var SourceCache = /* @__PURE__ */ new WeakMap();
function asSource(source) {
  if (!Array.isArray(source))
    return source;
  let known = SourceCache.get(source);
  if (!known)
    SourceCache.set(source, known = completeFromList(source));
  return known;
}
var startCompletionEffect = StateEffect.define();
var closeCompletionEffect = StateEffect.define();
var FuzzyMatcher = class {
  constructor(pattern) {
    this.pattern = pattern;
    this.chars = [];
    this.folded = [];
    this.any = [];
    this.precise = [];
    this.byWord = [];
    this.score = 0;
    this.matched = [];
    for (let p = 0; p < pattern.length; ) {
      let char = codePointAt(pattern, p), size = codePointSize(char);
      this.chars.push(char);
      let part = pattern.slice(p, p + size), upper = part.toUpperCase();
      this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
      p += size;
    }
    this.astral = pattern.length != this.chars.length;
  }
  ret(score2, matched) {
    this.score = score2;
    this.matched = matched;
    return this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(word) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (word.length < this.pattern.length)
      return null;
    let { chars, folded, any, precise, byWord } = this;
    if (chars.length == 1) {
      let first = codePointAt(word, 0), firstSize = codePointSize(first);
      let score2 = firstSize == word.length ? 0 : -100;
      if (first == chars[0])
        ;
      else if (first == folded[0])
        score2 += -200;
      else
        return null;
      return this.ret(score2, [0, firstSize]);
    }
    let direct = word.indexOf(this.pattern);
    if (direct == 0)
      return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let len = chars.length, anyTo = 0;
    if (direct < 0) {
      for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len; ) {
        let next = codePointAt(word, i);
        if (next == chars[anyTo] || next == folded[anyTo])
          any[anyTo++] = i;
        i += codePointSize(next);
      }
      if (anyTo < len)
        return null;
    }
    let preciseTo = 0;
    let byWordTo = 0, byWordFolded = false;
    let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
    let hasLower = /[a-z]/.test(word), wordAdjacent = true;
    for (let i = 0, e = Math.min(word.length, 200), prevType = 0; i < e && byWordTo < len; ) {
      let next = codePointAt(word, i);
      if (direct < 0) {
        if (preciseTo < len && next == chars[preciseTo])
          precise[preciseTo++] = i;
        if (adjacentTo < len) {
          if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
            if (adjacentTo == 0)
              adjacentStart = i;
            adjacentEnd = i + 1;
            adjacentTo++;
          } else {
            adjacentTo = 0;
          }
        }
      }
      let ch, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 : ch != ch.toUpperCase() ? 2 : 0;
      if (!i || type == 1 && hasLower || prevType == 0 && type != 0) {
        if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true))
          byWord[byWordTo++] = i;
        else if (byWord.length)
          wordAdjacent = false;
      }
      prevType = type;
      i += codePointSize(next);
    }
    if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
      return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
    if (adjacentTo == len && adjacentStart == 0)
      return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
    if (direct > -1)
      return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
    if (adjacentTo == len)
      return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
    if (byWordTo == len)
      return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
    return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
  }
  result(score2, positions, word) {
    let result = [], i = 0;
    for (let pos of positions) {
      let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
      if (i && result[i - 1] == pos)
        result[i - 1] = to;
      else {
        result[i++] = pos;
        result[i++] = to;
      }
    }
    return this.ret(score2 - word.length, result);
  }
};
var StrictMatcher = class {
  constructor(pattern) {
    this.pattern = pattern;
    this.matched = [];
    this.score = 0;
    this.folded = pattern.toLowerCase();
  }
  match(word) {
    if (word.length < this.pattern.length)
      return null;
    let start = word.slice(0, this.pattern.length);
    let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 : null;
    if (match == null)
      return null;
    this.matched = [0, start.length];
    this.score = match + (word.length == this.pattern.length ? 0 : -100);
    return this;
  }
};
var completionConfig = Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      activateOnTyping: true,
      activateOnCompletion: () => false,
      activateOnTypingDelay: 100,
      selectOnOpen: true,
      override: null,
      closeOnBlur: true,
      maxRenderedOptions: 100,
      defaultKeymap: true,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: false,
      icons: true,
      addToOptions: [],
      positionInfo: defaultPositionInfo,
      filterStrict: false,
      compareCompletions: (a, b) => a.label.localeCompare(b.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (a, b) => a && b,
      closeOnBlur: (a, b) => a && b,
      icons: (a, b) => a && b,
      tooltipClass: (a, b) => (c) => joinClass(a(c), b(c)),
      optionClass: (a, b) => (c) => joinClass(a(c), b(c)),
      addToOptions: (a, b) => a.concat(b),
      filterStrict: (a, b) => a || b
    });
  }
});
function joinClass(a, b) {
  return a ? b ? a + " " + b : a : b;
}
function defaultPositionInfo(view, list, option, info, space, tooltip) {
  let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
  let side = "top", offset, maxWidth;
  let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
  let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
  if (left && spaceLeft < Math.min(infoWidth, spaceRight))
    left = false;
  else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
    left = true;
  if (infoWidth <= (left ? spaceLeft : spaceRight)) {
    offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
    maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
  } else {
    narrow = true;
    maxWidth = Math.min(
      400,
      (rtl ? list.right : space.right - list.left) - 30
      /* Info.Margin */
    );
    let spaceBelow = space.bottom - list.bottom;
    if (spaceBelow >= infoHeight || spaceBelow > list.top) {
      offset = option.bottom - list.top;
    } else {
      side = "bottom";
      offset = list.bottom - option.top;
    }
  }
  let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
  let scaleX = (list.right - list.left) / tooltip.offsetWidth;
  return {
    style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
    class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
  };
}
function optionContent(config2) {
  let content2 = config2.addToOptions.slice();
  if (config2.icons)
    content2.push({
      render(completion) {
        let icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type)
          icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
  content2.push({
    render(completion, _s, _v, match) {
      let labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      let label = completion.displayLabel || completion.label, off = 0;
      for (let j = 0; j < match.length; ) {
        let from = match[j++], to = match[j++];
        if (from > off)
          labelElt.appendChild(document.createTextNode(label.slice(off, from)));
        let span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from, to)));
        span.className = "cm-completionMatchedText";
        off = to;
      }
      if (off < label.length)
        labelElt.appendChild(document.createTextNode(label.slice(off)));
      return labelElt;
    },
    position: 50
  }, {
    render(completion) {
      if (!completion.detail)
        return null;
      let detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },
    position: 80
  });
  return content2.sort((a, b) => a.position - b.position).map((a) => a.render);
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max)
    return { from: 0, to: total };
  if (selected < 0)
    selected = 0;
  if (selected <= total >> 1) {
    let off2 = Math.floor(selected / max);
    return { from: off2 * max, to: (off2 + 1) * max };
  }
  let off = Math.floor((total - selected) / max);
  return { from: total - (off + 1) * max, to: total - off * max };
}
var CompletionTooltip = class {
  constructor(view, stateField, applyCompletion2) {
    this.view = view;
    this.stateField = stateField;
    this.applyCompletion = applyCompletion2;
    this.info = null;
    this.infoDestroy = null;
    this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (pos) => this.placeInfo(pos),
      key: this
    };
    this.space = null;
    this.currentClass = "";
    let cState = view.state.field(stateField);
    let { options, selected } = cState.open;
    let config2 = view.state.facet(completionConfig);
    this.optionContent = optionContent(config2);
    this.optionClass = config2.optionClass;
    this.tooltipClass = config2.tooltipClass;
    this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.updateTooltipClass(view.state);
    this.dom.addEventListener("mousedown", (e) => {
      let { options: options2 } = view.state.field(stateField).open;
      for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options2.length) {
          this.applyCompletion(view, options2[+match[1]]);
          e.preventDefault();
          return;
        }
      }
    });
    this.dom.addEventListener("focusout", (e) => {
      let state = view.state.field(this.stateField, false);
      if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM)
        view.dispatch({ effects: closeCompletionEffect.of(null) });
    });
    this.showOptions(options, cState.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(options, id) {
    if (this.list)
      this.list.remove();
    this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
    this.list.addEventListener("scroll", () => {
      if (this.info)
        this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(update) {
    var _a2;
    let cState = update.state.field(this.stateField);
    let prevState = update.startState.field(this.stateField);
    this.updateTooltipClass(update.state);
    if (cState != prevState) {
      let { options, selected, disabled } = cState.open;
      if (!prevState.open || prevState.open.options != options) {
        this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
        this.showOptions(options, cState.id);
      }
      this.updateSel();
      if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
        this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
    }
  }
  updateTooltipClass(state) {
    let cls = this.tooltipClass(state);
    if (cls != this.currentClass) {
      for (let c of this.currentClass.split(" "))
        if (c)
          this.dom.classList.remove(c);
      for (let c of cls.split(" "))
        if (c)
          this.dom.classList.add(c);
      this.currentClass = cls;
    }
  }
  positioned(space) {
    this.space = space;
    if (this.info)
      this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let cState = this.view.state.field(this.stateField), open = cState.open;
    if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
      this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
      this.showOptions(open.options, cState.id);
    }
    if (this.updateSelectedOption(open.selected)) {
      this.destroyInfo();
      let { completion } = open.options[open.selected];
      let { info } = completion;
      if (!info)
        return;
      let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
      if (!infoResult)
        return;
      if ("then" in infoResult) {
        infoResult.then((obj) => {
          if (obj && this.view.state.field(this.stateField, false) == cState)
            this.addInfoPane(obj, completion);
        }).catch((e) => logException(this.view.state, e, "completion info"));
      } else {
        this.addInfoPane(infoResult, completion);
      }
    }
  }
  addInfoPane(content2, completion) {
    this.destroyInfo();
    let wrap = this.info = document.createElement("div");
    wrap.className = "cm-tooltip cm-completionInfo";
    if (content2.nodeType != null) {
      wrap.appendChild(content2);
      this.infoDestroy = null;
    } else {
      let { dom, destroy } = content2;
      wrap.appendChild(dom);
      this.infoDestroy = destroy || null;
    }
    this.dom.appendChild(wrap);
    this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(selected) {
    let set = null;
    for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
      if (opt.nodeName != "LI" || !opt.id) {
        i--;
      } else if (i == selected) {
        if (!opt.hasAttribute("aria-selected")) {
          opt.setAttribute("aria-selected", "true");
          set = opt;
        }
      } else {
        if (opt.hasAttribute("aria-selected"))
          opt.removeAttribute("aria-selected");
      }
    }
    if (set)
      scrollIntoView2(this.list, set);
    return set;
  }
  measureInfo() {
    let sel = this.dom.querySelector("[aria-selected]");
    if (!sel || !this.info)
      return null;
    let listRect = this.dom.getBoundingClientRect();
    let infoRect = this.info.getBoundingClientRect();
    let selRect = sel.getBoundingClientRect();
    let space = this.space;
    if (!space) {
      let win = this.dom.ownerDocument.defaultView || window;
      space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
    }
    if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10)
      return null;
    return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
  }
  placeInfo(pos) {
    if (this.info) {
      if (pos) {
        if (pos.style)
          this.info.style.cssText = pos.style;
        this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
      } else {
        this.info.style.cssText = "top: -1e6px";
      }
    }
  }
  createListBox(options, id, range) {
    const ul = document.createElement("ul");
    ul.id = id;
    ul.setAttribute("role", "listbox");
    ul.setAttribute("aria-expanded", "true");
    ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
    let curSection = null;
    for (let i = range.from; i < range.to; i++) {
      let { completion, match } = options[i], { section } = completion;
      if (section) {
        let name2 = typeof section == "string" ? section : section.name;
        if (name2 != curSection && (i > range.from || range.from == 0)) {
          curSection = name2;
          if (typeof section != "string" && section.header) {
            ul.appendChild(section.header(section));
          } else {
            let header = ul.appendChild(document.createElement("completion-section"));
            header.textContent = name2;
          }
        }
      }
      const li = ul.appendChild(document.createElement("li"));
      li.id = id + "-" + i;
      li.setAttribute("role", "option");
      let cls = this.optionClass(completion);
      if (cls)
        li.className = cls;
      for (let source of this.optionContent) {
        let node = source(completion, this.view.state, this.view, match);
        if (node)
          li.appendChild(node);
      }
    }
    if (range.from)
      ul.classList.add("cm-completionListIncompleteTop");
    if (range.to < options.length)
      ul.classList.add("cm-completionListIncompleteBottom");
    return ul;
  }
  destroyInfo() {
    if (this.info) {
      if (this.infoDestroy)
        this.infoDestroy();
      this.info.remove();
      this.info = null;
    }
  }
  destroy() {
    this.destroyInfo();
  }
};
function completionTooltip(stateField, applyCompletion2) {
  return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
}
function scrollIntoView2(container, element) {
  let parent = container.getBoundingClientRect();
  let self2 = element.getBoundingClientRect();
  let scaleY = parent.height / container.offsetHeight;
  if (self2.top < parent.top)
    container.scrollTop -= (parent.top - self2.top) / scaleY;
  else if (self2.bottom > parent.bottom)
    container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
}
function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}
function sortOptions(active, state) {
  let options = [];
  let sections = null;
  let addOption = (option) => {
    options.push(option);
    let { section } = option.completion;
    if (section) {
      if (!sections)
        sections = [];
      let name2 = typeof section == "string" ? section : section.name;
      if (!sections.some((s) => s.name == name2))
        sections.push(typeof section == "string" ? { name: name2 } : section);
    }
  };
  let conf = state.facet(completionConfig);
  for (let a of active)
    if (a.hasResult()) {
      let getMatch2 = a.result.getMatch;
      if (a.result.filter === false) {
        for (let option of a.result.options) {
          addOption(new Option(option, a.source, getMatch2 ? getMatch2(option) : [], 1e9 - options.length));
        }
      } else {
        let pattern = state.sliceDoc(a.from, a.to), match;
        let matcher2 = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
        for (let option of a.result.options)
          if (match = matcher2.match(option.label)) {
            let matched = !option.displayLabel ? match.matched : getMatch2 ? getMatch2(option, match.matched) : [];
            addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));
          }
      }
    }
  if (sections) {
    let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
    let cmp = (a, b) => {
      var _a2, _b;
      return ((_a2 = a.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);
    };
    for (let s of sections.sort(cmp)) {
      pos -= 1e5;
      sectionOrder[s.name] = pos;
    }
    for (let option of options) {
      let { section } = option.completion;
      if (section)
        option.score += sectionOrder[typeof section == "string" ? section : section.name];
    }
  }
  let result = [], prev = null;
  let compare2 = conf.compareCompletions;
  for (let opt of options.sort((a, b) => b.score - a.score || compare2(a.completion, b.completion))) {
    let cur2 = opt.completion;
    if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
      result.push(opt);
    else if (score(opt.completion) > score(prev))
      result[result.length - 1] = opt;
    prev = opt.completion;
  }
  return result;
}
var CompletionDialog = class _CompletionDialog {
  constructor(options, attrs, tooltip, timestamp, selected, disabled) {
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
    this.disabled = disabled;
  }
  setSelected(selected, id) {
    return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
  }
  static build(active, state, id, prev, conf) {
    let options = sortOptions(active, state);
    if (!options.length) {
      return prev && active.some(
        (a) => a.state == 1
        /* State.Pending */
      ) ? new _CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
    }
    let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
    if (prev && prev.selected != selected && prev.selected != -1) {
      let selectedValue = prev.options[prev.selected].completion;
      for (let i = 0; i < options.length; i++)
        if (options[i].completion == selectedValue) {
          selected = i;
          break;
        }
    }
    return new _CompletionDialog(options, makeAttrs(id, selected), {
      pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
      create: createTooltip,
      above: conf.aboveCursor
    }, prev ? prev.timestamp : Date.now(), selected, false);
  }
  map(changes) {
    return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
};
var CompletionState = class _CompletionState {
  constructor(active, id, open) {
    this.active = active;
    this.id = id;
    this.open = open;
  }
  static start() {
    return new _CompletionState(none2, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(tr) {
    let { state } = tr, conf = state.facet(completionConfig);
    let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
    let active = sources.map((source) => {
      let value = this.active.find((s) => s.source == source) || new ActiveSource(
        source,
        this.active.some(
          (a) => a.state != 0
          /* State.Inactive */
        ) ? 1 : 0
        /* State.Inactive */
      );
      return value.update(tr, conf);
    });
    if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
      active = this.active;
    let open = this.open;
    if (open && tr.docChanged)
      open = open.map(tr.changes);
    if (tr.selection || active.some((a) => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active))
      open = CompletionDialog.build(active, state, this.id, open, conf);
    else if (open && open.disabled && !active.some(
      (a) => a.state == 1
      /* State.Pending */
    ))
      open = null;
    if (!open && active.every(
      (a) => a.state != 1
      /* State.Pending */
    ) && active.some((a) => a.hasResult()))
      active = active.map((a) => a.hasResult() ? new ActiveSource(
        a.source,
        0
        /* State.Inactive */
      ) : a);
    for (let effect of tr.effects)
      if (effect.is(setSelectedEffect))
        open = open && open.setSelected(effect.value, this.id);
    return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : baseAttrs;
  }
};
function sameResults(a, b) {
  if (a == b)
    return true;
  for (let iA = 0, iB = 0; ; ) {
    while (iA < a.length && !a[iA].hasResult)
      iA++;
    while (iB < b.length && !b[iB].hasResult)
      iB++;
    let endA = iA == a.length, endB = iB == b.length;
    if (endA || endB)
      return endA == endB;
    if (a[iA++].result != b[iB++].result)
      return false;
  }
}
var baseAttrs = {
  "aria-autocomplete": "list"
};
function makeAttrs(id, selected) {
  let result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id
  };
  if (selected > -1)
    result["aria-activedescendant"] = id + "-" + selected;
  return result;
}
var none2 = [];
function getUserEvent(tr, conf) {
  if (tr.isUserEvent("input.complete")) {
    let completion = tr.annotation(pickedCompletion);
    if (completion && conf.activateOnCompletion(completion))
      return "input";
  }
  return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
}
var ActiveSource = class _ActiveSource {
  constructor(source, state, explicitPos = -1) {
    this.source = source;
    this.state = state;
    this.explicitPos = explicitPos;
  }
  hasResult() {
    return false;
  }
  update(tr, conf) {
    let event = getUserEvent(tr, conf), value = this;
    if (event)
      value = value.handleUserEvent(tr, event, conf);
    else if (tr.docChanged)
      value = value.handleChange(tr);
    else if (tr.selection && value.state != 0)
      value = new _ActiveSource(
        value.source,
        0
        /* State.Inactive */
      );
    for (let effect of tr.effects) {
      if (effect.is(startCompletionEffect))
        value = new _ActiveSource(value.source, 1, effect.value ? cur(tr.state) : -1);
      else if (effect.is(closeCompletionEffect))
        value = new _ActiveSource(
          value.source,
          0
          /* State.Inactive */
        );
      else if (effect.is(setActiveEffect)) {
        for (let active of effect.value)
          if (active.source == value.source)
            value = active;
      }
    }
    return value;
  }
  handleUserEvent(tr, type, conf) {
    return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new _ActiveSource(
      this.source,
      1
      /* State.Pending */
    );
  }
  handleChange(tr) {
    return tr.changes.touchesRange(cur(tr.startState)) ? new _ActiveSource(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(tr.changes);
  }
  map(changes) {
    return changes.empty || this.explicitPos < 0 ? this : new _ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
  }
};
var ActiveResult = class _ActiveResult extends ActiveSource {
  constructor(source, explicitPos, result, from, to) {
    super(source, 2, explicitPos);
    this.result = result;
    this.from = from;
    this.to = to;
  }
  hasResult() {
    return true;
  }
  handleUserEvent(tr, type, conf) {
    var _a2;
    let result = this.result;
    if (result.map && !tr.changes.empty)
      result = result.map(result, tr.changes);
    let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
    let pos = cur(tr.state);
    if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || !result || type == "delete" && cur(tr.startState) == this.from)
      return new ActiveSource(
        this.source,
        type == "input" && conf.activateOnTyping ? 1 : 0
        /* State.Inactive */
      );
    let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);
    if (checkValid(result.validFor, tr.state, from, to))
      return new _ActiveResult(this.source, explicitPos, result, from, to);
    if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
      return new _ActiveResult(this.source, explicitPos, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr.state));
    return new ActiveSource(this.source, 1, explicitPos);
  }
  handleChange(tr) {
    return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(tr.changes);
  }
  map(mapping) {
    if (mapping.empty)
      return this;
    let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
    if (!result)
      return new ActiveSource(
        this.source,
        0
        /* State.Inactive */
      );
    return new _ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
  }
};
function checkValid(validFor, state, from, to) {
  if (!validFor)
    return false;
  let text = state.sliceDoc(from, to);
  return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
}
var setActiveEffect = StateEffect.define({
  map(sources, mapping) {
    return sources.map((s) => s.map(mapping));
  }
});
var setSelectedEffect = StateEffect.define();
var completionState = StateField.define({
  create() {
    return CompletionState.start();
  },
  update(value, tr) {
    return value.update(tr);
  },
  provide: (f) => [
    showTooltip.from(f, (val) => val.tooltip),
    EditorView.contentAttributes.from(f, (state) => state.attrs)
  ]
});
function applyCompletion(view, option) {
  const apply = option.completion.apply || option.completion.label;
  let result = view.state.field(completionState).active.find((a) => a.source == option.source);
  if (!(result instanceof ActiveResult))
    return false;
  if (typeof apply == "string")
    view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
  else
    apply(view, option.completion, result.from, result.to);
  return true;
}
var createTooltip = completionTooltip(completionState, applyCompletion);
function moveCompletionSelection(forward, by = "option") {
  return (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
      return false;
    let step = 1, tooltip;
    if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
      step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    let { length } = cState.open.options;
    let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
    if (selected < 0)
      selected = by == "page" ? 0 : length - 1;
    else if (selected >= length)
      selected = by == "page" ? length - 1 : 0;
    view.dispatch({ effects: setSelectedEffect.of(selected) });
    return true;
  };
}
var acceptCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
    return false;
  return applyCompletion(view, cState.open.options[cState.open.selected]);
};
var startCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (!cState)
    return false;
  view.dispatch({ effects: startCompletionEffect.of(true) });
  return true;
};
var closeCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(
    (a) => a.state != 0
    /* State.Inactive */
  ))
    return false;
  view.dispatch({ effects: closeCompletionEffect.of(null) });
  return true;
};
var RunningQuery = class {
  constructor(active, context) {
    this.active = active;
    this.context = context;
    this.time = Date.now();
    this.updates = [];
    this.done = void 0;
  }
};
var MaxUpdateCount = 50;
var MinAbortTime = 1e3;
var completionPlugin = ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.pendingStart = false;
    this.composing = 0;
    for (let active of view.state.field(completionState).active)
      if (active.state == 1)
        this.startQuery(active);
  }
  update(update) {
    let cState = update.state.field(completionState);
    let conf = update.state.facet(completionConfig);
    if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
      return;
    let doesReset = update.transactions.some((tr) => {
      return (tr.selection || tr.docChanged) && !getUserEvent(tr, conf);
    });
    for (let i = 0; i < this.running.length; i++) {
      let query = this.running[i];
      if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
        for (let handler of query.context.abortListeners) {
          try {
            handler();
          } catch (e) {
            logException(this.view.state, e);
          }
        }
        query.context.abortListeners = null;
        this.running.splice(i--, 1);
      } else {
        query.updates.push(...update.transactions);
      }
    }
    if (this.debounceUpdate > -1)
      clearTimeout(this.debounceUpdate);
    if (update.transactions.some((tr) => tr.effects.some((e) => e.is(startCompletionEffect))))
      this.pendingStart = true;
    let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
    this.debounceUpdate = cState.active.some((a) => a.state == 1 && !this.running.some((q) => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
    if (this.composing != 0)
      for (let tr of update.transactions) {
        if (getUserEvent(tr, conf) == "input")
          this.composing = 2;
        else if (this.composing == 2 && tr.selection)
          this.composing = 3;
      }
  }
  startUpdate() {
    this.debounceUpdate = -1;
    this.pendingStart = false;
    let { state } = this.view, cState = state.field(completionState);
    for (let active of cState.active) {
      if (active.state == 1 && !this.running.some((r) => r.active.source == active.source))
        this.startQuery(active);
    }
  }
  startQuery(active) {
    let { state } = this.view, pos = cur(state);
    let context = new CompletionContext(state, pos, active.explicitPos == pos);
    let pending = new RunningQuery(active, context);
    this.running.push(pending);
    Promise.resolve(active.source(context)).then((result) => {
      if (!pending.context.aborted) {
        pending.done = result || null;
        this.scheduleAccept();
      }
    }, (err) => {
      this.view.dispatch({ effects: closeCompletionEffect.of(null) });
      logException(this.view.state, err);
    });
  }
  scheduleAccept() {
    if (this.running.every((q) => q.done !== void 0))
      this.accept();
    else if (this.debounceAccept < 0)
      this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var _a2;
    if (this.debounceAccept > -1)
      clearTimeout(this.debounceAccept);
    this.debounceAccept = -1;
    let updated = [];
    let conf = this.view.state.facet(completionConfig);
    for (let i = 0; i < this.running.length; i++) {
      let query = this.running[i];
      if (query.done === void 0)
        continue;
      this.running.splice(i--, 1);
      if (query.done) {
        let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : cur(query.updates.length ? query.updates[0].startState : this.view.state));
        for (let tr of query.updates)
          active = active.update(tr, conf);
        if (active.hasResult()) {
          updated.push(active);
          continue;
        }
      }
      let current = this.view.state.field(completionState).active.find((a) => a.source == query.active.source);
      if (current && current.state == 1) {
        if (query.done == null) {
          let active = new ActiveSource(
            query.active.source,
            0
            /* State.Inactive */
          );
          for (let tr of query.updates)
            active = active.update(tr, conf);
          if (active.state != 1)
            updated.push(active);
        } else {
          this.startQuery(current);
        }
      }
    }
    if (updated.length)
      this.view.dispatch({ effects: setActiveEffect.of(updated) });
  }
}, {
  eventHandlers: {
    blur(event) {
      let state = this.view.state.field(completionState, false);
      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
        let dialog = state.open && getTooltip(this.view, state.open.tooltip);
        if (!dialog || !dialog.dom.contains(event.relatedTarget))
          setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      if (this.composing == 3) {
        setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
      }
      this.composing = 0;
    }
  }
});
var windows = typeof navigator == "object" && /Win/.test(navigator.platform);
var commitCharacters = Prec.highest(EditorView.domEventHandlers({
  keydown(event, view) {
    let field = view.state.field(completionState, false);
    if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
      return false;
    let option = field.open.options[field.open.selected];
    let result = field.active.find((a) => a.source == option.source);
    let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
    if (commitChars && commitChars.indexOf(event.key) > -1)
      applyCompletion(view, option);
    return false;
  }
}));
var baseTheme3 = EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: `${400}px`,
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
var fieldMarker = Decoration.widget({ widget: new class extends WidgetType {
  toDOM() {
    let span = document.createElement("span");
    span.className = "cm-snippetFieldPosition";
    return span;
  }
  ignoreEvent() {
    return false;
  }
}() });
var fieldRange = Decoration.mark({ class: "cm-snippetField" });
var ActiveSnippet = class _ActiveSnippet {
  constructor(ranges, active) {
    this.ranges = ranges;
    this.active = active;
    this.deco = Decoration.set(ranges.map((r) => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
  }
  map(changes) {
    let ranges = [];
    for (let r of this.ranges) {
      let mapped = r.map(changes);
      if (!mapped)
        return null;
      ranges.push(mapped);
    }
    return new _ActiveSnippet(ranges, this.active);
  }
  selectionInsideField(sel) {
    return sel.ranges.every((range) => this.ranges.some((r) => r.field == this.active && r.from <= range.from && r.to >= range.to));
  }
};
var setActive = StateEffect.define({
  map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = StateEffect.define();
var snippetState = StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setActive))
        return effect.value;
      if (effect.is(moveToField) && value)
        return new ActiveSnippet(value.ranges, effect.value);
    }
    if (value && tr.docChanged)
      value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection))
      value = null;
    return value;
  },
  provide: (f) => EditorView.decorations.from(f, (val) => val ? val.deco : Decoration.none)
});
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter((r) => r.field == field).map((r) => EditorSelection.range(r.from, r.to)));
}
function moveField(dir) {
  return ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0)
      return false;
    let next = active.active + dir, last = dir > 0 && !active.ranges.some((r) => r.field == next + dir);
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
      scrollIntoView: true
    }));
    return true;
  };
}
var clearSnippet = ({ state, dispatch }) => {
  let active = state.field(snippetState, false);
  if (!active)
    return false;
  dispatch(state.update({ effects: setActive.of(null) }));
  return true;
};
var nextSnippetField = moveField(1);
var prevSnippetField = moveField(-1);
var defaultSnippetKeymap = [
  { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
  { key: "Escape", run: clearSnippet }
];
var snippetKeymap = Facet.define({
  combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
var addSnippetKeymap = Prec.highest(keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
var snippetPointerHandler = EditorView.domEventHandlers({
  mousedown(event, view) {
    let active = view.state.field(snippetState, false), pos;
    if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
      return false;
    let match = active.ranges.find((r) => r.from <= pos && r.to >= pos);
    if (!match || match.field == active.active)
      return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some((r) => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null),
      scrollIntoView: true
    });
    return true;
  }
});
var defaults2 = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
};
var closeBracketEffect = StateEffect.define({
  map(value, mapping) {
    let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
    return mapped == null ? void 0 : mapped;
  }
});
var closedBracket = new class extends RangeValue {
}();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var bracketState = StateField.define({
  create() {
    return RangeSet.empty;
  },
  update(value, tr) {
    value = value.map(tr.changes);
    if (tr.selection) {
      let line = tr.state.doc.lineAt(tr.selection.main.head);
      value = value.update({ filter: (from) => from >= line.from && from <= line.to });
    }
    for (let effect of tr.effects)
      if (effect.is(closeBracketEffect))
        value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
    return value;
  }
});
function closeBrackets() {
  return [inputHandler2, bracketState];
}
var definedClosing = "()[]{}<>";
function closing(ch) {
  for (let i = 0; i < definedClosing.length; i += 2)
    if (definedClosing.charCodeAt(i) == ch)
      return definedClosing.charAt(i + 1);
  return fromCodePoint(ch < 128 ? ch : ch + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
}
var android = typeof navigator == "object" && /Android\b/.test(navigator.userAgent);
var inputHandler2 = EditorView.inputHandler.of((view, from, to, insert2) => {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
    return false;
  let sel = view.state.selection.main;
  if (insert2.length > 2 || insert2.length == 2 && codePointSize(codePointAt(insert2, 0)) == 1 || from != sel.from || to != sel.to)
    return false;
  let tr = insertBracket(view.state, insert2);
  if (!tr)
    return false;
  view.dispatch(tr);
  return true;
});
var deleteBracketPair = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults2.brackets;
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty) {
      let before = prevChar(state.doc, range.head);
      for (let token of tokens) {
        if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
          return {
            changes: { from: range.head - token.length, to: range.head + token.length },
            range: EditorSelection.cursor(range.head - token.length)
          };
      }
    }
    return { range: dont = range };
  });
  if (!dont)
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
  return !dont;
};
var closeBracketsKeymap = [
  { key: "Backspace", run: deleteBracketPair }
];
function insertBracket(state, bracket2) {
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults2.brackets;
  for (let tok of tokens) {
    let closed = closing(codePointAt(tok, 0));
    if (bracket2 == tok)
      return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
    if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
      return handleClose(state, tok, closed);
  }
  return null;
}
function closedBracketAt(state, pos) {
  let found = false;
  state.field(bracketState).between(0, state.doc.length, (from) => {
    if (from == pos)
      found = true;
  });
  return found;
}
function nextChar(doc2, pos) {
  let next = doc2.sliceString(pos, pos + 2);
  return next.slice(0, codePointSize(codePointAt(next, 0)));
}
function prevChar(doc2, pos) {
  let prev = doc2.sliceString(pos - 2, pos);
  return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
    let next = nextChar(state.doc, range.head);
    if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
      return {
        changes: { insert: open + close, from: range.head },
        effects: closeBracketEffect.of(range.head + open.length),
        range: EditorSelection.cursor(range.head + open.length)
      };
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close) {
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty && nextChar(state.doc, range.head) == close)
      return {
        changes: { from: range.head, to: range.head + close.length, insert: close },
        range: EditorSelection.cursor(range.head + close.length)
      };
    return dont = { range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleSame(state, token, allowTriple, config2) {
  let stringPrefixes = config2.stringPrefixes || defaults2.stringPrefixes;
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
        effects: closeBracketEffect.of(range.to + token.length),
        range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
      };
    let pos = range.head, next = nextChar(state.doc, pos), start;
    if (next == token) {
      if (nodeStart(state, pos)) {
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (closedBracketAt(state, pos)) {
        let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
        let content2 = isTriple ? token + token + token : token;
        return {
          changes: { from: pos, to: pos + content2.length, insert: content2 },
          range: EditorSelection.cursor(pos + content2.length)
        };
      }
    } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
      return {
        changes: { insert: token + token + token + token, from: pos },
        effects: closeBracketEffect.of(pos + token.length),
        range: EditorSelection.cursor(pos + token.length)
      };
    } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
      if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
    }
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  let tree = syntaxTree(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes) {
  let node = syntaxTree(state).resolveInner(pos, -1);
  let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
  for (let i = 0; i < 5; i++) {
    let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
    let quotePos = start.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
      let first = node.firstChild;
      while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
          return false;
        first = first.firstChild;
      }
      return true;
    }
    let parent = node.to == pos && node.parent;
    if (!parent)
      break;
    node = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes) {
  let charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
    return pos;
  for (let prefix of prefixes) {
    let start = pos - prefix.length;
    if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
      return start;
  }
  return -1;
}
function autocompletion(config2 = {}) {
  return [
    commitCharacters,
    completionState,
    completionConfig.of(config2),
    completionPlugin,
    completionKeymapExt,
    baseTheme3
  ];
}
var completionKeymap = [
  { key: "Ctrl-Space", run: startCompletion },
  { key: "Escape", run: closeCompletion },
  { key: "ArrowDown", run: moveCompletionSelection(true) },
  { key: "ArrowUp", run: moveCompletionSelection(false) },
  { key: "PageDown", run: moveCompletionSelection(true, "page") },
  { key: "PageUp", run: moveCompletionSelection(false, "page") },
  { key: "Enter", run: acceptCompletion }
];
var completionKeymapExt = Prec.highest(keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
function completionStatus(state) {
  let cState = state.field(completionState, false);
  return cState && cState.active.some(
    (a) => a.state == 1
    /* State.Pending */
  ) ? "pending" : cState && cState.active.some(
    (a) => a.state != 0
    /* State.Inactive */
  ) ? "active" : null;
}
function setSelectedCompletion(index) {
  return setSelectedEffect.of(index);
}

// node_modules/crelt/index.js
function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string")
    elt = document.createElement(elt);
  var i = 1, next = arguments[1];
  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name2 in next)
      if (Object.prototype.hasOwnProperty.call(next, name2)) {
        var value = next[name2];
        if (typeof value == "string")
          elt.setAttribute(name2, value);
        else if (value != null)
          elt[name2] = value;
      }
    i++;
  }
  for (; i < arguments.length; i++)
    add(elt, arguments[i]);
  return elt;
}
function add(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) {
  } else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++)
      add(elt, child[i]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

// node_modules/@codemirror/search/dist/index.js
var basicNormalize = typeof String.prototype.normalize == "function" ? (x) => x.normalize("NFKD") : (x) => x;
var SearchCursor = class {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(text, query, from = 0, to = text.length, normalize, test) {
    this.test = test;
    this.value = { from: 0, to: 0 };
    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text.iterRange(from, to);
    this.bufferStart = from;
    this.normalize = normalize ? (x) => normalize(basicNormalize(x)) : basicNormalize;
    this.query = this.normalize(query);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      this.bufferStart += this.buffer.length;
      this.iter.next();
      if (this.iter.done)
        return -1;
      this.bufferPos = 0;
      this.buffer = this.iter.value;
    }
    return codePointAt(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    while (this.matches.length)
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let next = this.peek();
      if (next < 0) {
        this.done = true;
        return this;
      }
      let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
      this.bufferPos += codePointSize(next);
      let norm2 = this.normalize(str);
      for (let i = 0, pos = start; ; i++) {
        let code = norm2.charCodeAt(i);
        let match = this.match(code, pos, this.bufferPos + this.bufferStart);
        if (i == norm2.length - 1) {
          if (match) {
            this.value = match;
            return this;
          }
          break;
        }
        if (pos == start && i < str.length && str.charCodeAt(i) == code)
          pos++;
      }
    }
  }
  match(code, pos, end) {
    let match = null;
    for (let i = 0; i < this.matches.length; i += 2) {
      let index = this.matches[i], keep = false;
      if (this.query.charCodeAt(index) == code) {
        if (index == this.query.length - 1) {
          match = { from: this.matches[i + 1], to: end };
        } else {
          this.matches[i]++;
          keep = true;
        }
      }
      if (!keep) {
        this.matches.splice(i, 2);
        i -= 2;
      }
    }
    if (this.query.charCodeAt(0) == code) {
      if (this.query.length == 1)
        match = { from: pos, to: end };
      else
        this.matches.push(1, pos);
    }
    if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
      match = null;
    return match;
  }
};
if (typeof Symbol != "undefined")
  SearchCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
var empty = { from: -1, to: -1, match: /.*/.exec("") };
var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
var RegExpCursor = class {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(text, query, options, from = 0, to = text.length) {
    this.text = text;
    this.to = to;
    this.curLine = "";
    this.done = false;
    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
      return new MultilineRegExpCursor(text, query, options, from, to);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.iter = text.iter();
    let startLine = text.lineAt(from);
    this.curLineStart = startLine.from;
    this.matchPos = toCharEnd(text, from);
    this.getLine(this.curLineStart);
  }
  getLine(skip) {
    this.iter.next(skip);
    if (this.iter.lineBreak) {
      this.curLine = "";
    } else {
      this.curLine = this.iter.value;
      if (this.curLineStart + this.curLine.length > this.to)
        this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
      this.iter.next();
    }
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1;
    if (this.curLineStart > this.to)
      this.curLine = "";
    else
      this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let off = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = off;
      let match = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (match) {
        let from = this.curLineStart + match.index, to = from + match[0].length;
        this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
        if (from == this.curLineStart + this.curLine.length)
          this.nextLine();
        if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
          this.value = { from, to, match };
          return this;
        }
        off = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to) {
        this.nextLine();
        off = 0;
      } else {
        this.done = true;
        return this;
      }
    }
  }
};
var flattened = /* @__PURE__ */ new WeakMap();
var FlattenedDoc = class _FlattenedDoc {
  constructor(from, text) {
    this.from = from;
    this.text = text;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(doc2, from, to) {
    let cached = flattened.get(doc2);
    if (!cached || cached.from >= to || cached.to <= from) {
      let flat = new _FlattenedDoc(from, doc2.sliceString(from, to));
      flattened.set(doc2, flat);
      return flat;
    }
    if (cached.from == from && cached.to == to)
      return cached;
    let { text, from: cachedFrom } = cached;
    if (cachedFrom > from) {
      text = doc2.sliceString(from, cachedFrom) + text;
      cachedFrom = from;
    }
    if (cached.to < to)
      text += doc2.sliceString(cached.to, to);
    flattened.set(doc2, new _FlattenedDoc(cachedFrom, text));
    return new _FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
  }
};
var MultilineRegExpCursor = class {
  constructor(text, query, options, from, to) {
    this.text = text;
    this.to = to;
    this.done = false;
    this.value = empty;
    this.matchPos = toCharEnd(text, from);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.flat = FlattenedDoc.get(text, from, this.chunkEnd(
      from + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(pos) {
    return pos >= this.to ? this.to : this.text.lineAt(pos).to;
  }
  next() {
    for (; ; ) {
      let off = this.re.lastIndex = this.matchPos - this.flat.from;
      let match = this.re.exec(this.flat.text);
      if (match && !match[0] && match.index == off) {
        this.re.lastIndex = off + 1;
        match = this.re.exec(this.flat.text);
      }
      if (match) {
        let from = this.flat.from + match.index, to = from + match[0].length;
        if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {
          this.value = { from, to, match };
          this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
          return this;
        }
      }
      if (this.flat.to == this.to) {
        this.done = true;
        return this;
      }
      this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
};
if (typeof Symbol != "undefined") {
  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a2) {
    return false;
  }
}
function toCharEnd(text, pos) {
  if (pos >= text.length)
    return pos;
  let line = text.lineAt(pos), next;
  while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 56320 && next < 57344)
    pos++;
  return pos;
}
function createLineDialog(view) {
  let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
  let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
  let dom = crelt("form", {
    class: "cm-gotoLine",
    onkeydown: (event) => {
      if (event.keyCode == 27) {
        event.preventDefault();
        view.dispatch({ effects: dialogEffect.of(false) });
        view.focus();
      } else if (event.keyCode == 13) {
        event.preventDefault();
        go();
      }
    },
    onsubmit: (event) => {
      event.preventDefault();
      go();
    }
  }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
  function go() {
    let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match)
      return;
    let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
    let [, sign, ln, cl, percent] = match;
    let col = cl ? +cl.slice(1) : 0;
    let line2 = ln ? +ln : startLine.number;
    if (ln && percent) {
      let pc = line2 / 100;
      if (sign)
        pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line2 = Math.round(state.doc.lines * pc);
    } else if (ln && sign) {
      line2 = line2 * (sign == "-" ? -1 : 1) + startLine.number;
    }
    let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line2)));
    let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
    view.dispatch({
      effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: "center" })],
      selection
    });
    view.focus();
  }
  return { dom };
}
var dialogEffect = StateEffect.define();
var dialogField = StateField.define({
  create() {
    return true;
  },
  update(value, tr) {
    for (let e of tr.effects)
      if (e.is(dialogEffect))
        value = e.value;
    return value;
  },
  provide: (f) => showPanel.from(f, (val) => val ? createLineDialog : null)
});
var gotoLine = (view) => {
  let panel = getPanel(view, createLineDialog);
  if (!panel) {
    let effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null)
      effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
    view.dispatch({ effects });
    panel = getPanel(view, createLineDialog);
  }
  if (panel)
    panel.dom.querySelector("input").select();
  return true;
};
var baseTheme$13 = EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": { fontSize: "80%" }
  }
});
var defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: false
};
var highlightConfig = Facet.define({
  combine(options) {
    return combineConfig(options, defaultHighlightOptions, {
      highlightWordAroundCursor: (a, b) => a || b,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
var matchDeco = Decoration.mark({ class: "cm-selectionMatch" });
var mainMatchDeco = Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function insideWordBoundaries(check, state, from, to) {
  return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
}
function insideWord(check, state, from, to) {
  return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
}
var matchHighlighter = ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.selectionSet || update.docChanged || update.viewportChanged)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let conf = view.state.facet(highlightConfig);
    let { state } = view, sel = state.selection;
    if (sel.ranges.length > 1)
      return Decoration.none;
    let range = sel.main, query, check = null;
    if (range.empty) {
      if (!conf.highlightWordAroundCursor)
        return Decoration.none;
      let word = state.wordAt(range.head);
      if (!word)
        return Decoration.none;
      check = state.charCategorizer(range.head);
      query = state.sliceDoc(word.from, word.to);
    } else {
      let len = range.to - range.from;
      if (len < conf.minSelectionLength || len > 200)
        return Decoration.none;
      if (conf.wholeWords) {
        query = state.sliceDoc(range.from, range.to);
        check = state.charCategorizer(range.head);
        if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
          return Decoration.none;
      } else {
        query = state.sliceDoc(range.from, range.to);
        if (!query)
          return Decoration.none;
      }
    }
    let deco = [];
    for (let part of view.visibleRanges) {
      let cursor = new SearchCursor(state.doc, query, part.from, part.to);
      while (!cursor.next().done) {
        let { from, to } = cursor.value;
        if (!check || insideWordBoundaries(check, state, from, to)) {
          if (range.empty && from <= range.from && to >= range.to)
            deco.push(mainMatchDeco.range(from, to));
          else if (from >= range.to || to <= range.from)
            deco.push(matchDeco.range(from, to));
          if (deco.length > conf.maxMatches)
            return Decoration.none;
        }
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v) => v.decorations
});
var defaultTheme = EditorView.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
});
var selectWord = ({ state, dispatch }) => {
  let { selection } = state;
  let newSel = EditorSelection.create(selection.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
  if (newSel.eq(selection))
    return false;
  dispatch(state.update({ selection: newSel }));
  return true;
};
function findNextOccurrence(state, query) {
  let { main, ranges } = state.selection;
  let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
  for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
    cursor.next();
    if (cursor.done) {
      if (cycled)
        return null;
      cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
      cycled = true;
    } else {
      if (cycled && ranges.some((r) => r.from == cursor.value.from))
        continue;
      if (fullWord) {
        let word2 = state.wordAt(cursor.value.from);
        if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
          continue;
      }
      return cursor.value;
    }
  }
}
var selectNextOccurrence = ({ state, dispatch }) => {
  let { ranges } = state.selection;
  if (ranges.some((sel) => sel.from === sel.to))
    return selectWord({ state, dispatch });
  let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some((r) => state.sliceDoc(r.from, r.to) != searchedText))
    return false;
  let range = findNextOccurrence(state, searchedText);
  if (!range)
    return false;
  dispatch(state.update({
    selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
    effects: EditorView.scrollIntoView(range.to)
  }));
  return true;
};
var searchConfigFacet = Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      top: false,
      caseSensitive: false,
      literal: false,
      regexp: false,
      wholeWord: false,
      createPanel: (view) => new SearchPanel(view),
      scrollToMatch: (range) => EditorView.scrollIntoView(range)
    });
  }
});
function search(config2) {
  return config2 ? [searchConfigFacet.of(config2), searchExtensions] : searchExtensions;
}
var SearchQuery = class {
  /**
  Create a query object.
  */
  constructor(config2) {
    this.search = config2.search;
    this.caseSensitive = !!config2.caseSensitive;
    this.literal = !!config2.literal;
    this.regexp = !!config2.regexp;
    this.replace = config2.replace || "";
    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
    this.unquoted = this.unquote(this.search);
    this.wholeWord = !!config2.wholeWord;
  }
  /**
  @internal
  */
  unquote(text) {
    return this.literal ? text : text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(other) {
    return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(state, from = 0, to) {
    let st = state.doc ? state : EditorState.create({ doc: state });
    if (to == null)
      to = st.doc.length;
    return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
  }
};
var QueryType2 = class {
  constructor(spec) {
    this.spec = spec;
  }
};
function stringCursor(spec, state, from, to) {
  return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? void 0 : (x) => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
}
function stringWordTest(doc2, categorizer) {
  return (from, to, buf, bufPos) => {
    if (bufPos > from || bufPos + buf.length < to) {
      bufPos = Math.max(0, from - 2);
      buf = doc2.sliceString(bufPos, Math.min(doc2.length, to + 2));
    }
    return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
  };
}
var StringQuery = class extends QueryType2 {
  constructor(spec) {
    super(spec);
  }
  nextMatch(state, curFrom, curTo) {
    let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
    if (cursor.done)
      cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
    return cursor.done ? null : cursor.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(state, from, to) {
    for (let pos = to; ; ) {
      let start = Math.max(from, pos - 1e4 - this.spec.unquoted.length);
      let cursor = stringCursor(this.spec, state, start, pos), range = null;
      while (!cursor.nextOverlapping().done)
        range = cursor.value;
      if (range)
        return range;
      if (start == from)
        return null;
      pos -= 1e4;
    }
  }
  prevMatch(state, curFrom, curTo) {
    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
  }
  getReplacement(_result) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(state, limit) {
    let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor.value);
    }
    return ranges;
  }
  highlight(state, from, to, add2) {
    let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
    while (!cursor.next().done)
      add2(cursor.value.from, cursor.value.to);
  }
};
function regexpCursor(spec, state, from, to) {
  return new RegExpCursor(state.doc, spec.search, {
    ignoreCase: !spec.caseSensitive,
    test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
  }, from, to);
}
function charBefore(str, index) {
  return str.slice(findClusterBreak(str, index, false), index);
}
function charAfter(str, index) {
  return str.slice(index, findClusterBreak(str, index));
}
function regexpWordTest(categorizer) {
  return (_from, _to, match) => !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
}
var RegExpQuery = class extends QueryType2 {
  nextMatch(state, curFrom, curTo) {
    let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
    if (cursor.done)
      cursor = regexpCursor(this.spec, state, 0, curFrom).next();
    return cursor.done ? null : cursor.value;
  }
  prevMatchInRange(state, from, to) {
    for (let size = 1; ; size++) {
      let start = Math.max(
        from,
        to - size * 1e4
        /* FindPrev.ChunkSize */
      );
      let cursor = regexpCursor(this.spec, state, start, to), range = null;
      while (!cursor.next().done)
        range = cursor.value;
      if (range && (start == from || range.from > start + 10))
        return range;
      if (start == from)
        return null;
    }
  }
  prevMatch(state, curFrom, curTo) {
    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
  }
  getReplacement(result) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$" : i == "&" ? result.match[0] : i != "0" && +i < result.match.length ? result.match[i] : m);
  }
  matchAll(state, limit) {
    let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor.value);
    }
    return ranges;
  }
  highlight(state, from, to, add2) {
    let cursor = regexpCursor(this.spec, state, Math.max(
      0,
      from - 250
      /* RegExp.HighlightMargin */
    ), Math.min(to + 250, state.doc.length));
    while (!cursor.next().done)
      add2(cursor.value.from, cursor.value.to);
  }
};
var setSearchQuery = StateEffect.define();
var togglePanel = StateEffect.define();
var searchState = StateField.define({
  create(state) {
    return new SearchState(defaultQuery(state).create(), null);
  },
  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setSearchQuery))
        value = new SearchState(effect.value.create(), value.panel);
      else if (effect.is(togglePanel))
        value = new SearchState(value.query, effect.value ? createSearchPanel : null);
    }
    return value;
  },
  provide: (f) => showPanel.from(f, (val) => val.panel)
});
function getSearchQuery(state) {
  let curState = state.field(searchState, false);
  return curState ? curState.query.spec : defaultQuery(state);
}
var SearchState = class {
  constructor(query, panel) {
    this.query = query;
    this.panel = panel;
  }
};
var matchMark = Decoration.mark({ class: "cm-searchMatch" });
var selectedMatchMark = Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
var searchHighlighter = ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }
  update(update) {
    let state = update.state.field(searchState);
    if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
      this.decorations = this.highlight(state);
  }
  highlight({ query, panel }) {
    if (!panel || !query.spec.valid)
      return Decoration.none;
    let { view } = this;
    let builder = new RangeSetBuilder();
    for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
      let { from, to } = ranges[i];
      while (i < l - 1 && to > ranges[i + 1].from - 2 * 250)
        to = ranges[++i].to;
      query.highlight(view.state, from, to, (from2, to2) => {
        let selected = view.state.selection.ranges.some((r) => r.from == from2 && r.to == to2);
        builder.add(from2, to2, selected ? selectedMatchMark : matchMark);
      });
    }
    return builder.finish();
  }
}, {
  decorations: (v) => v.decorations
});
function searchCommand(f) {
  return (view) => {
    let state = view.state.field(searchState, false);
    return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
  };
}
var findNext = searchCommand((view, { query }) => {
  let { to } = view.state.selection.main;
  let next = query.nextMatch(view.state, to, to);
  if (!next)
    return false;
  let selection = EditorSelection.single(next.from, next.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection,
    effects: [announceMatch(view, next), config2.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var findPrevious = searchCommand((view, { query }) => {
  let { state } = view, { from } = state.selection.main;
  let prev = query.prevMatch(state, from, from);
  if (!prev)
    return false;
  let selection = EditorSelection.single(prev.from, prev.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection,
    effects: [announceMatch(view, prev), config2.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var selectMatches = searchCommand((view, { query }) => {
  let ranges = query.matchAll(view.state, 1e3);
  if (!ranges || !ranges.length)
    return false;
  view.dispatch({
    selection: EditorSelection.create(ranges.map((r) => EditorSelection.range(r.from, r.to))),
    userEvent: "select.search.matches"
  });
  return true;
});
var selectSelectionMatches = ({ state, dispatch }) => {
  let sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty)
    return false;
  let { from, to } = sel.main;
  let ranges = [], main = 0;
  for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur2.next().done; ) {
    if (ranges.length > 1e3)
      return false;
    if (cur2.value.from == from)
      main = ranges.length;
    ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
  }
  dispatch(state.update({
    selection: EditorSelection.create(ranges, main),
    userEvent: "select.search.matches"
  }));
  return true;
};
var replaceNext = searchCommand((view, { query }) => {
  let { state } = view, { from, to } = state.selection.main;
  if (state.readOnly)
    return false;
  let next = query.nextMatch(state, from, from);
  if (!next)
    return false;
  let changes = [], selection, replacement;
  let effects = [];
  if (next.from == from && next.to == to) {
    replacement = state.toText(query.getReplacement(next));
    changes.push({ from: next.from, to: next.to, insert: replacement });
    next = query.nextMatch(state, next.from, next.to);
    effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
  }
  if (next) {
    let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
    selection = EditorSelection.single(next.from - off, next.to - off);
    effects.push(announceMatch(view, next));
    effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
  }
  view.dispatch({
    changes,
    selection,
    effects,
    userEvent: "input.replace"
  });
  return true;
});
var replaceAll = searchCommand((view, { query }) => {
  if (view.state.readOnly)
    return false;
  let changes = query.matchAll(view.state, 1e9).map((match) => {
    let { from, to } = match;
    return { from, to, insert: query.getReplacement(match) };
  });
  if (!changes.length)
    return false;
  let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
  view.dispatch({
    changes,
    effects: EditorView.announce.of(announceText),
    userEvent: "input.replace.all"
  });
  return true;
});
function createSearchPanel(view) {
  return view.state.facet(searchConfigFacet).createPanel(view);
}
function defaultQuery(state, fallback) {
  var _a2, _b, _c, _d, _e;
  let sel = state.selection.main;
  let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  if (fallback && !selText)
    return fallback;
  let config2 = state.facet(searchConfigFacet);
  return new SearchQuery({
    search: ((_a2 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a2 !== void 0 ? _a2 : config2.literal) ? selText : selText.replace(/\n/g, "\\n"),
    caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config2.caseSensitive,
    literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config2.literal,
    regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config2.regexp,
    wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config2.wholeWord
  });
}
function getSearchInput(view) {
  let panel = getPanel(view, createSearchPanel);
  return panel && panel.dom.querySelector("[main-field]");
}
function selectSearchInput(view) {
  let input = getSearchInput(view);
  if (input && input == view.root.activeElement)
    input.select();
}
var openSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (state && state.panel) {
    let searchInput = getSearchInput(view);
    if (searchInput && searchInput != view.root.activeElement) {
      let query = defaultQuery(view.state, state.query.spec);
      if (query.valid)
        view.dispatch({ effects: setSearchQuery.of(query) });
      searchInput.focus();
      searchInput.select();
    }
  } else {
    view.dispatch({ effects: [
      togglePanel.of(true),
      state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
    ] });
  }
  return true;
};
var closeSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (!state || !state.panel)
    return false;
  let panel = getPanel(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement))
    view.focus();
  view.dispatch({ effects: togglePanel.of(false) });
  return true;
};
var searchKeymap = [
  { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
  { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: selectSelectionMatches },
  { key: "Mod-Alt-g", run: gotoLine },
  { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
];
var SearchPanel = class {
  constructor(view) {
    this.view = view;
    let query = this.query = view.state.field(searchState).query.spec;
    this.commit = this.commit.bind(this);
    this.searchField = crelt("input", {
      value: query.search,
      placeholder: phrase(view, "Find"),
      "aria-label": phrase(view, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.replaceField = crelt("input", {
      value: query.replace,
      placeholder: phrase(view, "Replace"),
      "aria-label": phrase(view, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.caseField = crelt("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: query.caseSensitive,
      onchange: this.commit
    });
    this.reField = crelt("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: query.regexp,
      onchange: this.commit
    });
    this.wordField = crelt("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: query.wholeWord,
      onchange: this.commit
    });
    function button(name2, onclick, content2) {
      return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content2);
    }
    this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
      this.searchField,
      button("next", () => findNext(view), [phrase(view, "next")]),
      button("prev", () => findPrevious(view), [phrase(view, "previous")]),
      button("select", () => selectMatches(view), [phrase(view, "all")]),
      crelt("label", null, [this.caseField, phrase(view, "match case")]),
      crelt("label", null, [this.reField, phrase(view, "regexp")]),
      crelt("label", null, [this.wordField, phrase(view, "by word")]),
      ...view.state.readOnly ? [] : [
        crelt("br"),
        this.replaceField,
        button("replace", () => replaceNext(view), [phrase(view, "replace")]),
        button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
      ],
      crelt("button", {
        name: "close",
        onclick: () => closeSearchPanel(view),
        "aria-label": phrase(view, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let query = new SearchQuery({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    if (!query.eq(this.query)) {
      this.query = query;
      this.view.dispatch({ effects: setSearchQuery.of(query) });
    }
  }
  keydown(e) {
    if (runScopeHandlers(this.view, e, "search-panel")) {
      e.preventDefault();
    } else if (e.keyCode == 13 && e.target == this.searchField) {
      e.preventDefault();
      (e.shiftKey ? findPrevious : findNext)(this.view);
    } else if (e.keyCode == 13 && e.target == this.replaceField) {
      e.preventDefault();
      replaceNext(this.view);
    }
  }
  update(update) {
    for (let tr of update.transactions)
      for (let effect of tr.effects) {
        if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
          this.setQuery(effect.value);
      }
  }
  setQuery(query) {
    this.query = query;
    this.searchField.value = query.search;
    this.replaceField.value = query.replace;
    this.caseField.checked = query.caseSensitive;
    this.reField.checked = query.regexp;
    this.wordField.checked = query.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(searchConfigFacet).top;
  }
};
function phrase(view, phrase2) {
  return view.state.phrase(phrase2);
}
var AnnounceMargin = 30;
var Break = /[\s\.,:;?!]/;
function announceMatch(view, { from, to }) {
  let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
  let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
  let text = view.state.sliceDoc(start, end);
  if (start != line.from) {
    for (let i = 0; i < AnnounceMargin; i++)
      if (!Break.test(text[i + 1]) && Break.test(text[i])) {
        text = text.slice(i);
        break;
      }
  }
  if (end != lineEnd) {
    for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
      if (!Break.test(text[i - 1]) && Break.test(text[i])) {
        text = text.slice(0, i);
        break;
      }
  }
  return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
}
var baseTheme4 = EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
});
var searchExtensions = [
  searchState,
  Prec.low(searchHighlighter),
  baseTheme4
];

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@neo4j-cypher/codemirror/es/cypher-codemirror-base.js
var _excluded = ["line", "column"];
var _excluded2 = ["line", "column"];
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var THEME_LIGHT = "light";
var THEME_DARK = "dark";
var THEME_AUTO = "auto";
var defaultLineNumberFormatter = (line, lineCount) => {
  if (lineCount === 1) {
    return "$";
  } else {
    return line;
  }
};
var defaultAutocompleteTriggerStrings = [".", ":", "[]", "()", "{}", "[", "(", "{", "$"];
var defaultOptions = {
  autocomplete: true,
  autocompleteCloseOnBlur: true,
  autocompleteOpen: false,
  autocompleteTriggerStrings: defaultAutocompleteTriggerStrings,
  autofocus: true,
  autofocusProps: ["cursorWide", "position", "readOnly", "selection", "value"],
  bracketMatching: true,
  clearHistoryProps: ["cypherLanguage"],
  closeBrackets: true,
  cursorWide: true,
  cypherLanguage: true,
  history: true,
  indentUnit: "  ",
  lineNumberFormatter: defaultLineNumberFormatter,
  lineNumbers: true,
  lineWrapping: false,
  lint: false,
  parseOnSetValue: true,
  placeholder: void 0,
  position: void 0,
  readOnly: false,
  readOnlyCursor: false,
  schema: void 0,
  search: true,
  searchMatches: 0,
  searchOpen: false,
  searchText: "",
  searchTop: false,
  selection: void 0,
  tabKey: true,
  theme: THEME_LIGHT,
  tooltipAbsolute: true,
  value: "",
  preExtensions: [],
  postExtensions: []
};
var reactiveOptionKeys = [
  "autocomplete",
  "autocompleteCloseOnBlur",
  "autocompleteOpen",
  "autocompleteTriggerStrings",
  "bracketMatching",
  "closeBrackets",
  "cursorWide",
  "cypherLanguage",
  // "autofocus",
  "history",
  "indentUnit",
  "lineNumberFormatter",
  "lineNumbers",
  "lineWrapping",
  "lint",
  "placeholder",
  "position",
  "readOnly",
  "readOnlyCursor",
  "schema",
  "search",
  "searchMatches",
  "searchOpen",
  "searchText",
  "searchTop",
  "selection",
  "tabKey",
  "theme",
  "tooltipAbsolute",
  // "parseOnSetValue",
  "value",
  "preExtensions",
  "postExtensions"
];
var isNumber = (v) => v !== void 0 && (typeof v === "number" || v instanceof Number) && isFinite(v);
var isInteger = (v) => isNumber(v) && v % 1 === 0;
var isObject = (v) => typeof v === "object" && v !== null;
var isAbsolutePosition = (v) => isInteger(v) && v >= 0;
var isLineColumnPosition = (v) => isObject(v) && isInteger(v.line) && v.line >= 1 && isInteger(v.column) && v.column >= 0;
var isLineColumnAbsolutePosition = (v) => isObject(v) && isInteger(v.position) && v.position >= 0;
var positionColumnNewToOld = (_ref) => {
  let {
    line,
    column
  } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
  return _objectSpread({
    line,
    column: column - 1
  }, rest);
};
var positionColumnOldToNew = (_ref2) => {
  let {
    line,
    column
  } = _ref2, rest = _objectWithoutProperties(_ref2, _excluded2);
  return _objectSpread({
    line,
    column: column + 1
  }, rest);
};
var positionNewToOld = (positionValue) => isLineColumnPosition(positionValue) ? positionColumnNewToOld(positionValue) : positionValue;
var positionOldToNew = (positionValue) => isLineColumnPosition(positionValue) ? positionColumnOldToNew(positionValue) : positionValue;
var createEventHandlers = () => {
  const listeners = [];
  const off = (listener) => {
    const index = listeners.findIndex((l) => l === listener);
    if (index >= 0) {
      listeners.splice(index, 1);
      return true;
    }
    return false;
  };
  const on = (listener) => {
    listeners.push(listener);
    return () => {
      off(listener);
    };
  };
  const fire = (...args) => {
    for (let listener of listeners) {
      listener(...args);
    }
  };
  const count = () => {
    return listeners.length;
  };
  return {
    on,
    off,
    listeners,
    fire,
    count
  };
};

// node_modules/@neo4j-cypher/editor-support/es/completion/CompletionTypes.js
var KEYWORD = "keyword";
var LABEL = "label";
var VARIABLE = "variable";
var PARAMETER = "parameter";
var PROPERTY_KEY = "propertyKey";
var RELATIONSHIP_TYPE = "relationshipType";
var FUNCTION_NAME = "function";
var PROCEDURE_NAME = "procedure";
var CONSOLE_COMMAND_NAME = "consoleCommand";
var CONSOLE_COMMAND_SUBCOMMAND = "consoleCommandSubcommand";
var PROCEDURE_OUTPUT = "procedureOutput";
var NOOP = "noop";
var ALL = [VARIABLE, PARAMETER, PROPERTY_KEY, FUNCTION_NAME, KEYWORD].map((type) => ({
  type
}));

// node_modules/antlr4/src/antlr4/utils/stringHashCode.js
String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));
String.prototype.hashCode = function() {
  const key = this.toString();
  let h1b, k1;
  const remainder = key.length & 3;
  const bytes = key.length - remainder;
  let h1 = String.prototype.seed;
  const c1 = 3432918353;
  const c2 = 461845907;
  let i = 0;
  while (i < bytes) {
    k1 = key.charCodeAt(i) & 255 | (key.charCodeAt(++i) & 255) << 8 | (key.charCodeAt(++i) & 255) << 16 | (key.charCodeAt(++i) & 255) << 24;
    ++i;
    k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
    k1 = k1 << 15 | k1 >>> 17;
    k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
    h1 ^= k1;
    h1 = h1 << 13 | h1 >>> 19;
    h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
    h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
  }
  k1 = 0;
  switch (remainder) {
    case 3:
      k1 ^= (key.charCodeAt(i + 2) & 255) << 16;
    case 2:
      k1 ^= (key.charCodeAt(i + 1) & 255) << 8;
    case 1:
      k1 ^= key.charCodeAt(i) & 255;
      k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
      k1 = k1 << 15 | k1 >>> 17;
      k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
      h1 ^= k1;
  }
  h1 ^= key.length;
  h1 ^= h1 >>> 16;
  h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
  h1 ^= h1 >>> 13;
  h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
  h1 ^= h1 >>> 16;
  return h1 >>> 0;
};

// node_modules/antlr4/src/antlr4/polyfills/codepointat.js
if (!String.prototype.codePointAt) {
  (function() {
    "use strict";
    var defineProperty = function() {
      let result;
      try {
        const object = {};
        const $defineProperty = Object.defineProperty;
        result = $defineProperty(object, object, object) && $defineProperty;
      } catch (error) {
      }
      return result;
    }();
    const codePointAt2 = function(position) {
      if (this == null) {
        throw TypeError();
      }
      const string2 = String(this);
      const size = string2.length;
      let index = position ? Number(position) : 0;
      if (index !== index) {
        index = 0;
      }
      if (index < 0 || index >= size) {
        return void 0;
      }
      const first = string2.charCodeAt(index);
      let second;
      if (
        // check if it’s the start of a surrogate pair
        first >= 55296 && first <= 56319 && // high surrogate
        size > index + 1
      ) {
        second = string2.charCodeAt(index + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    };
    if (defineProperty) {
      defineProperty(String.prototype, "codePointAt", {
        "value": codePointAt2,
        "configurable": true,
        "writable": true
      });
    } else {
      String.prototype.codePointAt = codePointAt2;
    }
  })();
}

// node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js
if (!String.fromCodePoint) {
  (function() {
    const defineProperty = function() {
      let result;
      try {
        const object = {};
        const $defineProperty = Object.defineProperty;
        result = $defineProperty(object, object, object) && $defineProperty;
      } catch (error) {
      }
      return result;
    }();
    const stringFromCharCode = String.fromCharCode;
    const floor = Math.floor;
    const fromCodePoint2 = function(_) {
      const MAX_SIZE = 16384;
      const codeUnits = [];
      let highSurrogate;
      let lowSurrogate;
      let index = -1;
      const length = arguments.length;
      if (!length) {
        return "";
      }
      let result = "";
      while (++index < length) {
        let codePoint = Number(arguments[index]);
        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
        codePoint < 0 || // not a valid Unicode code point
        codePoint > 1114111 || // not a valid Unicode code point
        floor(codePoint) !== codePoint) {
          throw RangeError("Invalid code point: " + codePoint);
        }
        if (codePoint <= 65535) {
          codeUnits.push(codePoint);
        } else {
          codePoint -= 65536;
          highSurrogate = (codePoint >> 10) + 55296;
          lowSurrogate = codePoint % 1024 + 56320;
          codeUnits.push(highSurrogate, lowSurrogate);
        }
        if (index + 1 === length || codeUnits.length > MAX_SIZE) {
          result += stringFromCharCode.apply(null, codeUnits);
          codeUnits.length = 0;
        }
      }
      return result;
    };
    if (defineProperty) {
      defineProperty(String, "fromCodePoint", {
        "value": fromCodePoint2,
        "configurable": true,
        "writable": true
      });
    } else {
      String.fromCodePoint = fromCodePoint2;
    }
  })();
}

// node_modules/antlr4/src/antlr4/Token.js
var Token = class {
  constructor() {
    this.source = null;
    this.type = null;
    this.channel = null;
    this.start = null;
    this.stop = null;
    this.tokenIndex = null;
    this.line = null;
    this.column = null;
    this._text = null;
  }
  getTokenSource() {
    return this.source[0];
  }
  getInputStream() {
    return this.source[1];
  }
  get text() {
    return this._text;
  }
  set text(text) {
    this._text = text;
  }
};
Token.INVALID_TYPE = 0;
Token.EPSILON = -2;
Token.MIN_USER_TOKEN_TYPE = 1;
Token.EOF = -1;
Token.DEFAULT_CHANNEL = 0;
Token.HIDDEN_CHANNEL = 1;

// node_modules/antlr4/src/antlr4/utils/equalArrays.js
function equalArrays(a, b) {
  if (!Array.isArray(a) || !Array.isArray(b))
    return false;
  if (a === b)
    return true;
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] === b[i])
      continue;
    if (!a[i].equals || !a[i].equals(b[i]))
      return false;
  }
  return true;
}

// node_modules/antlr4/src/antlr4/misc/HashCode.js
var HashCode = class _HashCode {
  constructor() {
    this.count = 0;
    this.hash = 0;
  }
  update() {
    for (let i = 0; i < arguments.length; i++) {
      const value = arguments[i];
      if (value == null)
        continue;
      if (Array.isArray(value))
        this.update.apply(this, value);
      else {
        let k = 0;
        switch (typeof value) {
          case "undefined":
          case "function":
            continue;
          case "number":
          case "boolean":
            k = value;
            break;
          case "string":
            k = value.hashCode();
            break;
          default:
            if (value.updateHashCode)
              value.updateHashCode(this);
            else
              console.log("No updateHashCode for " + value.toString());
            continue;
        }
        k = k * 3432918353;
        k = k << 15 | k >>> 32 - 15;
        k = k * 461845907;
        this.count = this.count + 1;
        let hash = this.hash ^ k;
        hash = hash << 13 | hash >>> 32 - 13;
        hash = hash * 5 + 3864292196;
        this.hash = hash;
      }
    }
  }
  finish() {
    let hash = this.hash ^ this.count * 4;
    hash = hash ^ hash >>> 16;
    hash = hash * 2246822507;
    hash = hash ^ hash >>> 13;
    hash = hash * 3266489909;
    hash = hash ^ hash >>> 16;
    return hash;
  }
  static hashStuff() {
    const hash = new _HashCode();
    hash.update.apply(hash, arguments);
    return hash.finish();
  }
};

// node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js
function standardHashCodeFunction(a) {
  return a ? a.hashCode() : -1;
}

// node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js
function standardEqualsFunction(a, b) {
  return a ? a.equals(b) : a === b;
}

// node_modules/antlr4/src/antlr4/utils/valueToString.js
function valueToString(v) {
  return v === null ? "null" : v;
}

// node_modules/antlr4/src/antlr4/utils/arrayToString.js
function arrayToString(a) {
  return Array.isArray(a) ? "[" + a.map(valueToString).join(", ") + "]" : "null";
}

// node_modules/antlr4/src/antlr4/misc/HashSet.js
var HASH_KEY_PREFIX = "h-";
var HashSet = class {
  constructor(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
  }
  add(value) {
    const key = HASH_KEY_PREFIX + this.hashFunction(value);
    if (key in this.data) {
      const values = this.data[key];
      for (let i = 0; i < values.length; i++) {
        if (this.equalsFunction(value, values[i])) {
          return values[i];
        }
      }
      values.push(value);
      return value;
    } else {
      this.data[key] = [value];
      return value;
    }
  }
  has(value) {
    return this.get(value) != null;
  }
  get(value) {
    const key = HASH_KEY_PREFIX + this.hashFunction(value);
    if (key in this.data) {
      const values = this.data[key];
      for (let i = 0; i < values.length; i++) {
        if (this.equalsFunction(value, values[i])) {
          return values[i];
        }
      }
    }
    return null;
  }
  values() {
    return Object.keys(this.data).filter((key) => key.startsWith(HASH_KEY_PREFIX)).flatMap((key) => this.data[key], this);
  }
  toString() {
    return arrayToString(this.values());
  }
  get length() {
    return Object.keys(this.data).filter((key) => key.startsWith(HASH_KEY_PREFIX)).map((key) => this.data[key].length, this).reduce((accum, item) => accum + item, 0);
  }
};

// node_modules/antlr4/src/antlr4/atn/SemanticContext.js
var SemanticContext = class _SemanticContext {
  hashCode() {
    const hash = new HashCode();
    this.updateHashCode(hash);
    return hash.finish();
  }
  /**
   * For context independent predicates, we evaluate them without a local
   * context (i.e., null context). That way, we can evaluate them without
   * having to create proper rule-specific context during prediction (as
   * opposed to the parser, which creates them naturally). In a practical
   * sense, this avoids a cast exception from RuleContext to myruleContext.
   *
   * <p>For context dependent predicates, we must pass in a local context so that
   * references such as $arg evaluate properly as _localctx.arg. We only
   * capture context dependent predicates in the context in which we begin
   * prediction, so we passed in the outer context here in case of context
   * dependent predicate evaluation.</p>
   */
  evaluate(parser, outerContext) {
  }
  /**
   * Evaluate the precedence predicates for the context and reduce the result.
   *
   * @param parser The parser instance.
   * @param outerContext The current parser context object.
   * @return The simplified semantic context after precedence predicates are
   * evaluated, which will be one of the following values.
   * <ul>
   * <li>{@link //NONE}: if the predicate simplifies to {@code true} after
   * precedence predicates are evaluated.</li>
   * <li>{@code null}: if the predicate simplifies to {@code false} after
   * precedence predicates are evaluated.</li>
   * <li>{@code this}: if the semantic context is not changed as a result of
   * precedence predicate evaluation.</li>
   * <li>A non-{@code null} {@link SemanticContext}: the new simplified
   * semantic context after precedence predicates are evaluated.</li>
   * </ul>
   */
  evalPrecedence(parser, outerContext) {
    return this;
  }
  static andContext(a, b) {
    if (a === null || a === _SemanticContext.NONE) {
      return b;
    }
    if (b === null || b === _SemanticContext.NONE) {
      return a;
    }
    const result = new AND(a, b);
    if (result.opnds.length === 1) {
      return result.opnds[0];
    } else {
      return result;
    }
  }
  static orContext(a, b) {
    if (a === null) {
      return b;
    }
    if (b === null) {
      return a;
    }
    if (a === _SemanticContext.NONE || b === _SemanticContext.NONE) {
      return _SemanticContext.NONE;
    }
    const result = new OR(a, b);
    if (result.opnds.length === 1) {
      return result.opnds[0];
    } else {
      return result;
    }
  }
};
var AND = class _AND extends SemanticContext {
  /**
   * A semantic context which is true whenever none of the contained contexts
   * is false
   */
  constructor(a, b) {
    super();
    const operands = new HashSet();
    if (a instanceof _AND) {
      a.opnds.map(function(o) {
        operands.add(o);
      });
    } else {
      operands.add(a);
    }
    if (b instanceof _AND) {
      b.opnds.map(function(o) {
        operands.add(o);
      });
    } else {
      operands.add(b);
    }
    const precedencePredicates = filterPrecedencePredicates(operands);
    if (precedencePredicates.length > 0) {
      let reduced = null;
      precedencePredicates.map(function(p) {
        if (reduced === null || p.precedence < reduced.precedence) {
          reduced = p;
        }
      });
      operands.add(reduced);
    }
    this.opnds = Array.from(operands.values());
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _AND)) {
      return false;
    } else {
      return equalArrays(this.opnds, other.opnds);
    }
  }
  updateHashCode(hash) {
    hash.update(this.opnds, "AND");
  }
  /**
   * {@inheritDoc}
   *
   * <p>
   * The evaluation of predicates by this context is short-circuiting, but
   * unordered.</p>
   */
  evaluate(parser, outerContext) {
    for (let i = 0; i < this.opnds.length; i++) {
      if (!this.opnds[i].evaluate(parser, outerContext)) {
        return false;
      }
    }
    return true;
  }
  evalPrecedence(parser, outerContext) {
    let differs = false;
    const operands = [];
    for (let i = 0; i < this.opnds.length; i++) {
      const context = this.opnds[i];
      const evaluated = context.evalPrecedence(parser, outerContext);
      differs |= evaluated !== context;
      if (evaluated === null) {
        return null;
      } else if (evaluated !== SemanticContext.NONE) {
        operands.push(evaluated);
      }
    }
    if (!differs) {
      return this;
    }
    if (operands.length === 0) {
      return SemanticContext.NONE;
    }
    let result = null;
    operands.map(function(o) {
      result = result === null ? o : SemanticContext.andContext(result, o);
    });
    return result;
  }
  toString() {
    const s = this.opnds.map((o) => o.toString());
    return (s.length > 3 ? s.slice(3) : s).join("&&");
  }
};
var OR = class _OR extends SemanticContext {
  /**
   * A semantic context which is true whenever at least one of the contained
   * contexts is true
   */
  constructor(a, b) {
    super();
    const operands = new HashSet();
    if (a instanceof _OR) {
      a.opnds.map(function(o) {
        operands.add(o);
      });
    } else {
      operands.add(a);
    }
    if (b instanceof _OR) {
      b.opnds.map(function(o) {
        operands.add(o);
      });
    } else {
      operands.add(b);
    }
    const precedencePredicates = filterPrecedencePredicates(operands);
    if (precedencePredicates.length > 0) {
      const s = precedencePredicates.sort(function(a2, b2) {
        return a2.compareTo(b2);
      });
      const reduced = s[s.length - 1];
      operands.add(reduced);
    }
    this.opnds = Array.from(operands.values());
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _OR)) {
      return false;
    } else {
      return equalArrays(this.opnds, other.opnds);
    }
  }
  updateHashCode(hash) {
    hash.update(this.opnds, "OR");
  }
  /**
   * <p>
   * The evaluation of predicates by this context is short-circuiting, but
   * unordered.</p>
   */
  evaluate(parser, outerContext) {
    for (let i = 0; i < this.opnds.length; i++) {
      if (this.opnds[i].evaluate(parser, outerContext)) {
        return true;
      }
    }
    return false;
  }
  evalPrecedence(parser, outerContext) {
    let differs = false;
    const operands = [];
    for (let i = 0; i < this.opnds.length; i++) {
      const context = this.opnds[i];
      const evaluated = context.evalPrecedence(parser, outerContext);
      differs |= evaluated !== context;
      if (evaluated === SemanticContext.NONE) {
        return SemanticContext.NONE;
      } else if (evaluated !== null) {
        operands.push(evaluated);
      }
    }
    if (!differs) {
      return this;
    }
    if (operands.length === 0) {
      return null;
    }
    const result = null;
    operands.map(function(o) {
      return result === null ? o : SemanticContext.orContext(result, o);
    });
    return result;
  }
  toString() {
    const s = this.opnds.map((o) => o.toString());
    return (s.length > 3 ? s.slice(3) : s).join("||");
  }
};
function filterPrecedencePredicates(set) {
  const result = [];
  set.values().map(function(context) {
    if (context instanceof SemanticContext.PrecedencePredicate) {
      result.push(context);
    }
  });
  return result;
}

// node_modules/antlr4/src/antlr4/atn/ATNConfig.js
function checkParams(params, isCfg) {
  if (params === null) {
    const result = { state: null, alt: null, context: null, semanticContext: null };
    if (isCfg) {
      result.reachesIntoOuterContext = 0;
    }
    return result;
  } else {
    const props = {};
    props.state = params.state || null;
    props.alt = params.alt === void 0 ? null : params.alt;
    props.context = params.context || null;
    props.semanticContext = params.semanticContext || null;
    if (isCfg) {
      props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
      props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
    }
    return props;
  }
}
var ATNConfig = class _ATNConfig {
  /**
   * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).
   * The syntactic context is a graph-structured stack node whose
   * path(s) to the root is the rule invocation(s)
   * chain used to arrive at the state.  The semantic context is
   * the tree of semantic predicates encountered before reaching
   * an ATN state
   */
  constructor(params, config2) {
    this.checkContext(params, config2);
    params = checkParams(params);
    config2 = checkParams(config2, true);
    this.state = params.state !== null ? params.state : config2.state;
    this.alt = params.alt !== null ? params.alt : config2.alt;
    this.context = params.context !== null ? params.context : config2.context;
    this.semanticContext = params.semanticContext !== null ? params.semanticContext : config2.semanticContext !== null ? config2.semanticContext : SemanticContext.NONE;
    this.reachesIntoOuterContext = config2.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config2.precedenceFilterSuppressed;
  }
  checkContext(params, config2) {
    if ((params.context === null || params.context === void 0) && (config2 === null || config2.context === null || config2.context === void 0)) {
      this.context = null;
    }
  }
  hashCode() {
    const hash = new HashCode();
    this.updateHashCode(hash);
    return hash.finish();
  }
  updateHashCode(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
  }
  /**
   * An ATN configuration is equal to another if both have
   * the same state, they predict the same alternative, and
   * syntactic/semantic contexts are the same
   */
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _ATNConfig)) {
      return false;
    } else {
      return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;
    }
  }
  hashCodeForConfigSet() {
    const hash = new HashCode();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
  }
  equalsForConfigSet(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _ATNConfig)) {
      return false;
    } else {
      return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);
    }
  }
  toString() {
    return "(" + this.state + "," + this.alt + (this.context !== null ? ",[" + this.context.toString() + "]" : "") + (this.semanticContext !== SemanticContext.NONE ? "," + this.semanticContext.toString() : "") + (this.reachesIntoOuterContext > 0 ? ",up=" + this.reachesIntoOuterContext : "") + ")";
  }
};

// node_modules/antlr4/src/antlr4/misc/Interval.js
var Interval = class _Interval {
  constructor(start, stop) {
    this.start = start;
    this.stop = stop;
  }
  clone() {
    return new _Interval(this.start, this.stop);
  }
  contains(item) {
    return item >= this.start && item < this.stop;
  }
  toString() {
    if (this.start === this.stop - 1) {
      return this.start.toString();
    } else {
      return this.start.toString() + ".." + (this.stop - 1).toString();
    }
  }
  get length() {
    return this.stop - this.start;
  }
};
Interval.INVALID_INTERVAL = new Interval(-1, -2);

// node_modules/antlr4/src/antlr4/misc/IntervalSet.js
var IntervalSet = class _IntervalSet {
  constructor() {
    this.intervals = null;
    this.readOnly = false;
  }
  first(v) {
    if (this.intervals === null || this.intervals.length === 0) {
      return Token.INVALID_TYPE;
    } else {
      return this.intervals[0].start;
    }
  }
  addOne(v) {
    this.addInterval(new Interval(v, v + 1));
  }
  addRange(l, h) {
    this.addInterval(new Interval(l, h + 1));
  }
  addInterval(toAdd) {
    if (this.intervals === null) {
      this.intervals = [];
      this.intervals.push(toAdd.clone());
    } else {
      for (let pos = 0; pos < this.intervals.length; pos++) {
        const existing = this.intervals[pos];
        if (toAdd.stop < existing.start) {
          this.intervals.splice(pos, 0, toAdd);
          return;
        } else if (toAdd.stop === existing.start) {
          this.intervals[pos] = new Interval(toAdd.start, existing.stop);
          return;
        } else if (toAdd.start <= existing.stop) {
          this.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));
          this.reduce(pos);
          return;
        }
      }
      this.intervals.push(toAdd.clone());
    }
  }
  addSet(other) {
    if (other.intervals !== null) {
      other.intervals.forEach((toAdd) => this.addInterval(toAdd), this);
    }
    return this;
  }
  reduce(pos) {
    if (pos < this.intervals.length - 1) {
      const current = this.intervals[pos];
      const next = this.intervals[pos + 1];
      if (current.stop >= next.stop) {
        this.intervals.splice(pos + 1, 1);
        this.reduce(pos);
      } else if (current.stop >= next.start) {
        this.intervals[pos] = new Interval(current.start, next.stop);
        this.intervals.splice(pos + 1, 1);
      }
    }
  }
  complement(start, stop) {
    const result = new _IntervalSet();
    result.addInterval(new Interval(start, stop + 1));
    if (this.intervals !== null)
      this.intervals.forEach((toRemove) => result.removeRange(toRemove));
    return result;
  }
  contains(item) {
    if (this.intervals === null) {
      return false;
    } else {
      for (let k = 0; k < this.intervals.length; k++) {
        if (this.intervals[k].contains(item)) {
          return true;
        }
      }
      return false;
    }
  }
  removeRange(toRemove) {
    if (toRemove.start === toRemove.stop - 1) {
      this.removeOne(toRemove.start);
    } else if (this.intervals !== null) {
      let pos = 0;
      for (let n = 0; n < this.intervals.length; n++) {
        const existing = this.intervals[pos];
        if (toRemove.stop <= existing.start) {
          return;
        } else if (toRemove.start > existing.start && toRemove.stop < existing.stop) {
          this.intervals[pos] = new Interval(existing.start, toRemove.start);
          const x = new Interval(toRemove.stop, existing.stop);
          this.intervals.splice(pos, 0, x);
          return;
        } else if (toRemove.start <= existing.start && toRemove.stop >= existing.stop) {
          this.intervals.splice(pos, 1);
          pos = pos - 1;
        } else if (toRemove.start < existing.stop) {
          this.intervals[pos] = new Interval(existing.start, toRemove.start);
        } else if (toRemove.stop < existing.stop) {
          this.intervals[pos] = new Interval(toRemove.stop, existing.stop);
        }
        pos += 1;
      }
    }
  }
  removeOne(value) {
    if (this.intervals !== null) {
      for (let i = 0; i < this.intervals.length; i++) {
        const existing = this.intervals[i];
        if (value < existing.start) {
          return;
        } else if (value === existing.start && value === existing.stop - 1) {
          this.intervals.splice(i, 1);
          return;
        } else if (value === existing.start) {
          this.intervals[i] = new Interval(existing.start + 1, existing.stop);
          return;
        } else if (value === existing.stop - 1) {
          this.intervals[i] = new Interval(existing.start, existing.stop - 1);
          return;
        } else if (value < existing.stop - 1) {
          const replace = new Interval(existing.start, value);
          existing.start = value + 1;
          this.intervals.splice(i, 0, replace);
          return;
        }
      }
    }
  }
  toString(literalNames, symbolicNames, elemsAreChar) {
    literalNames = literalNames || null;
    symbolicNames = symbolicNames || null;
    elemsAreChar = elemsAreChar || false;
    if (this.intervals === null) {
      return "{}";
    } else if (literalNames !== null || symbolicNames !== null) {
      return this.toTokenString(literalNames, symbolicNames);
    } else if (elemsAreChar) {
      return this.toCharString();
    } else {
      return this.toIndexString();
    }
  }
  toCharString() {
    const names = [];
    for (let i = 0; i < this.intervals.length; i++) {
      const existing = this.intervals[i];
      if (existing.stop === existing.start + 1) {
        if (existing.start === Token.EOF) {
          names.push("<EOF>");
        } else {
          names.push("'" + String.fromCharCode(existing.start) + "'");
        }
      } else {
        names.push("'" + String.fromCharCode(existing.start) + "'..'" + String.fromCharCode(existing.stop - 1) + "'");
      }
    }
    if (names.length > 1) {
      return "{" + names.join(", ") + "}";
    } else {
      return names[0];
    }
  }
  toIndexString() {
    const names = [];
    for (let i = 0; i < this.intervals.length; i++) {
      const existing = this.intervals[i];
      if (existing.stop === existing.start + 1) {
        if (existing.start === Token.EOF) {
          names.push("<EOF>");
        } else {
          names.push(existing.start.toString());
        }
      } else {
        names.push(existing.start.toString() + ".." + (existing.stop - 1).toString());
      }
    }
    if (names.length > 1) {
      return "{" + names.join(", ") + "}";
    } else {
      return names[0];
    }
  }
  toTokenString(literalNames, symbolicNames) {
    const names = [];
    for (let i = 0; i < this.intervals.length; i++) {
      const existing = this.intervals[i];
      for (let j = existing.start; j < existing.stop; j++) {
        names.push(this.elementName(literalNames, symbolicNames, j));
      }
    }
    if (names.length > 1) {
      return "{" + names.join(", ") + "}";
    } else {
      return names[0];
    }
  }
  elementName(literalNames, symbolicNames, token) {
    if (token === Token.EOF) {
      return "<EOF>";
    } else if (token === Token.EPSILON) {
      return "<EPSILON>";
    } else {
      return literalNames[token] || symbolicNames[token];
    }
  }
  get length() {
    return this.intervals.map((interval) => interval.length).reduce((acc, val) => acc + val);
  }
};

// node_modules/antlr4/src/antlr4/state/ATNState.js
var ATNState = class _ATNState {
  constructor() {
    this.atn = null;
    this.stateNumber = _ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0;
    this.epsilonOnlyTransitions = false;
    this.transitions = [];
    this.nextTokenWithinRule = null;
  }
  toString() {
    return this.stateNumber;
  }
  equals(other) {
    if (other instanceof _ATNState) {
      return this.stateNumber === other.stateNumber;
    } else {
      return false;
    }
  }
  isNonGreedyExitState() {
    return false;
  }
  addTransition(trans, index) {
    if (index === void 0) {
      index = -1;
    }
    if (this.transitions.length === 0) {
      this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {
      this.epsilonOnlyTransitions = false;
    }
    if (index === -1) {
      this.transitions.push(trans);
    } else {
      this.transitions.splice(index, 1, trans);
    }
  }
};
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;
ATNState.serializationNames = [
  "INVALID",
  "BASIC",
  "RULE_START",
  "BLOCK_START",
  "PLUS_BLOCK_START",
  "STAR_BLOCK_START",
  "TOKEN_START",
  "RULE_STOP",
  "BLOCK_END",
  "STAR_LOOP_BACK",
  "STAR_LOOP_ENTRY",
  "PLUS_LOOP_BACK",
  "LOOP_END"
];
ATNState.INVALID_STATE_NUMBER = -1;

// node_modules/antlr4/src/antlr4/state/RuleStopState.js
var RuleStopState = class extends ATNState {
  constructor() {
    super();
    this.stateType = ATNState.RULE_STOP;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/transition/Transition.js
var Transition = class {
  constructor(target) {
    if (target === void 0 || target === null) {
      throw "target cannot be null.";
    }
    this.target = target;
    this.isEpsilon = false;
    this.label = null;
  }
};
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4;
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7;
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;
Transition.serializationNames = [
  "INVALID",
  "EPSILON",
  "RANGE",
  "RULE",
  "PREDICATE",
  "ATOM",
  "ACTION",
  "SET",
  "NOT_SET",
  "WILDCARD",
  "PRECEDENCE"
];
Transition.serializationTypes = {
  EpsilonTransition: Transition.EPSILON,
  RangeTransition: Transition.RANGE,
  RuleTransition: Transition.RULE,
  PredicateTransition: Transition.PREDICATE,
  AtomTransition: Transition.ATOM,
  ActionTransition: Transition.ACTION,
  SetTransition: Transition.SET,
  NotSetTransition: Transition.NOT_SET,
  WildcardTransition: Transition.WILDCARD,
  PrecedencePredicateTransition: Transition.PRECEDENCE
};

// node_modules/antlr4/src/antlr4/transition/RuleTransition.js
var RuleTransition = class extends Transition {
  constructor(ruleStart, ruleIndex, precedence, followState) {
    super(ruleStart);
    this.ruleIndex = ruleIndex;
    this.precedence = precedence;
    this.followState = followState;
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return false;
  }
};

// node_modules/antlr4/src/antlr4/transition/SetTransition.js
var SetTransition = class extends Transition {
  constructor(target, set) {
    super(target);
    this.serializationType = Transition.SET;
    if (set !== void 0 && set !== null) {
      this.label = set;
    } else {
      this.label = new IntervalSet();
      this.label.addOne(Token.INVALID_TYPE);
    }
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return this.label.contains(symbol);
  }
  toString() {
    return this.label.toString();
  }
};

// node_modules/antlr4/src/antlr4/transition/NotSetTransition.js
var NotSetTransition = class extends SetTransition {
  constructor(target, set) {
    super(target, set);
    this.serializationType = Transition.NOT_SET;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
  }
  toString() {
    return "~" + super.toString();
  }
};

// node_modules/antlr4/src/antlr4/transition/WildcardTransition.js
var WildcardTransition = class extends Transition {
  constructor(target) {
    super(target);
    this.serializationType = Transition.WILDCARD;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
  }
  toString() {
    return ".";
  }
};

// node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js
var AbstractPredicateTransition = class extends Transition {
  constructor(target) {
    super(target);
  }
};

// node_modules/antlr4/src/antlr4/tree/Tree.js
var Tree2 = class {
};

// node_modules/antlr4/src/antlr4/tree/SyntaxTree.js
var SyntaxTree = class extends Tree2 {
};

// node_modules/antlr4/src/antlr4/tree/ParseTree.js
var ParseTree = class extends SyntaxTree {
};

// node_modules/antlr4/src/antlr4/tree/RuleNode.js
var RuleNode = class extends ParseTree {
  getRuleContext() {
    throw new Error("missing interface implementation");
  }
};

// node_modules/antlr4/src/antlr4/tree/TerminalNode.js
var TerminalNode = class extends ParseTree {
};

// node_modules/antlr4/src/antlr4/tree/ErrorNode.js
var ErrorNode = class extends TerminalNode {
};

// node_modules/antlr4/src/antlr4/utils/escapeWhitespace.js
function escapeWhitespace(s, escapeSpaces) {
  s = s.replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r");
  if (escapeSpaces) {
    s = s.replace(/ /g, "·");
  }
  return s;
}

// node_modules/antlr4/src/antlr4/tree/Trees.js
var Trees = {
  /**
   * Print out a whole tree in LISP form. {@link //getNodeText} is used on the
   *  node payloads to get the text for the nodes.  Detect
   *  parse trees and extract data appropriately.
   */
  toStringTree: function(tree, ruleNames, recog) {
    ruleNames = ruleNames || null;
    recog = recog || null;
    if (recog !== null) {
      ruleNames = recog.ruleNames;
    }
    let s = Trees.getNodeText(tree, ruleNames);
    s = escapeWhitespace(s, false);
    const c = tree.getChildCount();
    if (c === 0) {
      return s;
    }
    let res = "(" + s + " ";
    if (c > 0) {
      s = Trees.toStringTree(tree.getChild(0), ruleNames);
      res = res.concat(s);
    }
    for (let i = 1; i < c; i++) {
      s = Trees.toStringTree(tree.getChild(i), ruleNames);
      res = res.concat(" " + s);
    }
    res = res.concat(")");
    return res;
  },
  getNodeText: function(t2, ruleNames, recog) {
    ruleNames = ruleNames || null;
    recog = recog || null;
    if (recog !== null) {
      ruleNames = recog.ruleNames;
    }
    if (ruleNames !== null) {
      if (t2 instanceof RuleNode) {
        const context = t2.getRuleContext();
        const altNumber = context.getAltNumber();
        if (altNumber != 0) {
          return ruleNames[t2.ruleIndex] + ":" + altNumber;
        }
        return ruleNames[t2.ruleIndex];
      } else if (t2 instanceof ErrorNode) {
        return t2.toString();
      } else if (t2 instanceof TerminalNode) {
        if (t2.symbol !== null) {
          return t2.symbol.text;
        }
      }
    }
    const payload = t2.getPayload();
    if (payload instanceof Token) {
      return payload.text;
    }
    return t2.getPayload().toString();
  },
  /**
   * Return ordered list of all children of this node
   */
  getChildren: function(t2) {
    const list = [];
    for (let i = 0; i < t2.getChildCount(); i++) {
      list.push(t2.getChild(i));
    }
    return list;
  },
  /**
   * Return a list of all ancestors of this node.  The first node of
   * list is the root and the last is the parent of this node.
   */
  getAncestors: function(t2) {
    let ancestors = [];
    t2 = t2.getParent();
    while (t2 !== null) {
      ancestors = [t2].concat(ancestors);
      t2 = t2.getParent();
    }
    return ancestors;
  },
  findAllTokenNodes: function(t2, ttype) {
    return Trees.findAllNodes(t2, ttype, true);
  },
  findAllRuleNodes: function(t2, ruleIndex) {
    return Trees.findAllNodes(t2, ruleIndex, false);
  },
  findAllNodes: function(t2, index, findTokens) {
    const nodes = [];
    Trees._findAllNodes(t2, index, findTokens, nodes);
    return nodes;
  },
  _findAllNodes: function(t2, index, findTokens, nodes) {
    if (findTokens && t2 instanceof TerminalNode) {
      if (t2.symbol.type === index) {
        nodes.push(t2);
      }
    } else if (!findTokens && t2 instanceof RuleNode) {
      if (t2.ruleIndex === index) {
        nodes.push(t2);
      }
    }
    for (let i = 0; i < t2.getChildCount(); i++) {
      Trees._findAllNodes(t2.getChild(i), index, findTokens, nodes);
    }
  },
  descendants: function(t2) {
    let nodes = [t2];
    for (let i = 0; i < t2.getChildCount(); i++) {
      nodes = nodes.concat(Trees.descendants(t2.getChild(i)));
    }
    return nodes;
  }
};
var Trees_default = Trees;

// node_modules/antlr4/src/antlr4/context/RuleContext.js
var RuleContext = class extends RuleNode {
  /** A rule context is a record of a single rule invocation. It knows
   * which context invoked it, if any. If there is no parent context, then
   * naturally the invoking state is not valid.  The parent link
   * provides a chain upwards from the current rule invocation to the root
   * of the invocation tree, forming a stack. We actually carry no
   * information about the rule associated with this context (except
   * when parsing). We keep only the state number of the invoking state from
   * the ATN submachine that invoked this. Contrast this with the s
   * pointer inside ParserRuleContext that tracks the current state
   * being "executed" for the current rule.
   *
   * The parent contexts are useful for computing lookahead sets and
   * getting error information.
   *
   * These objects are used during parsing and prediction.
   * For the special case of parsers, we use the subclass
   * ParserRuleContext.
   *
   * @see ParserRuleContext
   */
  constructor(parent, invokingState) {
    super();
    this.parentCtx = parent || null;
    this.invokingState = invokingState || -1;
  }
  depth() {
    let n = 0;
    let p = this;
    while (p !== null) {
      p = p.parentCtx;
      n += 1;
    }
    return n;
  }
  /**
   * A context is empty if there is no invoking state; meaning nobody call
   * current context.
   */
  isEmpty() {
    return this.invokingState === -1;
  }
  // satisfy the ParseTree / SyntaxTree interface
  getSourceInterval() {
    return Interval.INVALID_INTERVAL;
  }
  getRuleContext() {
    return this;
  }
  getPayload() {
    return this;
  }
  /**
   * Return the combined text of all child nodes. This method only considers
   * tokens which have been added to the parse tree.
   * <p>
   * Since tokens on hidden channels (e.g. whitespace or comments) are not
   * added to the parse trees, they will not appear in the output of this
   * method.
   */
  getText() {
    if (this.getChildCount() === 0) {
      return "";
    } else {
      return this.children.map(function(child) {
        return child.getText();
      }).join("");
    }
  }
  /**
   * For rule associated with this parse tree internal node, return
   * the outer alternative number used to match the input. Default
   * implementation does not compute nor store this alt num. Create
   * a subclass of ParserRuleContext with backing field and set
   * option contextSuperClass.
   * to set it.
   */
  getAltNumber() {
    return 0;
  }
  /**
   * Set the outer alternative number for this context node. Default
   * implementation does nothing to avoid backing field overhead for
   * trees that don't need it.  Create
   * a subclass of ParserRuleContext with backing field and set
   * option contextSuperClass.
   */
  setAltNumber(altNumber) {
  }
  getChild(i) {
    return null;
  }
  getChildCount() {
    return 0;
  }
  accept(visitor) {
    return visitor.visitChildren(this);
  }
  /**
   * Print out a whole tree, not just a node, in LISP format
   * (root child1 .. childN). Print just a node if this is a leaf.
   */
  toStringTree(ruleNames, recog) {
    return Trees_default.toStringTree(this, ruleNames, recog);
  }
  toString(ruleNames, stop) {
    ruleNames = ruleNames || null;
    stop = stop || null;
    let p = this;
    let s = "[";
    while (p !== null && p !== stop) {
      if (ruleNames === null) {
        if (!p.isEmpty()) {
          s += p.invokingState;
        }
      } else {
        const ri = p.ruleIndex;
        const ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : "" + ri;
        s += ruleName;
      }
      if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
        s += " ";
      }
      p = p.parentCtx;
    }
    s += "]";
    return s;
  }
};

// node_modules/antlr4/src/antlr4/context/PredictionContext.js
var PredictionContext = class _PredictionContext {
  constructor(cachedHashCode) {
    this.cachedHashCode = cachedHashCode;
  }
  /**
   * Stores the computed hash code of this {@link PredictionContext}. The hash
   * code is computed in parts to match the following reference algorithm.
   *
   * <pre>
   * private int referenceHashCode() {
   * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
   * //INITIAL_HASH});
   *
   * for (int i = 0; i &lt; {@link //size()}; i++) {
   * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
   * getParent}(i));
   * }
   *
   * for (int i = 0; i &lt; {@link //size()}; i++) {
   * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
   * //getReturnState getReturnState}(i));
   * }
   *
   * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
   * //size()});
   * return hash;
   * }
   * </pre>
   * This means only the {@link //EMPTY} context is in set.
   */
  isEmpty() {
    return this === _PredictionContext.EMPTY;
  }
  hasEmptyPath() {
    return this.getReturnState(this.length - 1) === _PredictionContext.EMPTY_RETURN_STATE;
  }
  hashCode() {
    return this.cachedHashCode;
  }
  updateHashCode(hash) {
    hash.update(this.cachedHashCode);
  }
};
PredictionContext.EMPTY = null;
PredictionContext.EMPTY_RETURN_STATE = 2147483647;
PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// node_modules/antlr4/src/antlr4/context/ArrayPredictionContext.js
var ArrayPredictionContext = class _ArrayPredictionContext extends PredictionContext {
  constructor(parents, returnStates) {
    const h = new HashCode();
    h.update(parents, returnStates);
    const hashCode = h.finish();
    super(hashCode);
    this.parents = parents;
    this.returnStates = returnStates;
    return this;
  }
  isEmpty() {
    return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
  }
  getParent(index) {
    return this.parents[index];
  }
  getReturnState(index) {
    return this.returnStates[index];
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _ArrayPredictionContext)) {
      return false;
    } else if (this.hashCode() !== other.hashCode()) {
      return false;
    } else {
      return equalArrays(this.returnStates, other.returnStates) && equalArrays(this.parents, other.parents);
    }
  }
  toString() {
    if (this.isEmpty()) {
      return "[]";
    } else {
      let s = "[";
      for (let i = 0; i < this.returnStates.length; i++) {
        if (i > 0) {
          s = s + ", ";
        }
        if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
          s = s + "$";
          continue;
        }
        s = s + this.returnStates[i];
        if (this.parents[i] !== null) {
          s = s + " " + this.parents[i];
        } else {
          s = s + "null";
        }
      }
      return s + "]";
    }
  }
  get length() {
    return this.returnStates.length;
  }
};

// node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js
var SingletonPredictionContext = class _SingletonPredictionContext extends PredictionContext {
  constructor(parent, returnState) {
    let hashCode = 0;
    const hash = new HashCode();
    if (parent !== null) {
      hash.update(parent, returnState);
    } else {
      hash.update(1);
    }
    hashCode = hash.finish();
    super(hashCode);
    this.parentCtx = parent;
    this.returnState = returnState;
  }
  getParent(index) {
    return this.parentCtx;
  }
  getReturnState(index) {
    return this.returnState;
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _SingletonPredictionContext)) {
      return false;
    } else if (this.hashCode() !== other.hashCode()) {
      return false;
    } else {
      if (this.returnState !== other.returnState)
        return false;
      else if (this.parentCtx == null)
        return other.parentCtx == null;
      else
        return this.parentCtx.equals(other.parentCtx);
    }
  }
  toString() {
    const up = this.parentCtx === null ? "" : this.parentCtx.toString();
    if (up.length === 0) {
      if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
        return "$";
      } else {
        return "" + this.returnState;
      }
    } else {
      return "" + this.returnState + " " + up;
    }
  }
  get length() {
    return 1;
  }
  static create(parent, returnState) {
    if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
      return PredictionContext.EMPTY;
    } else {
      return new _SingletonPredictionContext(parent, returnState);
    }
  }
};

// node_modules/antlr4/src/antlr4/context/EmptyPredictionContext.js
var EmptyPredictionContext = class extends SingletonPredictionContext {
  constructor() {
    super(null, PredictionContext.EMPTY_RETURN_STATE);
  }
  isEmpty() {
    return true;
  }
  getParent(index) {
    return null;
  }
  getReturnState(index) {
    return this.returnState;
  }
  equals(other) {
    return this === other;
  }
  toString() {
    return "$";
  }
};
PredictionContext.EMPTY = new EmptyPredictionContext();

// node_modules/antlr4/src/antlr4/misc/HashMap.js
var HASH_KEY_PREFIX2 = "h-";
var HashMap = class {
  constructor(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
  }
  set(key, value) {
    const hashKey = HASH_KEY_PREFIX2 + this.hashFunction(key);
    if (hashKey in this.data) {
      const entries = this.data[hashKey];
      for (let i = 0; i < entries.length; i++) {
        const entry = entries[i];
        if (this.equalsFunction(key, entry.key)) {
          const oldValue = entry.value;
          entry.value = value;
          return oldValue;
        }
      }
      entries.push({ key, value });
      return value;
    } else {
      this.data[hashKey] = [{ key, value }];
      return value;
    }
  }
  containsKey(key) {
    const hashKey = HASH_KEY_PREFIX2 + this.hashFunction(key);
    if (hashKey in this.data) {
      const entries = this.data[hashKey];
      for (let i = 0; i < entries.length; i++) {
        const entry = entries[i];
        if (this.equalsFunction(key, entry.key))
          return true;
      }
    }
    return false;
  }
  get(key) {
    const hashKey = HASH_KEY_PREFIX2 + this.hashFunction(key);
    if (hashKey in this.data) {
      const entries = this.data[hashKey];
      for (let i = 0; i < entries.length; i++) {
        const entry = entries[i];
        if (this.equalsFunction(key, entry.key))
          return entry.value;
      }
    }
    return null;
  }
  entries() {
    return Object.keys(this.data).filter((key) => key.startsWith(HASH_KEY_PREFIX2)).flatMap((key) => this.data[key], this);
  }
  getKeys() {
    return this.entries().map((e) => e.key);
  }
  getValues() {
    return this.entries().map((e) => e.value);
  }
  toString() {
    const ss = this.entries().map((e) => "{" + e.key + ":" + e.value + "}");
    return "[" + ss.join(", ") + "]";
  }
  get length() {
    return Object.keys(this.data).filter((key) => key.startsWith(HASH_KEY_PREFIX2)).map((key) => this.data[key].length, this).reduce((accum, item) => accum + item, 0);
  }
};

// node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js
function predictionContextFromRuleContext(atn3, outerContext) {
  if (outerContext === void 0 || outerContext === null) {
    outerContext = RuleContext.EMPTY;
  }
  if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
    return PredictionContext.EMPTY;
  }
  const parent = predictionContextFromRuleContext(atn3, outerContext.parentCtx);
  const state = atn3.states[outerContext.invokingState];
  const transition = state.transitions[0];
  return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
function getCachedPredictionContext(context, contextCache, visited) {
  if (context.isEmpty()) {
    return context;
  }
  let existing = visited.get(context) || null;
  if (existing !== null) {
    return existing;
  }
  existing = contextCache.get(context);
  if (existing !== null) {
    visited.set(context, existing);
    return existing;
  }
  let changed = false;
  let parents = [];
  for (let i = 0; i < parents.length; i++) {
    const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
    if (changed || parent !== context.getParent(i)) {
      if (!changed) {
        parents = [];
        for (let j = 0; j < context.length; j++) {
          parents[j] = context.getParent(j);
        }
        changed = true;
      }
      parents[i] = parent;
    }
  }
  if (!changed) {
    contextCache.add(context);
    visited.set(context, context);
    return context;
  }
  let updated = null;
  if (parents.length === 0) {
    updated = PredictionContext.EMPTY;
  } else if (parents.length === 1) {
    updated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));
  } else {
    updated = new ArrayPredictionContext(parents, context.returnStates);
  }
  contextCache.add(updated);
  visited.set(updated, updated);
  visited.set(context, updated);
  return updated;
}
function merge(a, b, rootIsWildcard, mergeCache) {
  if (a === b) {
    return a;
  }
  if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
    return mergeSingletons(a, b, rootIsWildcard, mergeCache);
  }
  if (rootIsWildcard) {
    if (a instanceof EmptyPredictionContext) {
      return a;
    }
    if (b instanceof EmptyPredictionContext) {
      return b;
    }
  }
  if (a instanceof SingletonPredictionContext) {
    a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
  }
  if (b instanceof SingletonPredictionContext) {
    b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
  }
  return mergeArrays(a, b, rootIsWildcard, mergeCache);
}
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
  if (mergeCache !== null) {
    let previous = mergeCache.get(a, b);
    if (previous !== null) {
      return previous;
    }
    previous = mergeCache.get(b, a);
    if (previous !== null) {
      return previous;
    }
  }
  let i = 0;
  let j = 0;
  let k = 0;
  let mergedReturnStates = [];
  let mergedParents = [];
  while (i < a.returnStates.length && j < b.returnStates.length) {
    const a_parent = a.parents[i];
    const b_parent = b.parents[j];
    if (a.returnStates[i] === b.returnStates[j]) {
      const payload = a.returnStates[i];
      const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;
      const ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent;
      if (bothDollars || ax_ax) {
        mergedParents[k] = a_parent;
        mergedReturnStates[k] = payload;
      } else {
        mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
        mergedReturnStates[k] = payload;
      }
      i += 1;
      j += 1;
    } else if (a.returnStates[i] < b.returnStates[j]) {
      mergedParents[k] = a_parent;
      mergedReturnStates[k] = a.returnStates[i];
      i += 1;
    } else {
      mergedParents[k] = b_parent;
      mergedReturnStates[k] = b.returnStates[j];
      j += 1;
    }
    k += 1;
  }
  if (i < a.returnStates.length) {
    for (let p = i; p < a.returnStates.length; p++) {
      mergedParents[k] = a.parents[p];
      mergedReturnStates[k] = a.returnStates[p];
      k += 1;
    }
  } else {
    for (let p = j; p < b.returnStates.length; p++) {
      mergedParents[k] = b.parents[p];
      mergedReturnStates[k] = b.returnStates[p];
      k += 1;
    }
  }
  if (k < mergedParents.length) {
    if (k === 1) {
      const a_ = SingletonPredictionContext.create(
        mergedParents[0],
        mergedReturnStates[0]
      );
      if (mergeCache !== null) {
        mergeCache.set(a, b, a_);
      }
      return a_;
    }
    mergedParents = mergedParents.slice(0, k);
    mergedReturnStates = mergedReturnStates.slice(0, k);
  }
  const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);
  if (M === a) {
    if (mergeCache !== null) {
      mergeCache.set(a, b, a);
    }
    return a;
  }
  if (M === b) {
    if (mergeCache !== null) {
      mergeCache.set(a, b, b);
    }
    return b;
  }
  combineCommonParents(mergedParents);
  if (mergeCache !== null) {
    mergeCache.set(a, b, M);
  }
  return M;
}
function combineCommonParents(parents) {
  const uniqueParents = new HashMap();
  for (let p = 0; p < parents.length; p++) {
    const parent = parents[p];
    if (!uniqueParents.containsKey(parent)) {
      uniqueParents.set(parent, parent);
    }
  }
  for (let q = 0; q < parents.length; q++) {
    parents[q] = uniqueParents.get(parents[q]);
  }
}
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
  if (mergeCache !== null) {
    let previous = mergeCache.get(a, b);
    if (previous !== null) {
      return previous;
    }
    previous = mergeCache.get(b, a);
    if (previous !== null) {
      return previous;
    }
  }
  const rootMerge = mergeRoot(a, b, rootIsWildcard);
  if (rootMerge !== null) {
    if (mergeCache !== null) {
      mergeCache.set(a, b, rootMerge);
    }
    return rootMerge;
  }
  if (a.returnState === b.returnState) {
    const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
    if (parent === a.parentCtx) {
      return a;
    }
    if (parent === b.parentCtx) {
      return b;
    }
    const spc = SingletonPredictionContext.create(parent, a.returnState);
    if (mergeCache !== null) {
      mergeCache.set(a, b, spc);
    }
    return spc;
  } else {
    let singleParent = null;
    if (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {
      singleParent = a.parentCtx;
    }
    if (singleParent !== null) {
      const payloads2 = [a.returnState, b.returnState];
      if (a.returnState > b.returnState) {
        payloads2[0] = b.returnState;
        payloads2[1] = a.returnState;
      }
      const parents2 = [singleParent, singleParent];
      const apc = new ArrayPredictionContext(parents2, payloads2);
      if (mergeCache !== null) {
        mergeCache.set(a, b, apc);
      }
      return apc;
    }
    const payloads = [a.returnState, b.returnState];
    let parents = [a.parentCtx, b.parentCtx];
    if (a.returnState > b.returnState) {
      payloads[0] = b.returnState;
      payloads[1] = a.returnState;
      parents = [b.parentCtx, a.parentCtx];
    }
    const a_ = new ArrayPredictionContext(parents, payloads);
    if (mergeCache !== null) {
      mergeCache.set(a, b, a_);
    }
    return a_;
  }
}
function mergeRoot(a, b, rootIsWildcard) {
  if (rootIsWildcard) {
    if (a === PredictionContext.EMPTY) {
      return PredictionContext.EMPTY;
    }
    if (b === PredictionContext.EMPTY) {
      return PredictionContext.EMPTY;
    }
  } else {
    if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
      return PredictionContext.EMPTY;
    } else if (a === PredictionContext.EMPTY) {
      const payloads = [
        b.returnState,
        PredictionContext.EMPTY_RETURN_STATE
      ];
      const parents = [b.parentCtx, null];
      return new ArrayPredictionContext(parents, payloads);
    } else if (b === PredictionContext.EMPTY) {
      const payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];
      const parents = [a.parentCtx, null];
      return new ArrayPredictionContext(parents, payloads);
    }
  }
  return null;
}

// node_modules/antlr4/src/antlr4/misc/BitSet.js
var BitSet = class _BitSet {
  constructor() {
    this.data = [];
  }
  add(value) {
    this.data[value] = true;
  }
  or(set) {
    Object.keys(set.data).map((alt) => this.add(alt), this);
  }
  remove(value) {
    delete this.data[value];
  }
  has(value) {
    return this.data[value] === true;
  }
  values() {
    return Object.keys(this.data);
  }
  minValue() {
    return Math.min.apply(null, this.values());
  }
  hashCode() {
    return HashCode.hashStuff(this.values());
  }
  equals(other) {
    return other instanceof _BitSet && equalArrays(this.data, other.data);
  }
  toString() {
    return "{" + this.values().join(", ") + "}";
  }
  get length() {
    return this.values().length;
  }
};

// node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js
var LL1Analyzer = class _LL1Analyzer {
  constructor(atn3) {
    this.atn = atn3;
  }
  /**
   * Calculates the SLL(1) expected lookahead set for each outgoing transition
   * of an {@link ATNState}. The returned array has one element for each
   * outgoing transition in {@code s}. If the closure from transition
   * <em>i</em> leads to a semantic predicate before matching a symbol, the
   * element at index <em>i</em> of the result will be {@code null}.
   *
   * @param s the ATN state
   * @return the expected symbols for each outgoing transition of {@code s}.
   */
  getDecisionLookahead(s) {
    if (s === null) {
      return null;
    }
    const count = s.transitions.length;
    const look = [];
    for (let alt = 0; alt < count; alt++) {
      look[alt] = new IntervalSet();
      const lookBusy = new HashSet();
      const seeThruPreds = false;
      this._LOOK(
        s.transition(alt).target,
        null,
        PredictionContext.EMPTY,
        look[alt],
        lookBusy,
        new BitSet(),
        seeThruPreds,
        false
      );
      if (look[alt].length === 0 || look[alt].contains(_LL1Analyzer.HIT_PRED)) {
        look[alt] = null;
      }
    }
    return look;
  }
  /**
   * Compute set of tokens that can follow {@code s} in the ATN in the
   * specified {@code ctx}.
   *
   * <p>If {@code ctx} is {@code null} and the end of the rule containing
   * {@code s} is reached, {@link Token//EPSILON} is added to the result set.
   * If {@code ctx} is not {@code null} and the end of the outermost rule is
   * reached, {@link Token//EOF} is added to the result set.</p>
   *
   * @param s the ATN state
   * @param stopState the ATN state to stop at. This can be a
   * {@link BlockEndState} to detect epsilon paths through a closure.
   * @param ctx the complete parser context, or {@code null} if the context
   * should be ignored
   *
   * @return The set of tokens that can follow {@code s} in the ATN in the
   * specified {@code ctx}.
   */
  LOOK(s, stopState, ctx) {
    const r = new IntervalSet();
    const seeThruPreds = true;
    ctx = ctx || null;
    const lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new HashSet(), new BitSet(), seeThruPreds, true);
    return r;
  }
  /**
   * Compute set of tokens that can follow {@code s} in the ATN in the
   * specified {@code ctx}.
   *
   * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
   * rule containing {@code s} is reached, {@link Token//EPSILON} is added to
   * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
   * {@code true} and {@code stopState} or the end of the outermost rule is
   * reached, {@link Token//EOF} is added to the result set.</p>
   *
   * @param s the ATN state.
   * @param stopState the ATN state to stop at. This can be a
   * {@link BlockEndState} to detect epsilon paths through a closure.
   * @param ctx The outer context, or {@code null} if the outer context should
   * not be used.
   * @param look The result lookahead set.
   * @param lookBusy A set used for preventing epsilon closures in the ATN
   * from causing a stack overflow. Outside code should pass
   * {@code new CustomizedSet<ATNConfig>} for this argument.
   * @param calledRuleStack A set used for preventing left recursion in the
   * ATN from causing a stack overflow. Outside code should pass
   * {@code new BitSet()} for this argument.
   * @param seeThruPreds {@code true} to true semantic predicates as
   * implicitly {@code true} and "see through them", otherwise {@code false}
   * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
   * result if one is encountered.
   * @param addEOF Add {@link Token//EOF} to the result if the end of the
   * outermost context is reached. This parameter has no effect if {@code ctx}
   * is {@code null}.
   */
  _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    const c = new ATNConfig({ state: s, alt: 0, context: ctx }, null);
    if (lookBusy.has(c)) {
      return;
    }
    lookBusy.add(c);
    if (s === stopState) {
      if (ctx === null) {
        look.addOne(Token.EPSILON);
        return;
      } else if (ctx.isEmpty() && addEOF) {
        look.addOne(Token.EOF);
        return;
      }
    }
    if (s instanceof RuleStopState) {
      if (ctx === null) {
        look.addOne(Token.EPSILON);
        return;
      } else if (ctx.isEmpty() && addEOF) {
        look.addOne(Token.EOF);
        return;
      }
      if (ctx !== PredictionContext.EMPTY) {
        const removed = calledRuleStack.has(s.ruleIndex);
        try {
          calledRuleStack.remove(s.ruleIndex);
          for (let i = 0; i < ctx.length; i++) {
            const returnState = this.atn.states[ctx.getReturnState(i)];
            this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          }
        } finally {
          if (removed) {
            calledRuleStack.add(s.ruleIndex);
          }
        }
        return;
      }
    }
    for (let j = 0; j < s.transitions.length; j++) {
      const t2 = s.transitions[j];
      if (t2.constructor === RuleTransition) {
        if (calledRuleStack.has(t2.target.ruleIndex)) {
          continue;
        }
        const newContext = SingletonPredictionContext.create(ctx, t2.followState.stateNumber);
        try {
          calledRuleStack.add(t2.target.ruleIndex);
          this._LOOK(t2.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } finally {
          calledRuleStack.remove(t2.target.ruleIndex);
        }
      } else if (t2 instanceof AbstractPredicateTransition) {
        if (seeThruPreds) {
          this._LOOK(t2.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else {
          look.addOne(_LL1Analyzer.HIT_PRED);
        }
      } else if (t2.isEpsilon) {
        this._LOOK(t2.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
      } else if (t2.constructor === WildcardTransition) {
        look.addRange(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
      } else {
        let set = t2.label;
        if (set !== null) {
          if (t2 instanceof NotSetTransition) {
            set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
          }
          look.addSet(set);
        }
      }
    }
  }
};
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;

// node_modules/antlr4/src/antlr4/atn/ATN.js
var ATN = class {
  constructor(grammarType, maxTokenType) {
    this.grammarType = grammarType;
    this.maxTokenType = maxTokenType;
    this.states = [];
    this.decisionToState = [];
    this.ruleToStartState = [];
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    this.ruleToTokenType = null;
    this.lexerActions = null;
    this.modeToStartState = [];
  }
  /**
   * Compute the set of valid tokens that can occur starting in state {@code s}.
   * If {@code ctx} is null, the set of tokens will not include what can follow
   * the rule surrounding {@code s}. In other words, the set will be
   * restricted to tokens reachable staying within {@code s}'s rule
   */
  nextTokensInContext(s, ctx) {
    const anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
  }
  /**
   * Compute the set of valid tokens that can occur starting in {@code s} and
   * staying in same rule. {@link Token//EPSILON} is in set if we reach end of
   * rule
   */
  nextTokensNoContext(s) {
    if (s.nextTokenWithinRule !== null) {
      return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
  }
  nextTokens(s, ctx) {
    if (ctx === void 0) {
      return this.nextTokensNoContext(s);
    } else {
      return this.nextTokensInContext(s, ctx);
    }
  }
  addState(state) {
    if (state !== null) {
      state.atn = this;
      state.stateNumber = this.states.length;
    }
    this.states.push(state);
  }
  removeState(state) {
    this.states[state.stateNumber] = null;
  }
  defineDecisionState(s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length - 1;
    return s.decision;
  }
  getDecisionState(decision) {
    if (this.decisionToState.length === 0) {
      return null;
    } else {
      return this.decisionToState[decision];
    }
  }
  /**
   * Computes the set of input symbols which could follow ATN state number
   * {@code stateNumber} in the specified full {@code context}. This method
   * considers the complete parser context, but does not evaluate semantic
   * predicates (i.e. all predicates encountered during the calculation are
   * assumed true). If a path in the ATN exists from the starting state to the
   * {@link RuleStopState} of the outermost context without matching any
   * symbols, {@link Token//EOF} is added to the returned set.
   *
   * <p>If {@code context} is {@code null}, it is treated as
   * {@link ParserRuleContext//EMPTY}.</p>
   *
   * @param stateNumber the ATN state number
   * @param ctx the full parse context
   *
   * @return {IntervalSet} The set of potentially valid input symbols which could follow the
   * specified state in the specified context.
   *
   * @throws IllegalArgumentException if the ATN does not contain a state with
   * number {@code stateNumber}
   */
  getExpectedTokens(stateNumber, ctx) {
    if (stateNumber < 0 || stateNumber >= this.states.length) {
      throw "Invalid state number.";
    }
    const s = this.states[stateNumber];
    let following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
      return following;
    }
    const expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
      const invokingState = this.states[ctx.invokingState];
      const rt = invokingState.transitions[0];
      following = this.nextTokens(rt.followState);
      expected.addSet(following);
      expected.removeOne(Token.EPSILON);
      ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
      expected.addOne(Token.EOF);
    }
    return expected;
  }
};
ATN.INVALID_ALT_NUMBER = 0;

// node_modules/antlr4/src/antlr4/atn/ATNType.js
var ATNType_default = {
  LEXER: 0,
  PARSER: 1
};

// node_modules/antlr4/src/antlr4/state/BasicState.js
var BasicState = class extends ATNState {
  constructor() {
    super();
    this.stateType = ATNState.BASIC;
  }
};

// node_modules/antlr4/src/antlr4/state/DecisionState.js
var DecisionState = class extends ATNState {
  constructor() {
    super();
    this.decision = -1;
    this.nonGreedy = false;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/BlockStartState.js
var BlockStartState = class extends DecisionState {
  constructor() {
    super();
    this.endState = null;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/BlockEndState.js
var BlockEndState = class extends ATNState {
  constructor() {
    super();
    this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/LoopEndState.js
var LoopEndState = class extends ATNState {
  constructor() {
    super();
    this.stateType = ATNState.LOOP_END;
    this.loopBackState = null;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/RuleStartState.js
var RuleStartState = class extends ATNState {
  constructor() {
    super();
    this.stateType = ATNState.RULE_START;
    this.stopState = null;
    this.isPrecedenceRule = false;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/TokensStartState.js
var TokensStartState = class extends DecisionState {
  constructor() {
    super();
    this.stateType = ATNState.TOKEN_START;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/PlusLoopbackState.js
var PlusLoopbackState = class extends DecisionState {
  constructor() {
    super();
    this.stateType = ATNState.PLUS_LOOP_BACK;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/StarLoopbackState.js
var StarLoopbackState = class extends ATNState {
  constructor() {
    super();
    this.stateType = ATNState.STAR_LOOP_BACK;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js
var StarLoopEntryState = class extends DecisionState {
  constructor() {
    super();
    this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    this.isPrecedenceDecision = null;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/PlusBlockStartState.js
var PlusBlockStartState = class extends BlockStartState {
  constructor() {
    super();
    this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/StarBlockStartState.js
var StarBlockStartState = class extends BlockStartState {
  constructor() {
    super();
    this.stateType = ATNState.STAR_BLOCK_START;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/state/BasicBlockStartState.js
var BasicBlockStartState = class extends BlockStartState {
  constructor() {
    super();
    this.stateType = ATNState.BLOCK_START;
    return this;
  }
};

// node_modules/antlr4/src/antlr4/transition/AtomTransition.js
var AtomTransition = class extends Transition {
  constructor(target, label) {
    super(target);
    this.label_ = label;
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
  }
  makeLabel() {
    const s = new IntervalSet();
    s.addOne(this.label_);
    return s;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return this.label_ === symbol;
  }
  toString() {
    return this.label_;
  }
};

// node_modules/antlr4/src/antlr4/transition/RangeTransition.js
var RangeTransition = class extends Transition {
  constructor(target, start, stop) {
    super(target);
    this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
  }
  makeLabel() {
    const s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return symbol >= this.start && symbol <= this.stop;
  }
  toString() {
    return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
  }
};

// node_modules/antlr4/src/antlr4/transition/ActionTransition.js
var ActionTransition = class extends Transition {
  constructor(target, ruleIndex, actionIndex, isCtxDependent) {
    super(target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex === void 0 ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent === void 0 ? false : isCtxDependent;
    this.isEpsilon = true;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return false;
  }
  toString() {
    return "action_" + this.ruleIndex + ":" + this.actionIndex;
  }
};

// node_modules/antlr4/src/antlr4/transition/EpsilonTransition.js
var EpsilonTransition = class extends Transition {
  constructor(target, outermostPrecedenceReturn) {
    super(target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return false;
  }
  toString() {
    return "epsilon";
  }
};

// node_modules/antlr4/src/antlr4/atn/Predicate.js
var Predicate = class _Predicate extends SemanticContext {
  constructor(ruleIndex, predIndex, isCtxDependent) {
    super();
    this.ruleIndex = ruleIndex === void 0 ? -1 : ruleIndex;
    this.predIndex = predIndex === void 0 ? -1 : predIndex;
    this.isCtxDependent = isCtxDependent === void 0 ? false : isCtxDependent;
  }
  evaluate(parser, outerContext) {
    const localctx = this.isCtxDependent ? outerContext : null;
    return parser.sempred(localctx, this.ruleIndex, this.predIndex);
  }
  updateHashCode(hash) {
    hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _Predicate)) {
      return false;
    } else {
      return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;
    }
  }
  toString() {
    return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
  }
};
SemanticContext.NONE = new Predicate();

// node_modules/antlr4/src/antlr4/transition/PredicateTransition.js
var PredicateTransition = class extends AbstractPredicateTransition {
  constructor(target, ruleIndex, predIndex, isCtxDependent) {
    super(target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent;
    this.isEpsilon = true;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return false;
  }
  getPredicate() {
    return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
  }
  toString() {
    return "pred_" + this.ruleIndex + ":" + this.predIndex;
  }
};

// node_modules/antlr4/src/antlr4/atn/PrecedencePredicate.js
var PrecedencePredicate = class _PrecedencePredicate extends SemanticContext {
  constructor(precedence) {
    super();
    this.precedence = precedence === void 0 ? 0 : precedence;
  }
  evaluate(parser, outerContext) {
    return parser.precpred(outerContext, this.precedence);
  }
  evalPrecedence(parser, outerContext) {
    if (parser.precpred(outerContext, this.precedence)) {
      return SemanticContext.NONE;
    } else {
      return null;
    }
  }
  compareTo(other) {
    return this.precedence - other.precedence;
  }
  updateHashCode(hash) {
    hash.update(this.precedence);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _PrecedencePredicate)) {
      return false;
    } else {
      return this.precedence === other.precedence;
    }
  }
  toString() {
    return "{" + this.precedence + ">=prec}?";
  }
};
SemanticContext.PrecedencePredicate = PrecedencePredicate;

// node_modules/antlr4/src/antlr4/transition/PrecedencePredicateTransition.js
var PrecedencePredicateTransition = class extends AbstractPredicateTransition {
  constructor(target, precedence) {
    super(target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
  }
  matches(symbol, minVocabSymbol, maxVocabSymbol) {
    return false;
  }
  getPredicate() {
    return new PrecedencePredicate(this.precedence);
  }
  toString() {
    return this.precedence + " >= _p";
  }
};

// node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js
var ATNDeserializationOptions = class {
  constructor(copyFrom) {
    if (copyFrom === void 0) {
      copyFrom = null;
    }
    this.readOnly = false;
    this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;
  }
};
ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

// node_modules/antlr4/src/antlr4/atn/LexerActionType.js
var LexerActionType_default = {
  // The type of a {@link LexerChannelAction} action.
  CHANNEL: 0,
  // The type of a {@link LexerCustomAction} action
  CUSTOM: 1,
  // The type of a {@link LexerModeAction} action.
  MODE: 2,
  //The type of a {@link LexerMoreAction} action.
  MORE: 3,
  //The type of a {@link LexerPopModeAction} action.
  POP_MODE: 4,
  //The type of a {@link LexerPushModeAction} action.
  PUSH_MODE: 5,
  //The type of a {@link LexerSkipAction} action.
  SKIP: 6,
  //The type of a {@link LexerTypeAction} action.
  TYPE: 7
};

// node_modules/antlr4/src/antlr4/action/LexerAction.js
var LexerAction = class {
  constructor(action) {
    this.actionType = action;
    this.isPositionDependent = false;
  }
  hashCode() {
    const hash = new HashCode();
    this.updateHashCode(hash);
    return hash.finish();
  }
  updateHashCode(hash) {
    hash.update(this.actionType);
  }
  equals(other) {
    return this === other;
  }
};

// node_modules/antlr4/src/antlr4/action/LexerSkipAction.js
var LexerSkipAction = class extends LexerAction {
  constructor() {
    super(LexerActionType_default.SKIP);
  }
  execute(lexer) {
    lexer.skip();
  }
  toString() {
    return "skip";
  }
};
LexerSkipAction.INSTANCE = new LexerSkipAction();

// node_modules/antlr4/src/antlr4/action/LexerChannelAction.js
var LexerChannelAction = class _LexerChannelAction extends LexerAction {
  constructor(channel) {
    super(LexerActionType_default.CHANNEL);
    this.channel = channel;
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//setChannel} with the
   * value provided by {@link //getChannel}.</p>
   */
  execute(lexer) {
    lexer._channel = this.channel;
  }
  updateHashCode(hash) {
    hash.update(this.actionType, this.channel);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerChannelAction)) {
      return false;
    } else {
      return this.channel === other.channel;
    }
  }
  toString() {
    return "channel(" + this.channel + ")";
  }
};

// node_modules/antlr4/src/antlr4/action/LexerCustomAction.js
var LexerCustomAction = class _LexerCustomAction extends LexerAction {
  /**
   * Constructs a custom lexer action with the specified rule and action
   * indexes.
   *
   * @param ruleIndex The rule index to use for calls to
   * {@link Recognizer//action}.
   * @param actionIndex The action index to use for calls to
   * {@link Recognizer//action}.
   */
  constructor(ruleIndex, actionIndex) {
    super(LexerActionType_default.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
  }
  /**
   * <p>Custom actions are implemented by calling {@link Lexer//action} with the
   * appropriate rule and action indexes.</p>
   */
  execute(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
  }
  updateHashCode(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerCustomAction)) {
      return false;
    } else {
      return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
  }
};

// node_modules/antlr4/src/antlr4/action/LexerMoreAction.js
var LexerMoreAction = class extends LexerAction {
  constructor() {
    super(LexerActionType_default.MORE);
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
   */
  execute(lexer) {
    lexer.more();
  }
  toString() {
    return "more";
  }
};
LexerMoreAction.INSTANCE = new LexerMoreAction();

// node_modules/antlr4/src/antlr4/action/LexerTypeAction.js
var LexerTypeAction = class _LexerTypeAction extends LexerAction {
  constructor(type) {
    super(LexerActionType_default.TYPE);
    this.type = type;
  }
  execute(lexer) {
    lexer.type = this.type;
  }
  updateHashCode(hash) {
    hash.update(this.actionType, this.type);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerTypeAction)) {
      return false;
    } else {
      return this.type === other.type;
    }
  }
  toString() {
    return "type(" + this.type + ")";
  }
};

// node_modules/antlr4/src/antlr4/action/LexerPushModeAction.js
var LexerPushModeAction = class _LexerPushModeAction extends LexerAction {
  constructor(mode) {
    super(LexerActionType_default.PUSH_MODE);
    this.mode = mode;
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//pushMode} with the
   * value provided by {@link //getMode}.</p>
   */
  execute(lexer) {
    lexer.pushMode(this.mode);
  }
  updateHashCode(hash) {
    hash.update(this.actionType, this.mode);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerPushModeAction)) {
      return false;
    } else {
      return this.mode === other.mode;
    }
  }
  toString() {
    return "pushMode(" + this.mode + ")";
  }
};

// node_modules/antlr4/src/antlr4/action/LexerPopModeAction.js
var LexerPopModeAction = class extends LexerAction {
  constructor() {
    super(LexerActionType_default.POP_MODE);
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
   */
  execute(lexer) {
    lexer.popMode();
  }
  toString() {
    return "popMode";
  }
};
LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// node_modules/antlr4/src/antlr4/action/LexerModeAction.js
var LexerModeAction = class _LexerModeAction extends LexerAction {
  constructor(mode) {
    super(LexerActionType_default.MODE);
    this.mode = mode;
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//mode} with the
   * value provided by {@link //getMode}.</p>
   */
  execute(lexer) {
    lexer.mode(this.mode);
  }
  updateHashCode(hash) {
    hash.update(this.actionType, this.mode);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerModeAction)) {
      return false;
    } else {
      return this.mode === other.mode;
    }
  }
  toString() {
    return "mode(" + this.mode + ")";
  }
};

// node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js
var SERIALIZED_VERSION = 4;
function initArray(length, value) {
  const tmp = [];
  tmp[length - 1] = value;
  return tmp.map(function(i) {
    return value;
  });
}
var ATNDeserializer = class {
  constructor(options) {
    if (options === void 0 || options === null) {
      options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;
  }
  deserialize(data) {
    const legacy = this.reset(data);
    this.checkVersion(legacy);
    if (legacy)
      this.skipUUID();
    const atn3 = this.readATN();
    this.readStates(atn3, legacy);
    this.readRules(atn3, legacy);
    this.readModes(atn3);
    const sets = [];
    this.readSets(atn3, sets, this.readInt.bind(this));
    if (legacy)
      this.readSets(atn3, sets, this.readInt32.bind(this));
    this.readEdges(atn3, sets);
    this.readDecisions(atn3);
    this.readLexerActions(atn3, legacy);
    this.markPrecedenceDecisions(atn3);
    this.verifyATN(atn3);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn3.grammarType === ATNType_default.PARSER) {
      this.generateRuleBypassTransitions(atn3);
      this.verifyATN(atn3);
    }
    return atn3;
  }
  reset(data) {
    const version = data.charCodeAt ? data.charCodeAt(0) : data[0];
    if (version === SERIALIZED_VERSION - 1) {
      const adjust = function(c) {
        const v = c.charCodeAt(0);
        return v > 1 ? v - 2 : v + 65534;
      };
      const temp = data.split("").map(adjust);
      temp[0] = data.charCodeAt(0);
      this.data = temp;
      this.pos = 0;
      return true;
    } else {
      this.data = data;
      this.pos = 0;
      return false;
    }
  }
  skipUUID() {
    let count = 0;
    while (count++ < 8)
      this.readInt();
  }
  checkVersion(legacy) {
    const version = this.readInt();
    if (!legacy && version !== SERIALIZED_VERSION) {
      throw "Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").";
    }
  }
  readATN() {
    const grammarType = this.readInt();
    const maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
  }
  readStates(atn3, legacy) {
    let j, pair, stateNumber;
    const loopBackStateNumbers = [];
    const endStateNumbers = [];
    const nstates = this.readInt();
    for (let i = 0; i < nstates; i++) {
      const stype = this.readInt();
      if (stype === ATNState.INVALID_TYPE) {
        atn3.addState(null);
        continue;
      }
      let ruleIndex = this.readInt();
      if (legacy && ruleIndex === 65535) {
        ruleIndex = -1;
      }
      const s = this.stateFactory(stype, ruleIndex);
      if (stype === ATNState.LOOP_END) {
        const loopBackStateNumber = this.readInt();
        loopBackStateNumbers.push([s, loopBackStateNumber]);
      } else if (s instanceof BlockStartState) {
        const endStateNumber = this.readInt();
        endStateNumbers.push([s, endStateNumber]);
      }
      atn3.addState(s);
    }
    for (j = 0; j < loopBackStateNumbers.length; j++) {
      pair = loopBackStateNumbers[j];
      pair[0].loopBackState = atn3.states[pair[1]];
    }
    for (j = 0; j < endStateNumbers.length; j++) {
      pair = endStateNumbers[j];
      pair[0].endState = atn3.states[pair[1]];
    }
    let numNonGreedyStates = this.readInt();
    for (j = 0; j < numNonGreedyStates; j++) {
      stateNumber = this.readInt();
      atn3.states[stateNumber].nonGreedy = true;
    }
    let numPrecedenceStates = this.readInt();
    for (j = 0; j < numPrecedenceStates; j++) {
      stateNumber = this.readInt();
      atn3.states[stateNumber].isPrecedenceRule = true;
    }
  }
  readRules(atn3, legacy) {
    let i;
    const nrules = this.readInt();
    if (atn3.grammarType === ATNType_default.LEXER) {
      atn3.ruleToTokenType = initArray(nrules, 0);
    }
    atn3.ruleToStartState = initArray(nrules, 0);
    for (i = 0; i < nrules; i++) {
      const s = this.readInt();
      atn3.ruleToStartState[i] = atn3.states[s];
      if (atn3.grammarType === ATNType_default.LEXER) {
        let tokenType = this.readInt();
        if (legacy && tokenType === 65535) {
          tokenType = Token.EOF;
        }
        atn3.ruleToTokenType[i] = tokenType;
      }
    }
    atn3.ruleToStopState = initArray(nrules, 0);
    for (i = 0; i < atn3.states.length; i++) {
      const state = atn3.states[i];
      if (!(state instanceof RuleStopState)) {
        continue;
      }
      atn3.ruleToStopState[state.ruleIndex] = state;
      atn3.ruleToStartState[state.ruleIndex].stopState = state;
    }
  }
  readModes(atn3) {
    const nmodes = this.readInt();
    for (let i = 0; i < nmodes; i++) {
      let s = this.readInt();
      atn3.modeToStartState.push(atn3.states[s]);
    }
  }
  readSets(atn3, sets, reader) {
    const m = this.readInt();
    for (let i = 0; i < m; i++) {
      const iset = new IntervalSet();
      sets.push(iset);
      const n = this.readInt();
      const containsEof = this.readInt();
      if (containsEof !== 0) {
        iset.addOne(-1);
      }
      for (let j = 0; j < n; j++) {
        const i1 = reader();
        const i2 = reader();
        iset.addRange(i1, i2);
      }
    }
  }
  readEdges(atn3, sets) {
    let i, j, state, trans, target;
    const nedges = this.readInt();
    for (i = 0; i < nedges; i++) {
      const src = this.readInt();
      const trg = this.readInt();
      const ttype = this.readInt();
      const arg1 = this.readInt();
      const arg2 = this.readInt();
      const arg3 = this.readInt();
      trans = this.edgeFactory(atn3, ttype, src, trg, arg1, arg2, arg3, sets);
      const srcState = atn3.states[src];
      srcState.addTransition(trans);
    }
    for (i = 0; i < atn3.states.length; i++) {
      state = atn3.states[i];
      for (j = 0; j < state.transitions.length; j++) {
        const t2 = state.transitions[j];
        if (!(t2 instanceof RuleTransition)) {
          continue;
        }
        let outermostPrecedenceReturn = -1;
        if (atn3.ruleToStartState[t2.target.ruleIndex].isPrecedenceRule) {
          if (t2.precedence === 0) {
            outermostPrecedenceReturn = t2.target.ruleIndex;
          }
        }
        trans = new EpsilonTransition(t2.followState, outermostPrecedenceReturn);
        atn3.ruleToStopState[t2.target.ruleIndex].addTransition(trans);
      }
    }
    for (i = 0; i < atn3.states.length; i++) {
      state = atn3.states[i];
      if (state instanceof BlockStartState) {
        if (state.endState === null) {
          throw "IllegalState";
        }
        if (state.endState.startState !== null) {
          throw "IllegalState";
        }
        state.endState.startState = state;
      }
      if (state instanceof PlusLoopbackState) {
        for (j = 0; j < state.transitions.length; j++) {
          target = state.transitions[j].target;
          if (target instanceof PlusBlockStartState) {
            target.loopBackState = state;
          }
        }
      } else if (state instanceof StarLoopbackState) {
        for (j = 0; j < state.transitions.length; j++) {
          target = state.transitions[j].target;
          if (target instanceof StarLoopEntryState) {
            target.loopBackState = state;
          }
        }
      }
    }
  }
  readDecisions(atn3) {
    const ndecisions = this.readInt();
    for (let i = 0; i < ndecisions; i++) {
      const s = this.readInt();
      const decState = atn3.states[s];
      atn3.decisionToState.push(decState);
      decState.decision = i;
    }
  }
  readLexerActions(atn3, legacy) {
    if (atn3.grammarType === ATNType_default.LEXER) {
      const count = this.readInt();
      atn3.lexerActions = initArray(count, null);
      for (let i = 0; i < count; i++) {
        const actionType = this.readInt();
        let data1 = this.readInt();
        if (legacy && data1 === 65535) {
          data1 = -1;
        }
        let data2 = this.readInt();
        if (legacy && data2 === 65535) {
          data2 = -1;
        }
        atn3.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
      }
    }
  }
  generateRuleBypassTransitions(atn3) {
    let i;
    const count = atn3.ruleToStartState.length;
    for (i = 0; i < count; i++) {
      atn3.ruleToTokenType[i] = atn3.maxTokenType + i + 1;
    }
    for (i = 0; i < count; i++) {
      this.generateRuleBypassTransition(atn3, i);
    }
  }
  generateRuleBypassTransition(atn3, idx) {
    let i, state;
    const bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn3.addState(bypassStart);
    const bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn3.addState(bypassStop);
    bypassStart.endState = bypassStop;
    atn3.defineDecisionState(bypassStart);
    bypassStop.startState = bypassStart;
    let excludeTransition = null;
    let endState = null;
    if (atn3.ruleToStartState[idx].isPrecedenceRule) {
      endState = null;
      for (i = 0; i < atn3.states.length; i++) {
        state = atn3.states[i];
        if (this.stateIsEndStateFor(state, idx)) {
          endState = state;
          excludeTransition = state.loopBackState.transitions[0];
          break;
        }
      }
      if (excludeTransition === null) {
        throw "Couldn't identify final state of the precedence rule prefix section.";
      }
    } else {
      endState = atn3.ruleToStopState[idx];
    }
    for (i = 0; i < atn3.states.length; i++) {
      state = atn3.states[i];
      for (let j = 0; j < state.transitions.length; j++) {
        const transition = state.transitions[j];
        if (transition === excludeTransition) {
          continue;
        }
        if (transition.target === endState) {
          transition.target = bypassStop;
        }
      }
    }
    const ruleToStartState = atn3.ruleToStartState[idx];
    const count = ruleToStartState.transitions.length;
    while (count > 0) {
      bypassStart.addTransition(ruleToStartState.transitions[count - 1]);
      ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    atn3.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));
    const matchState = new BasicState();
    atn3.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn3.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
  }
  stateIsEndStateFor(state, idx) {
    if (state.ruleIndex !== idx) {
      return null;
    }
    if (!(state instanceof StarLoopEntryState)) {
      return null;
    }
    const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!(maybeLoopEndState instanceof LoopEndState)) {
      return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {
      return state;
    } else {
      return null;
    }
  }
  /**
   * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
   * the {@link StarLoopEntryState//isPrecedenceDecision} field to the
   * correct value.
   * @param atn The ATN.
   */
  markPrecedenceDecisions(atn3) {
    for (let i = 0; i < atn3.states.length; i++) {
      const state = atn3.states[i];
      if (!(state instanceof StarLoopEntryState)) {
        continue;
      }
      if (atn3.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
        if (maybeLoopEndState instanceof LoopEndState) {
          if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {
            state.isPrecedenceDecision = true;
          }
        }
      }
    }
  }
  verifyATN(atn3) {
    if (!this.deserializationOptions.verifyATN) {
      return;
    }
    for (let i = 0; i < atn3.states.length; i++) {
      const state = atn3.states[i];
      if (state === null) {
        continue;
      }
      this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
      if (state instanceof PlusBlockStartState) {
        this.checkCondition(state.loopBackState !== null);
      } else if (state instanceof StarLoopEntryState) {
        this.checkCondition(state.loopBackState !== null);
        this.checkCondition(state.transitions.length === 2);
        if (state.transitions[0].target instanceof StarBlockStartState) {
          this.checkCondition(state.transitions[1].target instanceof LoopEndState);
          this.checkCondition(!state.nonGreedy);
        } else if (state.transitions[0].target instanceof LoopEndState) {
          this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
          this.checkCondition(state.nonGreedy);
        } else {
          throw "IllegalState";
        }
      } else if (state instanceof StarLoopbackState) {
        this.checkCondition(state.transitions.length === 1);
        this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
      } else if (state instanceof LoopEndState) {
        this.checkCondition(state.loopBackState !== null);
      } else if (state instanceof RuleStartState) {
        this.checkCondition(state.stopState !== null);
      } else if (state instanceof BlockStartState) {
        this.checkCondition(state.endState !== null);
      } else if (state instanceof BlockEndState) {
        this.checkCondition(state.startState !== null);
      } else if (state instanceof DecisionState) {
        this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
      } else {
        this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);
      }
    }
  }
  checkCondition(condition, message) {
    if (!condition) {
      if (message === void 0 || message === null) {
        message = "IllegalState";
      }
      throw message;
    }
  }
  readInt() {
    return this.data[this.pos++];
  }
  readInt32() {
    const low = this.readInt();
    const high = this.readInt();
    return low | high << 16;
  }
  edgeFactory(atn3, type, src, trg, arg1, arg2, arg3, sets) {
    const target = atn3.states[trg];
    switch (type) {
      case Transition.EPSILON:
        return new EpsilonTransition(target);
      case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
      case Transition.RULE:
        return new RuleTransition(atn3.states[arg1], arg2, arg3, target);
      case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
      case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
      case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
      case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
      case Transition.SET:
        return new SetTransition(target, sets[arg1]);
      case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
      case Transition.WILDCARD:
        return new WildcardTransition(target);
      default:
        throw "The specified transition type: " + type + " is not valid.";
    }
  }
  stateFactory(type, ruleIndex) {
    if (this.stateFactories === null) {
      const sf = [];
      sf[ATNState.INVALID_TYPE] = null;
      sf[ATNState.BASIC] = () => new BasicState();
      sf[ATNState.RULE_START] = () => new RuleStartState();
      sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();
      sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();
      sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();
      sf[ATNState.TOKEN_START] = () => new TokensStartState();
      sf[ATNState.RULE_STOP] = () => new RuleStopState();
      sf[ATNState.BLOCK_END] = () => new BlockEndState();
      sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();
      sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();
      sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();
      sf[ATNState.LOOP_END] = () => new LoopEndState();
      this.stateFactories = sf;
    }
    if (type > this.stateFactories.length || this.stateFactories[type] === null) {
      throw "The specified state type " + type + " is not valid.";
    } else {
      const s = this.stateFactories[type]();
      if (s !== null) {
        s.ruleIndex = ruleIndex;
        return s;
      }
    }
  }
  lexerActionFactory(type, data1, data2) {
    if (this.actionFactories === null) {
      const af = [];
      af[LexerActionType_default.CHANNEL] = (data12, data22) => new LexerChannelAction(data12);
      af[LexerActionType_default.CUSTOM] = (data12, data22) => new LexerCustomAction(data12, data22);
      af[LexerActionType_default.MODE] = (data12, data22) => new LexerModeAction(data12);
      af[LexerActionType_default.MORE] = (data12, data22) => LexerMoreAction.INSTANCE;
      af[LexerActionType_default.POP_MODE] = (data12, data22) => LexerPopModeAction.INSTANCE;
      af[LexerActionType_default.PUSH_MODE] = (data12, data22) => new LexerPushModeAction(data12);
      af[LexerActionType_default.SKIP] = (data12, data22) => LexerSkipAction.INSTANCE;
      af[LexerActionType_default.TYPE] = (data12, data22) => new LexerTypeAction(data12);
      this.actionFactories = af;
    }
    if (type > this.actionFactories.length || this.actionFactories[type] === null) {
      throw "The specified lexer action type " + type + " is not valid.";
    } else {
      return this.actionFactories[type](data1, data2);
    }
  }
};

// node_modules/antlr4/src/antlr4/error/ErrorListener.js
var ErrorListener = class {
  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
  }
  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
  }
  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
  }
  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
  }
};

// node_modules/antlr4/src/antlr4/error/ConsoleErrorListener.js
var ConsoleErrorListener = class extends ErrorListener {
  constructor() {
    super();
  }
  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
  }
};
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

// node_modules/antlr4/src/antlr4/error/ProxyErrorListener.js
var ProxyErrorListener = class extends ErrorListener {
  constructor(delegates) {
    super();
    if (delegates === null) {
      throw "delegates";
    }
    this.delegates = delegates;
    return this;
  }
  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map((d) => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));
  }
  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map((d) => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));
  }
  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
    this.delegates.map((d) => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));
  }
  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
    this.delegates.map((d) => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));
  }
};

// node_modules/antlr4/src/antlr4/Recognizer.js
var Recognizer = class {
  constructor() {
    this._listeners = [ConsoleErrorListener.INSTANCE];
    this._interp = null;
    this._stateNumber = -1;
  }
  checkVersion(toolVersion) {
    const runtimeVersion = "4.10.1";
    if (runtimeVersion !== toolVersion) {
      console.log("ANTLR runtime and generated code versions disagree: " + runtimeVersion + "!=" + toolVersion);
    }
  }
  addErrorListener(listener) {
    this._listeners.push(listener);
  }
  removeErrorListeners() {
    this._listeners = [];
  }
  getLiteralNames() {
    return Object.getPrototypeOf(this).constructor.literalNames || [];
  }
  getSymbolicNames() {
    return Object.getPrototypeOf(this).constructor.symbolicNames || [];
  }
  getTokenNames() {
    if (!this.tokenNames) {
      const literalNames = this.getLiteralNames();
      const symbolicNames = this.getSymbolicNames();
      const length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;
      this.tokenNames = [];
      for (let i = 0; i < length; i++) {
        this.tokenNames[i] = literalNames[i] || symbolicNames[i] || "<INVALID";
      }
    }
    return this.tokenNames;
  }
  getTokenTypeMap() {
    const tokenNames = this.getTokenNames();
    if (tokenNames === null) {
      throw "The current recognizer does not provide a list of token names.";
    }
    let result = this.tokenTypeMapCache[tokenNames];
    if (result === void 0) {
      result = tokenNames.reduce(function(o, k, i) {
        o[k] = i;
      });
      result.EOF = Token.EOF;
      this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
  }
  /**
   * Get a map from rule names to rule indexes.
   * <p>Used for XPath and tree pattern compilation.</p>
   */
  getRuleIndexMap() {
    const ruleNames = this.ruleNames;
    if (ruleNames === null) {
      throw "The current recognizer does not provide a list of rule names.";
    }
    let result = this.ruleIndexMapCache[ruleNames];
    if (result === void 0) {
      result = ruleNames.reduce(function(o, k, i) {
        o[k] = i;
      });
      this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
  }
  getTokenType(tokenName) {
    const ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !== void 0) {
      return ttype;
    } else {
      return Token.INVALID_TYPE;
    }
  }
  // What is the error header, normally line/character position information?
  getErrorHeader(e) {
    const line = e.getOffendingToken().line;
    const column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
  }
  /**
   * How should a token be displayed in an error message? The default
   * is to display just the text, but during development you might
   * want to have a lot of information spit out.  Override in that case
   * to use t.toString() (which, for CommonToken, dumps everything about
   * the token). This is better than forcing you to override a method in
   * your token objects because you don't have to go modify your lexer
   * so that it creates a new Java type.
   *
   * @deprecated This method is not called by the ANTLR 4 Runtime. Specific
   * implementations of {@link ANTLRErrorStrategy} may provide a similar
   * feature when necessary. For example, see
   * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/
  getTokenErrorDisplay(t2) {
    if (t2 === null) {
      return "<no token>";
    }
    let s = t2.text;
    if (s === null) {
      if (t2.type === Token.EOF) {
        s = "<EOF>";
      } else {
        s = "<" + t2.type + ">";
      }
    }
    s = s.replace("\n", "\\n").replace("\r", "\\r").replace("	", "\\t");
    return "'" + s + "'";
  }
  getErrorListenerDispatch() {
    return new ProxyErrorListener(this._listeners);
  }
  /**
   * subclass needs to override these if there are sempreds or actions
   * that the ATN interp needs to execute
   */
  sempred(localctx, ruleIndex, actionIndex) {
    return true;
  }
  precpred(localctx, precedence) {
    return true;
  }
  get state() {
    return this._stateNumber;
  }
  set state(state) {
    this._stateNumber = state;
  }
};
Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};

// node_modules/antlr4/src/antlr4/CommonToken.js
var CommonToken = class _CommonToken extends Token {
  constructor(source, type, channel, start, stop) {
    super();
    this.source = source !== void 0 ? source : _CommonToken.EMPTY_SOURCE;
    this.type = type !== void 0 ? type : null;
    this.channel = channel !== void 0 ? channel : Token.DEFAULT_CHANNEL;
    this.start = start !== void 0 ? start : -1;
    this.stop = stop !== void 0 ? stop : -1;
    this.tokenIndex = -1;
    if (this.source[0] !== null) {
      this.line = source[0].line;
      this.column = source[0].column;
    } else {
      this.column = -1;
    }
  }
  /**
   * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
   *
   * <p>
   * If {@code oldToken} is also a {@link CommonToken} instance, the newly
   * constructed token will share a reference to the {@link //text} field and
   * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
   * be assigned the result of calling {@link //getText}, and {@link //source}
   * will be constructed from the result of {@link Token//getTokenSource} and
   * {@link Token//getInputStream}.</p>
   *
   * @param oldToken The token to copy.
   */
  clone() {
    const t2 = new _CommonToken(this.source, this.type, this.channel, this.start, this.stop);
    t2.tokenIndex = this.tokenIndex;
    t2.line = this.line;
    t2.column = this.column;
    t2.text = this.text;
    return t2;
  }
  toString() {
    let txt = this.text;
    if (txt !== null) {
      txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
    } else {
      txt = "<no text>";
    }
    return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + this.type + ">" + (this.channel > 0 ? ",channel=" + this.channel : "") + "," + this.line + ":" + this.column + "]";
  }
  get text() {
    if (this._text !== null) {
      return this._text;
    }
    const input = this.getInputStream();
    if (input === null) {
      return null;
    }
    const n = input.size;
    if (this.start < n && this.stop < n) {
      return input.getText(this.start, this.stop);
    } else {
      return "<EOF>";
    }
  }
  set text(text) {
    this._text = text;
  }
};
CommonToken.EMPTY_SOURCE = [null, null];

// node_modules/antlr4/src/antlr4/CommonTokenFactory.js
var TokenFactory = class {
};
var CommonTokenFactory = class extends TokenFactory {
  constructor(copyText) {
    super();
    this.copyText = copyText === void 0 ? false : copyText;
  }
  create(source, type, text, channel, start, stop, line, column) {
    const t2 = new CommonToken(source, type, channel, start, stop);
    t2.line = line;
    t2.column = column;
    if (text !== null) {
      t2.text = text;
    } else if (this.copyText && source[1] !== null) {
      t2.text = source[1].getText(start, stop);
    }
    return t2;
  }
  createThin(type, text) {
    const t2 = new CommonToken(null, type);
    t2.text = text;
    return t2;
  }
};
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

// node_modules/antlr4/src/antlr4/error/RecognitionException.js
var RecognitionException = class _RecognitionException extends Error {
  constructor(params) {
    super(params.message);
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, _RecognitionException);
    this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    this.offendingToken = null;
    this.offendingState = -1;
    if (this.recognizer !== null) {
      this.offendingState = this.recognizer.state;
    }
  }
  /**
   * Gets the set of input symbols which could potentially follow the
   * previously matched symbol at the time this exception was thrown.
   *
   * <p>If the set of expected tokens is not known and could not be computed,
   * this method returns {@code null}.</p>
   *
   * @return The set of token types that could potentially follow the current
   * state in the ATN, or {@code null} if the information is not available.
   */
  getExpectedTokens() {
    if (this.recognizer !== null) {
      return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
      return null;
    }
  }
  // <p>If the state number is not known, this method returns -1.</p>
  toString() {
    return this.message;
  }
};

// node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js
var LexerNoViableAltException = class extends RecognitionException {
  constructor(lexer, input, startIndex, deadEndConfigs) {
    super({ message: "", recognizer: lexer, input, ctx: null });
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
  }
  toString() {
    let symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
      symbol = this.input.getText(new Interval(this.startIndex, this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
  }
};

// node_modules/antlr4/src/antlr4/Lexer.js
var Lexer = class _Lexer extends Recognizer {
  constructor(input) {
    super();
    this._input = input;
    this._factory = CommonTokenFactory.DEFAULT;
    this._tokenFactorySourcePair = [this, input];
    this._interp = null;
    this._token = null;
    this._tokenStartCharIndex = -1;
    this._tokenStartLine = -1;
    this._tokenStartColumn = -1;
    this._hitEOF = false;
    this._channel = Token.DEFAULT_CHANNEL;
    this._type = Token.INVALID_TYPE;
    this._modeStack = [];
    this._mode = _Lexer.DEFAULT_MODE;
    this._text = null;
  }
  reset() {
    if (this._input !== null) {
      this._input.seek(0);
    }
    this._token = null;
    this._type = Token.INVALID_TYPE;
    this._channel = Token.DEFAULT_CHANNEL;
    this._tokenStartCharIndex = -1;
    this._tokenStartColumn = -1;
    this._tokenStartLine = -1;
    this._text = null;
    this._hitEOF = false;
    this._mode = _Lexer.DEFAULT_MODE;
    this._modeStack = [];
    this._interp.reset();
  }
  // Return a token from this source; i.e., match a token on the char stream.
  nextToken() {
    if (this._input === null) {
      throw "nextToken requires a non-null input stream.";
    }
    const tokenStartMarker = this._input.mark();
    try {
      for (; ; ) {
        if (this._hitEOF) {
          this.emitEOF();
          return this._token;
        }
        this._token = null;
        this._channel = Token.DEFAULT_CHANNEL;
        this._tokenStartCharIndex = this._input.index;
        this._tokenStartColumn = this._interp.column;
        this._tokenStartLine = this._interp.line;
        this._text = null;
        let continueOuter = false;
        for (; ; ) {
          this._type = Token.INVALID_TYPE;
          let ttype = _Lexer.SKIP;
          try {
            ttype = this._interp.match(this._input, this._mode);
          } catch (e) {
            if (e instanceof RecognitionException) {
              this.notifyListeners(e);
              this.recover(e);
            } else {
              console.log(e.stack);
              throw e;
            }
          }
          if (this._input.LA(1) === Token.EOF) {
            this._hitEOF = true;
          }
          if (this._type === Token.INVALID_TYPE) {
            this._type = ttype;
          }
          if (this._type === _Lexer.SKIP) {
            continueOuter = true;
            break;
          }
          if (this._type !== _Lexer.MORE) {
            break;
          }
        }
        if (continueOuter) {
          continue;
        }
        if (this._token === null) {
          this.emit();
        }
        return this._token;
      }
    } finally {
      this._input.release(tokenStartMarker);
    }
  }
  /**
   * Instruct the lexer to skip creating a token for current lexer rule
   * and look for another token. nextToken() knows to keep looking when
   * a lexer rule finishes with token set to SKIP_TOKEN. Recall that
   * if token==null at end of any token rule, it creates one for you
   * and emits it.
   */
  skip() {
    this._type = _Lexer.SKIP;
  }
  more() {
    this._type = _Lexer.MORE;
  }
  mode(m) {
    this._mode = m;
  }
  pushMode(m) {
    if (this._interp.debug) {
      console.log("pushMode " + m);
    }
    this._modeStack.push(this._mode);
    this.mode(m);
  }
  popMode() {
    if (this._modeStack.length === 0) {
      throw "Empty Stack";
    }
    if (this._interp.debug) {
      console.log("popMode back to " + this._modeStack.slice(0, -1));
    }
    this.mode(this._modeStack.pop());
    return this._mode;
  }
  /**
   * By default does not support multiple emits per nextToken invocation
   * for efficiency reasons. Subclass and override this method, nextToken,
   * and getToken (to push tokens into a list and pull from that list
   * rather than a single variable as this implementation does).
   */
  emitToken(token) {
    this._token = token;
  }
  /**
   * The standard method called to automatically emit a token at the
   * outermost lexical rule. The token object should point into the
   * char buffer start..stop. If there is a text override in 'text',
   * use that to set the token's text. Override this method to emit
   * custom Token objects or provide a new factory.
   */
  emit() {
    const t2 = this._factory.create(
      this._tokenFactorySourcePair,
      this._type,
      this._text,
      this._channel,
      this._tokenStartCharIndex,
      this.getCharIndex() - 1,
      this._tokenStartLine,
      this._tokenStartColumn
    );
    this.emitToken(t2);
    return t2;
  }
  emitEOF() {
    const cpos = this.column;
    const lpos = this.line;
    const eof = this._factory.create(
      this._tokenFactorySourcePair,
      Token.EOF,
      null,
      Token.DEFAULT_CHANNEL,
      this._input.index,
      this._input.index - 1,
      lpos,
      cpos
    );
    this.emitToken(eof);
    return eof;
  }
  // What is the index of the current character of lookahead?///
  getCharIndex() {
    return this._input.index;
  }
  /**
   * Return a list of all Token objects in input char stream.
   * Forces load of all tokens. Does not include EOF token.
   */
  getAllTokens() {
    const tokens = [];
    let t2 = this.nextToken();
    while (t2.type !== Token.EOF) {
      tokens.push(t2);
      t2 = this.nextToken();
    }
    return tokens;
  }
  notifyListeners(e) {
    const start = this._tokenStartCharIndex;
    const stop = this._input.index;
    const text = this._input.getText(start, stop);
    const msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
    const listener = this.getErrorListenerDispatch();
    listener.syntaxError(
      this,
      null,
      this._tokenStartLine,
      this._tokenStartColumn,
      msg,
      e
    );
  }
  getErrorDisplay(s) {
    const d = [];
    for (let i = 0; i < s.length; i++) {
      d.push(s[i]);
    }
    return d.join("");
  }
  getErrorDisplayForChar(c) {
    if (c.charCodeAt(0) === Token.EOF) {
      return "<EOF>";
    } else if (c === "\n") {
      return "\\n";
    } else if (c === "	") {
      return "\\t";
    } else if (c === "\r") {
      return "\\r";
    } else {
      return c;
    }
  }
  getCharErrorDisplay(c) {
    return "'" + this.getErrorDisplayForChar(c) + "'";
  }
  /**
   * Lexers can normally match any char in it's vocabulary after matching
   * a token, so do the easy thing and just kill a character and hope
   * it all works out. You can instead use the rule invocation stack
   * to do sophisticated error recovery if you are in a fragment rule.
   */
  recover(re) {
    if (this._input.LA(1) !== Token.EOF) {
      if (re instanceof LexerNoViableAltException) {
        this._interp.consume(this._input);
      } else {
        this._input.consume();
      }
    }
  }
  get inputStream() {
    return this._input;
  }
  set inputStream(input) {
    this._input = null;
    this._tokenFactorySourcePair = [this, this._input];
    this.reset();
    this._input = input;
    this._tokenFactorySourcePair = [this, this._input];
  }
  get sourceName() {
    return this._input.sourceName;
  }
  get type() {
    return this._type;
  }
  set type(type) {
    this._type = type;
  }
  get line() {
    return this._interp.line;
  }
  set line(line) {
    this._interp.line = line;
  }
  get column() {
    return this._interp.column;
  }
  set column(column) {
    this._interp.column = column;
  }
  get text() {
    if (this._text !== null) {
      return this._text;
    } else {
      return this._interp.getText(this._input);
    }
  }
  set text(text) {
    this._text = text;
  }
};
Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;
Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0;
Lexer.MAX_CHAR_VALUE = 1114111;

// node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js
function hashATNConfig(c) {
  return c.hashCodeForConfigSet();
}
function equalATNConfigs(a, b) {
  if (a === b) {
    return true;
  } else if (a === null || b === null) {
    return false;
  } else
    return a.equalsForConfigSet(b);
}
var ATNConfigSet = class _ATNConfigSet {
  constructor(fullCtx) {
    this.configLookup = new HashSet(hashATNConfig, equalATNConfigs);
    this.fullCtx = fullCtx === void 0 ? true : fullCtx;
    this.readOnly = false;
    this.configs = [];
    this.uniqueAlt = 0;
    this.conflictingAlts = null;
    this.hasSemanticContext = false;
    this.dipsIntoOuterContext = false;
    this.cachedHashCode = -1;
  }
  /**
   * Adding a new config means merging contexts with existing configs for
   * {@code (s, i, pi, _)}, where {@code s} is the
   * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
   * {@code pi} is the {@link ATNConfig//semanticContext}. We use
   * {@code (s,i,pi)} as key.
   *
   * <p>This method updates {@link //dipsIntoOuterContext} and
   * {@link //hasSemanticContext} when necessary.</p>
   */
  add(config2, mergeCache) {
    if (mergeCache === void 0) {
      mergeCache = null;
    }
    if (this.readOnly) {
      throw "This set is readonly";
    }
    if (config2.semanticContext !== SemanticContext.NONE) {
      this.hasSemanticContext = true;
    }
    if (config2.reachesIntoOuterContext > 0) {
      this.dipsIntoOuterContext = true;
    }
    const existing = this.configLookup.add(config2);
    if (existing === config2) {
      this.cachedHashCode = -1;
      this.configs.push(config2);
      return true;
    }
    const rootIsWildcard = !this.fullCtx;
    const merged = merge(existing.context, config2.context, rootIsWildcard, mergeCache);
    existing.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config2.reachesIntoOuterContext);
    if (config2.precedenceFilterSuppressed) {
      existing.precedenceFilterSuppressed = true;
    }
    existing.context = merged;
    return true;
  }
  getStates() {
    const states = new HashSet();
    for (let i = 0; i < this.configs.length; i++) {
      states.add(this.configs[i].state);
    }
    return states;
  }
  getPredicates() {
    const preds = [];
    for (let i = 0; i < this.configs.length; i++) {
      const c = this.configs[i].semanticContext;
      if (c !== SemanticContext.NONE) {
        preds.push(c.semanticContext);
      }
    }
    return preds;
  }
  optimizeConfigs(interpreter) {
    if (this.readOnly) {
      throw "This set is readonly";
    }
    if (this.configLookup.length === 0) {
      return;
    }
    for (let i = 0; i < this.configs.length; i++) {
      const config2 = this.configs[i];
      config2.context = interpreter.getCachedContext(config2.context);
    }
  }
  addAll(coll) {
    for (let i = 0; i < coll.length; i++) {
      this.add(coll[i]);
    }
    return false;
  }
  equals(other) {
    return this === other || other instanceof _ATNConfigSet && equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;
  }
  hashCode() {
    const hash = new HashCode();
    hash.update(this.configs);
    return hash.finish();
  }
  updateHashCode(hash) {
    if (this.readOnly) {
      if (this.cachedHashCode === -1) {
        this.cachedHashCode = this.hashCode();
      }
      hash.update(this.cachedHashCode);
    } else {
      hash.update(this.hashCode());
    }
  }
  isEmpty() {
    return this.configs.length === 0;
  }
  contains(item) {
    if (this.configLookup === null) {
      throw "This method is not implemented for readonly sets.";
    }
    return this.configLookup.contains(item);
  }
  containsFast(item) {
    if (this.configLookup === null) {
      throw "This method is not implemented for readonly sets.";
    }
    return this.configLookup.containsFast(item);
  }
  clear() {
    if (this.readOnly) {
      throw "This set is readonly";
    }
    this.configs = [];
    this.cachedHashCode = -1;
    this.configLookup = new HashSet();
  }
  setReadonly(readOnly2) {
    this.readOnly = readOnly2;
    if (readOnly2) {
      this.configLookup = null;
    }
  }
  toString() {
    return arrayToString(this.configs) + (this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") + (this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") + (this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") + (this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
  }
  get items() {
    return this.configs;
  }
  get length() {
    return this.configs.length;
  }
};

// node_modules/antlr4/src/antlr4/dfa/DFAState.js
var DFAState = class _DFAState {
  constructor(stateNumber, configs) {
    if (stateNumber === null) {
      stateNumber = -1;
    }
    if (configs === null) {
      configs = new ATNConfigSet();
    }
    this.stateNumber = stateNumber;
    this.configs = configs;
    this.edges = null;
    this.isAcceptState = false;
    this.prediction = 0;
    this.lexerActionExecutor = null;
    this.requiresFullContext = false;
    this.predicates = null;
    return this;
  }
  /**
   * Get the set of all alts mentioned by all ATN configurations in this
   * DFA state.
   */
  getAltSet() {
    const alts = new HashSet();
    if (this.configs !== null) {
      for (let i = 0; i < this.configs.length; i++) {
        const c = this.configs[i];
        alts.add(c.alt);
      }
    }
    if (alts.length === 0) {
      return null;
    } else {
      return alts;
    }
  }
  /**
   * Two {@link DFAState} instances are equal if their ATN configuration sets
   * are the same. This method is used to see if a state already exists.
   *
   * <p>Because the number of alternatives and number of ATN configurations are
   * finite, there is a finite number of DFA states that can be processed.
   * This is necessary to show that the algorithm terminates.</p>
   *
   * <p>Cannot test the DFA state numbers here because in
   * {@link ParserATNSimulator//addDFAState} we need to know if any other state
   * exists that has this exact set of ATN configurations. The
   * {@link //stateNumber} is irrelevant.</p>
   */
  equals(other) {
    return this === other || other instanceof _DFAState && this.configs.equals(other.configs);
  }
  toString() {
    let s = "" + this.stateNumber + ":" + this.configs;
    if (this.isAcceptState) {
      s = s + "=>";
      if (this.predicates !== null)
        s = s + this.predicates;
      else
        s = s + this.prediction;
    }
    return s;
  }
  hashCode() {
    const hash = new HashCode();
    hash.update(this.configs);
    return hash.finish();
  }
};

// node_modules/antlr4/src/antlr4/atn/ATNSimulator.js
var ATNSimulator = class {
  constructor(atn3, sharedContextCache2) {
    this.atn = atn3;
    this.sharedContextCache = sharedContextCache2;
    return this;
  }
  getCachedContext(context) {
    if (this.sharedContextCache === null) {
      return context;
    }
    const visited = new HashMap();
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
  }
};
ATNSimulator.ERROR = new DFAState(2147483647, new ATNConfigSet());

// node_modules/antlr4/src/antlr4/atn/OrderedATNConfigSet.js
var OrderedATNConfigSet = class extends ATNConfigSet {
  constructor() {
    super();
    this.configLookup = new HashSet();
  }
};

// node_modules/antlr4/src/antlr4/atn/LexerATNConfig.js
var LexerATNConfig = class _LexerATNConfig extends ATNConfig {
  constructor(params, config2) {
    super(params, config2);
    const lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config2 !== null ? config2.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config2 !== null ? this.checkNonGreedyDecision(config2, this.state) : false;
    this.hashCodeForConfigSet = _LexerATNConfig.prototype.hashCode;
    this.equalsForConfigSet = _LexerATNConfig.prototype.equals;
    return this;
  }
  updateHashCode(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
  }
  equals(other) {
    return this === other || other instanceof _LexerATNConfig && this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && super.equals(other);
  }
  checkNonGreedyDecision(source, target) {
    return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;
  }
};

// node_modules/antlr4/src/antlr4/action/LexerIndexedCustomAction.js
var LexerIndexedCustomAction = class _LexerIndexedCustomAction extends LexerAction {
  constructor(offset, action) {
    super(action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
  }
  /**
   * <p>This method calls {@link //execute} on the result of {@link //getAction}
   * using the provided {@code lexer}.</p>
   */
  execute(lexer) {
    this.action.execute(lexer);
  }
  updateHashCode(hash) {
    hash.update(this.actionType, this.offset, this.action);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerIndexedCustomAction)) {
      return false;
    } else {
      return this.offset === other.offset && this.action === other.action;
    }
  }
};

// node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js
var LexerActionExecutor = class _LexerActionExecutor {
  /**
   * Represents an executor for a sequence of lexer actions which traversed during
   * the matching operation of a lexer rule (token).
   *
   * <p>The executor tracks position information for position-dependent lexer actions
   * efficiently, ensuring that actions appearing only at the end of the rule do
   * not cause bloating of the {@link DFA} created for the lexer.</p>
   */
  constructor(lexerActions) {
    this.lexerActions = lexerActions === null ? [] : lexerActions;
    this.cachedHashCode = HashCode.hashStuff(lexerActions);
    return this;
  }
  /**
   * Creates a {@link LexerActionExecutor} which encodes the current offset
   * for position-dependent lexer actions.
   *
   * <p>Normally, when the executor encounters lexer actions where
   * {@link LexerAction//isPositionDependent} returns {@code true}, it calls
   * {@link IntStream//seek} on the input {@link CharStream} to set the input
   * position to the <em>end</em> of the current token. This behavior provides
   * for efficient DFA representation of lexer actions which appear at the end
   * of a lexer rule, even when the lexer rule matches a variable number of
   * characters.</p>
   *
   * <p>Prior to traversing a match transition in the ATN, the current offset
   * from the token start index is assigned to all position-dependent lexer
   * actions which have not already been assigned a fixed offset. By storing
   * the offsets relative to the token start index, the DFA representation of
   * lexer actions which appear in the middle of tokens remains efficient due
   * to sharing among tokens of the same length, regardless of their absolute
   * position in the input stream.</p>
   *
   * <p>If the current executor already has offsets assigned to all
   * position-dependent lexer actions, the method returns {@code this}.</p>
   *
   * @param offset The current offset to assign to all position-dependent
   * lexer actions which do not already have offsets assigned.
   *
   * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets
   * for all position-dependent lexer actions.
   */
  fixOffsetBeforeMatch(offset) {
    let updatedLexerActions = null;
    for (let i = 0; i < this.lexerActions.length; i++) {
      if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
        if (updatedLexerActions === null) {
          updatedLexerActions = this.lexerActions.concat([]);
        }
        updatedLexerActions[i] = new LexerIndexedCustomAction(
          offset,
          this.lexerActions[i]
        );
      }
    }
    if (updatedLexerActions === null) {
      return this;
    } else {
      return new _LexerActionExecutor(updatedLexerActions);
    }
  }
  /**
   * Execute the actions encapsulated by this executor within the context of a
   * particular {@link Lexer}.
   *
   * <p>This method calls {@link IntStream//seek} to set the position of the
   * {@code input} {@link CharStream} prior to calling
   * {@link LexerAction//execute} on a position-dependent action. Before the
   * method returns, the input position will be restored to the same position
   * it was in when the method was invoked.</p>
   *
   * @param lexer The lexer instance.
   * @param input The input stream which is the source for the current token.
   * When this method is called, the current {@link IntStream//index} for
   * {@code input} should be the start of the following token, i.e. 1
   * character past the end of the current token.
   * @param startIndex The token start index. This value may be passed to
   * {@link IntStream//seek} to set the {@code input} position to the beginning
   * of the token.
   */
  execute(lexer, input, startIndex) {
    let requiresSeek = false;
    const stopIndex = input.index;
    try {
      for (let i = 0; i < this.lexerActions.length; i++) {
        let lexerAction = this.lexerActions[i];
        if (lexerAction instanceof LexerIndexedCustomAction) {
          const offset = lexerAction.offset;
          input.seek(startIndex + offset);
          lexerAction = lexerAction.action;
          requiresSeek = startIndex + offset !== stopIndex;
        } else if (lexerAction.isPositionDependent) {
          input.seek(stopIndex);
          requiresSeek = false;
        }
        lexerAction.execute(lexer);
      }
    } finally {
      if (requiresSeek) {
        input.seek(stopIndex);
      }
    }
  }
  hashCode() {
    return this.cachedHashCode;
  }
  updateHashCode(hash) {
    hash.update(this.cachedHashCode);
  }
  equals(other) {
    if (this === other) {
      return true;
    } else if (!(other instanceof _LexerActionExecutor)) {
      return false;
    } else if (this.cachedHashCode != other.cachedHashCode) {
      return false;
    } else if (this.lexerActions.length != other.lexerActions.length) {
      return false;
    } else {
      const numActions = this.lexerActions.length;
      for (let idx = 0; idx < numActions; ++idx) {
        if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
          return false;
        }
      }
      return true;
    }
  }
  /**
   * Creates a {@link LexerActionExecutor} which executes the actions for
   * the input {@code lexerActionExecutor} followed by a specified
   * {@code lexerAction}.
   *
   * @param lexerActionExecutor The executor for actions already traversed by
   * the lexer while matching a token within a particular
   * {@link LexerATNConfig}. If this is {@code null}, the method behaves as
   * though it were an empty executor.
   * @param lexerAction The lexer action to execute after the actions
   * specified in {@code lexerActionExecutor}.
   *
   * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions
   * of {@code lexerActionExecutor} and {@code lexerAction}.
   */
  static append(lexerActionExecutor, lexerAction) {
    if (lexerActionExecutor === null) {
      return new _LexerActionExecutor([lexerAction]);
    }
    const lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);
    return new _LexerActionExecutor(lexerActions);
  }
};

// node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js
function resetSimState(sim) {
  sim.index = -1;
  sim.line = 0;
  sim.column = -1;
  sim.dfaState = null;
}
var SimState = class {
  constructor() {
    resetSimState(this);
  }
  reset() {
    resetSimState(this);
  }
};
var LexerATNSimulator = class _LexerATNSimulator extends ATNSimulator {
  /**
   * When we hit an accept state in either the DFA or the ATN, we
   * have to notify the character stream to start buffering characters
   * via {@link IntStream//mark} and record the current state. The current sim state
   * includes the current index into the input, the current line,
   * and current character position in that line. Note that the Lexer is
   * tracking the starting line and characterization of the token. These
   * variables track the "state" of the simulator when it hits an accept state.
   *
   * <p>We track these variables separately for the DFA and ATN simulation
   * because the DFA simulation often has to fail over to the ATN
   * simulation. If the ATN simulation fails, we need the DFA to fall
   * back to its previously accepted state, if any. If the ATN succeeds,
   * then the ATN does the accept and the DFA simulator that invoked it
   * can simply return the predicted token type.</p>
   */
  constructor(recog, atn3, decisionToDFA, sharedContextCache2) {
    super(atn3, sharedContextCache2);
    this.decisionToDFA = decisionToDFA;
    this.recog = recog;
    this.startIndex = -1;
    this.line = 1;
    this.column = 0;
    this.mode = Lexer.DEFAULT_MODE;
    this.prevAccept = new SimState();
  }
  copyState(simulator) {
    this.column = simulator.column;
    this.line = simulator.line;
    this.mode = simulator.mode;
    this.startIndex = simulator.startIndex;
  }
  match(input, mode) {
    this.mode = mode;
    const mark = input.mark();
    try {
      this.startIndex = input.index;
      this.prevAccept.reset();
      const dfa = this.decisionToDFA[mode];
      if (dfa.s0 === null) {
        return this.matchATN(input);
      } else {
        return this.execATN(input, dfa.s0);
      }
    } finally {
      input.release(mark);
    }
  }
  reset() {
    this.prevAccept.reset();
    this.startIndex = -1;
    this.line = 1;
    this.column = 0;
    this.mode = Lexer.DEFAULT_MODE;
  }
  matchATN(input) {
    const startState = this.atn.modeToStartState[this.mode];
    if (_LexerATNSimulator.debug) {
      console.log("matchATN mode " + this.mode + " start: " + startState);
    }
    const old_mode = this.mode;
    const s0_closure = this.computeStartState(input, startState);
    const suppressEdge = s0_closure.hasSemanticContext;
    s0_closure.hasSemanticContext = false;
    const next = this.addDFAState(s0_closure);
    if (!suppressEdge) {
      this.decisionToDFA[this.mode].s0 = next;
    }
    const predict = this.execATN(input, next);
    if (_LexerATNSimulator.debug) {
      console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
    }
    return predict;
  }
  execATN(input, ds0) {
    if (_LexerATNSimulator.debug) {
      console.log("start state closure=" + ds0.configs);
    }
    if (ds0.isAcceptState) {
      this.captureSimState(this.prevAccept, input, ds0);
    }
    let t2 = input.LA(1);
    let s = ds0;
    for (; ; ) {
      if (_LexerATNSimulator.debug) {
        console.log("execATN loop starting closure: " + s.configs);
      }
      let target = this.getExistingTargetState(s, t2);
      if (target === null) {
        target = this.computeTargetState(input, s, t2);
      }
      if (target === ATNSimulator.ERROR) {
        break;
      }
      if (t2 !== Token.EOF) {
        this.consume(input);
      }
      if (target.isAcceptState) {
        this.captureSimState(this.prevAccept, input, target);
        if (t2 === Token.EOF) {
          break;
        }
      }
      t2 = input.LA(1);
      s = target;
    }
    return this.failOrAccept(this.prevAccept, input, s.configs, t2);
  }
  /**
   * Get an existing target state for an edge in the DFA. If the target state
   * for the edge has not yet been computed or is otherwise not available,
   * this method returns {@code null}.
   *
   * @param s The current DFA state
   * @param t The next input symbol
   * @return The existing target DFA state for the given input symbol
   * {@code t}, or {@code null} if the target state for this edge is not
   * already cached
   */
  getExistingTargetState(s, t2) {
    if (s.edges === null || t2 < _LexerATNSimulator.MIN_DFA_EDGE || t2 > _LexerATNSimulator.MAX_DFA_EDGE) {
      return null;
    }
    let target = s.edges[t2 - _LexerATNSimulator.MIN_DFA_EDGE];
    if (target === void 0) {
      target = null;
    }
    if (_LexerATNSimulator.debug && target !== null) {
      console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
    }
    return target;
  }
  /**
   * Compute a target state for an edge in the DFA, and attempt to add the
   * computed state and corresponding edge to the DFA.
   *
   * @param input The input stream
   * @param s The current DFA state
   * @param t The next input symbol
   *
   * @return The computed target DFA state for the given input symbol
   * {@code t}. If {@code t} does not lead to a valid DFA state, this method
   * returns {@link //ERROR}.
   */
  computeTargetState(input, s, t2) {
    const reach = new OrderedATNConfigSet();
    this.getReachableConfigSet(input, s.configs, reach, t2);
    if (reach.items.length === 0) {
      if (!reach.hasSemanticContext) {
        this.addDFAEdge(s, t2, ATNSimulator.ERROR);
      }
      return ATNSimulator.ERROR;
    }
    return this.addDFAEdge(s, t2, null, reach);
  }
  failOrAccept(prevAccept, input, reach, t2) {
    if (this.prevAccept.dfaState !== null) {
      const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
      this.accept(
        input,
        lexerActionExecutor,
        this.startIndex,
        prevAccept.index,
        prevAccept.line,
        prevAccept.column
      );
      return prevAccept.dfaState.prediction;
    } else {
      if (t2 === Token.EOF && input.index === this.startIndex) {
        return Token.EOF;
      }
      throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
    }
  }
  /**
   * Given a starting configuration set, figure out all ATN configurations
   * we can reach upon input {@code t}. Parameter {@code reach} is a return
   * parameter.
   */
  getReachableConfigSet(input, closure, reach, t2) {
    let skipAlt = ATN.INVALID_ALT_NUMBER;
    for (let i = 0; i < closure.items.length; i++) {
      const cfg = closure.items[i];
      const currentAltReachedAcceptState = cfg.alt === skipAlt;
      if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
        continue;
      }
      if (_LexerATNSimulator.debug) {
        console.log("testing %s at %s\n", this.getTokenName(t2), cfg.toString(this.recog, true));
      }
      for (let j = 0; j < cfg.state.transitions.length; j++) {
        const trans = cfg.state.transitions[j];
        const target = this.getReachableTarget(trans, t2);
        if (target !== null) {
          let lexerActionExecutor = cfg.lexerActionExecutor;
          if (lexerActionExecutor !== null) {
            lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
          }
          const treatEofAsEpsilon = t2 === Token.EOF;
          const config2 = new LexerATNConfig({ state: target, lexerActionExecutor }, cfg);
          if (this.closure(
            input,
            config2,
            reach,
            currentAltReachedAcceptState,
            true,
            treatEofAsEpsilon
          )) {
            skipAlt = cfg.alt;
          }
        }
      }
    }
  }
  accept(input, lexerActionExecutor, startIndex, index, line, charPos) {
    if (_LexerATNSimulator.debug) {
      console.log("ACTION %s\n", lexerActionExecutor);
    }
    input.seek(index);
    this.line = line;
    this.column = charPos;
    if (lexerActionExecutor !== null && this.recog !== null) {
      lexerActionExecutor.execute(this.recog, input, startIndex);
    }
  }
  getReachableTarget(trans, t2) {
    if (trans.matches(t2, 0, Lexer.MAX_CHAR_VALUE)) {
      return trans.target;
    } else {
      return null;
    }
  }
  computeStartState(input, p) {
    const initialContext = PredictionContext.EMPTY;
    const configs = new OrderedATNConfigSet();
    for (let i = 0; i < p.transitions.length; i++) {
      const target = p.transitions[i].target;
      const cfg = new LexerATNConfig({ state: target, alt: i + 1, context: initialContext }, null);
      this.closure(input, cfg, configs, false, false, false);
    }
    return configs;
  }
  /**
   * Since the alternatives within any lexer decision are ordered by
   * preference, this method stops pursuing the closure as soon as an accept
   * state is reached. After the first accept state is reached by depth-first
   * search from {@code config}, all other (potentially reachable) states for
   * this rule would have a lower priority.
   *
   * @return {Boolean} {@code true} if an accept state is reached, otherwise
   * {@code false}.
   */
  closure(input, config2, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
    let cfg = null;
    if (_LexerATNSimulator.debug) {
      console.log("closure(" + config2.toString(this.recog, true) + ")");
    }
    if (config2.state instanceof RuleStopState) {
      if (_LexerATNSimulator.debug) {
        if (this.recog !== null) {
          console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config2.state.ruleIndex], config2);
        } else {
          console.log("closure at rule stop %s\n", config2);
        }
      }
      if (config2.context === null || config2.context.hasEmptyPath()) {
        if (config2.context === null || config2.context.isEmpty()) {
          configs.add(config2);
          return true;
        } else {
          configs.add(new LexerATNConfig({ state: config2.state, context: PredictionContext.EMPTY }, config2));
          currentAltReachedAcceptState = true;
        }
      }
      if (config2.context !== null && !config2.context.isEmpty()) {
        for (let i = 0; i < config2.context.length; i++) {
          if (config2.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
            const newContext = config2.context.getParent(i);
            const returnState = this.atn.states[config2.context.getReturnState(i)];
            cfg = new LexerATNConfig({ state: returnState, context: newContext }, config2);
            currentAltReachedAcceptState = this.closure(
              input,
              cfg,
              configs,
              currentAltReachedAcceptState,
              speculative,
              treatEofAsEpsilon
            );
          }
        }
      }
      return currentAltReachedAcceptState;
    }
    if (!config2.state.epsilonOnlyTransitions) {
      if (!currentAltReachedAcceptState || !config2.passedThroughNonGreedyDecision) {
        configs.add(config2);
      }
    }
    for (let j = 0; j < config2.state.transitions.length; j++) {
      const trans = config2.state.transitions[j];
      cfg = this.getEpsilonTarget(input, config2, trans, configs, speculative, treatEofAsEpsilon);
      if (cfg !== null) {
        currentAltReachedAcceptState = this.closure(
          input,
          cfg,
          configs,
          currentAltReachedAcceptState,
          speculative,
          treatEofAsEpsilon
        );
      }
    }
    return currentAltReachedAcceptState;
  }
  // side-effect: can alter configs.hasSemanticContext
  getEpsilonTarget(input, config2, trans, configs, speculative, treatEofAsEpsilon) {
    let cfg = null;
    if (trans.serializationType === Transition.RULE) {
      const newContext = SingletonPredictionContext.create(config2.context, trans.followState.stateNumber);
      cfg = new LexerATNConfig({ state: trans.target, context: newContext }, config2);
    } else if (trans.serializationType === Transition.PRECEDENCE) {
      throw "Precedence predicates are not supported in lexers.";
    } else if (trans.serializationType === Transition.PREDICATE) {
      if (_LexerATNSimulator.debug) {
        console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
      }
      configs.hasSemanticContext = true;
      if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
        cfg = new LexerATNConfig({ state: trans.target }, config2);
      }
    } else if (trans.serializationType === Transition.ACTION) {
      if (config2.context === null || config2.context.hasEmptyPath()) {
        const lexerActionExecutor = LexerActionExecutor.append(
          config2.lexerActionExecutor,
          this.atn.lexerActions[trans.actionIndex]
        );
        cfg = new LexerATNConfig({ state: trans.target, lexerActionExecutor }, config2);
      } else {
        cfg = new LexerATNConfig({ state: trans.target }, config2);
      }
    } else if (trans.serializationType === Transition.EPSILON) {
      cfg = new LexerATNConfig({ state: trans.target }, config2);
    } else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {
      if (treatEofAsEpsilon) {
        if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
          cfg = new LexerATNConfig({ state: trans.target }, config2);
        }
      }
    }
    return cfg;
  }
  /**
   * Evaluate a predicate specified in the lexer.
   *
   * <p>If {@code speculative} is {@code true}, this method was called before
   * {@link //consume} for the matched character. This method should call
   * {@link //consume} before evaluating the predicate to ensure position
   * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
   * and {@link Lexer//getcolumn}, properly reflect the current
   * lexer state. This method should restore {@code input} and the simulator
   * to the original state before returning (i.e. undo the actions made by the
   * call to {@link //consume}.</p>
   *
   * @param input The input stream.
   * @param ruleIndex The rule containing the predicate.
   * @param predIndex The index of the predicate within the rule.
   * @param speculative {@code true} if the current index in {@code input} is
   * one character before the predicate's location.
   *
   * @return {@code true} if the specified predicate evaluates to
   * {@code true}.
   */
  evaluatePredicate(input, ruleIndex, predIndex, speculative) {
    if (this.recog === null) {
      return true;
    }
    if (!speculative) {
      return this.recog.sempred(null, ruleIndex, predIndex);
    }
    const savedcolumn = this.column;
    const savedLine = this.line;
    const index = input.index;
    const marker = input.mark();
    try {
      this.consume(input);
      return this.recog.sempred(null, ruleIndex, predIndex);
    } finally {
      this.column = savedcolumn;
      this.line = savedLine;
      input.seek(index);
      input.release(marker);
    }
  }
  captureSimState(settings, input, dfaState) {
    settings.index = input.index;
    settings.line = this.line;
    settings.column = this.column;
    settings.dfaState = dfaState;
  }
  addDFAEdge(from_, tk, to, cfgs) {
    if (to === void 0) {
      to = null;
    }
    if (cfgs === void 0) {
      cfgs = null;
    }
    if (to === null && cfgs !== null) {
      const suppressEdge = cfgs.hasSemanticContext;
      cfgs.hasSemanticContext = false;
      to = this.addDFAState(cfgs);
      if (suppressEdge) {
        return to;
      }
    }
    if (tk < _LexerATNSimulator.MIN_DFA_EDGE || tk > _LexerATNSimulator.MAX_DFA_EDGE) {
      return to;
    }
    if (_LexerATNSimulator.debug) {
      console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
    }
    if (from_.edges === null) {
      from_.edges = [];
    }
    from_.edges[tk - _LexerATNSimulator.MIN_DFA_EDGE] = to;
    return to;
  }
  /**
   * Add a new DFA state if there isn't one with this set of
   * configurations already. This method also detects the first
   * configuration containing an ATN rule stop state. Later, when
   * traversing the DFA, we will know which rule to accept.
   */
  addDFAState(configs) {
    const proposed = new DFAState(null, configs);
    let firstConfigWithRuleStopState = null;
    for (let i = 0; i < configs.items.length; i++) {
      const cfg = configs.items[i];
      if (cfg.state instanceof RuleStopState) {
        firstConfigWithRuleStopState = cfg;
        break;
      }
    }
    if (firstConfigWithRuleStopState !== null) {
      proposed.isAcceptState = true;
      proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
      proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
    }
    const dfa = this.decisionToDFA[this.mode];
    const existing = dfa.states.get(proposed);
    if (existing !== null) {
      return existing;
    }
    const newState = proposed;
    newState.stateNumber = dfa.states.length;
    configs.setReadonly(true);
    newState.configs = configs;
    dfa.states.add(newState);
    return newState;
  }
  getDFA(mode) {
    return this.decisionToDFA[mode];
  }
  // Get the text matched so far for the current token.
  getText(input) {
    return input.getText(this.startIndex, input.index - 1);
  }
  consume(input) {
    const curChar = input.LA(1);
    if (curChar === "\n".charCodeAt(0)) {
      this.line += 1;
      this.column = 0;
    } else {
      this.column += 1;
    }
    input.consume();
  }
  getTokenName(tt) {
    if (tt === -1) {
      return "EOF";
    } else {
      return "'" + String.fromCharCode(tt) + "'";
    }
  }
};
LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;
LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127;

// node_modules/antlr4/src/antlr4/dfa/PredPrediction.js
var PredPrediction = class {
  constructor(pred, alt) {
    this.alt = alt;
    this.pred = pred;
  }
  toString() {
    return "(" + this.pred + ", " + this.alt + ")";
  }
};

// node_modules/antlr4/src/antlr4/misc/AltDict.js
var AltDict = class {
  constructor() {
    this.data = {};
  }
  get(key) {
    return this.data["k-" + key] || null;
  }
  set(key, value) {
    this.data["k-" + key] = value;
  }
  values() {
    return Object.keys(this.data).filter((key) => key.startsWith("k-")).map((key) => this.data[key], this);
  }
};

// node_modules/antlr4/src/antlr4/atn/PredictionMode.js
var PredictionMode = {
  /**
   * The SLL(*) prediction mode. This prediction mode ignores the current
   * parser context when making predictions. This is the fastest prediction
   * mode, and provides correct results for many grammars. This prediction
   * mode is more powerful than the prediction mode provided by ANTLR 3, but
   * may result in syntax errors for grammar and input combinations which are
   * not SLL.
   *
   * <p>
   * When using this prediction mode, the parser will either return a correct
   * parse tree (i.e. the same parse tree that would be returned with the
   * {@link //LL} prediction mode), or it will report a syntax error. If a
   * syntax error is encountered when using the {@link //SLL} prediction mode,
   * it may be due to either an actual syntax error in the input or indicate
   * that the particular combination of grammar and input requires the more
   * powerful {@link //LL} prediction abilities to complete successfully.</p>
   *
   * <p>
   * This prediction mode does not provide any guarantees for prediction
   * behavior for syntactically-incorrect inputs.</p>
   */
  SLL: 0,
  /**
   * The LL(*) prediction mode. This prediction mode allows the current parser
   * context to be used for resolving SLL conflicts that occur during
   * prediction. This is the fastest prediction mode that guarantees correct
   * parse results for all combinations of grammars with syntactically correct
   * inputs.
   *
   * <p>
   * When using this prediction mode, the parser will make correct decisions
   * for all syntactically-correct grammar and input combinations. However, in
   * cases where the grammar is truly ambiguous this prediction mode might not
   * report a precise answer for <em>exactly which</em> alternatives are
   * ambiguous.</p>
   *
   * <p>
   * This prediction mode does not provide any guarantees for prediction
   * behavior for syntactically-incorrect inputs.</p>
   */
  LL: 1,
  /**
   *
   * The LL(*) prediction mode with exact ambiguity detection. In addition to
   * the correctness guarantees provided by the {@link //LL} prediction mode,
   * this prediction mode instructs the prediction algorithm to determine the
   * complete and exact set of ambiguous alternatives for every ambiguous
   * decision encountered while parsing.
   *
   * <p>
   * This prediction mode may be used for diagnosing ambiguities during
   * grammar development. Due to the performance overhead of calculating sets
   * of ambiguous alternatives, this prediction mode should be avoided when
   * the exact results are not necessary.</p>
   *
   * <p>
   * This prediction mode does not provide any guarantees for prediction
   * behavior for syntactically-incorrect inputs.</p>
   */
  LL_EXACT_AMBIG_DETECTION: 2,
  /**
   *
   * Computes the SLL prediction termination condition.
   *
   * <p>
   * This method computes the SLL prediction termination condition for both of
   * the following cases.</p>
   *
   * <ul>
   * <li>The usual SLL+LL fallback upon SLL conflict</li>
   * <li>Pure SLL without LL fallback</li>
   * </ul>
   *
   * <p><strong>COMBINED SLL+LL PARSING</strong></p>
   *
   * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
   * ensured regardless of how the termination condition is computed by this
   * method. Due to the substantially higher cost of LL prediction, the
   * prediction should only fall back to LL when the additional lookahead
   * cannot lead to a unique SLL prediction.</p>
   *
   * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
   * conflicting subsets should fall back to full LL, even if the
   * configuration sets don't resolve to the same alternative (e.g.
   * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
   * configuration, SLL could continue with the hopes that more lookahead will
   * resolve via one of those non-conflicting configurations.</p>
   *
   * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
   * stops when it sees only conflicting configuration subsets. In contrast,
   * full LL keeps going when there is uncertainty.</p>
   *
   * <p><strong>HEURISTIC</strong></p>
   *
   * <p>As a heuristic, we stop prediction when we see any conflicting subset
   * unless we see a state that only has one alternative associated with it.
   * The single-alt-state thing lets prediction continue upon rules like
   * (otherwise, it would admit defeat too soon):</p>
   *
   * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
   *
   * <p>When the ATN simulation reaches the state before {@code ';'}, it has a
   * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
   * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
   * processing this node because alternative to has another way to continue,
   * via {@code [6|2|[]]}.</p>
   *
   * <p>It also let's us continue for this rule:</p>
   *
   * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
   *
   * <p>After matching input A, we reach the stop state for rule A, state 1.
   * State 8 is the state right before B. Clearly alternatives 1 and 2
   * conflict and no amount of further lookahead will separate the two.
   * However, alternative 3 will be able to continue and so we do not stop
   * working on this state. In the previous example, we're concerned with
   * states associated with the conflicting alternatives. Here alt 3 is not
   * associated with the conflicting configs, but since we can continue
   * looking for input reasonably, don't declare the state done.</p>
   *
   * <p><strong>PURE SLL PARSING</strong></p>
   *
   * <p>To handle pure SLL parsing, all we have to do is make sure that we
   * combine stack contexts for configurations that differ only by semantic
   * predicate. From there, we can do the usual SLL termination heuristic.</p>
   *
   * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
   *
   * <p>SLL decisions don't evaluate predicates until after they reach DFA stop
   * states because they need to create the DFA cache that works in all
   * semantic situations. In contrast, full LL evaluates predicates collected
   * during start state computation so it can ignore predicates thereafter.
   * This means that SLL termination detection can totally ignore semantic
   * predicates.</p>
   *
   * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
   * semantic predicate contexts so we might see two configurations like the
   * following.</p>
   *
   * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
   *
   * <p>Before testing these configurations against others, we have to merge
   * {@code x} and {@code x'} (without modifying the existing configurations).
   * For example, we test {@code (x+x')==x''} when looking for conflicts in
   * the following configurations.</p>
   *
   * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
   *
   * <p>If the configuration set has predicates (as indicated by
   * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
   * the configurations to strip out all of the predicates so that a standard
   * {@link ATNConfigSet} will merge everything ignoring predicates.</p>
   */
  hasSLLConflictTerminatingPrediction: function(mode, configs) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
      return true;
    }
    if (mode === PredictionMode.SLL) {
      if (configs.hasSemanticContext) {
        const dup = new ATNConfigSet();
        for (let i = 0; i < configs.items.length; i++) {
          let c = configs.items[i];
          c = new ATNConfig({ semanticContext: SemanticContext.NONE }, c);
          dup.add(c);
        }
        configs = dup;
      }
    }
    const altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
  },
  /**
   * Checks if any configuration in {@code configs} is in a
   * {@link RuleStopState}. Configurations meeting this condition have reached
   * the end of the decision rule (local context) or end of start rule (full
   * context).
   *
   * @param configs the configuration set to test
   * @return {@code true} if any configuration in {@code configs} is in a
   * {@link RuleStopState}, otherwise {@code false}
   */
  hasConfigInRuleStopState: function(configs) {
    for (let i = 0; i < configs.items.length; i++) {
      const c = configs.items[i];
      if (c.state instanceof RuleStopState) {
        return true;
      }
    }
    return false;
  },
  /**
   * Checks if all configurations in {@code configs} are in a
   * {@link RuleStopState}. Configurations meeting this condition have reached
   * the end of the decision rule (local context) or end of start rule (full
   * context).
   *
   * @param configs the configuration set to test
   * @return {@code true} if all configurations in {@code configs} are in a
   * {@link RuleStopState}, otherwise {@code false}
   */
  allConfigsInRuleStopStates: function(configs) {
    for (let i = 0; i < configs.items.length; i++) {
      const c = configs.items[i];
      if (!(c.state instanceof RuleStopState)) {
        return false;
      }
    }
    return true;
  },
  /**
   *
   * Full LL prediction termination.
   *
   * <p>Can we stop looking ahead during ATN simulation or is there some
   * uncertainty as to which alternative we will ultimately pick, after
   * consuming more input? Even if there are partial conflicts, we might know
   * that everything is going to resolve to the same minimum alternative. That
   * means we can stop since no more lookahead will change that fact. On the
   * other hand, there might be multiple conflicts that resolve to different
   * minimums. That means we need more look ahead to decide which of those
   * alternatives we should predict.</p>
   *
   * <p>The basic idea is to split the set of configurations {@code C}, into
   * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
   * non-conflicting configurations. Two configurations conflict if they have
   * identical {@link ATNConfig//state} and {@link ATNConfig//context} values
   * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
   * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
   *
   * <p>Reduce these configuration subsets to the set of possible alternatives.
   * You can compute the alternative subsets in one pass as follows:</p>
   *
   * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
   * {@code C} holding {@code s} and {@code ctx} fixed.</p>
   *
   * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
   *
   * <pre>
   * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
   * alt and not pred
   * </pre>
   *
   * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
   *
   * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
   * {@code s} and {@code ctx}.</p>
   *
   * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
   * the union of these alternative subsets is a singleton, then no amount of
   * more lookahead will help us. We will always pick that alternative. If,
   * however, there is more than one alternative, then we are uncertain which
   * alternative to predict and must continue looking for resolution. We may
   * or may not discover an ambiguity in the future, even if there are no
   * conflicting subsets this round.</p>
   *
   * <p>The biggest sin is to terminate early because it means we've made a
   * decision but were uncertain as to the eventual outcome. We haven't used
   * enough lookahead. On the other hand, announcing a conflict too late is no
   * big deal; you will still have the conflict. It's just inefficient. It
   * might even look until the end of file.</p>
   *
   * <p>No special consideration for semantic predicates is required because
   * predicates are evaluated on-the-fly for full LL prediction, ensuring that
   * no configuration contains a semantic context during the termination
   * check.</p>
   *
   * <p><strong>CONFLICTING CONFIGS</strong></p>
   *
   * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
   * when {@code i!=j} but {@code x=x'}. Because we merge all
   * {@code (s, i, _)} configurations together, that means that there are at
   * most {@code n} configurations associated with state {@code s} for
   * {@code n} possible alternatives in the decision. The merged stacks
   * complicate the comparison of configuration contexts {@code x} and
   * {@code x'}. Sam checks to see if one is a subset of the other by calling
   * merge and checking to see if the merged result is either {@code x} or
   * {@code x'}. If the {@code x} associated with lowest alternative {@code i}
   * is the superset, then {@code i} is the only possible prediction since the
   * others resolve to {@code min(i)} as well. However, if {@code x} is
   * associated with {@code j>i} then at least one stack configuration for
   * {@code j} is not in conflict with alternative {@code i}. The algorithm
   * should keep going, looking for more lookahead due to the uncertainty.</p>
   *
   * <p>For simplicity, I'm doing a equality check between {@code x} and
   * {@code x'} that lets the algorithm continue to consume lookahead longer
   * than necessary. The reason I like the equality is of course the
   * simplicity but also because that is the test you need to detect the
   * alternatives that are actually in conflict.</p>
   *
   * <p><strong>CONTINUE/STOP RULE</strong></p>
   *
   * <p>Continue if union of resolved alternative sets from non-conflicting and
   * conflicting alternative subsets has more than one alternative. We are
   * uncertain about which alternative to predict.</p>
   *
   * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
   * alternatives are still in the running for the amount of input we've
   * consumed at this point. The conflicting sets let us to strip away
   * configurations that won't lead to more states because we resolve
   * conflicts to the configuration with a minimum alternate for the
   * conflicting set.</p>
   *
   * <p><strong>CASES</strong></p>
   *
   * <ul>
   *
   * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
   *
   * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
   * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
   * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
   * {@code {1,3}} =&gt; continue
   * </li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
   * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
   * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
   * {@code {1}} =&gt; stop and predict 1</li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
   * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
   * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
   * ambiguity {@code {1,2}}</li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
   * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
   * {@code {2}} = {@code {1,2}} =&gt; continue</li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
   * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
   * {@code {3}} = {@code {1,3}} =&gt; continue</li>
   *
   * </ul>
   *
   * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
   *
   * <p>If all states report the same conflicting set of alternatives, then we
   * know we have the exact ambiguity set.</p>
   *
   * <p><code>|A_<em>i</em>|&gt;1</code> and
   * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
   *
   * <p>In other words, we continue examining lookahead until all {@code A_i}
   * have more than one alternative and all {@code A_i} are the same. If
   * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
   * because the resolved set is {@code {1}}. To determine what the real
   * ambiguity is, we have to know whether the ambiguity is between one and
   * two or one and three so we keep going. We can only stop prediction when
   * we need exact ambiguity detection when the sets look like
   * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
   */
  resolvesToJustOneViableAlt: function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
  },
  /**
   * Determines if every alternative subset in {@code altsets} contains more
   * than one alternative.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if every {@link BitSet} in {@code altsets} has
   * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
   */
  allSubsetsConflict: function(altsets) {
    return !PredictionMode.hasNonConflictingAltSet(altsets);
  },
  /**
   * Determines if any single alternative subset in {@code altsets} contains
   * exactly one alternative.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if {@code altsets} contains a {@link BitSet} with
   * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
   */
  hasNonConflictingAltSet: function(altsets) {
    for (let i = 0; i < altsets.length; i++) {
      const alts = altsets[i];
      if (alts.length === 1) {
        return true;
      }
    }
    return false;
  },
  /**
   * Determines if any single alternative subset in {@code altsets} contains
   * more than one alternative.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if {@code altsets} contains a {@link BitSet} with
   * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
   */
  hasConflictingAltSet: function(altsets) {
    for (let i = 0; i < altsets.length; i++) {
      const alts = altsets[i];
      if (alts.length > 1) {
        return true;
      }
    }
    return false;
  },
  /**
   * Determines if every alternative subset in {@code altsets} is equivalent.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if every member of {@code altsets} is equal to the
   * others, otherwise {@code false}
   */
  allSubsetsEqual: function(altsets) {
    let first = null;
    for (let i = 0; i < altsets.length; i++) {
      const alts = altsets[i];
      if (first === null) {
        first = alts;
      } else if (alts !== first) {
        return false;
      }
    }
    return true;
  },
  /**
   * Returns the unique alternative predicted by all alternative subsets in
   * {@code altsets}. If no such alternative exists, this method returns
   * {@link ATN//INVALID_ALT_NUMBER}.
   *
   * @param altsets a collection of alternative subsets
   */
  getUniqueAlt: function(altsets) {
    const all = PredictionMode.getAlts(altsets);
    if (all.length === 1) {
      return all.minValue();
    } else {
      return ATN.INVALID_ALT_NUMBER;
    }
  },
  /**
   * Gets the complete set of represented alternatives for a collection of
   * alternative subsets. This method returns the union of each {@link BitSet}
   * in {@code altsets}.
   *
   * @param altsets a collection of alternative subsets
   * @return the set of represented alternatives in {@code altsets}
   */
  getAlts: function(altsets) {
    const all = new BitSet();
    altsets.map(function(alts) {
      all.or(alts);
    });
    return all;
  },
  /**
   * This function gets the conflicting alt subsets from a configuration set.
   * For each configuration {@code c} in {@code configs}:
   *
   * <pre>
   * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
   * alt and not pred
   * </pre>
   */
  getConflictingAltSubsets: function(configs) {
    const configToAlts = new HashMap();
    configToAlts.hashFunction = function(cfg) {
      HashCode.hashStuff(cfg.state.stateNumber, cfg.context);
    };
    configToAlts.equalsFunction = function(c1, c2) {
      return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);
    };
    configs.items.map(function(cfg) {
      let alts = configToAlts.get(cfg);
      if (alts === null) {
        alts = new BitSet();
        configToAlts.set(cfg, alts);
      }
      alts.add(cfg.alt);
    });
    return configToAlts.getValues();
  },
  /**
   * Get a map from state to alt subset from a configuration set. For each
   * configuration {@code c} in {@code configs}:
   *
   * <pre>
   * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
   * </pre>
   */
  getStateToAltMap: function(configs) {
    const m = new AltDict();
    configs.items.map(function(c) {
      let alts = m.get(c.state);
      if (alts === null) {
        alts = new BitSet();
        m.set(c.state, alts);
      }
      alts.add(c.alt);
    });
    return m;
  },
  hasStateAssociatedWithOneAlt: function(configs) {
    const values = PredictionMode.getStateToAltMap(configs).values();
    for (let i = 0; i < values.length; i++) {
      if (values[i].length === 1) {
        return true;
      }
    }
    return false;
  },
  getSingleViableAlt: function(altsets) {
    let result = null;
    for (let i = 0; i < altsets.length; i++) {
      const alts = altsets[i];
      const minAlt = alts.minValue();
      if (result === null) {
        result = minAlt;
      } else if (result !== minAlt) {
        return ATN.INVALID_ALT_NUMBER;
      }
    }
    return result;
  }
};
var PredictionMode_default = PredictionMode;

// node_modules/antlr4/src/antlr4/error/NoViableAltException.js
var NoViableAltException = class extends RecognitionException {
  constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
    ctx = ctx || recognizer._ctx;
    offendingToken = offendingToken || recognizer.getCurrentToken();
    startToken = startToken || recognizer.getCurrentToken();
    input = input || recognizer.getInputStream();
    super({ message: "", recognizer, input, ctx });
    this.deadEndConfigs = deadEndConfigs;
    this.startToken = startToken;
    this.offendingToken = offendingToken;
  }
};

// node_modules/antlr4/src/antlr4/utils/DoubleDict.js
var DoubleDict = class {
  constructor(defaultMapCtor) {
    this.defaultMapCtor = defaultMapCtor || HashMap;
    this.cacheMap = new this.defaultMapCtor();
  }
  get(a, b) {
    const d = this.cacheMap.get(a) || null;
    return d === null ? null : d.get(b) || null;
  }
  set(a, b, o) {
    let d = this.cacheMap.get(a) || null;
    if (d === null) {
      d = new this.defaultMapCtor();
      this.cacheMap.set(a, d);
    }
    d.set(b, o);
  }
};

// node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js
var ParserATNSimulator = class extends ATNSimulator {
  constructor(parser, atn3, decisionToDFA, sharedContextCache2) {
    super(atn3, sharedContextCache2);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    this.predictionMode = PredictionMode_default.LL;
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    this.mergeCache = null;
    this.debug = false;
    this.debug_closure = false;
    this.debug_add = false;
    this.debug_list_atn_decisions = false;
    this.dfa_debug = false;
    this.retry_debug = false;
  }
  reset() {
  }
  adaptivePredict(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
      console.log("adaptivePredict decision " + decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;
    const dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    const m = input.mark();
    const index = input.index;
    try {
      let s0;
      if (dfa.precedenceDfa) {
        s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
      } else {
        s0 = dfa.s0;
      }
      if (s0 === null) {
        if (outerContext === null) {
          outerContext = RuleContext.EMPTY;
        }
        if (this.debug || this.debug_list_atn_decisions) {
          console.log("predictATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + ", outerContext=" + outerContext.toString(this.parser.ruleNames));
        }
        const fullCtx = false;
        let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);
        if (dfa.precedenceDfa) {
          dfa.s0.configs = s0_closure;
          s0_closure = this.applyPrecedenceFilter(s0_closure);
          s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
          dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
        } else {
          s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
          dfa.s0 = s0;
        }
      }
      const alt = this.execATN(dfa, s0, input, index, outerContext);
      if (this.debug) {
        console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));
      }
      return alt;
    } finally {
      this._dfa = null;
      this.mergeCache = null;
      input.seek(index);
      input.release(m);
    }
  }
  /**
   * Performs ATN simulation to compute a predicted alternative based
   *  upon the remaining input, but also updates the DFA cache to avoid
   *  having to traverse the ATN again for the same input sequence.
   *
   * There are some key conditions we're looking for after computing a new
   * set of ATN configs (proposed DFA state):
   *       if the set is empty, there is no viable alternative for current symbol
   *       does the state uniquely predict an alternative?
   *       does the state have a conflict that would prevent us from
   *         putting it on the work list?
   *
   * We also have some key operations to do:
   *       add an edge from previous DFA state to potentially new DFA state, D,
   *         upon current symbol but only if adding to work list, which means in all
   *         cases except no viable alternative (and possibly non-greedy decisions?)
   *       collecting predicates and adding semantic context to DFA accept states
   *       adding rule context to context-sensitive DFA accept states
   *       consuming an input symbol
   *       reporting a conflict
   *       reporting an ambiguity
   *       reporting a context sensitivity
   *       reporting insufficient predicates
   *
   * cover these cases:
   *    dead end
   *    single alt
   *    single alt + preds
   *    conflict
   *    conflict + preds
   *
   */
  execATN(dfa, s0, input, startIndex, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
      console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    let alt;
    let previousD = s0;
    if (this.debug) {
      console.log("s0 = " + s0);
    }
    let t2 = input.LA(1);
    for (; ; ) {
      let D = this.getExistingTargetState(previousD, t2);
      if (D === null) {
        D = this.computeTargetState(dfa, previousD, t2);
      }
      if (D === ATNSimulator.ERROR) {
        const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
        input.seek(startIndex);
        alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
        if (alt !== ATN.INVALID_ALT_NUMBER) {
          return alt;
        } else {
          throw e;
        }
      }
      if (D.requiresFullContext && this.predictionMode !== PredictionMode_default.SLL) {
        let conflictingAlts = null;
        if (D.predicates !== null) {
          if (this.debug) {
            console.log("DFA state has preds in DFA sim LL failover");
          }
          const conflictIndex = input.index;
          if (conflictIndex !== startIndex) {
            input.seek(startIndex);
          }
          conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
          if (conflictingAlts.length === 1) {
            if (this.debug) {
              console.log("Full LL avoided");
            }
            return conflictingAlts.minValue();
          }
          if (conflictIndex !== startIndex) {
            input.seek(conflictIndex);
          }
        }
        if (this.dfa_debug) {
          console.log("ctx sensitive state " + outerContext + " in " + D);
        }
        const fullCtx = true;
        const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
        this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
        alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
        return alt;
      }
      if (D.isAcceptState) {
        if (D.predicates === null) {
          return D.prediction;
        }
        const stopIndex = input.index;
        input.seek(startIndex);
        const alts = this.evalSemanticContext(D.predicates, outerContext, true);
        if (alts.length === 0) {
          throw this.noViableAlt(input, outerContext, D.configs, startIndex);
        } else if (alts.length === 1) {
          return alts.minValue();
        } else {
          this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
          return alts.minValue();
        }
      }
      previousD = D;
      if (t2 !== Token.EOF) {
        input.consume();
        t2 = input.LA(1);
      }
    }
  }
  /**
   * Get an existing target state for an edge in the DFA. If the target state
   * for the edge has not yet been computed or is otherwise not available,
   * this method returns {@code null}.
   *
   * @param previousD The current DFA state
   * @param t The next input symbol
   * @return The existing target DFA state for the given input symbol
   * {@code t}, or {@code null} if the target state for this edge is not
   * already cached
   */
  getExistingTargetState(previousD, t2) {
    const edges = previousD.edges;
    if (edges === null) {
      return null;
    } else {
      return edges[t2 + 1] || null;
    }
  }
  /**
   * Compute a target state for an edge in the DFA, and attempt to add the
   * computed state and corresponding edge to the DFA.
   *
   * @param dfa The DFA
   * @param previousD The current DFA state
   * @param t The next input symbol
   *
   * @return The computed target DFA state for the given input symbol
   * {@code t}. If {@code t} does not lead to a valid DFA state, this method
   * returns {@link //ERROR
   */
  computeTargetState(dfa, previousD, t2) {
    const reach = this.computeReachSet(previousD.configs, t2, false);
    if (reach === null) {
      this.addDFAEdge(dfa, previousD, t2, ATNSimulator.ERROR);
      return ATNSimulator.ERROR;
    }
    let D = new DFAState(null, reach);
    const predictedAlt = this.getUniqueAlt(reach);
    if (this.debug) {
      const altSubSets = PredictionMode_default.getConflictingAltSubsets(reach);
      console.log("SLL altSubSets=" + arrayToString(altSubSets) + /*", previous=" + previousD.configs + */
      ", configs=" + reach + ", predict=" + predictedAlt + ", allSubsetsConflict=" + PredictionMode_default.allSubsetsConflict(altSubSets) + ", conflictingAlts=" + this.getConflictingAlts(reach));
    }
    if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {
      D.isAcceptState = true;
      D.configs.uniqueAlt = predictedAlt;
      D.prediction = predictedAlt;
    } else if (PredictionMode_default.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
      D.configs.conflictingAlts = this.getConflictingAlts(reach);
      D.requiresFullContext = true;
      D.isAcceptState = true;
      D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
      this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
      if (D.predicates !== null) {
        D.prediction = ATN.INVALID_ALT_NUMBER;
      }
    }
    D = this.addDFAEdge(dfa, previousD, t2, D);
    return D;
  }
  predicateDFAState(dfaState, decisionState) {
    const nalts = decisionState.transitions.length;
    const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred !== null) {
      dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
      dfaState.prediction = ATN.INVALID_ALT_NUMBER;
    } else {
      dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
  }
  // comes back with reach.uniqueAlt set to a valid alt
  execATNWithFullContext(dfa, D, s0, input, startIndex, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
      console.log("execATNWithFullContext " + s0);
    }
    const fullCtx = true;
    let foundExactAmbig = false;
    let reach;
    let previous = s0;
    input.seek(startIndex);
    let t2 = input.LA(1);
    let predictedAlt = -1;
    for (; ; ) {
      reach = this.computeReachSet(previous, t2, fullCtx);
      if (reach === null) {
        const e = this.noViableAlt(input, outerContext, previous, startIndex);
        input.seek(startIndex);
        const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
        if (alt !== ATN.INVALID_ALT_NUMBER) {
          return alt;
        } else {
          throw e;
        }
      }
      const altSubSets = PredictionMode_default.getConflictingAltSubsets(reach);
      if (this.debug) {
        console.log("LL altSubSets=" + altSubSets + ", predict=" + PredictionMode_default.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" + PredictionMode_default.resolvesToJustOneViableAlt(altSubSets));
      }
      reach.uniqueAlt = this.getUniqueAlt(reach);
      if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {
        predictedAlt = reach.uniqueAlt;
        break;
      } else if (this.predictionMode !== PredictionMode_default.LL_EXACT_AMBIG_DETECTION) {
        predictedAlt = PredictionMode_default.resolvesToJustOneViableAlt(altSubSets);
        if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {
          break;
        }
      } else {
        if (PredictionMode_default.allSubsetsConflict(altSubSets) && PredictionMode_default.allSubsetsEqual(altSubSets)) {
          foundExactAmbig = true;
          predictedAlt = PredictionMode_default.getSingleViableAlt(altSubSets);
          break;
        }
      }
      previous = reach;
      if (t2 !== Token.EOF) {
        input.consume();
        t2 = input.LA(1);
      }
    }
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {
      this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
      return predictedAlt;
    }
    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);
    return predictedAlt;
  }
  computeReachSet(closure, t2, fullCtx) {
    if (this.debug) {
      console.log("in computeReachSet, starting closure: " + closure);
    }
    if (this.mergeCache === null) {
      this.mergeCache = new DoubleDict();
    }
    const intermediate = new ATNConfigSet(fullCtx);
    let skippedStopStates = null;
    for (let i = 0; i < closure.items.length; i++) {
      const c = closure.items[i];
      if (this.debug) {
        console.log("testing " + this.getTokenName(t2) + " at " + c);
      }
      if (c.state instanceof RuleStopState) {
        if (fullCtx || t2 === Token.EOF) {
          if (skippedStopStates === null) {
            skippedStopStates = [];
          }
          skippedStopStates.push(c);
          if (this.debug_add) {
            console.log("added " + c + " to skippedStopStates");
          }
        }
        continue;
      }
      for (let j = 0; j < c.state.transitions.length; j++) {
        const trans = c.state.transitions[j];
        const target = this.getReachableTarget(trans, t2);
        if (target !== null) {
          const cfg = new ATNConfig({ state: target }, c);
          intermediate.add(cfg, this.mergeCache);
          if (this.debug_add) {
            console.log("added " + cfg + " to intermediate");
          }
        }
      }
    }
    let reach = null;
    if (skippedStopStates === null && t2 !== Token.EOF) {
      if (intermediate.items.length === 1) {
        reach = intermediate;
      } else if (this.getUniqueAlt(intermediate) !== ATN.INVALID_ALT_NUMBER) {
        reach = intermediate;
      }
    }
    if (reach === null) {
      reach = new ATNConfigSet(fullCtx);
      const closureBusy = new HashSet();
      const treatEofAsEpsilon = t2 === Token.EOF;
      for (let k = 0; k < intermediate.items.length; k++) {
        this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
      }
    }
    if (t2 === Token.EOF) {
      reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    if (skippedStopStates !== null && (!fullCtx || !PredictionMode_default.hasConfigInRuleStopState(reach))) {
      for (let l = 0; l < skippedStopStates.length; l++) {
        reach.add(skippedStopStates[l], this.mergeCache);
      }
    }
    if (reach.items.length === 0) {
      return null;
    } else {
      return reach;
    }
  }
  /**
   * Return a configuration set containing only the configurations from
   * {@code configs} which are in a {@link RuleStopState}. If all
   * configurations in {@code configs} are already in a rule stop state, this
   * method simply returns {@code configs}.
   *
   * <p>When {@code lookToEndOfRule} is true, this method uses
   * {@link ATN//nextTokens} for each configuration in {@code configs} which is
   * not already in a rule stop state to see if a rule stop state is reachable
   * from the configuration via epsilon-only transitions.</p>
   *
   * @param configs the configuration set to update
   * @param lookToEndOfRule when true, this method checks for rule stop states
   * reachable by epsilon-only transitions from each configuration in
   * {@code configs}.
   *
   * @return {@code configs} if all configurations in {@code configs} are in a
   * rule stop state, otherwise return a new configuration set containing only
   * the configurations from {@code configs} which are in a rule stop state
   */
  removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
    if (PredictionMode_default.allConfigsInRuleStopStates(configs)) {
      return configs;
    }
    const result = new ATNConfigSet(configs.fullCtx);
    for (let i = 0; i < configs.items.length; i++) {
      const config2 = configs.items[i];
      if (config2.state instanceof RuleStopState) {
        result.add(config2, this.mergeCache);
        continue;
      }
      if (lookToEndOfRule && config2.state.epsilonOnlyTransitions) {
        const nextTokens = this.atn.nextTokens(config2.state);
        if (nextTokens.contains(Token.EPSILON)) {
          const endOfRuleState = this.atn.ruleToStopState[config2.state.ruleIndex];
          result.add(new ATNConfig({ state: endOfRuleState }, config2), this.mergeCache);
        }
      }
    }
    return result;
  }
  computeStartState(p, ctx, fullCtx) {
    const initialContext = predictionContextFromRuleContext(this.atn, ctx);
    const configs = new ATNConfigSet(fullCtx);
    for (let i = 0; i < p.transitions.length; i++) {
      const target = p.transitions[i].target;
      const c = new ATNConfig({ state: target, alt: i + 1, context: initialContext }, null);
      const closureBusy = new HashSet();
      this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
  }
  /**
   * This method transforms the start state computed by
   * {@link //computeStartState} to the special start state used by a
   * precedence DFA for a particular precedence value. The transformation
   * process applies the following changes to the start state's configuration
   * set.
   *
   * <ol>
   * <li>Evaluate the precedence predicates for each configuration using
   * {@link SemanticContext//evalPrecedence}.</li>
   * <li>Remove all configurations which predict an alternative greater than
   * 1, for which another configuration that predicts alternative 1 is in the
   * same ATN state with the same prediction context. This transformation is
   * valid for the following reasons:
   * <ul>
   * <li>The closure block cannot contain any epsilon transitions which bypass
   * the body of the closure, so all states reachable via alternative 1 are
   * part of the precedence alternatives of the transformed left-recursive
   * rule.</li>
   * <li>The "primary" portion of a left recursive rule cannot contain an
   * epsilon transition, so the only way an alternative other than 1 can exist
   * in a state that is also reachable via alternative 1 is by nesting calls
   * to the left-recursive rule, with the outer calls not being at the
   * preferred precedence level.</li>
   * </ul>
   * </li>
   * </ol>
   *
   * <p>
   * The prediction context must be considered by this filter to address
   * situations like the following.
   * </p>
   * <code>
   * <pre>
   * grammar TA;
   * prog: statement* EOF;
   * statement: letterA | statement letterA 'b' ;
   * letterA: 'a';
   * </pre>
   * </code>
   * <p>
   * If the above grammar, the ATN state immediately before the token
   * reference {@code 'a'} in {@code letterA} is reachable from the left edge
   * of both the primary and closure blocks of the left-recursive rule
   * {@code statement}. The prediction context associated with each of these
   * configurations distinguishes between them, and prevents the alternative
   * which stepped out to {@code prog} (and then back in to {@code statement}
   * from being eliminated by the filter.
   * </p>
   *
   * @param configs The configuration set computed by
   * {@link //computeStartState} as the start state for the DFA.
   * @return The transformed configuration set representing the start state
   * for a precedence DFA at a particular precedence level (determined by
   * calling {@link Parser//getPrecedence})
   */
  applyPrecedenceFilter(configs) {
    let config2;
    const statesFromAlt1 = [];
    const configSet = new ATNConfigSet(configs.fullCtx);
    for (let i = 0; i < configs.items.length; i++) {
      config2 = configs.items[i];
      if (config2.alt !== 1) {
        continue;
      }
      const updatedContext = config2.semanticContext.evalPrecedence(this.parser, this._outerContext);
      if (updatedContext === null) {
        continue;
      }
      statesFromAlt1[config2.state.stateNumber] = config2.context;
      if (updatedContext !== config2.semanticContext) {
        configSet.add(new ATNConfig({ semanticContext: updatedContext }, config2), this.mergeCache);
      } else {
        configSet.add(config2, this.mergeCache);
      }
    }
    for (let i = 0; i < configs.items.length; i++) {
      config2 = configs.items[i];
      if (config2.alt === 1) {
        continue;
      }
      if (!config2.precedenceFilterSuppressed) {
        const context = statesFromAlt1[config2.state.stateNumber] || null;
        if (context !== null && context.equals(config2.context)) {
          continue;
        }
      }
      configSet.add(config2, this.mergeCache);
    }
    return configSet;
  }
  getReachableTarget(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
      return trans.target;
    } else {
      return null;
    }
  }
  getPredsForAmbigAlts(ambigAlts, configs, nalts) {
    let altToPred = [];
    for (let i = 0; i < configs.items.length; i++) {
      const c = configs.items[i];
      if (ambigAlts.has(c.alt)) {
        altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
      }
    }
    let nPredAlts = 0;
    for (let i = 1; i < nalts + 1; i++) {
      const pred = altToPred[i] || null;
      if (pred === null) {
        altToPred[i] = SemanticContext.NONE;
      } else if (pred !== SemanticContext.NONE) {
        nPredAlts += 1;
      }
    }
    if (nPredAlts === 0) {
      altToPred = null;
    }
    if (this.debug) {
      console.log("getPredsForAmbigAlts result " + arrayToString(altToPred));
    }
    return altToPred;
  }
  getPredicatePredictions(ambigAlts, altToPred) {
    const pairs = [];
    let containsPredicate = false;
    for (let i = 1; i < altToPred.length; i++) {
      const pred = altToPred[i];
      if (ambigAlts !== null && ambigAlts.has(i)) {
        pairs.push(new PredPrediction(pred, i));
      }
      if (pred !== SemanticContext.NONE) {
        containsPredicate = true;
      }
    }
    if (!containsPredicate) {
      return null;
    }
    return pairs;
  }
  /**
   * This method is used to improve the localization of error messages by
   * choosing an alternative rather than throwing a
   * {@link NoViableAltException} in particular prediction scenarios where the
   * {@link //ERROR} state was reached during ATN simulation.
   *
   * <p>
   * The default implementation of this method uses the following
   * algorithm to identify an ATN configuration which successfully parsed the
   * decision entry rule. Choosing such an alternative ensures that the
   * {@link ParserRuleContext} returned by the calling rule will be complete
   * and valid, and the syntax error will be reported later at a more
   * localized location.</p>
   *
   * <ul>
   * <li>If a syntactically valid path or paths reach the end of the decision rule and
   * they are semantically valid if predicated, return the min associated alt.</li>
   * <li>Else, if a semantically invalid but syntactically valid path exist
   * or paths exist, return the minimum associated alt.
   * </li>
   * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
   * </ul>
   *
   * <p>
   * In some scenarios, the algorithm described above could predict an
   * alternative which will result in a {@link FailedPredicateException} in
   * the parser. Specifically, this could occur if the <em>only</em> configuration
   * capable of successfully parsing to the end of the decision rule is
   * blocked by a semantic predicate. By choosing this alternative within
   * {@link //adaptivePredict} instead of throwing a
   * {@link NoViableAltException}, the resulting
   * {@link FailedPredicateException} in the parser will identify the specific
   * predicate which is preventing the parser from successfully parsing the
   * decision rule, which helps developers identify and correct logic errors
   * in semantic predicates.
   * </p>
   *
   * @param configs The ATN configurations which were valid immediately before
   * the {@link //ERROR} state was reached
   * @param outerContext The is the \gamma_0 initial parser context from the paper
   * or the parser stack at the instant before prediction commences.
   *
   * @return The value to return from {@link //adaptivePredict}, or
   * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
   * identified and {@link //adaptivePredict} should report an error instead
   */
  getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
    const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    const semValidConfigs = cfgs[0];
    const semInvalidConfigs = cfgs[1];
    let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt !== ATN.INVALID_ALT_NUMBER) {
      return alt;
    }
    if (semInvalidConfigs.items.length > 0) {
      alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
      if (alt !== ATN.INVALID_ALT_NUMBER) {
        return alt;
      }
    }
    return ATN.INVALID_ALT_NUMBER;
  }
  getAltThatFinishedDecisionEntryRule(configs) {
    const alts = [];
    for (let i = 0; i < configs.items.length; i++) {
      const c = configs.items[i];
      if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {
        if (alts.indexOf(c.alt) < 0) {
          alts.push(c.alt);
        }
      }
    }
    if (alts.length === 0) {
      return ATN.INVALID_ALT_NUMBER;
    } else {
      return Math.min.apply(null, alts);
    }
  }
  /**
   * Walk the list of configurations and split them according to
   * those that have preds evaluating to true/false.  If no pred, assume
   * true pred and include in succeeded set.  Returns Pair of sets.
   *
   * Create a new set so as not to alter the incoming parameter.
   *
   * Assumption: the input stream has been restored to the starting point
   * prediction, which is where predicates need to evaluate.*/
  splitAccordingToSemanticValidity(configs, outerContext) {
    const succeeded = new ATNConfigSet(configs.fullCtx);
    const failed = new ATNConfigSet(configs.fullCtx);
    for (let i = 0; i < configs.items.length; i++) {
      const c = configs.items[i];
      if (c.semanticContext !== SemanticContext.NONE) {
        const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
        if (predicateEvaluationResult) {
          succeeded.add(c);
        } else {
          failed.add(c);
        }
      } else {
        succeeded.add(c);
      }
    }
    return [succeeded, failed];
  }
  /**
   * Look through a list of predicate/alt pairs, returning alts for the
   * pairs that win. A {@code NONE} predicate indicates an alt containing an
   * unpredicated config which behaves as "always true." If !complete
   * then we stop at the first predicate that evaluates to true. This
   * includes pairs with null predicates.
   */
  evalSemanticContext(predPredictions, outerContext, complete) {
    const predictions = new BitSet();
    for (let i = 0; i < predPredictions.length; i++) {
      const pair = predPredictions[i];
      if (pair.pred === SemanticContext.NONE) {
        predictions.add(pair.alt);
        if (!complete) {
          break;
        }
        continue;
      }
      const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
      if (this.debug || this.dfa_debug) {
        console.log("eval pred " + pair + "=" + predicateEvaluationResult);
      }
      if (predicateEvaluationResult) {
        if (this.debug || this.dfa_debug) {
          console.log("PREDICT " + pair.alt);
        }
        predictions.add(pair.alt);
        if (!complete) {
          break;
        }
      }
    }
    return predictions;
  }
  // TODO: If we are doing predicates, there is no point in pursuing
  //     closure operations if we reach a DFA state that uniquely predicts
  //     alternative. We will not be caching that DFA state and it is a
  //     waste to pursue the closure. Might have to advance when we do
  //     ambig detection thought :(
  //
  closure(config2, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    const initialDepth = 0;
    this.closureCheckingStopState(
      config2,
      configs,
      closureBusy,
      collectPredicates,
      fullCtx,
      initialDepth,
      treatEofAsEpsilon
    );
  }
  closureCheckingStopState(config2, configs, closureBusy, collectPredicates, fullCtx, depth2, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
      console.log("closure(" + config2.toString(this.parser, true) + ")");
      if (config2.reachesIntoOuterContext > 50) {
        throw "problem";
      }
    }
    if (config2.state instanceof RuleStopState) {
      if (!config2.context.isEmpty()) {
        for (let i = 0; i < config2.context.length; i++) {
          if (config2.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
            if (fullCtx) {
              configs.add(new ATNConfig({ state: config2.state, context: PredictionContext.EMPTY }, config2), this.mergeCache);
              continue;
            } else {
              if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config2.state.ruleIndex));
              }
              this.closure_(
                config2,
                configs,
                closureBusy,
                collectPredicates,
                fullCtx,
                depth2,
                treatEofAsEpsilon
              );
            }
            continue;
          }
          const returnState = this.atn.states[config2.context.getReturnState(i)];
          const newContext = config2.context.getParent(i);
          const parms = { state: returnState, alt: config2.alt, context: newContext, semanticContext: config2.semanticContext };
          const c = new ATNConfig(parms, null);
          c.reachesIntoOuterContext = config2.reachesIntoOuterContext;
          this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth2 - 1, treatEofAsEpsilon);
        }
        return;
      } else if (fullCtx) {
        configs.add(config2, this.mergeCache);
        return;
      } else {
        if (this.debug) {
          console.log("FALLING off rule " + this.getRuleName(config2.state.ruleIndex));
        }
      }
    }
    this.closure_(config2, configs, closureBusy, collectPredicates, fullCtx, depth2, treatEofAsEpsilon);
  }
  // Do the actual work of walking epsilon edges//
  closure_(config2, configs, closureBusy, collectPredicates, fullCtx, depth2, treatEofAsEpsilon) {
    const p = config2.state;
    if (!p.epsilonOnlyTransitions) {
      configs.add(config2, this.mergeCache);
    }
    for (let i = 0; i < p.transitions.length; i++) {
      if (i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config2))
        continue;
      const t2 = p.transitions[i];
      const continueCollecting = collectPredicates && !(t2 instanceof ActionTransition);
      const c = this.getEpsilonTarget(config2, t2, continueCollecting, depth2 === 0, fullCtx, treatEofAsEpsilon);
      if (c !== null) {
        let newDepth = depth2;
        if (config2.state instanceof RuleStopState) {
          if (this._dfa !== null && this._dfa.precedenceDfa) {
            if (t2.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
              c.precedenceFilterSuppressed = true;
            }
          }
          c.reachesIntoOuterContext += 1;
          if (closureBusy.add(c) !== c) {
            continue;
          }
          configs.dipsIntoOuterContext = true;
          newDepth -= 1;
          if (this.debug) {
            console.log("dips into outer ctx: " + c);
          }
        } else {
          if (!t2.isEpsilon && closureBusy.add(c) !== c) {
            continue;
          }
          if (t2 instanceof RuleTransition) {
            if (newDepth >= 0) {
              newDepth += 1;
            }
          }
        }
        this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
      }
    }
  }
  canDropLoopEntryEdgeInLeftRecursiveRule(config2) {
    const p = config2.state;
    if (p.stateType !== ATNState.STAR_LOOP_ENTRY)
      return false;
    if (p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config2.context.isEmpty() || config2.context.hasEmptyPath())
      return false;
    const numCtxs = config2.context.length;
    for (let i = 0; i < numCtxs; i++) {
      const returnState = this.atn.states[config2.context.getReturnState(i)];
      if (returnState.ruleIndex !== p.ruleIndex)
        return false;
    }
    const decisionStartState = p.transitions[0].target;
    const blockEndStateNum = decisionStartState.endState.stateNumber;
    const blockEndState = this.atn.states[blockEndStateNum];
    for (let i = 0; i < numCtxs; i++) {
      const returnStateNumber = config2.context.getReturnState(i);
      const returnState = this.atn.states[returnStateNumber];
      if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)
        return false;
      const returnStateTarget = returnState.transitions[0].target;
      if (returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p)
        continue;
      if (returnState === blockEndState)
        continue;
      if (returnStateTarget === blockEndState)
        continue;
      if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)
        continue;
      return false;
    }
    return true;
  }
  getRuleName(index) {
    if (this.parser !== null && index >= 0) {
      return this.parser.ruleNames[index];
    } else {
      return "<rule " + index + ">";
    }
  }
  getEpsilonTarget(config2, t2, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch (t2.serializationType) {
      case Transition.RULE:
        return this.ruleTransition(config2, t2);
      case Transition.PRECEDENCE:
        return this.precedenceTransition(config2, t2, collectPredicates, inContext, fullCtx);
      case Transition.PREDICATE:
        return this.predTransition(config2, t2, collectPredicates, inContext, fullCtx);
      case Transition.ACTION:
        return this.actionTransition(config2, t2);
      case Transition.EPSILON:
        return new ATNConfig({ state: t2.target }, config2);
      case Transition.ATOM:
      case Transition.RANGE:
      case Transition.SET:
        if (treatEofAsEpsilon) {
          if (t2.matches(Token.EOF, 0, 1)) {
            return new ATNConfig({ state: t2.target }, config2);
          }
        }
        return null;
      default:
        return null;
    }
  }
  actionTransition(config2, t2) {
    if (this.debug) {
      const index = t2.actionIndex === -1 ? 65535 : t2.actionIndex;
      console.log("ACTION edge " + t2.ruleIndex + ":" + index);
    }
    return new ATNConfig({ state: t2.target }, config2);
  }
  precedenceTransition(config2, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
      console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.precedence + ">=_p, ctx dependent=true");
      if (this.parser !== null) {
        console.log("context surrounding pred is " + arrayToString(this.parser.getRuleInvocationStack()));
      }
    }
    let c = null;
    if (collectPredicates && inContext) {
      if (fullCtx) {
        const currentPosition = this._input.index;
        this._input.seek(this._startIndex);
        const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
        this._input.seek(currentPosition);
        if (predSucceeds) {
          c = new ATNConfig({ state: pt.target }, config2);
        }
      } else {
        const newSemCtx = SemanticContext.andContext(config2.semanticContext, pt.getPredicate());
        c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config2);
      }
    } else {
      c = new ATNConfig({ state: pt.target }, config2);
    }
    if (this.debug) {
      console.log("config from pred transition=" + c);
    }
    return c;
  }
  predTransition(config2, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
      console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex + ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
      if (this.parser !== null) {
        console.log("context surrounding pred is " + arrayToString(this.parser.getRuleInvocationStack()));
      }
    }
    let c = null;
    if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {
      if (fullCtx) {
        const currentPosition = this._input.index;
        this._input.seek(this._startIndex);
        const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
        this._input.seek(currentPosition);
        if (predSucceeds) {
          c = new ATNConfig({ state: pt.target }, config2);
        }
      } else {
        const newSemCtx = SemanticContext.andContext(config2.semanticContext, pt.getPredicate());
        c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config2);
      }
    } else {
      c = new ATNConfig({ state: pt.target }, config2);
    }
    if (this.debug) {
      console.log("config from pred transition=" + c);
    }
    return c;
  }
  ruleTransition(config2, t2) {
    if (this.debug) {
      console.log("CALL rule " + this.getRuleName(t2.target.ruleIndex) + ", ctx=" + config2.context);
    }
    const returnState = t2.followState;
    const newContext = SingletonPredictionContext.create(config2.context, returnState.stateNumber);
    return new ATNConfig({ state: t2.target, context: newContext }, config2);
  }
  getConflictingAlts(configs) {
    const altsets = PredictionMode_default.getConflictingAltSubsets(configs);
    return PredictionMode_default.getAlts(altsets);
  }
  /**
   * Sam pointed out a problem with the previous definition, v3, of
   * ambiguous states. If we have another state associated with conflicting
   * alternatives, we should keep going. For example, the following grammar
   *
   * s : (ID | ID ID?) ';' ;
   *
   * When the ATN simulation reaches the state before ';', it has a DFA
   * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
   * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
   * because alternative to has another way to continue, via [6|2|[]].
   * The key is that we have a single state that has config's only associated
   * with a single alternative, 2, and crucially the state transitions
   * among the configurations are all non-epsilon transitions. That means
   * we don't consider any conflicts that include alternative 2. So, we
   * ignore the conflict between alts 1 and 2. We ignore a set of
   * conflicting alts when there is an intersection with an alternative
   * associated with a single alt state in the state&rarr;config-list map.
   *
   * It's also the case that we might have two conflicting configurations but
   * also a 3rd nonconflicting configuration for a different alternative:
   * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
   *
   * a : A | A | A B ;
   *
   * After matching input A, we reach the stop state for rule A, state 1.
   * State 8 is the state right before B. Clearly alternatives 1 and 2
   * conflict and no amount of further lookahead will separate the two.
   * However, alternative 3 will be able to continue and so we do not
   * stop working on this state. In the previous example, we're concerned
   * with states associated with the conflicting alternatives. Here alt
   * 3 is not associated with the conflicting configs, but since we can continue
   * looking for input reasonably, I don't declare the state done. We
   * ignore a set of conflicting alts when we have an alternative
   * that we still need to pursue
   */
  getConflictingAltsOrUniqueAlt(configs) {
    let conflictingAlts = null;
    if (configs.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {
      conflictingAlts = new BitSet();
      conflictingAlts.add(configs.uniqueAlt);
    } else {
      conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
  }
  getTokenName(t2) {
    if (t2 === Token.EOF) {
      return "EOF";
    }
    if (this.parser !== null && this.parser.literalNames !== null) {
      if (t2 >= this.parser.literalNames.length && t2 >= this.parser.symbolicNames.length) {
        console.log("" + t2 + " ttype out of range: " + this.parser.literalNames);
        console.log("" + this.parser.getInputStream().getTokens());
      } else {
        const name2 = this.parser.literalNames[t2] || this.parser.symbolicNames[t2];
        return name2 + "<" + t2 + ">";
      }
    }
    return "" + t2;
  }
  getLookaheadName(input) {
    return this.getTokenName(input.LA(1));
  }
  /**
   * Used for debugging in adaptivePredict around execATN but I cut
   * it out for clarity now that alg. works well. We can leave this
   * "dead" code for a bit
   */
  dumpDeadEndConfigs(nvae) {
    console.log("dead end configs: ");
    const decs = nvae.getDeadEndConfigs();
    for (let i = 0; i < decs.length; i++) {
      const c = decs[i];
      let trans = "no edges";
      if (c.state.transitions.length > 0) {
        const t2 = c.state.transitions[0];
        if (t2 instanceof AtomTransition) {
          trans = "Atom " + this.getTokenName(t2.label);
        } else if (t2 instanceof SetTransition) {
          const neg = t2 instanceof NotSetTransition;
          trans = (neg ? "~" : "") + "Set " + t2.set;
        }
      }
      console.error(c.toString(this.parser, true) + ":" + trans);
    }
  }
  noViableAlt(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
  }
  getUniqueAlt(configs) {
    let alt = ATN.INVALID_ALT_NUMBER;
    for (let i = 0; i < configs.items.length; i++) {
      const c = configs.items[i];
      if (alt === ATN.INVALID_ALT_NUMBER) {
        alt = c.alt;
      } else if (c.alt !== alt) {
        return ATN.INVALID_ALT_NUMBER;
      }
    }
    return alt;
  }
  /**
   * Add an edge to the DFA, if possible. This method calls
   * {@link //addDFAState} to ensure the {@code to} state is present in the
   * DFA. If {@code from} is {@code null}, or if {@code t} is outside the
   * range of edges that can be represented in the DFA tables, this method
   * returns without adding the edge to the DFA.
   *
   * <p>If {@code to} is {@code null}, this method returns {@code null}.
   * Otherwise, this method returns the {@link DFAState} returned by calling
   * {@link //addDFAState} for the {@code to} state.</p>
   *
   * @param dfa The DFA
   * @param from_ The source state for the edge
   * @param t The input symbol
   * @param to The target state for the edge
   *
   * @return If {@code to} is {@code null}, this method returns {@code null};
   * otherwise this method returns the result of calling {@link //addDFAState}
   * on {@code to}
   */
  addDFAEdge(dfa, from_, t2, to) {
    if (this.debug) {
      console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t2));
    }
    if (to === null) {
      return null;
    }
    to = this.addDFAState(dfa, to);
    if (from_ === null || t2 < -1 || t2 > this.atn.maxTokenType) {
      return to;
    }
    if (from_.edges === null) {
      from_.edges = [];
    }
    from_.edges[t2 + 1] = to;
    if (this.debug) {
      const literalNames = this.parser === null ? null : this.parser.literalNames;
      const symbolicNames = this.parser === null ? null : this.parser.symbolicNames;
      console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
  }
  /**
   * Add state {@code D} to the DFA if it is not already present, and return
   * the actual instance stored in the DFA. If a state equivalent to {@code D}
   * is already in the DFA, the existing state is returned. Otherwise this
   * method returns {@code D} after adding it to the DFA.
   *
   * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
   * does not change the DFA.</p>
   *
   * @param dfa The dfa
   * @param D The DFA state to add
   * @return The state stored in the DFA. This will be either the existing
   * state if {@code D} is already in the DFA, or {@code D} itself if the
   * state was not already present
   */
  addDFAState(dfa, D) {
    if (D === ATNSimulator.ERROR) {
      return D;
    }
    const existing = dfa.states.get(D);
    if (existing !== null) {
      return existing;
    }
    D.stateNumber = dfa.states.length;
    if (!D.configs.readOnly) {
      D.configs.optimizeConfigs(this);
      D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
      console.log("adding new DFA state: " + D);
    }
    return D;
  }
  reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
      const interval = new Interval(startIndex, stopIndex + 1);
      console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser !== null) {
      this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
  }
  reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
      const interval = new Interval(startIndex, stopIndex + 1);
      console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser !== null) {
      this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
  }
  // If context sensitive parsing, we know it's ambiguity not conflict//
  reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
    if (this.debug || this.retry_debug) {
      const interval = new Interval(startIndex, stopIndex + 1);
      console.log("reportAmbiguity " + ambigAlts + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser !== null) {
      this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
  }
};

// node_modules/antlr4/src/antlr4/atn/index.js
var atn_default = { ATN, ATNDeserializer, LexerATNSimulator, ParserATNSimulator, PredictionMode: PredictionMode_default };

// node_modules/antlr4/src/antlr4/dfa/DFASerializer.js
var DFASerializer = class {
  constructor(dfa, literalNames, symbolicNames) {
    this.dfa = dfa;
    this.literalNames = literalNames || [];
    this.symbolicNames = symbolicNames || [];
  }
  toString() {
    if (this.dfa.s0 === null) {
      return null;
    }
    let buf = "";
    const states = this.dfa.sortedStates();
    for (let i = 0; i < states.length; i++) {
      const s = states[i];
      if (s.edges !== null) {
        const n = s.edges.length;
        for (let j = 0; j < n; j++) {
          const t2 = s.edges[j] || null;
          if (t2 !== null && t2.stateNumber !== 2147483647) {
            buf = buf.concat(this.getStateString(s));
            buf = buf.concat("-");
            buf = buf.concat(this.getEdgeLabel(j));
            buf = buf.concat("->");
            buf = buf.concat(this.getStateString(t2));
            buf = buf.concat("\n");
          }
        }
      }
    }
    return buf.length === 0 ? null : buf;
  }
  getEdgeLabel(i) {
    if (i === 0) {
      return "EOF";
    } else if (this.literalNames !== null || this.symbolicNames !== null) {
      return this.literalNames[i - 1] || this.symbolicNames[i - 1];
    } else {
      return String.fromCharCode(i - 1);
    }
  }
  getStateString(s) {
    const baseStateStr = (s.isAcceptState ? ":" : "") + "s" + s.stateNumber + (s.requiresFullContext ? "^" : "");
    if (s.isAcceptState) {
      if (s.predicates !== null) {
        return baseStateStr + "=>" + arrayToString(s.predicates);
      } else {
        return baseStateStr + "=>" + s.prediction.toString();
      }
    } else {
      return baseStateStr;
    }
  }
};

// node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js
var LexerDFASerializer = class extends DFASerializer {
  constructor(dfa) {
    super(dfa, null);
  }
  getEdgeLabel(i) {
    return "'" + String.fromCharCode(i) + "'";
  }
};

// node_modules/antlr4/src/antlr4/dfa/DFA.js
var DFA = class {
  constructor(atnStartState, decision) {
    if (decision === void 0) {
      decision = 0;
    }
    this.atnStartState = atnStartState;
    this.decision = decision;
    this._states = new HashSet();
    this.s0 = null;
    this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState) {
      if (atnStartState.isPrecedenceDecision) {
        this.precedenceDfa = true;
        const precedenceState = new DFAState(null, new ATNConfigSet());
        precedenceState.edges = [];
        precedenceState.isAcceptState = false;
        precedenceState.requiresFullContext = false;
        this.s0 = precedenceState;
      }
    }
  }
  /**
   * Get the start state for a specific precedence value.
   *
   * @param precedence The current precedence.
   * @return The start state corresponding to the specified precedence, or
   * {@code null} if no start state exists for the specified precedence.
   *
   * @throws IllegalStateException if this is not a precedence DFA.
   * @see //isPrecedenceDfa()
   */
  getPrecedenceStartState(precedence) {
    if (!this.precedenceDfa) {
      throw "Only precedence DFAs may contain a precedence start state.";
    }
    if (precedence < 0 || precedence >= this.s0.edges.length) {
      return null;
    }
    return this.s0.edges[precedence] || null;
  }
  /**
   * Set the start state for a specific precedence value.
   *
   * @param precedence The current precedence.
   * @param startState The start state corresponding to the specified
   * precedence.
   *
   * @throws IllegalStateException if this is not a precedence DFA.
   * @see //isPrecedenceDfa()
   */
  setPrecedenceStartState(precedence, startState) {
    if (!this.precedenceDfa) {
      throw "Only precedence DFAs may contain a precedence start state.";
    }
    if (precedence < 0) {
      return;
    }
    this.s0.edges[precedence] = startState;
  }
  /**
   * Sets whether this is a precedence DFA. If the specified value differs
   * from the current DFA configuration, the following actions are taken;
   * otherwise no changes are made to the current DFA.
   *
   * <ul>
   * <li>The {@link //states} map is cleared</li>
   * <li>If {@code precedenceDfa} is {@code false}, the initial state
   * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
   * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
   * store the start states for individual precedence values.</li>
   * <li>The {@link //precedenceDfa} field is updated</li>
   * </ul>
   *
   * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
   * {@code false}
   */
  setPrecedenceDfa(precedenceDfa) {
    if (this.precedenceDfa !== precedenceDfa) {
      this._states = new HashSet();
      if (precedenceDfa) {
        const precedenceState = new DFAState(null, new ATNConfigSet());
        precedenceState.edges = [];
        precedenceState.isAcceptState = false;
        precedenceState.requiresFullContext = false;
        this.s0 = precedenceState;
      } else {
        this.s0 = null;
      }
      this.precedenceDfa = precedenceDfa;
    }
  }
  /**
   * Return a list of all states in this DFA, ordered by state number.
   */
  sortedStates() {
    const list = this._states.values();
    return list.sort(function(a, b) {
      return a.stateNumber - b.stateNumber;
    });
  }
  toString(literalNames, symbolicNames) {
    literalNames = literalNames || null;
    symbolicNames = symbolicNames || null;
    if (this.s0 === null) {
      return "";
    }
    const serializer = new DFASerializer(this, literalNames, symbolicNames);
    return serializer.toString();
  }
  toLexerString() {
    if (this.s0 === null) {
      return "";
    }
    const serializer = new LexerDFASerializer(this);
    return serializer.toString();
  }
  get states() {
    return this._states;
  }
};

// node_modules/antlr4/src/antlr4/dfa/index.js
var dfa_default = { DFA, DFASerializer, LexerDFASerializer, PredPrediction };

// node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js
var ParseTreeListener = class {
  visitTerminal(node) {
  }
  visitErrorNode(node) {
  }
  enterEveryRule(node) {
  }
  exitEveryRule(node) {
  }
};

// node_modules/antlr4/src/antlr4/tree/ParseTreeVisitor.js
var ParseTreeVisitor = class {
  visit(ctx) {
    if (Array.isArray(ctx)) {
      return ctx.map(function(child) {
        return child.accept(this);
      }, this);
    } else {
      return ctx.accept(this);
    }
  }
  visitChildren(ctx) {
    if (ctx.children) {
      return this.visit(ctx.children);
    } else {
      return null;
    }
  }
  visitTerminal(node) {
  }
  visitErrorNode(node) {
  }
};

// node_modules/antlr4/src/antlr4/tree/ParseTreeWalker.js
var ParseTreeWalker = class {
  /**
   * Performs a walk on the given parse tree starting at the root and going down recursively
   * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before
   * recursively walking down into child nodes, then
   * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.
   * @param listener The listener used by the walker to process grammar rules
   * @param t The parse tree to be walked on
   */
  walk(listener, t2) {
    const errorNode = t2 instanceof ErrorNode || t2.isErrorNode !== void 0 && t2.isErrorNode();
    if (errorNode) {
      listener.visitErrorNode(t2);
    } else if (t2 instanceof TerminalNode) {
      listener.visitTerminal(t2);
    } else {
      this.enterRule(listener, t2);
      for (let i = 0; i < t2.getChildCount(); i++) {
        const child = t2.getChild(i);
        this.walk(listener, child);
      }
      this.exitRule(listener, t2);
    }
  }
  /**
   * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}
   * then by triggering the event specific to the given parse tree node
   * @param listener The listener responding to the trigger events
   * @param r The grammar rule containing the rule context
   */
  enterRule(listener, r) {
    const ctx = r.getRuleContext();
    listener.enterEveryRule(ctx);
    ctx.enterRule(listener);
  }
  /**
   * Exits a grammar rule by first triggering the event specific to the given parse tree node
   * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}
   * @param listener The listener responding to the trigger events
   * @param r The grammar rule containing the rule context
   */
  exitRule(listener, r) {
    const ctx = r.getRuleContext();
    ctx.exitRule(listener);
    listener.exitEveryRule(ctx);
  }
};
ParseTreeWalker.DEFAULT = new ParseTreeWalker();

// node_modules/antlr4/src/antlr4/tree/index.js
var tree_default = { Trees: Trees_default, RuleNode, ErrorNode, TerminalNode, ParseTreeListener, ParseTreeVisitor, ParseTreeWalker };

// node_modules/antlr4/src/antlr4/error/InputMismatchException.js
var InputMismatchException = class extends RecognitionException {
  constructor(recognizer) {
    super({ message: "", recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx });
    this.offendingToken = recognizer.getCurrentToken();
  }
};

// node_modules/antlr4/src/antlr4/error/FailedPredicateException.js
var FailedPredicateException = class extends RecognitionException {
  constructor(recognizer, predicate, message) {
    super({
      message: formatMessage(predicate, message || null),
      recognizer,
      input: recognizer.getInputStream(),
      ctx: recognizer._ctx
    });
    const s = recognizer._interp.atn.states[recognizer.state];
    const trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
      this.ruleIndex = trans.ruleIndex;
      this.predicateIndex = trans.predIndex;
    } else {
      this.ruleIndex = 0;
      this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
  }
};
function formatMessage(predicate, message) {
  if (message !== null) {
    return message;
  } else {
    return "failed predicate: {" + predicate + "}?";
  }
}

// node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js
var DiagnosticErrorListener = class extends ErrorListener {
  constructor(exactOnly) {
    super();
    exactOnly = exactOnly || true;
    this.exactOnly = exactOnly;
  }
  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    if (this.exactOnly && !exact) {
      return;
    }
    const msg = "reportAmbiguity d=" + this.getDecisionDescription(recognizer, dfa) + ": ambigAlts=" + this.getConflictingAlts(ambigAlts, configs) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
    recognizer.notifyErrorListeners(msg);
  }
  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
    const msg = "reportAttemptingFullContext d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
    recognizer.notifyErrorListeners(msg);
  }
  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
    const msg = "reportContextSensitivity d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
    recognizer.notifyErrorListeners(msg);
  }
  getDecisionDescription(recognizer, dfa) {
    const decision = dfa.decision;
    const ruleIndex = dfa.atnStartState.ruleIndex;
    const ruleNames = recognizer.ruleNames;
    if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
      return "" + decision;
    }
    const ruleName = ruleNames[ruleIndex] || null;
    if (ruleName === null || ruleName.length === 0) {
      return "" + decision;
    }
    return `${decision} (${ruleName})`;
  }
  /**
   * Computes the set of conflicting or ambiguous alternatives from a
   * configuration set, if that information was not already provided by the
   * parser.
   *
   * @param reportedAlts The set of conflicting or ambiguous alternatives, as
   * reported by the parser.
   * @param configs The conflicting or ambiguous configuration set.
   * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
   * returns the set of alternatives represented in {@code configs}.
      */
  getConflictingAlts(reportedAlts, configs) {
    if (reportedAlts !== null) {
      return reportedAlts;
    }
    const result = new BitSet();
    for (let i = 0; i < configs.items.length; i++) {
      result.add(configs.items[i].alt);
    }
    return `{${result.values().join(", ")}}`;
  }
};

// node_modules/antlr4/src/antlr4/error/ParseCancellationException.js
var ParseCancellationException = class _ParseCancellationException extends Error {
  constructor() {
    super();
    Error.captureStackTrace(this, _ParseCancellationException);
  }
};

// node_modules/antlr4/src/antlr4/error/ErrorStrategy.js
var ErrorStrategy = class {
  reset(recognizer) {
  }
  recoverInline(recognizer) {
  }
  recover(recognizer, e) {
  }
  sync(recognizer) {
  }
  inErrorRecoveryMode(recognizer) {
  }
  reportError(recognizer) {
  }
};

// node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js
var DefaultErrorStrategy = class extends ErrorStrategy {
  constructor() {
    super();
    this.errorRecoveryMode = false;
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    this.nextTokensContext = null;
    this.nextTokenState = 0;
  }
  /**
   * <p>The default implementation simply calls {@link //endErrorCondition} to
   * ensure that the handler is not in error recovery mode.</p>
   */
  reset(recognizer) {
    this.endErrorCondition(recognizer);
  }
  /**
   * This method is called to enter error recovery mode when a recognition
   * exception is reported.
   *
   * @param recognizer the parser instance
   */
  beginErrorCondition(recognizer) {
    this.errorRecoveryMode = true;
  }
  inErrorRecoveryMode(recognizer) {
    return this.errorRecoveryMode;
  }
  /**
   * This method is called to leave error recovery mode after recovering from
   * a recognition exception.
   * @param recognizer
   */
  endErrorCondition(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
  }
  /**
   * {@inheritDoc}
   * <p>The default implementation simply calls {@link //endErrorCondition}.</p>
   */
  reportMatch(recognizer) {
    this.endErrorCondition(recognizer);
  }
  /**
   * {@inheritDoc}
   *
   * <p>The default implementation returns immediately if the handler is already
   * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
   * and dispatches the reporting task based on the runtime type of {@code e}
   * according to the following table.</p>
   *
   * <ul>
   * <li>{@link NoViableAltException}: Dispatches the call to
   * {@link //reportNoViableAlternative}</li>
   * <li>{@link InputMismatchException}: Dispatches the call to
   * {@link //reportInputMismatch}</li>
   * <li>{@link FailedPredicateException}: Dispatches the call to
   * {@link //reportFailedPredicate}</li>
   * <li>All other types: calls {@link Parser//notifyErrorListeners} to report
   * the exception</li>
   * </ul>
   */
  reportError(recognizer, e) {
    if (this.inErrorRecoveryMode(recognizer)) {
      return;
    }
    this.beginErrorCondition(recognizer);
    if (e instanceof NoViableAltException) {
      this.reportNoViableAlternative(recognizer, e);
    } else if (e instanceof InputMismatchException) {
      this.reportInputMismatch(recognizer, e);
    } else if (e instanceof FailedPredicateException) {
      this.reportFailedPredicate(recognizer, e);
    } else {
      console.log("unknown recognition error type: " + e.constructor.name);
      console.log(e.stack);
      recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
  }
  /**
   *
   * {@inheritDoc}
   *
   * <p>The default implementation resynchronizes the parser by consuming tokens
   * until we find one in the resynchronization set--loosely the set of tokens
   * that can follow the current rule.</p>
   *
   */
  recover(recognizer, e) {
    if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {
      recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
      this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    const followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
  }
  /**
   * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
   * that the current lookahead symbol is consistent with what were expecting
   * at this point in the ATN. You can call this anytime but ANTLR only
   * generates code to check before subrules/loops and each iteration.
   *
   * <p>Implements Jim Idle's magic sync mechanism in closures and optional
   * subrules. E.g.,</p>
   *
   * <pre>
   * a : sync ( stuff sync )* ;
   * sync : {consume to what can follow sync} ;
   * </pre>
   *
   * At the start of a sub rule upon error, {@link //sync} performs single
   * token deletion, if possible. If it can't do that, it bails on the current
   * rule and uses the default error recovery, which consumes until the
   * resynchronization set of the current rule.
   *
   * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
   * with an empty alternative), then the expected set includes what follows
   * the subrule.</p>
   *
   * <p>During loop iteration, it consumes until it sees a token that can start a
   * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
   * stay in the loop as long as possible.</p>
   *
   * <p><strong>ORIGINS</strong></p>
   *
   * <p>Previous versions of ANTLR did a poor job of their recovery within loops.
   * A single mismatch token or missing token would force the parser to bail
   * out of the entire rules surrounding the loop. So, for rule</p>
   *
   * <pre>
   * classDef : 'class' ID '{' member* '}'
   * </pre>
   *
   * input with an extra token between members would force the parser to
   * consume until it found the next class definition rather than the next
   * member definition of the current class.
   *
   * <p>This functionality cost a little bit of effort because the parser has to
   * compare token set at the start of the loop and at each iteration. If for
   * some reason speed is suffering for you, you can turn off this
   * functionality by simply overriding this method as a blank { }.</p>
   *
   */
  sync(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
      return;
    }
    const s = recognizer._interp.atn.states[recognizer.state];
    const la = recognizer.getTokenStream().LA(1);
    const nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(la)) {
      this.nextTokensContext = null;
      this.nextTokenState = ATNState.INVALID_STATE_NUMBER;
      return;
    } else if (nextTokens.contains(Token.EPSILON)) {
      if (this.nextTokensContext === null) {
        this.nextTokensContext = recognizer._ctx;
        this.nextTokensState = recognizer._stateNumber;
      }
      return;
    }
    switch (s.stateType) {
      case ATNState.BLOCK_START:
      case ATNState.STAR_BLOCK_START:
      case ATNState.PLUS_BLOCK_START:
      case ATNState.STAR_LOOP_ENTRY:
        if (this.singleTokenDeletion(recognizer) !== null) {
          return;
        } else {
          throw new InputMismatchException(recognizer);
        }
      case ATNState.PLUS_LOOP_BACK:
      case ATNState.STAR_LOOP_BACK:
        {
          this.reportUnwantedToken(recognizer);
          const expecting = new IntervalSet();
          expecting.addSet(recognizer.getExpectedTokens());
          const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
          this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        }
        break;
      default:
    }
  }
  /**
   * This is called by {@link //reportError} when the exception is a
   * {@link NoViableAltException}.
   *
   * @see //reportError
   *
   * @param recognizer the parser instance
   * @param e the recognition exception
   */
  reportNoViableAlternative(recognizer, e) {
    const tokens = recognizer.getTokenStream();
    let input;
    if (tokens !== null) {
      if (e.startToken.type === Token.EOF) {
        input = "<EOF>";
      } else {
        input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
      }
    } else {
      input = "<unknown input>";
    }
    const msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
  }
  /**
   * This is called by {@link //reportError} when the exception is an
   * {@link InputMismatchException}.
   *
   * @see //reportError
   *
   * @param recognizer the parser instance
   * @param e the recognition exception
   */
  reportInputMismatch(recognizer, e) {
    const msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) + " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
  }
  /**
   * This is called by {@link //reportError} when the exception is a
   * {@link FailedPredicateException}.
   *
   * @see //reportError
   *
   * @param recognizer the parser instance
   * @param e the recognition exception
   */
  reportFailedPredicate(recognizer, e) {
    const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    const msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
  }
  /**
   * This method is called to report a syntax error which requires the removal
   * of a token from the input stream. At the time this method is called, the
   * erroneous symbol is current {@code LT(1)} symbol and has not yet been
   * removed from the input stream. When this method returns,
   * {@code recognizer} is in error recovery mode.
   *
   * <p>This method is called when {@link //singleTokenDeletion} identifies
   * single-token deletion as a viable recovery strategy for a mismatched
   * input error.</p>
   *
   * <p>The default implementation simply returns if the handler is already in
   * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
   * enter error recovery mode, followed by calling
   * {@link Parser//notifyErrorListeners}.</p>
   *
   * @param recognizer the parser instance
   *
   */
  reportUnwantedToken(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
      return;
    }
    this.beginErrorCondition(recognizer);
    const t2 = recognizer.getCurrentToken();
    const tokenName = this.getTokenErrorDisplay(t2);
    const expecting = this.getExpectedTokens(recognizer);
    const msg = "extraneous input " + tokenName + " expecting " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t2, null);
  }
  /**
   * This method is called to report a syntax error which requires the
   * insertion of a missing token into the input stream. At the time this
   * method is called, the missing token has not yet been inserted. When this
   * method returns, {@code recognizer} is in error recovery mode.
   *
   * <p>This method is called when {@link //singleTokenInsertion} identifies
   * single-token insertion as a viable recovery strategy for a mismatched
   * input error.</p>
   *
   * <p>The default implementation simply returns if the handler is already in
   * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
   * enter error recovery mode, followed by calling
   * {@link Parser//notifyErrorListeners}.</p>
   *
   * @param recognizer the parser instance
   */
  reportMissingToken(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
      return;
    }
    this.beginErrorCondition(recognizer);
    const t2 = recognizer.getCurrentToken();
    const expecting = this.getExpectedTokens(recognizer);
    const msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + " at " + this.getTokenErrorDisplay(t2);
    recognizer.notifyErrorListeners(msg, t2, null);
  }
  /**
   * <p>The default implementation attempts to recover from the mismatched input
   * by using single token insertion and deletion as described below. If the
   * recovery attempt fails, this method throws an
   * {@link InputMismatchException}.</p>
   *
   * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
   *
   * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
   * right token, however, then assume {@code LA(1)} is some extra spurious
   * token and delete it. Then consume and return the next token (which was
   * the {@code LA(2)} token) as the successful result of the match operation.</p>
   *
   * <p>This recovery strategy is implemented by {@link
      * //singleTokenDeletion}.</p>
   *
   * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
   *
   * <p>If current token (at {@code LA(1)}) is consistent with what could come
   * after the expected {@code LA(1)} token, then assume the token is missing
   * and use the parser's {@link TokenFactory} to create it on the fly. The
   * "insertion" is performed by returning the created token as the successful
   * result of the match operation.</p>
   *
   * <p>This recovery strategy is implemented by {@link
      * //singleTokenInsertion}.</p>
   *
   * <p><strong>EXAMPLE</strong></p>
   *
   * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
   * the parser returns from the nested call to {@code expr}, it will have
   * call chain:</p>
   *
   * <pre>
   * stat &rarr; expr &rarr; atom
   * </pre>
   *
   * and it will be trying to match the {@code ')'} at this point in the
   * derivation:
   *
   * <pre>
   * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
   * ^
   * </pre>
   *
   * The attempt to match {@code ')'} will fail when it sees {@code ';'} and
   * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
   * is in the set of tokens that can follow the {@code ')'} token reference
   * in rule {@code atom}. It can assume that you forgot the {@code ')'}.
   */
  recoverInline(recognizer) {
    const matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
      recognizer.consume();
      return matchedSymbol;
    }
    if (this.singleTokenInsertion(recognizer)) {
      return this.getMissingSymbol(recognizer);
    }
    throw new InputMismatchException(recognizer);
  }
  /**
   * This method implements the single-token insertion inline error recovery
   * strategy. It is called by {@link //recoverInline} if the single-token
   * deletion strategy fails to recover from the mismatched input. If this
   * method returns {@code true}, {@code recognizer} will be in error recovery
   * mode.
   *
   * <p>This method determines whether or not single-token insertion is viable by
   * checking if the {@code LA(1)} input symbol could be successfully matched
   * if it were instead the {@code LA(2)} symbol. If this method returns
   * {@code true}, the caller is responsible for creating and inserting a
   * token with the correct type to produce this behavior.</p>
   *
   * @param recognizer the parser instance
   * @return {@code true} if single-token insertion is a viable recovery
   * strategy for the current mismatched input, otherwise {@code false}
   */
  singleTokenInsertion(recognizer) {
    const currentSymbolType = recognizer.getTokenStream().LA(1);
    const atn3 = recognizer._interp.atn;
    const currentState = atn3.states[recognizer.state];
    const next = currentState.transitions[0].target;
    const expectingAtLL2 = atn3.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType)) {
      this.reportMissingToken(recognizer);
      return true;
    } else {
      return false;
    }
  }
  /**
   * This method implements the single-token deletion inline error recovery
   * strategy. It is called by {@link //recoverInline} to attempt to recover
   * from mismatched input. If this method returns null, the parser and error
   * handler state will not have changed. If this method returns non-null,
   * {@code recognizer} will <em>not</em> be in error recovery mode since the
   * returned token was a successful match.
   *
   * <p>If the single-token deletion is successful, this method calls
   * {@link //reportUnwantedToken} to report the error, followed by
   * {@link Parser//consume} to actually "delete" the extraneous token. Then,
   * before returning {@link //reportMatch} is called to signal a successful
   * match.</p>
   *
   * @param recognizer the parser instance
   * @return the successfully matched {@link Token} instance if single-token
   * deletion successfully recovers from the mismatched input, otherwise
   * {@code null}
   */
  singleTokenDeletion(recognizer) {
    const nextTokenType = recognizer.getTokenStream().LA(2);
    const expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
      this.reportUnwantedToken(recognizer);
      recognizer.consume();
      const matchedSymbol = recognizer.getCurrentToken();
      this.reportMatch(recognizer);
      return matchedSymbol;
    } else {
      return null;
    }
  }
  /**
   * Conjure up a missing token during error recovery.
   *
   * The recognizer attempts to recover from single missing
   * symbols. But, actions might refer to that missing symbol.
   * For example, x=ID {f($x);}. The action clearly assumes
   * that there has been an identifier matched previously and that
   * $x points at that token. If that token is missing, but
   * the next token in the stream is what we want we assume that
   * this token is missing and we keep going. Because we
   * have to return some token to replace the missing token,
   * we have to conjure one up. This method gives the user control
   * over the tokens returned for missing tokens. Mostly,
   * you will want to create something special for identifier
   * tokens. For literals such as '{' and ',', the default
   * action in the parser or tree parser works. It simply creates
   * a CommonToken of the appropriate type. The text will be the token.
   * If you change what tokens must be created by the lexer,
   * override this method to create the appropriate tokens.
   *
   */
  getMissingSymbol(recognizer) {
    const currentSymbol = recognizer.getCurrentToken();
    const expecting = this.getExpectedTokens(recognizer);
    const expectedTokenType = expecting.first();
    let tokenText;
    if (expectedTokenType === Token.EOF) {
      tokenText = "<missing EOF>";
    } else {
      tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    let current = currentSymbol;
    const lookback = recognizer.getTokenStream().LT(-1);
    if (current.type === Token.EOF && lookback !== null) {
      current = lookback;
    }
    return recognizer.getTokenFactory().create(
      current.source,
      expectedTokenType,
      tokenText,
      Token.DEFAULT_CHANNEL,
      -1,
      -1,
      current.line,
      current.column
    );
  }
  getExpectedTokens(recognizer) {
    return recognizer.getExpectedTokens();
  }
  /**
   * How should a token be displayed in an error message? The default
   * is to display just the text, but during development you might
   * want to have a lot of information spit out. Override in that case
   * to use t.toString() (which, for CommonToken, dumps everything about
   * the token). This is better than forcing you to override a method in
   * your token objects because you don't have to go modify your lexer
   * so that it creates a new Java type.
   */
  getTokenErrorDisplay(t2) {
    if (t2 === null) {
      return "<no token>";
    }
    let s = t2.text;
    if (s === null) {
      if (t2.type === Token.EOF) {
        s = "<EOF>";
      } else {
        s = "<" + t2.type + ">";
      }
    }
    return this.escapeWSAndQuote(s);
  }
  escapeWSAndQuote(s) {
    s = s.replace(/\n/g, "\\n");
    s = s.replace(/\r/g, "\\r");
    s = s.replace(/\t/g, "\\t");
    return "'" + s + "'";
  }
  /**
   * Compute the error recovery set for the current rule. During
   * rule invocation, the parser pushes the set of tokens that can
   * follow that rule reference on the stack; this amounts to
   * computing FIRST of what follows the rule reference in the
   * enclosing rule. See LinearApproximator.FIRST().
   * This local follow set only includes tokens
   * from within the rule; i.e., the FIRST computation done by
   * ANTLR stops at the end of a rule.
   *
   * EXAMPLE
   *
   * When you find a "no viable alt exception", the input is not
   * consistent with any of the alternatives for rule r. The best
   * thing to do is to consume tokens until you see something that
   * can legally follow a call to r//or* any rule that called r.
   * You don't want the exact set of viable next tokens because the
   * input might just be missing a token--you might consume the
   * rest of the input looking for one of the missing tokens.
   *
   * Consider grammar:
   *
   * a : '[' b ']'
   * | '(' b ')'
   * ;
   * b : c '^' INT ;
   * c : ID
   * | INT
   * ;
   *
   * At each rule invocation, the set of tokens that could follow
   * that rule is pushed on a stack. Here are the various
   * context-sensitive follow sets:
   *
   * FOLLOW(b1_in_a) = FIRST(']') = ']'
   * FOLLOW(b2_in_a) = FIRST(')') = ')'
   * FOLLOW(c_in_b) = FIRST('^') = '^'
   *
   * Upon erroneous input "[]", the call chain is
   *
   * a -> b -> c
   *
   * and, hence, the follow context stack is:
   *
   * depth follow set start of rule execution
   * 0 <EOF> a (from main())
   * 1 ']' b
   * 2 '^' c
   *
   * Notice that ')' is not included, because b would have to have
   * been called from a different context in rule a for ')' to be
   * included.
   *
   * For error recovery, we cannot consider FOLLOW(c)
   * (context-sensitive or otherwise). We need the combined set of
   * all context-sensitive FOLLOW sets--the set of all tokens that
   * could follow any reference in the call chain. We need to
   * resync to one of those tokens. Note that FOLLOW(c)='^' and if
   * we resync'd to that token, we'd consume until EOF. We need to
   * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
   * In this case, for input "[]", LA(1) is ']' and in the set, so we would
   * not consume anything. After printing an error, rule c would
   * return normally. Rule b would not find the required '^' though.
   * At this point, it gets a mismatched token error and throws an
   * exception (since LA(1) is not in the viable following token
   * set). The rule exception handler tries to recover, but finds
   * the same recovery set and doesn't consume anything. Rule b
   * exits normally returning to rule a. Now it finds the ']' (and
   * with the successful match exits errorRecovery mode).
   *
   * So, you can see that the parser walks up the call chain looking
   * for the token that was a member of the recovery set.
   *
   * Errors are not generated in errorRecovery mode.
   *
   * ANTLR's error recovery mechanism is based upon original ideas:
   *
   * "Algorithms + Data Structures = Programs" by Niklaus Wirth
   *
   * and
   *
   * "A note on error recovery in recursive descent parsers":
   * http://portal.acm.org/citation.cfm?id=947902.947905
   *
   * Later, Josef Grosch had some good ideas:
   *
   * "Efficient and Comfortable Error Recovery in Recursive Descent
   * Parsers":
   * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
   *
   * Like Grosch I implement context-sensitive FOLLOW sets that are combined
   * at run-time upon error to avoid overhead during parsing.
   */
  getErrorRecoverySet(recognizer) {
    const atn3 = recognizer._interp.atn;
    let ctx = recognizer._ctx;
    const recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState >= 0) {
      const invokingState = atn3.states[ctx.invokingState];
      const rt = invokingState.transitions[0];
      const follow = atn3.nextTokens(rt.followState);
      recoverSet.addSet(follow);
      ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
  }
  // Consume tokens until one matches the given token set.//
  consumeUntil(recognizer, set) {
    let ttype = recognizer.getTokenStream().LA(1);
    while (ttype !== Token.EOF && !set.contains(ttype)) {
      recognizer.consume();
      ttype = recognizer.getTokenStream().LA(1);
    }
  }
};

// node_modules/antlr4/src/antlr4/error/BailErrorStrategy.js
var BailErrorStrategy = class extends DefaultErrorStrategy {
  constructor() {
    super();
  }
  /**
   * Instead of recovering from exception {@code e}, re-throw it wrapped
   * in a {@link ParseCancellationException} so it is not caught by the
   * rule function catches. Use {@link Exception//getCause()} to get the
   * original {@link RecognitionException}.
   */
  recover(recognizer, e) {
    let context = recognizer._ctx;
    while (context !== null) {
      context.exception = e;
      context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
  }
  /**
   * Make sure we don't attempt to recover inline; if the parser
   * successfully recovers, it won't throw an exception.
   */
  recoverInline(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
  }
  // Make sure we don't attempt to recover from problems in subrules.//
  sync(recognizer) {
  }
};

// node_modules/antlr4/src/antlr4/error/index.js
var error_default = {
  RecognitionException,
  NoViableAltException,
  LexerNoViableAltException,
  InputMismatchException,
  FailedPredicateException,
  DiagnosticErrorListener,
  BailErrorStrategy,
  DefaultErrorStrategy,
  ErrorListener
};

// node_modules/antlr4/src/antlr4/InputStream.js
var InputStream = class {
  constructor(data, decodeToUnicodeCodePoints) {
    this.name = "<empty>";
    this.strdata = data;
    this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
    this._index = 0;
    this.data = [];
    if (this.decodeToUnicodeCodePoints) {
      for (let i = 0; i < this.strdata.length; ) {
        const codePoint = this.strdata.codePointAt(i);
        this.data.push(codePoint);
        i += codePoint <= 65535 ? 1 : 2;
      }
    } else {
      this.data = new Array(this.strdata.length);
      for (let i = 0; i < this.strdata.length; i++) {
        const codeUnit = this.strdata.charCodeAt(i);
        this.data[i] = codeUnit;
      }
    }
    this._size = this.data.length;
  }
  /**
   * Reset the stream so that it's in the same state it was
   * when the object was created *except* the data array is not
   * touched.
   */
  reset() {
    this._index = 0;
  }
  consume() {
    if (this._index >= this._size) {
      throw "cannot consume EOF";
    }
    this._index += 1;
  }
  LA(offset) {
    if (offset === 0) {
      return 0;
    }
    if (offset < 0) {
      offset += 1;
    }
    const pos = this._index + offset - 1;
    if (pos < 0 || pos >= this._size) {
      return Token.EOF;
    }
    return this.data[pos];
  }
  LT(offset) {
    return this.LA(offset);
  }
  // mark/release do nothing; we have entire buffer
  mark() {
    return -1;
  }
  release(marker) {
  }
  /**
   * consume() ahead until p==_index; can't just set p=_index as we must
   * update line and column. If we seek backwards, just set p
   */
  seek(_index) {
    if (_index <= this._index) {
      this._index = _index;
      return;
    }
    this._index = Math.min(_index, this._size);
  }
  getText(start, stop) {
    if (stop >= this._size) {
      stop = this._size - 1;
    }
    if (start >= this._size) {
      return "";
    } else {
      if (this.decodeToUnicodeCodePoints) {
        let result = "";
        for (let i = start; i <= stop; i++) {
          result += String.fromCodePoint(this.data[i]);
        }
        return result;
      } else {
        return this.strdata.slice(start, stop + 1);
      }
    }
  }
  toString() {
    return this.strdata;
  }
  get index() {
    return this._index;
  }
  get size() {
    return this._size;
  }
};

// node_modules/antlr4/src/antlr4/TokenStream.js
var TokenStream = class {
};

// node_modules/antlr4/src/antlr4/BufferedTokenStream.js
var BufferedTokenStream = class extends TokenStream {
  constructor(tokenSource) {
    super();
    this.tokenSource = tokenSource;
    this.tokens = [];
    this.index = -1;
    this.fetchedEOF = false;
  }
  mark() {
    return 0;
  }
  release(marker) {
  }
  reset() {
    this.seek(0);
  }
  seek(index) {
    this.lazyInit();
    this.index = this.adjustSeekIndex(index);
  }
  get(index) {
    this.lazyInit();
    return this.tokens[index];
  }
  consume() {
    let skipEofCheck = false;
    if (this.index >= 0) {
      if (this.fetchedEOF) {
        skipEofCheck = this.index < this.tokens.length - 1;
      } else {
        skipEofCheck = this.index < this.tokens.length;
      }
    } else {
      skipEofCheck = false;
    }
    if (!skipEofCheck && this.LA(1) === Token.EOF) {
      throw "cannot consume EOF";
    }
    if (this.sync(this.index + 1)) {
      this.index = this.adjustSeekIndex(this.index + 1);
    }
  }
  /**
   * Make sure index {@code i} in tokens has a token.
   *
   * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise
   * {@code false}.
   * @see //get(int i)
   */
  sync(i) {
    const n = i - this.tokens.length + 1;
    if (n > 0) {
      const fetched = this.fetch(n);
      return fetched >= n;
    }
    return true;
  }
  /**
   * Add {@code n} elements to buffer.
   *
   * @return {Number} The actual number of elements added to the buffer.
   */
  fetch(n) {
    if (this.fetchedEOF) {
      return 0;
    }
    for (let i = 0; i < n; i++) {
      const t2 = this.tokenSource.nextToken();
      t2.tokenIndex = this.tokens.length;
      this.tokens.push(t2);
      if (t2.type === Token.EOF) {
        this.fetchedEOF = true;
        return i + 1;
      }
    }
    return n;
  }
  // Get all tokens from start..stop inclusively///
  getTokens(start, stop, types2) {
    if (types2 === void 0) {
      types2 = null;
    }
    if (start < 0 || stop < 0) {
      return null;
    }
    this.lazyInit();
    const subset = [];
    if (stop >= this.tokens.length) {
      stop = this.tokens.length - 1;
    }
    for (let i = start; i < stop; i++) {
      const t2 = this.tokens[i];
      if (t2.type === Token.EOF) {
        break;
      }
      if (types2 === null || types2.contains(t2.type)) {
        subset.push(t2);
      }
    }
    return subset;
  }
  LA(i) {
    return this.LT(i).type;
  }
  LB(k) {
    if (this.index - k < 0) {
      return null;
    }
    return this.tokens[this.index - k];
  }
  LT(k) {
    this.lazyInit();
    if (k === 0) {
      return null;
    }
    if (k < 0) {
      return this.LB(-k);
    }
    const i = this.index + k - 1;
    this.sync(i);
    if (i >= this.tokens.length) {
      return this.tokens[this.tokens.length - 1];
    }
    return this.tokens[i];
  }
  /**
   * Allowed derived classes to modify the behavior of operations which change
   * the current stream position by adjusting the target token index of a seek
   * operation. The default implementation simply returns {@code i}. If an
   * exception is thrown in this method, the current stream index should not be
   * changed.
   *
   * <p>For example, {@link CommonTokenStream} overrides this method to ensure
   * that
   * the seek target is always an on-channel token.</p>
   *
   * @param {Number} i The target token index.
   * @return {Number} The adjusted target token index.
   */
  adjustSeekIndex(i) {
    return i;
  }
  lazyInit() {
    if (this.index === -1) {
      this.setup();
    }
  }
  setup() {
    this.sync(0);
    this.index = this.adjustSeekIndex(0);
  }
  // Reset this token stream by setting its token source.///
  setTokenSource(tokenSource) {
    this.tokenSource = tokenSource;
    this.tokens = [];
    this.index = -1;
    this.fetchedEOF = false;
  }
  /**
   * Given a starting index, return the index of the next token on channel.
   * Return i if tokens[i] is on channel. Return -1 if there are no tokens
   * on channel between i and EOF.
   */
  nextTokenOnChannel(i, channel) {
    this.sync(i);
    if (i >= this.tokens.length) {
      return -1;
    }
    let token = this.tokens[i];
    while (token.channel !== this.channel) {
      if (token.type === Token.EOF) {
        return -1;
      }
      i += 1;
      this.sync(i);
      token = this.tokens[i];
    }
    return i;
  }
  /**
   * Given a starting index, return the index of the previous token on channel.
   * Return i if tokens[i] is on channel. Return -1 if there are no tokens
   * on channel between i and 0.
   */
  previousTokenOnChannel(i, channel) {
    while (i >= 0 && this.tokens[i].channel !== channel) {
      i -= 1;
    }
    return i;
  }
  /**
   * Collect all tokens on specified channel to the right of
   * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
   * EOF. If channel is -1, find any non default channel token.
   */
  getHiddenTokensToRight(tokenIndex, channel) {
    if (channel === void 0) {
      channel = -1;
    }
    this.lazyInit();
    if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
      throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
    }
    const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
    const from_ = tokenIndex + 1;
    const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
    return this.filterForChannel(from_, to, channel);
  }
  /**
   * Collect all tokens on specified channel to the left of
   * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
   * If channel is -1, find any non default channel token.
   */
  getHiddenTokensToLeft(tokenIndex, channel) {
    if (channel === void 0) {
      channel = -1;
    }
    this.lazyInit();
    if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
      throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
    }
    const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
    if (prevOnChannel === tokenIndex - 1) {
      return null;
    }
    const from_ = prevOnChannel + 1;
    const to = tokenIndex - 1;
    return this.filterForChannel(from_, to, channel);
  }
  filterForChannel(left, right, channel) {
    const hidden = [];
    for (let i = left; i < right + 1; i++) {
      const t2 = this.tokens[i];
      if (channel === -1) {
        if (t2.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
          hidden.push(t2);
        }
      } else if (t2.channel === channel) {
        hidden.push(t2);
      }
    }
    if (hidden.length === 0) {
      return null;
    }
    return hidden;
  }
  getSourceName() {
    return this.tokenSource.getSourceName();
  }
  // Get the text of all tokens in this buffer.///
  getText(interval) {
    this.lazyInit();
    this.fill();
    if (interval === void 0 || interval === null) {
      interval = new Interval(0, this.tokens.length - 1);
    }
    let start = interval.start;
    if (start instanceof Token) {
      start = start.tokenIndex;
    }
    let stop = interval.stop;
    if (stop instanceof Token) {
      stop = stop.tokenIndex;
    }
    if (start === null || stop === null || start < 0 || stop < 0) {
      return "";
    }
    if (stop >= this.tokens.length) {
      stop = this.tokens.length - 1;
    }
    let s = "";
    for (let i = start; i < stop + 1; i++) {
      const t2 = this.tokens[i];
      if (t2.type === Token.EOF) {
        break;
      }
      s = s + t2.text;
    }
    return s;
  }
  // Get all tokens from lexer until EOF///
  fill() {
    this.lazyInit();
    while (this.fetch(1e3) === 1e3) {
      continue;
    }
  }
};

// node_modules/antlr4/src/antlr4/CommonTokenStream.js
var CommonTokenStream = class extends BufferedTokenStream {
  constructor(lexer, channel) {
    super(lexer);
    this.channel = channel === void 0 ? Token.DEFAULT_CHANNEL : channel;
  }
  adjustSeekIndex(i) {
    return this.nextTokenOnChannel(i, this.channel);
  }
  LB(k) {
    if (k === 0 || this.index - k < 0) {
      return null;
    }
    let i = this.index;
    let n = 1;
    while (n <= k) {
      i = this.previousTokenOnChannel(i - 1, this.channel);
      n += 1;
    }
    if (i < 0) {
      return null;
    }
    return this.tokens[i];
  }
  LT(k) {
    this.lazyInit();
    if (k === 0) {
      return null;
    }
    if (k < 0) {
      return this.LB(-k);
    }
    let i = this.index;
    let n = 1;
    while (n < k) {
      if (this.sync(i + 1)) {
        i = this.nextTokenOnChannel(i + 1, this.channel);
      }
      n += 1;
    }
    return this.tokens[i];
  }
  // Count EOF just once.
  getNumberOfOnChannelTokens() {
    let n = 0;
    this.fill();
    for (let i = 0; i < this.tokens.length; i++) {
      const t2 = this.tokens[i];
      if (t2.channel === this.channel) {
        n += 1;
      }
      if (t2.type === Token.EOF) {
        break;
      }
    }
    return n;
  }
};

// node_modules/antlr4/src/antlr4/TraceListener.js
var TraceListener = class extends ParseTreeListener {
  constructor(parser) {
    super();
    this.parser = parser;
  }
  enterEveryRule(ctx) {
    console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
  }
  visitTerminal(node) {
    console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
  }
  exitEveryRule(ctx) {
    console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
  }
};

// node_modules/antlr4/src/antlr4/Parser.js
var Parser2 = class extends Recognizer {
  /**
   * this is all the parsing support code essentially; most of it is error
   * recovery stuff.
   */
  constructor(input) {
    super();
    this._input = null;
    this._errHandler = new DefaultErrorStrategy();
    this._precedenceStack = [];
    this._precedenceStack.push(0);
    this._ctx = null;
    this.buildParseTrees = true;
    this._tracer = null;
    this._parseListeners = null;
    this._syntaxErrors = 0;
    this.setInputStream(input);
  }
  // reset the parser's state
  reset() {
    if (this._input !== null) {
      this._input.seek(0);
    }
    this._errHandler.reset(this);
    this._ctx = null;
    this._syntaxErrors = 0;
    this.setTrace(false);
    this._precedenceStack = [];
    this._precedenceStack.push(0);
    if (this._interp !== null) {
      this._interp.reset();
    }
  }
  /**
   * Match current input symbol against {@code ttype}. If the symbol type
   * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
   * called to complete the match process.
   *
   * <p>If the symbol type does not match,
   * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
   * strategy to attempt recovery. If {@link //getBuildParseTree} is
   * {@code true} and the token index of the symbol returned by
   * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
   * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
   *
   * @param ttype the token type to match
   * @return the matched symbol
   * @throws RecognitionException if the current input symbol did not match
   * {@code ttype} and the error strategy could not recover from the
   * mismatched symbol
   */
  match(ttype) {
    let t2 = this.getCurrentToken();
    if (t2.type === ttype) {
      this._errHandler.reportMatch(this);
      this.consume();
    } else {
      t2 = this._errHandler.recoverInline(this);
      if (this.buildParseTrees && t2.tokenIndex === -1) {
        this._ctx.addErrorNode(t2);
      }
    }
    return t2;
  }
  /**
   * Match current input symbol as a wildcard. If the symbol type matches
   * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
   * and {@link //consume} are called to complete the match process.
   *
   * <p>If the symbol type does not match,
   * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
   * strategy to attempt recovery. If {@link //getBuildParseTree} is
   * {@code true} and the token index of the symbol returned by
   * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
   * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
   *
   * @return the matched symbol
   * @throws RecognitionException if the current input symbol did not match
   * a wildcard and the error strategy could not recover from the mismatched
   * symbol
   */
  matchWildcard() {
    let t2 = this.getCurrentToken();
    if (t2.type > 0) {
      this._errHandler.reportMatch(this);
      this.consume();
    } else {
      t2 = this._errHandler.recoverInline(this);
      if (this._buildParseTrees && t2.tokenIndex === -1) {
        this._ctx.addErrorNode(t2);
      }
    }
    return t2;
  }
  getParseListeners() {
    return this._parseListeners || [];
  }
  /**
   * Registers {@code listener} to receive events during the parsing process.
   *
   * <p>To support output-preserving grammar transformations (including but not
   * limited to left-recursion removal, automated left-factoring, and
   * optimized code generation), calls to listener methods during the parse
   * may differ substantially from calls made by
   * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
   * particular, rule entry and exit events may occur in a different order
   * during the parse than after the parser. In addition, calls to certain
   * rule entry methods may be omitted.</p>
   *
   * <p>With the following specific exceptions, calls to listener events are
   * <em>deterministic</em>, i.e. for identical input the calls to listener
   * methods will be the same.</p>
   *
   * <ul>
   * <li>Alterations to the grammar used to generate code may change the
   * behavior of the listener calls.</li>
   * <li>Alterations to the command line options passed to ANTLR 4 when
   * generating the parser may change the behavior of the listener calls.</li>
   * <li>Changing the version of the ANTLR Tool used to generate the parser
   * may change the behavior of the listener calls.</li>
   * </ul>
   *
   * @param listener the listener to add
   *
   * @throws NullPointerException if {@code} listener is {@code null}
   */
  addParseListener(listener) {
    if (listener === null) {
      throw "listener";
    }
    if (this._parseListeners === null) {
      this._parseListeners = [];
    }
    this._parseListeners.push(listener);
  }
  /**
   * Remove {@code listener} from the list of parse listeners.
   *
   * <p>If {@code listener} is {@code null} or has not been added as a parse
   * listener, this method does nothing.</p>
   * @param listener the listener to remove
   */
  removeParseListener(listener) {
    if (this._parseListeners !== null) {
      const idx = this._parseListeners.indexOf(listener);
      if (idx >= 0) {
        this._parseListeners.splice(idx, 1);
      }
      if (this._parseListeners.length === 0) {
        this._parseListeners = null;
      }
    }
  }
  // Remove all parse listeners.
  removeParseListeners() {
    this._parseListeners = null;
  }
  // Notify any parse listeners of an enter rule event.
  triggerEnterRuleEvent() {
    if (this._parseListeners !== null) {
      const ctx = this._ctx;
      this._parseListeners.forEach(function(listener) {
        listener.enterEveryRule(ctx);
        ctx.enterRule(listener);
      });
    }
  }
  /**
   * Notify any parse listeners of an exit rule event.
   * @see //addParseListener
   */
  triggerExitRuleEvent() {
    if (this._parseListeners !== null) {
      const ctx = this._ctx;
      this._parseListeners.slice(0).reverse().forEach(function(listener) {
        ctx.exitRule(listener);
        listener.exitEveryRule(ctx);
      });
    }
  }
  getTokenFactory() {
    return this._input.tokenSource._factory;
  }
  // Tell our token source and error strategy about a new way to create tokens.
  setTokenFactory(factory) {
    this._input.tokenSource._factory = factory;
  }
  /**
   * The ATN with bypass alternatives is expensive to create so we create it
   * lazily.
   *
   * @throws UnsupportedOperationException if the current parser does not
   * implement the {@link //getSerializedATN()} method.
   */
  getATNWithBypassAlts() {
    const serializedAtn = this.getSerializedATN();
    if (serializedAtn === null) {
      throw "The current parser does not support an ATN with bypass alternatives.";
    }
    let result = this.bypassAltsAtnCache[serializedAtn];
    if (result === null) {
      const deserializationOptions = new ATNDeserializationOptions();
      deserializationOptions.generateRuleBypassTransitions = true;
      result = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn);
      this.bypassAltsAtnCache[serializedAtn] = result;
    }
    return result;
  }
  getInputStream() {
    return this.getTokenStream();
  }
  setInputStream(input) {
    this.setTokenStream(input);
  }
  getTokenStream() {
    return this._input;
  }
  // Set the token stream and reset the parser.
  setTokenStream(input) {
    this._input = null;
    this.reset();
    this._input = input;
  }
  /**
   * Match needs to return the current input symbol, which gets put
   * into the label for the associated token ref; e.g., x=ID.
   */
  getCurrentToken() {
    return this._input.LT(1);
  }
  notifyErrorListeners(msg, offendingToken, err) {
    offendingToken = offendingToken || null;
    err = err || null;
    if (offendingToken === null) {
      offendingToken = this.getCurrentToken();
    }
    this._syntaxErrors += 1;
    const line = offendingToken.line;
    const column = offendingToken.column;
    const listener = this.getErrorListenerDispatch();
    listener.syntaxError(this, offendingToken, line, column, msg, err);
  }
  /**
   * Consume and return the {@linkplain //getCurrentToken current symbol}.
   *
   * <p>E.g., given the following input with {@code A} being the current
   * lookahead symbol, this function moves the cursor to {@code B} and returns
   * {@code A}.</p>
   *
   * <pre>
   * A B
   * ^
   * </pre>
   *
   * If the parser is not in error recovery mode, the consumed symbol is added
   * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
   * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
   * If the parser <em>is</em> in error recovery mode, the consumed symbol is
   * added to the parse tree using
   * {@link ParserRuleContext//addErrorNode(Token)}, and
   * {@link ParseTreeListener//visitErrorNode} is called on any parse
   * listeners.
   */
  consume() {
    const o = this.getCurrentToken();
    if (o.type !== Token.EOF) {
      this.getInputStream().consume();
    }
    const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
    if (this.buildParseTrees || hasListener) {
      let node;
      if (this._errHandler.inErrorRecoveryMode(this)) {
        node = this._ctx.addErrorNode(o);
      } else {
        node = this._ctx.addTokenNode(o);
      }
      node.invokingState = this.state;
      if (hasListener) {
        this._parseListeners.forEach(function(listener) {
          if (node instanceof ErrorNode || node.isErrorNode !== void 0 && node.isErrorNode()) {
            listener.visitErrorNode(node);
          } else if (node instanceof TerminalNode) {
            listener.visitTerminal(node);
          }
        });
      }
    }
    return o;
  }
  addContextToParseTree() {
    if (this._ctx.parentCtx !== null) {
      this._ctx.parentCtx.addChild(this._ctx);
    }
  }
  /**
   * Always called by generated parsers upon entry to a rule. Access field
   * {@link //_ctx} get the current context.
   */
  enterRule(localctx, state, ruleIndex) {
    this.state = state;
    this._ctx = localctx;
    this._ctx.start = this._input.LT(1);
    if (this.buildParseTrees) {
      this.addContextToParseTree();
    }
    this.triggerEnterRuleEvent();
  }
  exitRule() {
    this._ctx.stop = this._input.LT(-1);
    this.triggerExitRuleEvent();
    this.state = this._ctx.invokingState;
    this._ctx = this._ctx.parentCtx;
  }
  enterOuterAlt(localctx, altNum) {
    localctx.setAltNumber(altNum);
    if (this.buildParseTrees && this._ctx !== localctx) {
      if (this._ctx.parentCtx !== null) {
        this._ctx.parentCtx.removeLastChild();
        this._ctx.parentCtx.addChild(localctx);
      }
    }
    this._ctx = localctx;
  }
  /**
   * Get the precedence level for the top-most precedence rule.
   *
   * @return The precedence level for the top-most precedence rule, or -1 if
   * the parser context is not nested within a precedence rule.
   */
  getPrecedence() {
    if (this._precedenceStack.length === 0) {
      return -1;
    } else {
      return this._precedenceStack[this._precedenceStack.length - 1];
    }
  }
  enterRecursionRule(localctx, state, ruleIndex, precedence) {
    this.state = state;
    this._precedenceStack.push(precedence);
    this._ctx = localctx;
    this._ctx.start = this._input.LT(1);
    this.triggerEnterRuleEvent();
  }
  // Like {@link //enterRule} but for recursive rules.
  pushNewRecursionContext(localctx, state, ruleIndex) {
    const previous = this._ctx;
    previous.parentCtx = localctx;
    previous.invokingState = state;
    previous.stop = this._input.LT(-1);
    this._ctx = localctx;
    this._ctx.start = previous.start;
    if (this.buildParseTrees) {
      this._ctx.addChild(previous);
    }
    this.triggerEnterRuleEvent();
  }
  unrollRecursionContexts(parentCtx) {
    this._precedenceStack.pop();
    this._ctx.stop = this._input.LT(-1);
    const retCtx = this._ctx;
    const parseListeners = this.getParseListeners();
    if (parseListeners !== null && parseListeners.length > 0) {
      while (this._ctx !== parentCtx) {
        this.triggerExitRuleEvent();
        this._ctx = this._ctx.parentCtx;
      }
    } else {
      this._ctx = parentCtx;
    }
    retCtx.parentCtx = parentCtx;
    if (this.buildParseTrees && parentCtx !== null) {
      parentCtx.addChild(retCtx);
    }
  }
  getInvokingContext(ruleIndex) {
    let ctx = this._ctx;
    while (ctx !== null) {
      if (ctx.ruleIndex === ruleIndex) {
        return ctx;
      }
      ctx = ctx.parentCtx;
    }
    return null;
  }
  precpred(localctx, precedence) {
    return precedence >= this._precedenceStack[this._precedenceStack.length - 1];
  }
  inContext(context) {
    return false;
  }
  /**
   * Checks whether or not {@code symbol} can follow the current state in the
   * ATN. The behavior of this method is equivalent to the following, but is
   * implemented such that the complete context-sensitive follow set does not
   * need to be explicitly constructed.
   *
   * <pre>
   * return getExpectedTokens().contains(symbol);
   * </pre>
   *
   * @param symbol the symbol type to check
   * @return {@code true} if {@code symbol} can follow the current state in
   * the ATN, otherwise {@code false}.
   */
  isExpectedToken(symbol) {
    const atn3 = this._interp.atn;
    let ctx = this._ctx;
    const s = atn3.states[this.state];
    let following = atn3.nextTokens(s);
    if (following.contains(symbol)) {
      return true;
    }
    if (!following.contains(Token.EPSILON)) {
      return false;
    }
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
      const invokingState = atn3.states[ctx.invokingState];
      const rt = invokingState.transitions[0];
      following = atn3.nextTokens(rt.followState);
      if (following.contains(symbol)) {
        return true;
      }
      ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
      return true;
    } else {
      return false;
    }
  }
  /**
   * Computes the set of input symbols which could follow the current parser
   * state and context, as given by {@link //getState} and {@link //getContext},
   * respectively.
   *
   * @see ATN//getExpectedTokens(int, RuleContext)
   */
  getExpectedTokens() {
    return this._interp.atn.getExpectedTokens(this.state, this._ctx);
  }
  getExpectedTokensWithinCurrentRule() {
    const atn3 = this._interp.atn;
    const s = atn3.states[this.state];
    return atn3.nextTokens(s);
  }
  // Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.
  getRuleIndex(ruleName) {
    const ruleIndex = this.getRuleIndexMap()[ruleName];
    if (ruleIndex !== null) {
      return ruleIndex;
    } else {
      return -1;
    }
  }
  /**
   * Return List&lt;String&gt; of the rule names in your parser instance
   * leading up to a call to the current rule. You could override if
   * you want more details such as the file/line info of where
   * in the ATN a rule is invoked.
   *
   * this is very useful for error messages.
   */
  getRuleInvocationStack(p) {
    p = p || null;
    if (p === null) {
      p = this._ctx;
    }
    const stack = [];
    while (p !== null) {
      const ruleIndex = p.ruleIndex;
      if (ruleIndex < 0) {
        stack.push("n/a");
      } else {
        stack.push(this.ruleNames[ruleIndex]);
      }
      p = p.parentCtx;
    }
    return stack;
  }
  // For debugging and other purposes.
  getDFAStrings() {
    return this._interp.decisionToDFA.toString();
  }
  // For debugging and other purposes.
  dumpDFA() {
    let seenOne = false;
    for (let i = 0; i < this._interp.decisionToDFA.length; i++) {
      const dfa = this._interp.decisionToDFA[i];
      if (dfa.states.length > 0) {
        if (seenOne) {
          console.log();
        }
        this.printer.println("Decision " + dfa.decision + ":");
        this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
        seenOne = true;
      }
    }
  }
  /*
      "			printer = function() {\r\n" +
      "				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
      "				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
      "			};\r\n" +
      */
  getSourceName() {
    return this._input.sourceName;
  }
  /**
   * During a parse is sometimes useful to listen in on the rule entry and exit
   * events as well as token matches. this is for quick and dirty debugging.
   */
  setTrace(trace) {
    if (!trace) {
      this.removeParseListener(this._tracer);
      this._tracer = null;
    } else {
      if (this._tracer !== null) {
        this.removeParseListener(this._tracer);
      }
      this._tracer = new TraceListener(this);
      this.addParseListener(this._tracer);
    }
  }
};
Parser2.bypassAltsAtnCache = {};

// node_modules/antlr4/src/antlr4/atn/PredictionContextCache.js
var PredictionContextCache = class {
  constructor() {
    this.cache = new HashMap();
  }
  /**
   * Add a context to the cache and return it. If the context already exists,
   * return that one instead and do not add a new context to the cache.
   * Protect shared cache from unsafe thread access.
   */
  add(ctx) {
    if (ctx === PredictionContext.EMPTY) {
      return PredictionContext.EMPTY;
    }
    const existing = this.cache.get(ctx) || null;
    if (existing !== null) {
      return existing;
    }
    this.cache.set(ctx, ctx);
    return ctx;
  }
  get(ctx) {
    return this.cache.get(ctx) || null;
  }
  get length() {
    return this.cache.length;
  }
};

// node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js
var TerminalNodeImpl = class extends TerminalNode {
  constructor(symbol) {
    super();
    this.parentCtx = null;
    this.symbol = symbol;
  }
  getChild(i) {
    return null;
  }
  getSymbol() {
    return this.symbol;
  }
  getParent() {
    return this.parentCtx;
  }
  getPayload() {
    return this.symbol;
  }
  getSourceInterval() {
    if (this.symbol === null) {
      return Interval.INVALID_INTERVAL;
    }
    const tokenIndex = this.symbol.tokenIndex;
    return new Interval(tokenIndex, tokenIndex);
  }
  getChildCount() {
    return 0;
  }
  accept(visitor) {
    return visitor.visitTerminal(this);
  }
  getText() {
    return this.symbol.text;
  }
  toString() {
    if (this.symbol.type === Token.EOF) {
      return "<EOF>";
    } else {
      return this.symbol.text;
    }
  }
};

// node_modules/antlr4/src/antlr4/tree/ErrorNodeImpl.js
var ErrorNodeImpl = class extends TerminalNodeImpl {
  constructor(token) {
    super(token);
  }
  isErrorNode() {
    return true;
  }
  accept(visitor) {
    return visitor.visitErrorNode(this);
  }
};

// node_modules/antlr4/src/antlr4/context/ParserRuleContext.js
var ParserRuleContext = class extends RuleContext {
  constructor(parent, invokingStateNumber) {
    parent = parent || null;
    invokingStateNumber = invokingStateNumber || null;
    super(parent, invokingStateNumber);
    this.ruleIndex = -1;
    this.children = null;
    this.start = null;
    this.stop = null;
    this.exception = null;
  }
  // COPY a ctx (I'm deliberately not using copy constructor)
  copyFrom(ctx) {
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    if (ctx.children) {
      this.children = [];
      ctx.children.map(function(child) {
        if (child instanceof ErrorNodeImpl) {
          this.children.push(child);
          child.parentCtx = this;
        }
      }, this);
    }
  }
  // Double dispatch methods for listeners
  enterRule(listener) {
  }
  exitRule(listener) {
  }
  // Does not set parent link; other add methods do that
  addChild(child) {
    if (this.children === null) {
      this.children = [];
    }
    this.children.push(child);
    return child;
  }
  /** Used by enterOuterAlt to toss out a RuleContext previously added as
   * we entered a rule. If we have // label, we will need to remove
   * generic ruleContext object.
   */
  removeLastChild() {
    if (this.children !== null) {
      this.children.pop();
    }
  }
  addTokenNode(token) {
    const node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
  }
  addErrorNode(badToken) {
    const node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
  }
  getChild(i, type) {
    type = type || null;
    if (this.children === null || i < 0 || i >= this.children.length) {
      return null;
    }
    if (type === null) {
      return this.children[i];
    } else {
      for (let j = 0; j < this.children.length; j++) {
        const child = this.children[j];
        if (child instanceof type) {
          if (i === 0) {
            return child;
          } else {
            i -= 1;
          }
        }
      }
      return null;
    }
  }
  getToken(ttype, i) {
    if (this.children === null || i < 0 || i >= this.children.length) {
      return null;
    }
    for (let j = 0; j < this.children.length; j++) {
      const child = this.children[j];
      if (child instanceof TerminalNode) {
        if (child.symbol.type === ttype) {
          if (i === 0) {
            return child;
          } else {
            i -= 1;
          }
        }
      }
    }
    return null;
  }
  getTokens(ttype) {
    if (this.children === null) {
      return [];
    } else {
      const tokens = [];
      for (let j = 0; j < this.children.length; j++) {
        const child = this.children[j];
        if (child instanceof TerminalNode) {
          if (child.symbol.type === ttype) {
            tokens.push(child);
          }
        }
      }
      return tokens;
    }
  }
  getTypedRuleContext(ctxType, i) {
    return this.getChild(i, ctxType);
  }
  getTypedRuleContexts(ctxType) {
    if (this.children === null) {
      return [];
    } else {
      const contexts = [];
      for (let j = 0; j < this.children.length; j++) {
        const child = this.children[j];
        if (child instanceof ctxType) {
          contexts.push(child);
        }
      }
      return contexts;
    }
  }
  getChildCount() {
    if (this.children === null) {
      return 0;
    } else {
      return this.children.length;
    }
  }
  getSourceInterval() {
    if (this.start === null || this.stop === null) {
      return Interval.INVALID_INTERVAL;
    } else {
      return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
  }
};
RuleContext.EMPTY = new ParserRuleContext();

// node_modules/antlr4/src/antlr4/utils/index.js
var utils_default = { arrayToString };

// node_modules/@neo4j-cypher/antlr4-browser/es/index.js
var antlr4 = {
  atn: atn_default,
  dfa: dfa_default,
  tree: tree_default,
  error: error_default,
  Token,
  CommonToken,
  /* CharStreams, */
  InputStream,
  /* FileStream, */
  CommonTokenStream,
  Lexer,
  Parser: Parser2,
  PredictionContextCache,
  ParserRuleContext,
  Interval,
  IntervalSet,
  LL1Analyzer,
  Utils: utils_default
};
var es_default = antlr4;

// node_modules/@neo4j-cypher/antlr4/es/CypherLexer.js
var serializedATN = [4, 0, 221, 1915, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2, 194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7, 207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2, 212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7, 216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2, 221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7, 225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2, 230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 234, 2, 235, 7, 235, 2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2, 239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7, 243, 2, 244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2, 248, 7, 248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7, 252, 2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2, 257, 7, 257, 2, 258, 7, 258, 2, 259, 7, 259, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 102, 1, 102, 1, 102, 1, 102, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 117, 1, 117, 1, 117, 1, 117, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124, 1, 125, 1, 125, 1, 125, 1, 125, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 1, 130, 1, 130, 1, 130, 1, 130, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 132, 1, 132, 1, 132, 1, 132, 1, 132, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 155, 1, 155, 1, 155, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 161, 1, 161, 1, 161, 1, 161, 1, 161, 1, 161, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 165, 1, 165, 1, 165, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 172, 1, 172, 1, 172, 1, 172, 1, 173, 1, 173, 1, 173, 1, 173, 1, 173, 1, 173, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 184, 1, 184, 1, 184, 1, 184, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 198, 1, 198, 1, 198, 1, 198, 1, 198, 3, 198, 1627, 8, 198, 5, 198, 1629, 8, 198, 10, 198, 12, 198, 1632, 9, 198, 1, 198, 1, 198, 1, 198, 1, 198, 1, 198, 1, 198, 3, 198, 1640, 8, 198, 5, 198, 1642, 8, 198, 10, 198, 12, 198, 1645, 9, 198, 1, 198, 3, 198, 1648, 8, 198, 1, 199, 1, 199, 1, 199, 4, 199, 1653, 8, 199, 11, 199, 12, 199, 1654, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 1675, 8, 200, 1, 201, 1, 201, 1, 201, 1, 201, 4, 201, 1681, 8, 201, 11, 201, 12, 201, 1682, 1, 202, 1, 202, 1, 202, 5, 202, 1688, 8, 202, 10, 202, 12, 202, 1691, 9, 202, 3, 202, 1693, 8, 202, 1, 203, 1, 203, 4, 203, 1697, 8, 203, 11, 203, 12, 203, 1698, 1, 204, 3, 204, 1702, 8, 204, 1, 205, 1, 205, 3, 205, 1706, 8, 205, 1, 206, 1, 206, 3, 206, 1710, 8, 206, 1, 207, 1, 207, 3, 207, 1714, 8, 207, 1, 208, 1, 208, 1, 209, 1, 209, 3, 209, 1720, 8, 209, 1, 210, 1, 210, 1, 211, 4, 211, 1725, 8, 211, 11, 211, 12, 211, 1726, 1, 211, 4, 211, 1730, 8, 211, 11, 211, 12, 211, 1731, 1, 211, 1, 211, 4, 211, 1736, 8, 211, 11, 211, 12, 211, 1737, 1, 211, 1, 211, 4, 211, 1742, 8, 211, 11, 211, 12, 211, 1743, 3, 211, 1746, 8, 211, 1, 211, 1, 211, 3, 211, 1750, 8, 211, 1, 211, 4, 211, 1753, 8, 211, 11, 211, 12, 211, 1754, 1, 212, 5, 212, 1758, 8, 212, 10, 212, 12, 212, 1761, 9, 212, 1, 212, 1, 212, 4, 212, 1765, 8, 212, 11, 212, 12, 212, 1766, 1, 213, 1, 213, 5, 213, 1771, 8, 213, 10, 213, 12, 213, 1774, 9, 213, 1, 214, 1, 214, 3, 214, 1778, 8, 214, 1, 215, 1, 215, 3, 215, 1782, 8, 215, 1, 216, 1, 216, 1, 216, 1, 216, 5, 216, 1788, 8, 216, 10, 216, 12, 216, 1791, 9, 216, 1, 216, 1, 216, 1, 217, 4, 217, 1796, 8, 217, 11, 217, 12, 217, 1797, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 3, 218, 1812, 8, 218, 1, 219, 1, 219, 1, 219, 1, 219, 5, 219, 1818, 8, 219, 10, 219, 12, 219, 1821, 9, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 5, 219, 1829, 8, 219, 10, 219, 12, 219, 1832, 9, 219, 3, 219, 1834, 8, 219, 1, 220, 1, 220, 1, 221, 1, 221, 1, 222, 1, 222, 1, 223, 1, 223, 1, 224, 1, 224, 1, 225, 1, 225, 1, 226, 1, 226, 1, 227, 1, 227, 1, 228, 1, 228, 1, 229, 1, 229, 1, 230, 1, 230, 1, 231, 1, 231, 1, 232, 1, 232, 1, 233, 1, 233, 1, 234, 1, 234, 1, 235, 1, 235, 1, 236, 1, 236, 1, 237, 1, 237, 1, 238, 1, 238, 1, 239, 1, 239, 1, 240, 1, 240, 1, 241, 1, 241, 1, 242, 1, 242, 1, 243, 1, 243, 1, 244, 1, 244, 1, 245, 1, 245, 1, 246, 1, 246, 1, 247, 1, 247, 1, 248, 1, 248, 1, 249, 1, 249, 1, 250, 1, 250, 1, 251, 1, 251, 1, 252, 1, 252, 1, 253, 1, 253, 1, 254, 1, 254, 1, 255, 1, 255, 1, 256, 1, 256, 1, 257, 1, 257, 1, 258, 1, 258, 1, 259, 1, 259, 1, 1819, 0, 260, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66, 133, 67, 135, 68, 137, 69, 139, 70, 141, 71, 143, 72, 145, 73, 147, 74, 149, 75, 151, 76, 153, 77, 155, 78, 157, 79, 159, 80, 161, 81, 163, 82, 165, 83, 167, 84, 169, 85, 171, 86, 173, 87, 175, 88, 177, 89, 179, 90, 181, 91, 183, 92, 185, 93, 187, 94, 189, 95, 191, 96, 193, 97, 195, 98, 197, 99, 199, 100, 201, 101, 203, 102, 205, 103, 207, 104, 209, 105, 211, 106, 213, 107, 215, 108, 217, 109, 219, 110, 221, 111, 223, 112, 225, 113, 227, 114, 229, 115, 231, 116, 233, 117, 235, 118, 237, 119, 239, 120, 241, 121, 243, 122, 245, 123, 247, 124, 249, 125, 251, 126, 253, 127, 255, 128, 257, 129, 259, 130, 261, 131, 263, 132, 265, 133, 267, 134, 269, 135, 271, 136, 273, 137, 275, 138, 277, 139, 279, 140, 281, 141, 283, 142, 285, 143, 287, 144, 289, 145, 291, 146, 293, 147, 295, 148, 297, 149, 299, 150, 301, 151, 303, 152, 305, 153, 307, 154, 309, 155, 311, 156, 313, 157, 315, 158, 317, 159, 319, 160, 321, 161, 323, 162, 325, 163, 327, 164, 329, 165, 331, 166, 333, 167, 335, 168, 337, 169, 339, 170, 341, 171, 343, 172, 345, 173, 347, 174, 349, 175, 351, 176, 353, 177, 355, 178, 357, 179, 359, 180, 361, 181, 363, 182, 365, 183, 367, 184, 369, 185, 371, 186, 373, 187, 375, 188, 377, 189, 379, 190, 381, 191, 383, 192, 385, 193, 387, 194, 389, 195, 391, 196, 393, 197, 395, 198, 397, 199, 399, 200, 401, 201, 403, 202, 405, 203, 407, 204, 409, 205, 411, 206, 413, 207, 415, 208, 417, 209, 419, 210, 421, 211, 423, 212, 425, 213, 427, 214, 429, 215, 431, 216, 433, 217, 435, 218, 437, 219, 439, 220, 441, 221, 443, 0, 445, 0, 447, 0, 449, 0, 451, 0, 453, 0, 455, 0, 457, 0, 459, 0, 461, 0, 463, 0, 465, 0, 467, 0, 469, 0, 471, 0, 473, 0, 475, 0, 477, 0, 479, 0, 481, 0, 483, 0, 485, 0, 487, 0, 489, 0, 491, 0, 493, 0, 495, 0, 497, 0, 499, 0, 501, 0, 503, 0, 505, 0, 507, 0, 509, 0, 511, 0, 513, 0, 515, 0, 517, 0, 519, 0, 1, 0, 48, 2, 0, 34, 34, 92, 92, 2, 0, 39, 39, 92, 92, 3, 0, 48, 57, 65, 70, 97, 102, 13, 0, 34, 34, 39, 39, 66, 66, 70, 70, 78, 78, 82, 82, 84, 84, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 2, 0, 85, 85, 117, 117, 2, 0, 65, 70, 97, 102, 2, 0, 69, 69, 101, 101, 6, 0, 95, 95, 8255, 8256, 8276, 8276, 65075, 65076, 65101, 65103, 65343, 65343, 1, 0, 96, 96, 8, 0, 160, 160, 5760, 5760, 6158, 6158, 8192, 8202, 8232, 8233, 8239, 8239, 8287, 8287, 12288, 12288, 2, 0, 10, 10, 13, 13, 1, 0, 12, 12, 1, 0, 30, 30, 429, 0, 48, 57, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 183, 183, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4969, 4977, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 1, 0, 29, 29, 1, 0, 28, 28, 1, 0, 13, 13, 17, 0, 36, 36, 162, 165, 1423, 1423, 1547, 1547, 2546, 2547, 2555, 2555, 2801, 2801, 3065, 3065, 3647, 3647, 6107, 6107, 8352, 8378, 43064, 43064, 65020, 65020, 65129, 65129, 65284, 65284, 65504, 65505, 65509, 65510, 1, 0, 32, 32, 1, 0, 9, 9, 1, 0, 10, 10, 1, 0, 11, 11, 1, 0, 31, 31, 370, 0, 65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12443, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 2, 0, 65, 65, 97, 97, 2, 0, 66, 66, 98, 98, 2, 0, 67, 67, 99, 99, 2, 0, 68, 68, 100, 100, 2, 0, 70, 70, 102, 102, 2, 0, 71, 71, 103, 103, 2, 0, 72, 72, 104, 104, 2, 0, 73, 73, 105, 105, 2, 0, 74, 74, 106, 106, 2, 0, 75, 75, 107, 107, 2, 0, 76, 76, 108, 108, 2, 0, 77, 77, 109, 109, 2, 0, 78, 78, 110, 110, 2, 0, 79, 79, 111, 111, 2, 0, 80, 80, 112, 112, 2, 0, 81, 81, 113, 113, 2, 0, 82, 82, 114, 114, 2, 0, 83, 83, 115, 115, 2, 0, 84, 84, 116, 116, 2, 0, 86, 86, 118, 118, 2, 0, 87, 87, 119, 119, 2, 0, 88, 88, 120, 120, 2, 0, 89, 89, 121, 121, 2, 0, 90, 90, 122, 122, 1923, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0, 0, 147, 1, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 153, 1, 0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 159, 1, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 165, 1, 0, 0, 0, 0, 167, 1, 0, 0, 0, 0, 169, 1, 0, 0, 0, 0, 171, 1, 0, 0, 0, 0, 173, 1, 0, 0, 0, 0, 175, 1, 0, 0, 0, 0, 177, 1, 0, 0, 0, 0, 179, 1, 0, 0, 0, 0, 181, 1, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 185, 1, 0, 0, 0, 0, 187, 1, 0, 0, 0, 0, 189, 1, 0, 0, 0, 0, 191, 1, 0, 0, 0, 0, 193, 1, 0, 0, 0, 0, 195, 1, 0, 0, 0, 0, 197, 1, 0, 0, 0, 0, 199, 1, 0, 0, 0, 0, 201, 1, 0, 0, 0, 0, 203, 1, 0, 0, 0, 0, 205, 1, 0, 0, 0, 0, 207, 1, 0, 0, 0, 0, 209, 1, 0, 0, 0, 0, 211, 1, 0, 0, 0, 0, 213, 1, 0, 0, 0, 0, 215, 1, 0, 0, 0, 0, 217, 1, 0, 0, 0, 0, 219, 1, 0, 0, 0, 0, 221, 1, 0, 0, 0, 0, 223, 1, 0, 0, 0, 0, 225, 1, 0, 0, 0, 0, 227, 1, 0, 0, 0, 0, 229, 1, 0, 0, 0, 0, 231, 1, 0, 0, 0, 0, 233, 1, 0, 0, 0, 0, 235, 1, 0, 0, 0, 0, 237, 1, 0, 0, 0, 0, 239, 1, 0, 0, 0, 0, 241, 1, 0, 0, 0, 0, 243, 1, 0, 0, 0, 0, 245, 1, 0, 0, 0, 0, 247, 1, 0, 0, 0, 0, 249, 1, 0, 0, 0, 0, 251, 1, 0, 0, 0, 0, 253, 1, 0, 0, 0, 0, 255, 1, 0, 0, 0, 0, 257, 1, 0, 0, 0, 0, 259, 1, 0, 0, 0, 0, 261, 1, 0, 0, 0, 0, 263, 1, 0, 0, 0, 0, 265, 1, 0, 0, 0, 0, 267, 1, 0, 0, 0, 0, 269, 1, 0, 0, 0, 0, 271, 1, 0, 0, 0, 0, 273, 1, 0, 0, 0, 0, 275, 1, 0, 0, 0, 0, 277, 1, 0, 0, 0, 0, 279, 1, 0, 0, 0, 0, 281, 1, 0, 0, 0, 0, 283, 1, 0, 0, 0, 0, 285, 1, 0, 0, 0, 0, 287, 1, 0, 0, 0, 0, 289, 1, 0, 0, 0, 0, 291, 1, 0, 0, 0, 0, 293, 1, 0, 0, 0, 0, 295, 1, 0, 0, 0, 0, 297, 1, 0, 0, 0, 0, 299, 1, 0, 0, 0, 0, 301, 1, 0, 0, 0, 0, 303, 1, 0, 0, 0, 0, 305, 1, 0, 0, 0, 0, 307, 1, 0, 0, 0, 0, 309, 1, 0, 0, 0, 0, 311, 1, 0, 0, 0, 0, 313, 1, 0, 0, 0, 0, 315, 1, 0, 0, 0, 0, 317, 1, 0, 0, 0, 0, 319, 1, 0, 0, 0, 0, 321, 1, 0, 0, 0, 0, 323, 1, 0, 0, 0, 0, 325, 1, 0, 0, 0, 0, 327, 1, 0, 0, 0, 0, 329, 1, 0, 0, 0, 0, 331, 1, 0, 0, 0, 0, 333, 1, 0, 0, 0, 0, 335, 1, 0, 0, 0, 0, 337, 1, 0, 0, 0, 0, 339, 1, 0, 0, 0, 0, 341, 1, 0, 0, 0, 0, 343, 1, 0, 0, 0, 0, 345, 1, 0, 0, 0, 0, 347, 1, 0, 0, 0, 0, 349, 1, 0, 0, 0, 0, 351, 1, 0, 0, 0, 0, 353, 1, 0, 0, 0, 0, 355, 1, 0, 0, 0, 0, 357, 1, 0, 0, 0, 0, 359, 1, 0, 0, 0, 0, 361, 1, 0, 0, 0, 0, 363, 1, 0, 0, 0, 0, 365, 1, 0, 0, 0, 0, 367, 1, 0, 0, 0, 0, 369, 1, 0, 0, 0, 0, 371, 1, 0, 0, 0, 0, 373, 1, 0, 0, 0, 0, 375, 1, 0, 0, 0, 0, 377, 1, 0, 0, 0, 0, 379, 1, 0, 0, 0, 0, 381, 1, 0, 0, 0, 0, 383, 1, 0, 0, 0, 0, 385, 1, 0, 0, 0, 0, 387, 1, 0, 0, 0, 0, 389, 1, 0, 0, 0, 0, 391, 1, 0, 0, 0, 0, 393, 1, 0, 0, 0, 0, 395, 1, 0, 0, 0, 0, 397, 1, 0, 0, 0, 0, 399, 1, 0, 0, 0, 0, 401, 1, 0, 0, 0, 0, 403, 1, 0, 0, 0, 0, 405, 1, 0, 0, 0, 0, 407, 1, 0, 0, 0, 0, 409, 1, 0, 0, 0, 0, 411, 1, 0, 0, 0, 0, 413, 1, 0, 0, 0, 0, 415, 1, 0, 0, 0, 0, 417, 1, 0, 0, 0, 0, 419, 1, 0, 0, 0, 0, 421, 1, 0, 0, 0, 0, 423, 1, 0, 0, 0, 0, 425, 1, 0, 0, 0, 0, 427, 1, 0, 0, 0, 0, 429, 1, 0, 0, 0, 0, 431, 1, 0, 0, 0, 0, 433, 1, 0, 0, 0, 0, 435, 1, 0, 0, 0, 0, 437, 1, 0, 0, 0, 0, 439, 1, 0, 0, 0, 0, 441, 1, 0, 0, 0, 1, 521, 1, 0, 0, 0, 3, 523, 1, 0, 0, 0, 5, 525, 1, 0, 0, 0, 7, 527, 1, 0, 0, 0, 9, 530, 1, 0, 0, 0, 11, 534, 1, 0, 0, 0, 13, 536, 1, 0, 0, 0, 15, 538, 1, 0, 0, 0, 17, 540, 1, 0, 0, 0, 19, 542, 1, 0, 0, 0, 21, 544, 1, 0, 0, 0, 23, 546, 1, 0, 0, 0, 25, 548, 1, 0, 0, 0, 27, 550, 1, 0, 0, 0, 29, 552, 1, 0, 0, 0, 31, 554, 1, 0, 0, 0, 33, 556, 1, 0, 0, 0, 35, 558, 1, 0, 0, 0, 37, 560, 1, 0, 0, 0, 39, 562, 1, 0, 0, 0, 41, 564, 1, 0, 0, 0, 43, 566, 1, 0, 0, 0, 45, 569, 1, 0, 0, 0, 47, 571, 1, 0, 0, 0, 49, 574, 1, 0, 0, 0, 51, 576, 1, 0, 0, 0, 53, 578, 1, 0, 0, 0, 55, 581, 1, 0, 0, 0, 57, 584, 1, 0, 0, 0, 59, 587, 1, 0, 0, 0, 61, 589, 1, 0, 0, 0, 63, 591, 1, 0, 0, 0, 65, 594, 1, 0, 0, 0, 67, 597, 1, 0, 0, 0, 69, 599, 1, 0, 0, 0, 71, 601, 1, 0, 0, 0, 73, 603, 1, 0, 0, 0, 75, 605, 1, 0, 0, 0, 77, 607, 1, 0, 0, 0, 79, 609, 1, 0, 0, 0, 81, 611, 1, 0, 0, 0, 83, 613, 1, 0, 0, 0, 85, 615, 1, 0, 0, 0, 87, 617, 1, 0, 0, 0, 89, 619, 1, 0, 0, 0, 91, 621, 1, 0, 0, 0, 93, 623, 1, 0, 0, 0, 95, 625, 1, 0, 0, 0, 97, 627, 1, 0, 0, 0, 99, 629, 1, 0, 0, 0, 101, 631, 1, 0, 0, 0, 103, 633, 1, 0, 0, 0, 105, 635, 1, 0, 0, 0, 107, 637, 1, 0, 0, 0, 109, 644, 1, 0, 0, 0, 111, 652, 1, 0, 0, 0, 113, 660, 1, 0, 0, 0, 115, 666, 1, 0, 0, 0, 117, 675, 1, 0, 0, 0, 119, 682, 1, 0, 0, 0, 121, 688, 1, 0, 0, 0, 123, 692, 1, 0, 0, 0, 125, 699, 1, 0, 0, 0, 127, 704, 1, 0, 0, 0, 129, 710, 1, 0, 0, 0, 131, 713, 1, 0, 0, 0, 133, 724, 1, 0, 0, 0, 135, 731, 1, 0, 0, 0, 137, 734, 1, 0, 0, 0, 139, 741, 1, 0, 0, 0, 141, 748, 1, 0, 0, 0, 143, 753, 1, 0, 0, 0, 145, 757, 1, 0, 0, 0, 147, 762, 1, 0, 0, 0, 149, 770, 1, 0, 0, 0, 151, 775, 1, 0, 0, 0, 153, 778, 1, 0, 0, 0, 155, 794, 1, 0, 0, 0, 157, 803, 1, 0, 0, 0, 159, 809, 1, 0, 0, 0, 161, 816, 1, 0, 0, 0, 163, 822, 1, 0, 0, 0, 165, 826, 1, 0, 0, 0, 167, 833, 1, 0, 0, 0, 169, 840, 1, 0, 0, 0, 171, 847, 1, 0, 0, 0, 173, 855, 1, 0, 0, 0, 175, 858, 1, 0, 0, 0, 177, 867, 1, 0, 0, 0, 179, 874, 1, 0, 0, 0, 181, 880, 1, 0, 0, 0, 183, 883, 1, 0, 0, 0, 185, 888, 1, 0, 0, 0, 187, 894, 1, 0, 0, 0, 189, 904, 1, 0, 0, 0, 191, 908, 1, 0, 0, 0, 193, 919, 1, 0, 0, 0, 195, 924, 1, 0, 0, 0, 197, 929, 1, 0, 0, 0, 199, 934, 1, 0, 0, 0, 201, 940, 1, 0, 0, 0, 203, 945, 1, 0, 0, 0, 205, 958, 1, 0, 0, 0, 207, 962, 1, 0, 0, 0, 209, 968, 1, 0, 0, 0, 211, 981, 1, 0, 0, 0, 213, 998, 1, 0, 0, 0, 215, 1001, 1, 0, 0, 0, 217, 1005, 1, 0, 0, 0, 219, 1009, 1, 0, 0, 0, 221, 1013, 1, 0, 0, 0, 223, 1020, 1, 0, 0, 0, 225, 1025, 1, 0, 0, 0, 227, 1034, 1, 0, 0, 0, 229, 1039, 1, 0, 0, 0, 231, 1045, 1, 0, 0, 0, 233, 1052, 1, 0, 0, 0, 235, 1060, 1, 0, 0, 0, 237, 1064, 1, 0, 0, 0, 239, 1069, 1, 0, 0, 0, 241, 1076, 1, 0, 0, 0, 243, 1081, 1, 0, 0, 0, 245, 1087, 1, 0, 0, 0, 247, 1094, 1, 0, 0, 0, 249, 1099, 1, 0, 0, 0, 251, 1104, 1, 0, 0, 0, 253, 1108, 1, 0, 0, 0, 255, 1113, 1, 0, 0, 0, 257, 1118, 1, 0, 0, 0, 259, 1123, 1, 0, 0, 0, 261, 1129, 1, 0, 0, 0, 263, 1133, 1, 0, 0, 0, 265, 1141, 1, 0, 0, 0, 267, 1146, 1, 0, 0, 0, 269, 1154, 1, 0, 0, 0, 271, 1159, 1, 0, 0, 0, 273, 1168, 1, 0, 0, 0, 275, 1178, 1, 0, 0, 0, 277, 1184, 1, 0, 0, 0, 279, 1191, 1, 0, 0, 0, 281, 1199, 1, 0, 0, 0, 283, 1202, 1, 0, 0, 0, 285, 1207, 1, 0, 0, 0, 287, 1212, 1, 0, 0, 0, 289, 1218, 1, 0, 0, 0, 291, 1223, 1, 0, 0, 0, 293, 1229, 1, 0, 0, 0, 295, 1239, 1, 0, 0, 0, 297, 1248, 1, 0, 0, 0, 299, 1255, 1, 0, 0, 0, 301, 1264, 1, 0, 0, 0, 303, 1271, 1, 0, 0, 0, 305, 1278, 1, 0, 0, 0, 307, 1288, 1, 0, 0, 0, 309, 1294, 1, 0, 0, 0, 311, 1302, 1, 0, 0, 0, 313, 1305, 1, 0, 0, 0, 315, 1316, 1, 0, 0, 0, 317, 1322, 1, 0, 0, 0, 319, 1327, 1, 0, 0, 0, 321, 1334, 1, 0, 0, 0, 323, 1348, 1, 0, 0, 0, 325, 1354, 1, 0, 0, 0, 327, 1362, 1, 0, 0, 0, 329, 1371, 1, 0, 0, 0, 331, 1376, 1, 0, 0, 0, 333, 1379, 1, 0, 0, 0, 335, 1388, 1, 0, 0, 0, 337, 1393, 1, 0, 0, 0, 339, 1399, 1, 0, 0, 0, 341, 1406, 1, 0, 0, 0, 343, 1414, 1, 0, 0, 0, 345, 1425, 1, 0, 0, 0, 347, 1429, 1, 0, 0, 0, 349, 1435, 1, 0, 0, 0, 351, 1442, 1, 0, 0, 0, 353, 1447, 1, 0, 0, 0, 355, 1453, 1, 0, 0, 0, 357, 1458, 1, 0, 0, 0, 359, 1464, 1, 0, 0, 0, 361, 1473, 1, 0, 0, 0, 363, 1485, 1, 0, 0, 0, 365, 1492, 1, 0, 0, 0, 367, 1498, 1, 0, 0, 0, 369, 1504, 1, 0, 0, 0, 371, 1508, 1, 0, 0, 0, 373, 1516, 1, 0, 0, 0, 375, 1524, 1, 0, 0, 0, 377, 1532, 1, 0, 0, 0, 379, 1541, 1, 0, 0, 0, 381, 1551, 1, 0, 0, 0, 383, 1559, 1, 0, 0, 0, 385, 1569, 1, 0, 0, 0, 387, 1580, 1, 0, 0, 0, 389, 1586, 1, 0, 0, 0, 391, 1600, 1, 0, 0, 0, 393, 1606, 1, 0, 0, 0, 395, 1614, 1, 0, 0, 0, 397, 1647, 1, 0, 0, 0, 399, 1652, 1, 0, 0, 0, 401, 1656, 1, 0, 0, 0, 403, 1676, 1, 0, 0, 0, 405, 1692, 1, 0, 0, 0, 407, 1694, 1, 0, 0, 0, 409, 1701, 1, 0, 0, 0, 411, 1705, 1, 0, 0, 0, 413, 1709, 1, 0, 0, 0, 415, 1713, 1, 0, 0, 0, 417, 1715, 1, 0, 0, 0, 419, 1719, 1, 0, 0, 0, 421, 1721, 1, 0, 0, 0, 423, 1745, 1, 0, 0, 0, 425, 1759, 1, 0, 0, 0, 427, 1768, 1, 0, 0, 0, 429, 1777, 1, 0, 0, 0, 431, 1781, 1, 0, 0, 0, 433, 1783, 1, 0, 0, 0, 435, 1795, 1, 0, 0, 0, 437, 1811, 1, 0, 0, 0, 439, 1833, 1, 0, 0, 0, 441, 1835, 1, 0, 0, 0, 443, 1837, 1, 0, 0, 0, 445, 1839, 1, 0, 0, 0, 447, 1841, 1, 0, 0, 0, 449, 1843, 1, 0, 0, 0, 451, 1845, 1, 0, 0, 0, 453, 1847, 1, 0, 0, 0, 455, 1849, 1, 0, 0, 0, 457, 1851, 1, 0, 0, 0, 459, 1853, 1, 0, 0, 0, 461, 1855, 1, 0, 0, 0, 463, 1857, 1, 0, 0, 0, 465, 1859, 1, 0, 0, 0, 467, 1861, 1, 0, 0, 0, 469, 1863, 1, 0, 0, 0, 471, 1865, 1, 0, 0, 0, 473, 1867, 1, 0, 0, 0, 475, 1869, 1, 0, 0, 0, 477, 1871, 1, 0, 0, 0, 479, 1873, 1, 0, 0, 0, 481, 1875, 1, 0, 0, 0, 483, 1877, 1, 0, 0, 0, 485, 1879, 1, 0, 0, 0, 487, 1881, 1, 0, 0, 0, 489, 1883, 1, 0, 0, 0, 491, 1885, 1, 0, 0, 0, 493, 1887, 1, 0, 0, 0, 495, 1889, 1, 0, 0, 0, 497, 1891, 1, 0, 0, 0, 499, 1893, 1, 0, 0, 0, 501, 1895, 1, 0, 0, 0, 503, 1897, 1, 0, 0, 0, 505, 1899, 1, 0, 0, 0, 507, 1901, 1, 0, 0, 0, 509, 1903, 1, 0, 0, 0, 511, 1905, 1, 0, 0, 0, 513, 1907, 1, 0, 0, 0, 515, 1909, 1, 0, 0, 0, 517, 1911, 1, 0, 0, 0, 519, 1913, 1, 0, 0, 0, 521, 522, 5, 59, 0, 0, 522, 2, 1, 0, 0, 0, 523, 524, 5, 58, 0, 0, 524, 4, 1, 0, 0, 0, 525, 526, 5, 45, 0, 0, 526, 6, 1, 0, 0, 0, 527, 528, 5, 61, 0, 0, 528, 529, 5, 62, 0, 0, 529, 8, 1, 0, 0, 0, 530, 531, 5, 58, 0, 0, 531, 532, 5, 47, 0, 0, 532, 533, 5, 47, 0, 0, 533, 10, 1, 0, 0, 0, 534, 535, 5, 47, 0, 0, 535, 12, 1, 0, 0, 0, 536, 537, 5, 46, 0, 0, 537, 14, 1, 0, 0, 0, 538, 539, 5, 64, 0, 0, 539, 16, 1, 0, 0, 0, 540, 541, 5, 35, 0, 0, 541, 18, 1, 0, 0, 0, 542, 543, 5, 63, 0, 0, 543, 20, 1, 0, 0, 0, 544, 545, 5, 38, 0, 0, 545, 22, 1, 0, 0, 0, 546, 547, 5, 61, 0, 0, 547, 24, 1, 0, 0, 0, 548, 549, 5, 43, 0, 0, 549, 26, 1, 0, 0, 0, 550, 551, 5, 123, 0, 0, 551, 28, 1, 0, 0, 0, 552, 553, 5, 44, 0, 0, 553, 30, 1, 0, 0, 0, 554, 555, 5, 125, 0, 0, 555, 32, 1, 0, 0, 0, 556, 557, 5, 91, 0, 0, 557, 34, 1, 0, 0, 0, 558, 559, 5, 93, 0, 0, 559, 36, 1, 0, 0, 0, 560, 561, 5, 42, 0, 0, 561, 38, 1, 0, 0, 0, 562, 563, 5, 40, 0, 0, 563, 40, 1, 0, 0, 0, 564, 565, 5, 41, 0, 0, 565, 42, 1, 0, 0, 0, 566, 567, 5, 43, 0, 0, 567, 568, 5, 61, 0, 0, 568, 44, 1, 0, 0, 0, 569, 570, 5, 124, 0, 0, 570, 46, 1, 0, 0, 0, 571, 572, 5, 46, 0, 0, 572, 573, 5, 46, 0, 0, 573, 48, 1, 0, 0, 0, 574, 575, 5, 37, 0, 0, 575, 50, 1, 0, 0, 0, 576, 577, 5, 94, 0, 0, 577, 52, 1, 0, 0, 0, 578, 579, 5, 61, 0, 0, 579, 580, 5, 126, 0, 0, 580, 54, 1, 0, 0, 0, 581, 582, 5, 60, 0, 0, 582, 583, 5, 62, 0, 0, 583, 56, 1, 0, 0, 0, 584, 585, 5, 33, 0, 0, 585, 586, 5, 61, 0, 0, 586, 58, 1, 0, 0, 0, 587, 588, 5, 60, 0, 0, 588, 60, 1, 0, 0, 0, 589, 590, 5, 62, 0, 0, 590, 62, 1, 0, 0, 0, 591, 592, 5, 60, 0, 0, 592, 593, 5, 61, 0, 0, 593, 64, 1, 0, 0, 0, 594, 595, 5, 62, 0, 0, 595, 596, 5, 61, 0, 0, 596, 66, 1, 0, 0, 0, 597, 598, 5, 36, 0, 0, 598, 68, 1, 0, 0, 0, 599, 600, 5, 10216, 0, 0, 600, 70, 1, 0, 0, 0, 601, 602, 5, 12296, 0, 0, 602, 72, 1, 0, 0, 0, 603, 604, 5, 65124, 0, 0, 604, 74, 1, 0, 0, 0, 605, 606, 5, 65308, 0, 0, 606, 76, 1, 0, 0, 0, 607, 608, 5, 10217, 0, 0, 608, 78, 1, 0, 0, 0, 609, 610, 5, 12297, 0, 0, 610, 80, 1, 0, 0, 0, 611, 612, 5, 65125, 0, 0, 612, 82, 1, 0, 0, 0, 613, 614, 5, 65310, 0, 0, 614, 84, 1, 0, 0, 0, 615, 616, 5, 173, 0, 0, 616, 86, 1, 0, 0, 0, 617, 618, 5, 8208, 0, 0, 618, 88, 1, 0, 0, 0, 619, 620, 5, 8209, 0, 0, 620, 90, 1, 0, 0, 0, 621, 622, 5, 8210, 0, 0, 622, 92, 1, 0, 0, 0, 623, 624, 5, 8211, 0, 0, 624, 94, 1, 0, 0, 0, 625, 626, 5, 8212, 0, 0, 626, 96, 1, 0, 0, 0, 627, 628, 5, 8213, 0, 0, 628, 98, 1, 0, 0, 0, 629, 630, 5, 8722, 0, 0, 630, 100, 1, 0, 0, 0, 631, 632, 5, 65112, 0, 0, 632, 102, 1, 0, 0, 0, 633, 634, 5, 65123, 0, 0, 634, 104, 1, 0, 0, 0, 635, 636, 5, 65293, 0, 0, 636, 106, 1, 0, 0, 0, 637, 638, 3, 473, 236, 0, 638, 639, 3, 517, 258, 0, 639, 640, 3, 499, 249, 0, 640, 641, 3, 483, 241, 0, 641, 642, 3, 477, 238, 0, 642, 643, 3, 503, 251, 0, 643, 108, 1, 0, 0, 0, 644, 645, 3, 477, 238, 0, 645, 646, 3, 515, 257, 0, 646, 647, 3, 499, 249, 0, 647, 648, 3, 491, 245, 0, 648, 649, 3, 469, 234, 0, 649, 650, 3, 485, 242, 0, 650, 651, 3, 495, 247, 0, 651, 110, 1, 0, 0, 0, 652, 653, 3, 499, 249, 0, 653, 654, 3, 503, 251, 0, 654, 655, 3, 497, 248, 0, 655, 656, 3, 479, 239, 0, 656, 657, 3, 485, 242, 0, 657, 658, 3, 491, 245, 0, 658, 659, 3, 477, 238, 0, 659, 112, 1, 0, 0, 0, 660, 661, 3, 509, 254, 0, 661, 662, 3, 505, 252, 0, 662, 663, 3, 485, 242, 0, 663, 664, 3, 495, 247, 0, 664, 665, 3, 481, 240, 0, 665, 114, 1, 0, 0, 0, 666, 667, 3, 499, 249, 0, 667, 668, 3, 477, 238, 0, 668, 669, 3, 503, 251, 0, 669, 670, 3, 485, 242, 0, 670, 671, 3, 497, 248, 0, 671, 672, 3, 475, 237, 0, 672, 673, 3, 485, 242, 0, 673, 674, 3, 473, 236, 0, 674, 116, 1, 0, 0, 0, 675, 676, 3, 473, 236, 0, 676, 677, 3, 497, 248, 0, 677, 678, 3, 493, 246, 0, 678, 679, 3, 493, 246, 0, 679, 680, 3, 485, 242, 0, 680, 681, 3, 507, 253, 0, 681, 118, 1, 0, 0, 0, 682, 683, 3, 509, 254, 0, 683, 684, 3, 495, 247, 0, 684, 685, 3, 485, 242, 0, 685, 686, 3, 497, 248, 0, 686, 687, 3, 495, 247, 0, 687, 120, 1, 0, 0, 0, 688, 689, 3, 469, 234, 0, 689, 690, 3, 491, 245, 0, 690, 691, 3, 491, 245, 0, 691, 122, 1, 0, 0, 0, 692, 693, 3, 473, 236, 0, 693, 694, 3, 503, 251, 0, 694, 695, 3, 477, 238, 0, 695, 696, 3, 469, 234, 0, 696, 697, 3, 507, 253, 0, 697, 698, 3, 477, 238, 0, 698, 124, 1, 0, 0, 0, 699, 700, 3, 475, 237, 0, 700, 701, 3, 503, 251, 0, 701, 702, 3, 497, 248, 0, 702, 703, 3, 499, 249, 0, 703, 126, 1, 0, 0, 0, 704, 705, 3, 485, 242, 0, 705, 706, 3, 495, 247, 0, 706, 707, 3, 475, 237, 0, 707, 708, 3, 477, 238, 0, 708, 709, 3, 515, 257, 0, 709, 128, 1, 0, 0, 0, 710, 711, 3, 497, 248, 0, 711, 712, 3, 495, 247, 0, 712, 130, 1, 0, 0, 0, 713, 714, 3, 473, 236, 0, 714, 715, 3, 497, 248, 0, 715, 716, 3, 495, 247, 0, 716, 717, 3, 505, 252, 0, 717, 718, 3, 507, 253, 0, 718, 719, 3, 503, 251, 0, 719, 720, 3, 469, 234, 0, 720, 721, 3, 485, 242, 0, 721, 722, 3, 495, 247, 0, 722, 723, 3, 507, 253, 0, 723, 132, 1, 0, 0, 0, 724, 725, 3, 469, 234, 0, 725, 726, 3, 505, 252, 0, 726, 727, 3, 505, 252, 0, 727, 728, 3, 477, 238, 0, 728, 729, 3, 503, 251, 0, 729, 730, 3, 507, 253, 0, 730, 134, 1, 0, 0, 0, 731, 732, 3, 485, 242, 0, 732, 733, 3, 505, 252, 0, 733, 136, 1, 0, 0, 0, 734, 735, 3, 509, 254, 0, 735, 736, 3, 495, 247, 0, 736, 737, 3, 485, 242, 0, 737, 738, 3, 501, 250, 0, 738, 739, 3, 509, 254, 0, 739, 740, 3, 477, 238, 0, 740, 138, 1, 0, 0, 0, 741, 742, 3, 477, 238, 0, 742, 743, 3, 515, 257, 0, 743, 744, 3, 485, 242, 0, 744, 745, 3, 505, 252, 0, 745, 746, 3, 507, 253, 0, 746, 747, 3, 505, 252, 0, 747, 140, 1, 0, 0, 0, 748, 749, 3, 491, 245, 0, 749, 750, 3, 497, 248, 0, 750, 751, 3, 469, 234, 0, 751, 752, 3, 475, 237, 0, 752, 142, 1, 0, 0, 0, 753, 754, 3, 473, 236, 0, 754, 755, 3, 505, 252, 0, 755, 756, 3, 511, 255, 0, 756, 144, 1, 0, 0, 0, 757, 758, 3, 513, 256, 0, 758, 759, 3, 485, 242, 0, 759, 760, 3, 507, 253, 0, 760, 761, 3, 483, 241, 0, 761, 146, 1, 0, 0, 0, 762, 763, 3, 483, 241, 0, 763, 764, 3, 477, 238, 0, 764, 765, 3, 469, 234, 0, 765, 766, 3, 475, 237, 0, 766, 767, 3, 477, 238, 0, 767, 768, 3, 503, 251, 0, 768, 769, 3, 505, 252, 0, 769, 148, 1, 0, 0, 0, 770, 771, 3, 479, 239, 0, 771, 772, 3, 503, 251, 0, 772, 773, 3, 497, 248, 0, 773, 774, 3, 493, 246, 0, 774, 150, 1, 0, 0, 0, 775, 776, 3, 469, 234, 0, 776, 777, 3, 505, 252, 0, 777, 152, 1, 0, 0, 0, 778, 779, 3, 479, 239, 0, 779, 780, 3, 485, 242, 0, 780, 781, 3, 477, 238, 0, 781, 782, 3, 491, 245, 0, 782, 783, 3, 475, 237, 0, 783, 784, 3, 507, 253, 0, 784, 785, 3, 477, 238, 0, 785, 786, 3, 503, 251, 0, 786, 787, 3, 493, 246, 0, 787, 788, 3, 485, 242, 0, 788, 789, 3, 495, 247, 0, 789, 790, 3, 469, 234, 0, 790, 791, 3, 507, 253, 0, 791, 792, 3, 497, 248, 0, 792, 793, 3, 503, 251, 0, 793, 154, 1, 0, 0, 0, 794, 795, 3, 497, 248, 0, 795, 796, 3, 499, 249, 0, 796, 797, 3, 507, 253, 0, 797, 798, 3, 485, 242, 0, 798, 799, 3, 497, 248, 0, 799, 800, 3, 495, 247, 0, 800, 801, 3, 469, 234, 0, 801, 802, 3, 491, 245, 0, 802, 156, 1, 0, 0, 0, 803, 804, 3, 493, 246, 0, 804, 805, 3, 469, 234, 0, 805, 806, 3, 507, 253, 0, 806, 807, 3, 473, 236, 0, 807, 808, 3, 483, 241, 0, 808, 158, 1, 0, 0, 0, 809, 810, 3, 509, 254, 0, 810, 811, 3, 495, 247, 0, 811, 812, 3, 513, 256, 0, 812, 813, 3, 485, 242, 0, 813, 814, 3, 495, 247, 0, 814, 815, 3, 475, 237, 0, 815, 160, 1, 0, 0, 0, 816, 817, 3, 493, 246, 0, 817, 818, 3, 477, 238, 0, 818, 819, 3, 503, 251, 0, 819, 820, 3, 481, 240, 0, 820, 821, 3, 477, 238, 0, 821, 162, 1, 0, 0, 0, 822, 823, 3, 505, 252, 0, 823, 824, 3, 477, 238, 0, 824, 825, 3, 507, 253, 0, 825, 164, 1, 0, 0, 0, 826, 827, 3, 475, 237, 0, 827, 828, 3, 477, 238, 0, 828, 829, 3, 507, 253, 0, 829, 830, 3, 469, 234, 0, 830, 831, 3, 473, 236, 0, 831, 832, 3, 483, 241, 0, 832, 166, 1, 0, 0, 0, 833, 834, 3, 475, 237, 0, 834, 835, 3, 477, 238, 0, 835, 836, 3, 491, 245, 0, 836, 837, 3, 477, 238, 0, 837, 838, 3, 507, 253, 0, 838, 839, 3, 477, 238, 0, 839, 168, 1, 0, 0, 0, 840, 841, 3, 503, 251, 0, 841, 842, 3, 477, 238, 0, 842, 843, 3, 493, 246, 0, 843, 844, 3, 497, 248, 0, 844, 845, 3, 511, 255, 0, 845, 846, 3, 477, 238, 0, 846, 170, 1, 0, 0, 0, 847, 848, 3, 479, 239, 0, 848, 849, 3, 497, 248, 0, 849, 850, 3, 503, 251, 0, 850, 851, 3, 477, 238, 0, 851, 852, 3, 469, 234, 0, 852, 853, 3, 473, 236, 0, 853, 854, 3, 483, 241, 0, 854, 172, 1, 0, 0, 0, 855, 856, 3, 485, 242, 0, 856, 857, 3, 495, 247, 0, 857, 174, 1, 0, 0, 0, 858, 859, 3, 475, 237, 0, 859, 860, 3, 485, 242, 0, 860, 861, 3, 505, 252, 0, 861, 862, 3, 507, 253, 0, 862, 863, 3, 485, 242, 0, 863, 864, 3, 495, 247, 0, 864, 865, 3, 473, 236, 0, 865, 866, 3, 507, 253, 0, 866, 176, 1, 0, 0, 0, 867, 868, 3, 503, 251, 0, 868, 869, 3, 477, 238, 0, 869, 870, 3, 507, 253, 0, 870, 871, 3, 509, 254, 0, 871, 872, 3, 503, 251, 0, 872, 873, 3, 495, 247, 0, 873, 178, 1, 0, 0, 0, 874, 875, 3, 497, 248, 0, 875, 876, 3, 503, 251, 0, 876, 877, 3, 475, 237, 0, 877, 878, 3, 477, 238, 0, 878, 879, 3, 503, 251, 0, 879, 180, 1, 0, 0, 0, 880, 881, 3, 471, 235, 0, 881, 882, 3, 517, 258, 0, 882, 182, 1, 0, 0, 0, 883, 884, 3, 505, 252, 0, 884, 885, 3, 489, 244, 0, 885, 886, 3, 485, 242, 0, 886, 887, 3, 499, 249, 0, 887, 184, 1, 0, 0, 0, 888, 889, 3, 491, 245, 0, 889, 890, 3, 485, 242, 0, 890, 891, 3, 493, 246, 0, 891, 892, 3, 485, 242, 0, 892, 893, 3, 507, 253, 0, 893, 186, 1, 0, 0, 0, 894, 895, 3, 469, 234, 0, 895, 896, 3, 505, 252, 0, 896, 897, 3, 473, 236, 0, 897, 898, 3, 477, 238, 0, 898, 899, 3, 495, 247, 0, 899, 900, 3, 475, 237, 0, 900, 901, 3, 485, 242, 0, 901, 902, 3, 495, 247, 0, 902, 903, 3, 481, 240, 0, 903, 188, 1, 0, 0, 0, 904, 905, 3, 469, 234, 0, 905, 906, 3, 505, 252, 0, 906, 907, 3, 473, 236, 0, 907, 190, 1, 0, 0, 0, 908, 909, 3, 475, 237, 0, 909, 910, 3, 477, 238, 0, 910, 911, 3, 505, 252, 0, 911, 912, 3, 473, 236, 0, 912, 913, 3, 477, 238, 0, 913, 914, 3, 495, 247, 0, 914, 915, 3, 475, 237, 0, 915, 916, 3, 485, 242, 0, 916, 917, 3, 495, 247, 0, 917, 918, 3, 481, 240, 0, 918, 192, 1, 0, 0, 0, 919, 920, 3, 475, 237, 0, 920, 921, 3, 477, 238, 0, 921, 922, 3, 505, 252, 0, 922, 923, 3, 473, 236, 0, 923, 194, 1, 0, 0, 0, 924, 925, 3, 487, 243, 0, 925, 926, 3, 497, 248, 0, 926, 927, 3, 485, 242, 0, 927, 928, 3, 495, 247, 0, 928, 196, 1, 0, 0, 0, 929, 930, 3, 505, 252, 0, 930, 931, 3, 473, 236, 0, 931, 932, 3, 469, 234, 0, 932, 933, 3, 495, 247, 0, 933, 198, 1, 0, 0, 0, 934, 935, 3, 505, 252, 0, 935, 936, 3, 507, 253, 0, 936, 937, 3, 469, 234, 0, 937, 938, 3, 503, 251, 0, 938, 939, 3, 507, 253, 0, 939, 200, 1, 0, 0, 0, 940, 941, 3, 495, 247, 0, 941, 942, 3, 497, 248, 0, 942, 943, 3, 475, 237, 0, 943, 944, 3, 477, 238, 0, 944, 202, 1, 0, 0, 0, 945, 946, 3, 503, 251, 0, 946, 947, 3, 477, 238, 0, 947, 948, 3, 491, 245, 0, 948, 949, 3, 469, 234, 0, 949, 950, 3, 507, 253, 0, 950, 951, 3, 485, 242, 0, 951, 952, 3, 497, 248, 0, 952, 953, 3, 495, 247, 0, 953, 954, 3, 505, 252, 0, 954, 955, 3, 483, 241, 0, 955, 956, 3, 485, 242, 0, 956, 957, 3, 499, 249, 0, 957, 204, 1, 0, 0, 0, 958, 959, 3, 503, 251, 0, 959, 960, 3, 477, 238, 0, 960, 961, 3, 491, 245, 0, 961, 206, 1, 0, 0, 0, 962, 963, 3, 513, 256, 0, 963, 964, 3, 483, 241, 0, 964, 965, 3, 477, 238, 0, 965, 966, 3, 503, 251, 0, 966, 967, 3, 477, 238, 0, 967, 208, 1, 0, 0, 0, 968, 969, 3, 505, 252, 0, 969, 970, 3, 483, 241, 0, 970, 971, 3, 497, 248, 0, 971, 972, 3, 503, 251, 0, 972, 973, 3, 507, 253, 0, 973, 974, 3, 477, 238, 0, 974, 975, 3, 505, 252, 0, 975, 976, 3, 507, 253, 0, 976, 977, 3, 499, 249, 0, 977, 978, 3, 469, 234, 0, 978, 979, 3, 507, 253, 0, 979, 980, 3, 483, 241, 0, 980, 210, 1, 0, 0, 0, 981, 982, 3, 469, 234, 0, 982, 983, 3, 491, 245, 0, 983, 984, 3, 491, 245, 0, 984, 985, 3, 505, 252, 0, 985, 986, 3, 483, 241, 0, 986, 987, 3, 497, 248, 0, 987, 988, 3, 503, 251, 0, 988, 989, 3, 507, 253, 0, 989, 990, 3, 477, 238, 0, 990, 991, 3, 505, 252, 0, 991, 992, 3, 507, 253, 0, 992, 993, 3, 499, 249, 0, 993, 994, 3, 469, 234, 0, 994, 995, 3, 507, 253, 0, 995, 996, 3, 483, 241, 0, 996, 997, 3, 505, 252, 0, 997, 212, 1, 0, 0, 0, 998, 999, 3, 497, 248, 0, 999, 1e3, 3, 503, 251, 0, 1e3, 214, 1, 0, 0, 0, 1001, 1002, 3, 515, 257, 0, 1002, 1003, 3, 497, 248, 0, 1003, 1004, 3, 503, 251, 0, 1004, 216, 1, 0, 0, 0, 1005, 1006, 3, 469, 234, 0, 1006, 1007, 3, 495, 247, 0, 1007, 1008, 3, 475, 237, 0, 1008, 218, 1, 0, 0, 0, 1009, 1010, 3, 495, 247, 0, 1010, 1011, 3, 497, 248, 0, 1011, 1012, 3, 507, 253, 0, 1012, 220, 1, 0, 0, 0, 1013, 1014, 3, 505, 252, 0, 1014, 1015, 3, 507, 253, 0, 1015, 1016, 3, 469, 234, 0, 1016, 1017, 3, 503, 251, 0, 1017, 1018, 3, 507, 253, 0, 1018, 1019, 3, 505, 252, 0, 1019, 222, 1, 0, 0, 0, 1020, 1021, 3, 477, 238, 0, 1021, 1022, 3, 495, 247, 0, 1022, 1023, 3, 475, 237, 0, 1023, 1024, 3, 505, 252, 0, 1024, 224, 1, 0, 0, 0, 1025, 1026, 3, 473, 236, 0, 1026, 1027, 3, 497, 248, 0, 1027, 1028, 3, 495, 247, 0, 1028, 1029, 3, 507, 253, 0, 1029, 1030, 3, 469, 234, 0, 1030, 1031, 3, 485, 242, 0, 1031, 1032, 3, 495, 247, 0, 1032, 1033, 3, 505, 252, 0, 1033, 226, 1, 0, 0, 0, 1034, 1035, 3, 495, 247, 0, 1035, 1036, 3, 509, 254, 0, 1036, 1037, 3, 491, 245, 0, 1037, 1038, 3, 491, 245, 0, 1038, 228, 1, 0, 0, 0, 1039, 1040, 3, 473, 236, 0, 1040, 1041, 3, 497, 248, 0, 1041, 1042, 3, 509, 254, 0, 1042, 1043, 3, 495, 247, 0, 1043, 1044, 3, 507, 253, 0, 1044, 230, 1, 0, 0, 0, 1045, 1046, 3, 479, 239, 0, 1046, 1047, 3, 485, 242, 0, 1047, 1048, 3, 491, 245, 0, 1048, 1049, 3, 507, 253, 0, 1049, 1050, 3, 477, 238, 0, 1050, 1051, 3, 503, 251, 0, 1051, 232, 1, 0, 0, 0, 1052, 1053, 3, 477, 238, 0, 1053, 1054, 3, 515, 257, 0, 1054, 1055, 3, 507, 253, 0, 1055, 1056, 3, 503, 251, 0, 1056, 1057, 3, 469, 234, 0, 1057, 1058, 3, 473, 236, 0, 1058, 1059, 3, 507, 253, 0, 1059, 234, 1, 0, 0, 0, 1060, 1061, 3, 469, 234, 0, 1061, 1062, 3, 495, 247, 0, 1062, 1063, 3, 517, 258, 0, 1063, 236, 1, 0, 0, 0, 1064, 1065, 3, 495, 247, 0, 1065, 1066, 3, 497, 248, 0, 1066, 1067, 3, 495, 247, 0, 1067, 1068, 3, 477, 238, 0, 1068, 238, 1, 0, 0, 0, 1069, 1070, 3, 505, 252, 0, 1070, 1071, 3, 485, 242, 0, 1071, 1072, 3, 495, 247, 0, 1072, 1073, 3, 481, 240, 0, 1073, 1074, 3, 491, 245, 0, 1074, 1075, 3, 477, 238, 0, 1075, 240, 1, 0, 0, 0, 1076, 1077, 3, 507, 253, 0, 1077, 1078, 3, 503, 251, 0, 1078, 1079, 3, 509, 254, 0, 1079, 1080, 3, 477, 238, 0, 1080, 242, 1, 0, 0, 0, 1081, 1082, 3, 479, 239, 0, 1082, 1083, 3, 469, 234, 0, 1083, 1084, 3, 491, 245, 0, 1084, 1085, 3, 505, 252, 0, 1085, 1086, 3, 477, 238, 0, 1086, 244, 1, 0, 0, 0, 1087, 1088, 3, 503, 251, 0, 1088, 1089, 3, 477, 238, 0, 1089, 1090, 3, 475, 237, 0, 1090, 1091, 3, 509, 254, 0, 1091, 1092, 3, 473, 236, 0, 1092, 1093, 3, 477, 238, 0, 1093, 246, 1, 0, 0, 0, 1094, 1095, 3, 473, 236, 0, 1095, 1096, 3, 469, 234, 0, 1096, 1097, 3, 505, 252, 0, 1097, 1098, 3, 477, 238, 0, 1098, 248, 1, 0, 0, 0, 1099, 1100, 3, 477, 238, 0, 1100, 1101, 3, 491, 245, 0, 1101, 1102, 3, 505, 252, 0, 1102, 1103, 3, 477, 238, 0, 1103, 250, 1, 0, 0, 0, 1104, 1105, 3, 477, 238, 0, 1105, 1106, 3, 495, 247, 0, 1106, 1107, 3, 475, 237, 0, 1107, 252, 1, 0, 0, 0, 1108, 1109, 3, 513, 256, 0, 1109, 1110, 3, 483, 241, 0, 1110, 1111, 3, 477, 238, 0, 1111, 1112, 3, 495, 247, 0, 1112, 254, 1, 0, 0, 0, 1113, 1114, 3, 507, 253, 0, 1114, 1115, 3, 483, 241, 0, 1115, 1116, 3, 477, 238, 0, 1116, 1117, 3, 495, 247, 0, 1117, 256, 1, 0, 0, 0, 1118, 1119, 3, 473, 236, 0, 1119, 1120, 3, 469, 234, 0, 1120, 1121, 3, 491, 245, 0, 1121, 1122, 3, 491, 245, 0, 1122, 258, 1, 0, 0, 0, 1123, 1124, 3, 517, 258, 0, 1124, 1125, 3, 485, 242, 0, 1125, 1126, 3, 477, 238, 0, 1126, 1127, 3, 491, 245, 0, 1127, 1128, 3, 475, 237, 0, 1128, 260, 1, 0, 0, 0, 1129, 1130, 3, 489, 244, 0, 1130, 1131, 3, 477, 238, 0, 1131, 1132, 3, 517, 258, 0, 1132, 262, 1, 0, 0, 0, 1133, 1134, 3, 473, 236, 0, 1134, 1135, 3, 469, 234, 0, 1135, 1136, 3, 507, 253, 0, 1136, 1137, 3, 469, 234, 0, 1137, 1138, 3, 491, 245, 0, 1138, 1139, 3, 497, 248, 0, 1139, 1140, 3, 481, 240, 0, 1140, 264, 1, 0, 0, 0, 1141, 1142, 3, 505, 252, 0, 1142, 1143, 3, 483, 241, 0, 1143, 1144, 3, 497, 248, 0, 1144, 1145, 3, 513, 256, 0, 1145, 266, 1, 0, 0, 0, 1146, 1147, 3, 475, 237, 0, 1147, 1148, 3, 477, 238, 0, 1148, 1149, 3, 479, 239, 0, 1149, 1150, 3, 469, 234, 0, 1150, 1151, 3, 509, 254, 0, 1151, 1152, 3, 491, 245, 0, 1152, 1153, 3, 507, 253, 0, 1153, 268, 1, 0, 0, 0, 1154, 1155, 3, 475, 237, 0, 1155, 1156, 3, 471, 235, 0, 1156, 1157, 3, 493, 246, 0, 1157, 1158, 3, 505, 252, 0, 1158, 270, 1, 0, 0, 0, 1159, 1160, 3, 475, 237, 0, 1160, 1161, 3, 469, 234, 0, 1161, 1162, 3, 507, 253, 0, 1162, 1163, 3, 469, 234, 0, 1163, 1164, 3, 471, 235, 0, 1164, 1165, 3, 469, 234, 0, 1165, 1166, 3, 505, 252, 0, 1166, 1167, 3, 477, 238, 0, 1167, 272, 1, 0, 0, 0, 1168, 1169, 3, 475, 237, 0, 1169, 1170, 3, 469, 234, 0, 1170, 1171, 3, 507, 253, 0, 1171, 1172, 3, 469, 234, 0, 1172, 1173, 3, 471, 235, 0, 1173, 1174, 3, 469, 234, 0, 1174, 1175, 3, 505, 252, 0, 1175, 1176, 3, 477, 238, 0, 1176, 1177, 3, 505, 252, 0, 1177, 274, 1, 0, 0, 0, 1178, 1179, 3, 481, 240, 0, 1179, 1180, 3, 503, 251, 0, 1180, 1181, 3, 469, 234, 0, 1181, 1182, 3, 499, 249, 0, 1182, 1183, 3, 483, 241, 0, 1183, 276, 1, 0, 0, 0, 1184, 1185, 3, 481, 240, 0, 1185, 1186, 3, 503, 251, 0, 1186, 1187, 3, 469, 234, 0, 1187, 1188, 3, 499, 249, 0, 1188, 1189, 3, 483, 241, 0, 1189, 1190, 3, 505, 252, 0, 1190, 278, 1, 0, 0, 0, 1191, 1192, 3, 503, 251, 0, 1192, 1193, 3, 477, 238, 0, 1193, 1194, 3, 499, 249, 0, 1194, 1195, 3, 491, 245, 0, 1195, 1196, 3, 469, 234, 0, 1196, 1197, 3, 473, 236, 0, 1197, 1198, 3, 477, 238, 0, 1198, 280, 1, 0, 0, 0, 1199, 1200, 3, 485, 242, 0, 1200, 1201, 3, 479, 239, 0, 1201, 282, 1, 0, 0, 0, 1202, 1203, 3, 505, 252, 0, 1203, 1204, 3, 507, 253, 0, 1204, 1205, 3, 497, 248, 0, 1205, 1206, 3, 499, 249, 0, 1206, 284, 1, 0, 0, 0, 1207, 1208, 3, 503, 251, 0, 1208, 1209, 3, 497, 248, 0, 1209, 1210, 3, 491, 245, 0, 1210, 1211, 3, 477, 238, 0, 1211, 286, 1, 0, 0, 0, 1212, 1213, 3, 503, 251, 0, 1213, 1214, 3, 497, 248, 0, 1214, 1215, 3, 491, 245, 0, 1215, 1216, 3, 477, 238, 0, 1216, 1217, 3, 505, 252, 0, 1217, 288, 1, 0, 0, 0, 1218, 1219, 3, 509, 254, 0, 1219, 1220, 3, 505, 252, 0, 1220, 1221, 3, 477, 238, 0, 1221, 1222, 3, 503, 251, 0, 1222, 290, 1, 0, 0, 0, 1223, 1224, 3, 509, 254, 0, 1224, 1225, 3, 505, 252, 0, 1225, 1226, 3, 477, 238, 0, 1226, 1227, 3, 503, 251, 0, 1227, 1228, 3, 505, 252, 0, 1228, 292, 1, 0, 0, 0, 1229, 1230, 3, 499, 249, 0, 1230, 1231, 3, 497, 248, 0, 1231, 1232, 3, 499, 249, 0, 1232, 1233, 3, 509, 254, 0, 1233, 1234, 3, 491, 245, 0, 1234, 1235, 3, 469, 234, 0, 1235, 1236, 3, 507, 253, 0, 1236, 1237, 3, 477, 238, 0, 1237, 1238, 3, 475, 237, 0, 1238, 294, 1, 0, 0, 0, 1239, 1240, 3, 499, 249, 0, 1240, 1241, 3, 469, 234, 0, 1241, 1242, 3, 505, 252, 0, 1242, 1243, 3, 505, 252, 0, 1243, 1244, 3, 513, 256, 0, 1244, 1245, 3, 497, 248, 0, 1245, 1246, 3, 503, 251, 0, 1246, 1247, 3, 475, 237, 0, 1247, 296, 1, 0, 0, 0, 1248, 1249, 3, 473, 236, 0, 1249, 1250, 3, 483, 241, 0, 1250, 1251, 3, 469, 234, 0, 1251, 1252, 3, 495, 247, 0, 1252, 1253, 3, 481, 240, 0, 1253, 1254, 3, 477, 238, 0, 1254, 298, 1, 0, 0, 0, 1255, 1256, 3, 503, 251, 0, 1256, 1257, 3, 477, 238, 0, 1257, 1258, 3, 501, 250, 0, 1258, 1259, 3, 509, 254, 0, 1259, 1260, 3, 485, 242, 0, 1260, 1261, 3, 503, 251, 0, 1261, 1262, 3, 477, 238, 0, 1262, 1263, 3, 475, 237, 0, 1263, 300, 1, 0, 0, 0, 1264, 1265, 3, 505, 252, 0, 1265, 1266, 3, 507, 253, 0, 1266, 1267, 3, 469, 234, 0, 1267, 1268, 3, 507, 253, 0, 1268, 1269, 3, 509, 254, 0, 1269, 1270, 3, 505, 252, 0, 1270, 302, 1, 0, 0, 0, 1271, 1272, 3, 469, 234, 0, 1272, 1273, 3, 473, 236, 0, 1273, 1274, 3, 507, 253, 0, 1274, 1275, 3, 485, 242, 0, 1275, 1276, 3, 511, 255, 0, 1276, 1277, 3, 477, 238, 0, 1277, 304, 1, 0, 0, 0, 1278, 1279, 3, 505, 252, 0, 1279, 1280, 3, 509, 254, 0, 1280, 1281, 3, 505, 252, 0, 1281, 1282, 3, 499, 249, 0, 1282, 1283, 3, 477, 238, 0, 1283, 1284, 3, 495, 247, 0, 1284, 1285, 3, 475, 237, 0, 1285, 1286, 3, 477, 238, 0, 1286, 1287, 3, 475, 237, 0, 1287, 306, 1, 0, 0, 0, 1288, 1289, 3, 469, 234, 0, 1289, 1290, 3, 491, 245, 0, 1290, 1291, 3, 507, 253, 0, 1291, 1292, 3, 477, 238, 0, 1292, 1293, 3, 503, 251, 0, 1293, 308, 1, 0, 0, 0, 1294, 1295, 3, 473, 236, 0, 1295, 1296, 3, 509, 254, 0, 1296, 1297, 3, 503, 251, 0, 1297, 1298, 3, 503, 251, 0, 1298, 1299, 3, 477, 238, 0, 1299, 1300, 3, 495, 247, 0, 1300, 1301, 3, 507, 253, 0, 1301, 310, 1, 0, 0, 0, 1302, 1303, 3, 507, 253, 0, 1303, 1304, 3, 497, 248, 0, 1304, 312, 1, 0, 0, 0, 1305, 1306, 3, 499, 249, 0, 1306, 1307, 3, 503, 251, 0, 1307, 1308, 3, 485, 242, 0, 1308, 1309, 3, 511, 255, 0, 1309, 1310, 3, 485, 242, 0, 1310, 1311, 3, 491, 245, 0, 1311, 1312, 3, 477, 238, 0, 1312, 1313, 3, 481, 240, 0, 1313, 1314, 3, 477, 238, 0, 1314, 1315, 3, 505, 252, 0, 1315, 314, 1, 0, 0, 0, 1316, 1317, 3, 481, 240, 0, 1317, 1318, 3, 503, 251, 0, 1318, 1319, 3, 469, 234, 0, 1319, 1320, 3, 495, 247, 0, 1320, 1321, 3, 507, 253, 0, 1321, 316, 1, 0, 0, 0, 1322, 1323, 3, 475, 237, 0, 1323, 1324, 3, 477, 238, 0, 1324, 1325, 3, 495, 247, 0, 1325, 1326, 3, 517, 258, 0, 1326, 318, 1, 0, 0, 0, 1327, 1328, 3, 503, 251, 0, 1328, 1329, 3, 477, 238, 0, 1329, 1330, 3, 511, 255, 0, 1330, 1331, 3, 497, 248, 0, 1331, 1332, 3, 489, 244, 0, 1332, 1333, 3, 477, 238, 0, 1333, 320, 1, 0, 0, 0, 1334, 1335, 3, 503, 251, 0, 1335, 1336, 3, 477, 238, 0, 1336, 1337, 3, 491, 245, 0, 1337, 1338, 3, 469, 234, 0, 1338, 1339, 3, 507, 253, 0, 1339, 1340, 3, 485, 242, 0, 1340, 1341, 3, 497, 248, 0, 1341, 1342, 3, 495, 247, 0, 1342, 1343, 3, 505, 252, 0, 1343, 1344, 3, 483, 241, 0, 1344, 1345, 3, 485, 242, 0, 1345, 1346, 3, 499, 249, 0, 1346, 1347, 3, 505, 252, 0, 1347, 322, 1, 0, 0, 0, 1348, 1349, 3, 495, 247, 0, 1349, 1350, 3, 497, 248, 0, 1350, 1351, 3, 475, 237, 0, 1351, 1352, 3, 477, 238, 0, 1352, 1353, 3, 505, 252, 0, 1353, 324, 1, 0, 0, 0, 1354, 1355, 3, 477, 238, 0, 1355, 1356, 3, 491, 245, 0, 1356, 1357, 3, 477, 238, 0, 1357, 1358, 3, 493, 246, 0, 1358, 1359, 3, 477, 238, 0, 1359, 1360, 3, 495, 247, 0, 1360, 1361, 3, 507, 253, 0, 1361, 326, 1, 0, 0, 0, 1362, 1363, 3, 477, 238, 0, 1363, 1364, 3, 491, 245, 0, 1364, 1365, 3, 477, 238, 0, 1365, 1366, 3, 493, 246, 0, 1366, 1367, 3, 477, 238, 0, 1367, 1368, 3, 495, 247, 0, 1368, 1369, 3, 507, 253, 0, 1369, 1370, 3, 505, 252, 0, 1370, 328, 1, 0, 0, 0, 1371, 1372, 3, 473, 236, 0, 1372, 1373, 3, 497, 248, 0, 1373, 1374, 3, 499, 249, 0, 1374, 1375, 3, 517, 258, 0, 1375, 330, 1, 0, 0, 0, 1376, 1377, 3, 497, 248, 0, 1377, 1378, 3, 479, 239, 0, 1378, 332, 1, 0, 0, 0, 1379, 1380, 3, 507, 253, 0, 1380, 1381, 3, 503, 251, 0, 1381, 1382, 3, 469, 234, 0, 1382, 1383, 3, 511, 255, 0, 1383, 1384, 3, 477, 238, 0, 1384, 1385, 3, 503, 251, 0, 1385, 1386, 3, 505, 252, 0, 1386, 1387, 3, 477, 238, 0, 1387, 334, 1, 0, 0, 0, 1388, 1389, 3, 503, 251, 0, 1389, 1390, 3, 477, 238, 0, 1390, 1391, 3, 469, 234, 0, 1391, 1392, 3, 475, 237, 0, 1392, 336, 1, 0, 0, 0, 1393, 1394, 3, 513, 256, 0, 1394, 1395, 3, 503, 251, 0, 1395, 1396, 3, 485, 242, 0, 1396, 1397, 3, 507, 253, 0, 1397, 1398, 3, 477, 238, 0, 1398, 338, 1, 0, 0, 0, 1399, 1400, 3, 469, 234, 0, 1400, 1401, 3, 473, 236, 0, 1401, 1402, 3, 473, 236, 0, 1402, 1403, 3, 477, 238, 0, 1403, 1404, 3, 505, 252, 0, 1404, 1405, 3, 505, 252, 0, 1405, 340, 1, 0, 0, 0, 1406, 1407, 3, 485, 242, 0, 1407, 1408, 3, 495, 247, 0, 1408, 1409, 3, 475, 237, 0, 1409, 1410, 3, 477, 238, 0, 1410, 1411, 3, 515, 257, 0, 1411, 1412, 3, 477, 238, 0, 1412, 1413, 3, 505, 252, 0, 1413, 342, 1, 0, 0, 0, 1414, 1415, 3, 493, 246, 0, 1415, 1416, 3, 469, 234, 0, 1416, 1417, 3, 495, 247, 0, 1417, 1418, 3, 469, 234, 0, 1418, 1419, 3, 481, 240, 0, 1419, 1420, 3, 477, 238, 0, 1420, 1421, 3, 493, 246, 0, 1421, 1422, 3, 477, 238, 0, 1422, 1423, 3, 495, 247, 0, 1423, 1424, 3, 507, 253, 0, 1424, 344, 1, 0, 0, 0, 1425, 1426, 3, 495, 247, 0, 1426, 1427, 3, 477, 238, 0, 1427, 1428, 3, 513, 256, 0, 1428, 346, 1, 0, 0, 0, 1429, 1430, 3, 491, 245, 0, 1430, 1431, 3, 469, 234, 0, 1431, 1432, 3, 471, 235, 0, 1432, 1433, 3, 477, 238, 0, 1433, 1434, 3, 491, 245, 0, 1434, 348, 1, 0, 0, 0, 1435, 1436, 3, 491, 245, 0, 1436, 1437, 3, 469, 234, 0, 1437, 1438, 3, 471, 235, 0, 1438, 1439, 3, 477, 238, 0, 1439, 1440, 3, 491, 245, 0, 1440, 1441, 3, 505, 252, 0, 1441, 350, 1, 0, 0, 0, 1442, 1443, 3, 495, 247, 0, 1443, 1444, 3, 469, 234, 0, 1444, 1445, 3, 493, 246, 0, 1445, 1446, 3, 477, 238, 0, 1446, 352, 1, 0, 0, 0, 1447, 1448, 3, 495, 247, 0, 1448, 1449, 3, 469, 234, 0, 1449, 1450, 3, 493, 246, 0, 1450, 1451, 3, 477, 238, 0, 1451, 1452, 3, 505, 252, 0, 1452, 354, 1, 0, 0, 0, 1453, 1454, 3, 507, 253, 0, 1454, 1455, 3, 517, 258, 0, 1455, 1456, 3, 499, 249, 0, 1456, 1457, 3, 477, 238, 0, 1457, 356, 1, 0, 0, 0, 1458, 1459, 3, 507, 253, 0, 1459, 1460, 3, 517, 258, 0, 1460, 1461, 3, 499, 249, 0, 1461, 1462, 3, 477, 238, 0, 1462, 1463, 3, 505, 252, 0, 1463, 358, 1, 0, 0, 0, 1464, 1465, 3, 499, 249, 0, 1465, 1466, 3, 503, 251, 0, 1466, 1467, 3, 497, 248, 0, 1467, 1468, 3, 499, 249, 0, 1468, 1469, 3, 477, 238, 0, 1469, 1470, 3, 503, 251, 0, 1470, 1471, 3, 507, 253, 0, 1471, 1472, 3, 517, 258, 0, 1472, 360, 1, 0, 0, 0, 1473, 1474, 3, 473, 236, 0, 1474, 1475, 3, 497, 248, 0, 1475, 1476, 3, 495, 247, 0, 1476, 1477, 3, 505, 252, 0, 1477, 1478, 3, 507, 253, 0, 1478, 1479, 3, 503, 251, 0, 1479, 1480, 3, 469, 234, 0, 1480, 1481, 3, 485, 242, 0, 1481, 1482, 3, 495, 247, 0, 1482, 1483, 3, 507, 253, 0, 1483, 1484, 3, 505, 252, 0, 1484, 362, 1, 0, 0, 0, 1485, 1486, 3, 469, 234, 0, 1486, 1487, 3, 505, 252, 0, 1487, 1488, 3, 505, 252, 0, 1488, 1489, 3, 485, 242, 0, 1489, 1490, 3, 481, 240, 0, 1490, 1491, 3, 495, 247, 0, 1491, 364, 1, 0, 0, 0, 1492, 1493, 3, 471, 235, 0, 1493, 1494, 3, 507, 253, 0, 1494, 1495, 3, 503, 251, 0, 1495, 1496, 3, 477, 238, 0, 1496, 1497, 3, 477, 238, 0, 1497, 366, 1, 0, 0, 0, 1498, 1499, 3, 477, 238, 0, 1499, 1500, 3, 515, 257, 0, 1500, 1501, 3, 485, 242, 0, 1501, 1502, 3, 505, 252, 0, 1502, 1503, 3, 507, 253, 0, 1503, 368, 1, 0, 0, 0, 1504, 1505, 3, 479, 239, 0, 1505, 1506, 3, 497, 248, 0, 1506, 1507, 3, 503, 251, 0, 1507, 370, 1, 0, 0, 0, 1508, 1509, 3, 497, 248, 0, 1509, 1510, 3, 499, 249, 0, 1510, 1511, 3, 507, 253, 0, 1511, 1512, 3, 485, 242, 0, 1512, 1513, 3, 497, 248, 0, 1513, 1514, 3, 495, 247, 0, 1514, 1515, 3, 505, 252, 0, 1515, 372, 1, 0, 0, 0, 1516, 1517, 3, 477, 238, 0, 1517, 1518, 3, 515, 257, 0, 1518, 1519, 3, 477, 238, 0, 1519, 1520, 3, 473, 236, 0, 1520, 1521, 3, 509, 254, 0, 1521, 1522, 3, 507, 253, 0, 1522, 1523, 3, 477, 238, 0, 1523, 374, 1, 0, 0, 0, 1524, 1525, 3, 475, 237, 0, 1525, 1526, 3, 477, 238, 0, 1526, 1527, 3, 479, 239, 0, 1527, 1528, 3, 485, 242, 0, 1528, 1529, 3, 495, 247, 0, 1529, 1530, 3, 477, 238, 0, 1530, 1531, 3, 475, 237, 0, 1531, 376, 1, 0, 0, 0, 1532, 1533, 3, 479, 239, 0, 1533, 1534, 3, 509, 254, 0, 1534, 1535, 3, 495, 247, 0, 1535, 1536, 3, 473, 236, 0, 1536, 1537, 3, 507, 253, 0, 1537, 1538, 3, 485, 242, 0, 1538, 1539, 3, 497, 248, 0, 1539, 1540, 3, 495, 247, 0, 1540, 378, 1, 0, 0, 0, 1541, 1542, 3, 479, 239, 0, 1542, 1543, 3, 509, 254, 0, 1543, 1544, 3, 495, 247, 0, 1544, 1545, 3, 473, 236, 0, 1545, 1546, 3, 507, 253, 0, 1546, 1547, 3, 485, 242, 0, 1547, 1548, 3, 497, 248, 0, 1548, 1549, 3, 495, 247, 0, 1549, 1550, 3, 505, 252, 0, 1550, 380, 1, 0, 0, 0, 1551, 1552, 3, 471, 235, 0, 1552, 1553, 3, 497, 248, 0, 1553, 1554, 3, 497, 248, 0, 1554, 1555, 3, 505, 252, 0, 1555, 1556, 3, 507, 253, 0, 1556, 1557, 3, 477, 238, 0, 1557, 1558, 3, 475, 237, 0, 1558, 382, 1, 0, 0, 0, 1559, 1560, 3, 499, 249, 0, 1560, 1561, 3, 503, 251, 0, 1561, 1562, 3, 497, 248, 0, 1562, 1563, 3, 473, 236, 0, 1563, 1564, 3, 477, 238, 0, 1564, 1565, 3, 475, 237, 0, 1565, 1566, 3, 509, 254, 0, 1566, 1567, 3, 503, 251, 0, 1567, 1568, 3, 477, 238, 0, 1568, 384, 1, 0, 0, 0, 1569, 1570, 3, 499, 249, 0, 1570, 1571, 3, 503, 251, 0, 1571, 1572, 3, 497, 248, 0, 1572, 1573, 3, 473, 236, 0, 1573, 1574, 3, 477, 238, 0, 1574, 1575, 3, 475, 237, 0, 1575, 1576, 3, 509, 254, 0, 1576, 1577, 3, 503, 251, 0, 1577, 1578, 3, 477, 238, 0, 1578, 1579, 3, 505, 252, 0, 1579, 386, 1, 0, 0, 0, 1580, 1581, 3, 469, 234, 0, 1581, 1582, 3, 475, 237, 0, 1582, 1583, 3, 493, 246, 0, 1583, 1584, 3, 485, 242, 0, 1584, 1585, 3, 495, 247, 0, 1585, 388, 1, 0, 0, 0, 1586, 1587, 3, 469, 234, 0, 1587, 1588, 3, 475, 237, 0, 1588, 1589, 3, 493, 246, 0, 1589, 1590, 3, 485, 242, 0, 1590, 1591, 3, 495, 247, 0, 1591, 1592, 3, 485, 242, 0, 1592, 1593, 3, 505, 252, 0, 1593, 1594, 3, 507, 253, 0, 1594, 1595, 3, 503, 251, 0, 1595, 1596, 3, 469, 234, 0, 1596, 1597, 3, 507, 253, 0, 1597, 1598, 3, 497, 248, 0, 1598, 1599, 3, 503, 251, 0, 1599, 390, 1, 0, 0, 0, 1600, 1601, 3, 471, 235, 0, 1601, 1602, 3, 503, 251, 0, 1602, 1603, 3, 485, 242, 0, 1603, 1604, 3, 477, 238, 0, 1604, 1605, 3, 479, 239, 0, 1605, 392, 1, 0, 0, 0, 1606, 1607, 3, 511, 255, 0, 1607, 1608, 3, 477, 238, 0, 1608, 1609, 3, 503, 251, 0, 1609, 1610, 3, 471, 235, 0, 1610, 1611, 3, 497, 248, 0, 1611, 1612, 3, 505, 252, 0, 1612, 1613, 3, 477, 238, 0, 1613, 394, 1, 0, 0, 0, 1614, 1615, 3, 497, 248, 0, 1615, 1616, 3, 509, 254, 0, 1616, 1617, 3, 507, 253, 0, 1617, 1618, 3, 499, 249, 0, 1618, 1619, 3, 509, 254, 0, 1619, 1620, 3, 507, 253, 0, 1620, 396, 1, 0, 0, 0, 1621, 1630, 5, 34, 0, 0, 1622, 1629, 8, 0, 0, 0, 1623, 1626, 5, 92, 0, 0, 1624, 1627, 9, 0, 0, 0, 1625, 1627, 5, 0, 0, 1, 1626, 1624, 1, 0, 0, 0, 1626, 1625, 1, 0, 0, 0, 1627, 1629, 1, 0, 0, 0, 1628, 1622, 1, 0, 0, 0, 1628, 1623, 1, 0, 0, 0, 1629, 1632, 1, 0, 0, 0, 1630, 1628, 1, 0, 0, 0, 1630, 1631, 1, 0, 0, 0, 1631, 1633, 1, 0, 0, 0, 1632, 1630, 1, 0, 0, 0, 1633, 1648, 5, 34, 0, 0, 1634, 1643, 5, 39, 0, 0, 1635, 1642, 8, 1, 0, 0, 1636, 1639, 5, 92, 0, 0, 1637, 1640, 9, 0, 0, 0, 1638, 1640, 5, 0, 0, 1, 1639, 1637, 1, 0, 0, 0, 1639, 1638, 1, 0, 0, 0, 1640, 1642, 1, 0, 0, 0, 1641, 1635, 1, 0, 0, 0, 1641, 1636, 1, 0, 0, 0, 1642, 1645, 1, 0, 0, 0, 1643, 1641, 1, 0, 0, 0, 1643, 1644, 1, 0, 0, 0, 1644, 1646, 1, 0, 0, 0, 1645, 1643, 1, 0, 0, 0, 1646, 1648, 5, 39, 0, 0, 1647, 1621, 1, 0, 0, 0, 1647, 1634, 1, 0, 0, 0, 1648, 398, 1, 0, 0, 0, 1649, 1650, 5, 37, 0, 0, 1650, 1651, 7, 2, 0, 0, 1651, 1653, 7, 2, 0, 0, 1652, 1649, 1, 0, 0, 0, 1653, 1654, 1, 0, 0, 0, 1654, 1652, 1, 0, 0, 0, 1654, 1655, 1, 0, 0, 0, 1655, 400, 1, 0, 0, 0, 1656, 1674, 5, 92, 0, 0, 1657, 1675, 7, 3, 0, 0, 1658, 1659, 7, 4, 0, 0, 1659, 1660, 3, 411, 205, 0, 1660, 1661, 3, 411, 205, 0, 1661, 1662, 3, 411, 205, 0, 1662, 1663, 3, 411, 205, 0, 1663, 1675, 1, 0, 0, 0, 1664, 1665, 7, 4, 0, 0, 1665, 1666, 3, 411, 205, 0, 1666, 1667, 3, 411, 205, 0, 1667, 1668, 3, 411, 205, 0, 1668, 1669, 3, 411, 205, 0, 1669, 1670, 3, 411, 205, 0, 1670, 1671, 3, 411, 205, 0, 1671, 1672, 3, 411, 205, 0, 1672, 1673, 3, 411, 205, 0, 1673, 1675, 1, 0, 0, 0, 1674, 1657, 1, 0, 0, 0, 1674, 1658, 1, 0, 0, 0, 1674, 1664, 1, 0, 0, 0, 1675, 402, 1, 0, 0, 0, 1676, 1677, 5, 48, 0, 0, 1677, 1678, 5, 120, 0, 0, 1678, 1680, 1, 0, 0, 0, 1679, 1681, 3, 411, 205, 0, 1680, 1679, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682, 1680, 1, 0, 0, 0, 1682, 1683, 1, 0, 0, 0, 1683, 404, 1, 0, 0, 0, 1684, 1693, 3, 421, 210, 0, 1685, 1689, 3, 415, 207, 0, 1686, 1688, 3, 413, 206, 0, 1687, 1686, 1, 0, 0, 0, 1688, 1691, 1, 0, 0, 0, 1689, 1687, 1, 0, 0, 0, 1689, 1690, 1, 0, 0, 0, 1690, 1693, 1, 0, 0, 0, 1691, 1689, 1, 0, 0, 0, 1692, 1684, 1, 0, 0, 0, 1692, 1685, 1, 0, 0, 0, 1693, 406, 1, 0, 0, 0, 1694, 1696, 3, 421, 210, 0, 1695, 1697, 3, 419, 209, 0, 1696, 1695, 1, 0, 0, 0, 1697, 1698, 1, 0, 0, 0, 1698, 1696, 1, 0, 0, 0, 1698, 1699, 1, 0, 0, 0, 1699, 408, 1, 0, 0, 0, 1700, 1702, 7, 5, 0, 0, 1701, 1700, 1, 0, 0, 0, 1702, 410, 1, 0, 0, 0, 1703, 1706, 3, 413, 206, 0, 1704, 1706, 3, 409, 204, 0, 1705, 1703, 1, 0, 0, 0, 1705, 1704, 1, 0, 0, 0, 1706, 412, 1, 0, 0, 0, 1707, 1710, 3, 421, 210, 0, 1708, 1710, 3, 415, 207, 0, 1709, 1707, 1, 0, 0, 0, 1709, 1708, 1, 0, 0, 0, 1710, 414, 1, 0, 0, 0, 1711, 1714, 3, 417, 208, 0, 1712, 1714, 2, 56, 57, 0, 1713, 1711, 1, 0, 0, 0, 1713, 1712, 1, 0, 0, 0, 1714, 416, 1, 0, 0, 0, 1715, 1716, 2, 49, 55, 0, 1716, 418, 1, 0, 0, 0, 1717, 1720, 3, 421, 210, 0, 1718, 1720, 3, 417, 208, 0, 1719, 1717, 1, 0, 0, 0, 1719, 1718, 1, 0, 0, 0, 1720, 420, 1, 0, 0, 0, 1721, 1722, 5, 48, 0, 0, 1722, 422, 1, 0, 0, 0, 1723, 1725, 3, 413, 206, 0, 1724, 1723, 1, 0, 0, 0, 1725, 1726, 1, 0, 0, 0, 1726, 1724, 1, 0, 0, 0, 1726, 1727, 1, 0, 0, 0, 1727, 1746, 1, 0, 0, 0, 1728, 1730, 3, 413, 206, 0, 1729, 1728, 1, 0, 0, 0, 1730, 1731, 1, 0, 0, 0, 1731, 1729, 1, 0, 0, 0, 1731, 1732, 1, 0, 0, 0, 1732, 1733, 1, 0, 0, 0, 1733, 1735, 5, 46, 0, 0, 1734, 1736, 3, 413, 206, 0, 1735, 1734, 1, 0, 0, 0, 1736, 1737, 1, 0, 0, 0, 1737, 1735, 1, 0, 0, 0, 1737, 1738, 1, 0, 0, 0, 1738, 1746, 1, 0, 0, 0, 1739, 1741, 5, 46, 0, 0, 1740, 1742, 3, 413, 206, 0, 1741, 1740, 1, 0, 0, 0, 1742, 1743, 1, 0, 0, 0, 1743, 1741, 1, 0, 0, 0, 1743, 1744, 1, 0, 0, 0, 1744, 1746, 1, 0, 0, 0, 1745, 1724, 1, 0, 0, 0, 1745, 1729, 1, 0, 0, 0, 1745, 1739, 1, 0, 0, 0, 1746, 1747, 1, 0, 0, 0, 1747, 1749, 7, 6, 0, 0, 1748, 1750, 5, 45, 0, 0, 1749, 1748, 1, 0, 0, 0, 1749, 1750, 1, 0, 0, 0, 1750, 1752, 1, 0, 0, 0, 1751, 1753, 3, 413, 206, 0, 1752, 1751, 1, 0, 0, 0, 1753, 1754, 1, 0, 0, 0, 1754, 1752, 1, 0, 0, 0, 1754, 1755, 1, 0, 0, 0, 1755, 424, 1, 0, 0, 0, 1756, 1758, 3, 413, 206, 0, 1757, 1756, 1, 0, 0, 0, 1758, 1761, 1, 0, 0, 0, 1759, 1757, 1, 0, 0, 0, 1759, 1760, 1, 0, 0, 0, 1760, 1762, 1, 0, 0, 0, 1761, 1759, 1, 0, 0, 0, 1762, 1764, 5, 46, 0, 0, 1763, 1765, 3, 413, 206, 0, 1764, 1763, 1, 0, 0, 0, 1765, 1766, 1, 0, 0, 0, 1766, 1764, 1, 0, 0, 0, 1766, 1767, 1, 0, 0, 0, 1767, 426, 1, 0, 0, 0, 1768, 1772, 3, 429, 214, 0, 1769, 1771, 3, 431, 215, 0, 1770, 1769, 1, 0, 0, 0, 1771, 1774, 1, 0, 0, 0, 1772, 1770, 1, 0, 0, 0, 1772, 1773, 1, 0, 0, 0, 1773, 428, 1, 0, 0, 0, 1774, 1772, 1, 0, 0, 0, 1775, 1778, 3, 467, 233, 0, 1776, 1778, 7, 7, 0, 0, 1777, 1775, 1, 0, 0, 0, 1777, 1776, 1, 0, 0, 0, 1778, 430, 1, 0, 0, 0, 1779, 1782, 3, 447, 223, 0, 1780, 1782, 3, 455, 227, 0, 1781, 1779, 1, 0, 0, 0, 1781, 1780, 1, 0, 0, 0, 1782, 432, 1, 0, 0, 0, 1783, 1789, 5, 96, 0, 0, 1784, 1788, 8, 8, 0, 0, 1785, 1786, 5, 96, 0, 0, 1786, 1788, 5, 96, 0, 0, 1787, 1784, 1, 0, 0, 0, 1787, 1785, 1, 0, 0, 0, 1788, 1791, 1, 0, 0, 0, 1789, 1787, 1, 0, 0, 0, 1789, 1790, 1, 0, 0, 0, 1790, 1792, 1, 0, 0, 0, 1791, 1789, 1, 0, 0, 0, 1792, 1793, 5, 96, 0, 0, 1793, 434, 1, 0, 0, 0, 1794, 1796, 3, 437, 218, 0, 1795, 1794, 1, 0, 0, 0, 1796, 1797, 1, 0, 0, 0, 1797, 1795, 1, 0, 0, 0, 1797, 1798, 1, 0, 0, 0, 1798, 436, 1, 0, 0, 0, 1799, 1812, 3, 457, 228, 0, 1800, 1812, 3, 459, 229, 0, 1801, 1812, 3, 461, 230, 0, 1802, 1812, 3, 463, 231, 0, 1803, 1812, 3, 443, 221, 0, 1804, 1812, 3, 453, 226, 0, 1805, 1812, 3, 451, 225, 0, 1806, 1812, 3, 449, 224, 0, 1807, 1812, 3, 445, 222, 0, 1808, 1812, 3, 465, 232, 0, 1809, 1812, 7, 9, 0, 0, 1810, 1812, 3, 439, 219, 0, 1811, 1799, 1, 0, 0, 0, 1811, 1800, 1, 0, 0, 0, 1811, 1801, 1, 0, 0, 0, 1811, 1802, 1, 0, 0, 0, 1811, 1803, 1, 0, 0, 0, 1811, 1804, 1, 0, 0, 0, 1811, 1805, 1, 0, 0, 0, 1811, 1806, 1, 0, 0, 0, 1811, 1807, 1, 0, 0, 0, 1811, 1808, 1, 0, 0, 0, 1811, 1809, 1, 0, 0, 0, 1811, 1810, 1, 0, 0, 0, 1812, 438, 1, 0, 0, 0, 1813, 1814, 5, 47, 0, 0, 1814, 1815, 5, 42, 0, 0, 1815, 1819, 1, 0, 0, 0, 1816, 1818, 9, 0, 0, 0, 1817, 1816, 1, 0, 0, 0, 1818, 1821, 1, 0, 0, 0, 1819, 1820, 1, 0, 0, 0, 1819, 1817, 1, 0, 0, 0, 1820, 1822, 1, 0, 0, 0, 1821, 1819, 1, 0, 0, 0, 1822, 1823, 5, 42, 0, 0, 1823, 1834, 5, 47, 0, 0, 1824, 1825, 5, 47, 0, 0, 1825, 1826, 5, 47, 0, 0, 1826, 1830, 1, 0, 0, 0, 1827, 1829, 8, 10, 0, 0, 1828, 1827, 1, 0, 0, 0, 1829, 1832, 1, 0, 0, 0, 1830, 1828, 1, 0, 0, 0, 1830, 1831, 1, 0, 0, 0, 1831, 1834, 1, 0, 0, 0, 1832, 1830, 1, 0, 0, 0, 1833, 1813, 1, 0, 0, 0, 1833, 1824, 1, 0, 0, 0, 1834, 440, 1, 0, 0, 0, 1835, 1836, 9, 0, 0, 0, 1836, 442, 1, 0, 0, 0, 1837, 1838, 7, 11, 0, 0, 1838, 444, 1, 0, 0, 0, 1839, 1840, 7, 12, 0, 0, 1840, 446, 1, 0, 0, 0, 1841, 1842, 7, 13, 0, 0, 1842, 448, 1, 0, 0, 0, 1843, 1844, 7, 14, 0, 0, 1844, 450, 1, 0, 0, 0, 1845, 1846, 7, 15, 0, 0, 1846, 452, 1, 0, 0, 0, 1847, 1848, 7, 16, 0, 0, 1848, 454, 1, 0, 0, 0, 1849, 1850, 7, 17, 0, 0, 1850, 456, 1, 0, 0, 0, 1851, 1852, 7, 18, 0, 0, 1852, 458, 1, 0, 0, 0, 1853, 1854, 7, 19, 0, 0, 1854, 460, 1, 0, 0, 0, 1855, 1856, 7, 20, 0, 0, 1856, 462, 1, 0, 0, 0, 1857, 1858, 7, 21, 0, 0, 1858, 464, 1, 0, 0, 0, 1859, 1860, 7, 22, 0, 0, 1860, 466, 1, 0, 0, 0, 1861, 1862, 7, 23, 0, 0, 1862, 468, 1, 0, 0, 0, 1863, 1864, 7, 24, 0, 0, 1864, 470, 1, 0, 0, 0, 1865, 1866, 7, 25, 0, 0, 1866, 472, 1, 0, 0, 0, 1867, 1868, 7, 26, 0, 0, 1868, 474, 1, 0, 0, 0, 1869, 1870, 7, 27, 0, 0, 1870, 476, 1, 0, 0, 0, 1871, 1872, 7, 6, 0, 0, 1872, 478, 1, 0, 0, 0, 1873, 1874, 7, 28, 0, 0, 1874, 480, 1, 0, 0, 0, 1875, 1876, 7, 29, 0, 0, 1876, 482, 1, 0, 0, 0, 1877, 1878, 7, 30, 0, 0, 1878, 484, 1, 0, 0, 0, 1879, 1880, 7, 31, 0, 0, 1880, 486, 1, 0, 0, 0, 1881, 1882, 7, 32, 0, 0, 1882, 488, 1, 0, 0, 0, 1883, 1884, 7, 33, 0, 0, 1884, 490, 1, 0, 0, 0, 1885, 1886, 7, 34, 0, 0, 1886, 492, 1, 0, 0, 0, 1887, 1888, 7, 35, 0, 0, 1888, 494, 1, 0, 0, 0, 1889, 1890, 7, 36, 0, 0, 1890, 496, 1, 0, 0, 0, 1891, 1892, 7, 37, 0, 0, 1892, 498, 1, 0, 0, 0, 1893, 1894, 7, 38, 0, 0, 1894, 500, 1, 0, 0, 0, 1895, 1896, 7, 39, 0, 0, 1896, 502, 1, 0, 0, 0, 1897, 1898, 7, 40, 0, 0, 1898, 504, 1, 0, 0, 0, 1899, 1900, 7, 41, 0, 0, 1900, 506, 1, 0, 0, 0, 1901, 1902, 7, 42, 0, 0, 1902, 508, 1, 0, 0, 0, 1903, 1904, 7, 4, 0, 0, 1904, 510, 1, 0, 0, 0, 1905, 1906, 7, 43, 0, 0, 1906, 512, 1, 0, 0, 0, 1907, 1908, 7, 44, 0, 0, 1908, 514, 1, 0, 0, 0, 1909, 1910, 7, 45, 0, 0, 1910, 516, 1, 0, 0, 0, 1911, 1912, 7, 46, 0, 0, 1912, 518, 1, 0, 0, 0, 1913, 1914, 7, 47, 0, 0, 1914, 520, 1, 0, 0, 0, 38, 0, 1626, 1628, 1630, 1639, 1641, 1643, 1647, 1654, 1674, 1682, 1689, 1692, 1698, 1701, 1705, 1709, 1713, 1719, 1726, 1731, 1737, 1743, 1745, 1749, 1754, 1759, 1766, 1772, 1777, 1781, 1787, 1789, 1797, 1811, 1819, 1830, 1833, 0];
var atn = new es_default.atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map((ds, index) => new es_default.dfa.DFA(ds, index));
var CypherLexer = class extends es_default.Lexer {
  constructor(input) {
    super(input);
    this._interp = new es_default.atn.LexerATNSimulator(this, atn, decisionsToDFA, new es_default.PredictionContextCache());
  }
  get atn() {
    return atn;
  }
};
_defineProperty(CypherLexer, "grammarFileName", "Cypher.g4");
_defineProperty(CypherLexer, "channelNames", ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);
_defineProperty(CypherLexer, "modeNames", ["DEFAULT_MODE"]);
_defineProperty(CypherLexer, "literalNames", [null, "';'", "':'", "'-'", "'=>'", "'://'", "'/'", "'.'", "'@'", "'#'", "'?'", "'&'", "'='", "'+'", "'{'", "','", "'}'", "'['", "']'", "'*'", "'('", "')'", "'+='", "'|'", "'..'", "'%'", "'^'", "'=~'", "'<>'", "'!='", "'<'", "'>'", "'<='", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'0'"]);
_defineProperty(CypherLexer, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "CATALOG", "SHOW", "DEFAULT", "DBMS", "DATABASE", "DATABASES", "GRAPH", "GRAPHS", "REPLACE", "IF", "STOP", "ROLE", "ROLES", "USER", "USERS", "POPULATED", "PASSWORD", "CHANGE", "REQUIRED", "STATUS", "ACTIVE", "SUSPENDED", "ALTER", "CURRENT", "TO", "PRIVILEGES", "GRANT", "DENY", "REVOKE", "RELATIONSHIPS", "NODES", "ELEMENT", "ELEMENTS", "COPY", "OF", "TRAVERSE", "READ", "WRITE", "ACCESS", "INDEXES", "MANAGEMENT", "NEW", "LABEL", "LABELS", "NAME", "NAMES", "TYPE", "TYPES", "PROPERTY", "CONSTRAINTS", "ASSIGN", "BTREE", "EXIST", "FOR", "OPTIONS", "EXECUTE", "DEFINED", "FUNCTION", "FUNCTIONS", "BOOSTED", "PROCEDURE", "PROCEDURES", "ADMIN", "ADMINISTRATOR", "BRIEF", "VERBOSE", "OUTPUT", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN"]);
_defineProperty(CypherLexer, "ruleNames", ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", "T__50", "T__51", "T__52", "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "CATALOG", "SHOW", "DEFAULT", "DBMS", "DATABASE", "DATABASES", "GRAPH", "GRAPHS", "REPLACE", "IF", "STOP", "ROLE", "ROLES", "USER", "USERS", "POPULATED", "PASSWORD", "CHANGE", "REQUIRED", "STATUS", "ACTIVE", "SUSPENDED", "ALTER", "CURRENT", "TO", "PRIVILEGES", "GRANT", "DENY", "REVOKE", "RELATIONSHIPS", "NODES", "ELEMENT", "ELEMENTS", "COPY", "OF", "TRAVERSE", "READ", "WRITE", "ACCESS", "INDEXES", "MANAGEMENT", "NEW", "LABEL", "LABELS", "NAME", "NAMES", "TYPE", "TYPES", "PROPERTY", "CONSTRAINTS", "ASSIGN", "BTREE", "EXIST", "FOR", "OPTIONS", "EXECUTE", "DEFINED", "FUNCTION", "FUNCTIONS", "BOOSTED", "PROCEDURE", "PROCEDURES", "ADMIN", "ADMINISTRATOR", "BRIEF", "VERBOSE", "OUTPUT", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN", "FF", "RS", "ID_Continue", "GS", "FS", "CR", "Sc", "SPACE", "TAB", "LF", "VT", "US", "ID_Start", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]);
CypherLexer.EOF = es_default.Token.EOF;
CypherLexer.T__0 = 1;
CypherLexer.T__1 = 2;
CypherLexer.T__2 = 3;
CypherLexer.T__3 = 4;
CypherLexer.T__4 = 5;
CypherLexer.T__5 = 6;
CypherLexer.T__6 = 7;
CypherLexer.T__7 = 8;
CypherLexer.T__8 = 9;
CypherLexer.T__9 = 10;
CypherLexer.T__10 = 11;
CypherLexer.T__11 = 12;
CypherLexer.T__12 = 13;
CypherLexer.T__13 = 14;
CypherLexer.T__14 = 15;
CypherLexer.T__15 = 16;
CypherLexer.T__16 = 17;
CypherLexer.T__17 = 18;
CypherLexer.T__18 = 19;
CypherLexer.T__19 = 20;
CypherLexer.T__20 = 21;
CypherLexer.T__21 = 22;
CypherLexer.T__22 = 23;
CypherLexer.T__23 = 24;
CypherLexer.T__24 = 25;
CypherLexer.T__25 = 26;
CypherLexer.T__26 = 27;
CypherLexer.T__27 = 28;
CypherLexer.T__28 = 29;
CypherLexer.T__29 = 30;
CypherLexer.T__30 = 31;
CypherLexer.T__31 = 32;
CypherLexer.T__32 = 33;
CypherLexer.T__33 = 34;
CypherLexer.T__34 = 35;
CypherLexer.T__35 = 36;
CypherLexer.T__36 = 37;
CypherLexer.T__37 = 38;
CypherLexer.T__38 = 39;
CypherLexer.T__39 = 40;
CypherLexer.T__40 = 41;
CypherLexer.T__41 = 42;
CypherLexer.T__42 = 43;
CypherLexer.T__43 = 44;
CypherLexer.T__44 = 45;
CypherLexer.T__45 = 46;
CypherLexer.T__46 = 47;
CypherLexer.T__47 = 48;
CypherLexer.T__48 = 49;
CypherLexer.T__49 = 50;
CypherLexer.T__50 = 51;
CypherLexer.T__51 = 52;
CypherLexer.T__52 = 53;
CypherLexer.CYPHER = 54;
CypherLexer.EXPLAIN = 55;
CypherLexer.PROFILE = 56;
CypherLexer.USING = 57;
CypherLexer.PERIODIC = 58;
CypherLexer.COMMIT = 59;
CypherLexer.UNION = 60;
CypherLexer.ALL = 61;
CypherLexer.CREATE = 62;
CypherLexer.DROP = 63;
CypherLexer.INDEX = 64;
CypherLexer.ON = 65;
CypherLexer.CONSTRAINT = 66;
CypherLexer.ASSERT = 67;
CypherLexer.IS = 68;
CypherLexer.UNIQUE = 69;
CypherLexer.EXISTS = 70;
CypherLexer.LOAD = 71;
CypherLexer.CSV = 72;
CypherLexer.WITH = 73;
CypherLexer.HEADERS = 74;
CypherLexer.FROM = 75;
CypherLexer.AS = 76;
CypherLexer.FIELDTERMINATOR = 77;
CypherLexer.OPTIONAL = 78;
CypherLexer.MATCH = 79;
CypherLexer.UNWIND = 80;
CypherLexer.MERGE = 81;
CypherLexer.SET = 82;
CypherLexer.DETACH = 83;
CypherLexer.DELETE = 84;
CypherLexer.REMOVE = 85;
CypherLexer.FOREACH = 86;
CypherLexer.IN = 87;
CypherLexer.DISTINCT = 88;
CypherLexer.RETURN = 89;
CypherLexer.ORDER = 90;
CypherLexer.BY = 91;
CypherLexer.L_SKIP = 92;
CypherLexer.LIMIT = 93;
CypherLexer.ASCENDING = 94;
CypherLexer.ASC = 95;
CypherLexer.DESCENDING = 96;
CypherLexer.DESC = 97;
CypherLexer.JOIN = 98;
CypherLexer.SCAN = 99;
CypherLexer.START = 100;
CypherLexer.NODE = 101;
CypherLexer.RELATIONSHIP = 102;
CypherLexer.REL = 103;
CypherLexer.WHERE = 104;
CypherLexer.SHORTESTPATH = 105;
CypherLexer.ALLSHORTESTPATHS = 106;
CypherLexer.OR = 107;
CypherLexer.XOR = 108;
CypherLexer.AND = 109;
CypherLexer.NOT = 110;
CypherLexer.STARTS = 111;
CypherLexer.ENDS = 112;
CypherLexer.CONTAINS = 113;
CypherLexer.NULL = 114;
CypherLexer.COUNT = 115;
CypherLexer.FILTER = 116;
CypherLexer.EXTRACT = 117;
CypherLexer.ANY = 118;
CypherLexer.NONE = 119;
CypherLexer.SINGLE = 120;
CypherLexer.TRUE = 121;
CypherLexer.FALSE = 122;
CypherLexer.REDUCE = 123;
CypherLexer.CASE = 124;
CypherLexer.ELSE = 125;
CypherLexer.END = 126;
CypherLexer.WHEN = 127;
CypherLexer.THEN = 128;
CypherLexer.CALL = 129;
CypherLexer.YIELD = 130;
CypherLexer.KEY = 131;
CypherLexer.CATALOG = 132;
CypherLexer.SHOW = 133;
CypherLexer.DEFAULT = 134;
CypherLexer.DBMS = 135;
CypherLexer.DATABASE = 136;
CypherLexer.DATABASES = 137;
CypherLexer.GRAPH = 138;
CypherLexer.GRAPHS = 139;
CypherLexer.REPLACE = 140;
CypherLexer.IF = 141;
CypherLexer.STOP = 142;
CypherLexer.ROLE = 143;
CypherLexer.ROLES = 144;
CypherLexer.USER = 145;
CypherLexer.USERS = 146;
CypherLexer.POPULATED = 147;
CypherLexer.PASSWORD = 148;
CypherLexer.CHANGE = 149;
CypherLexer.REQUIRED = 150;
CypherLexer.STATUS = 151;
CypherLexer.ACTIVE = 152;
CypherLexer.SUSPENDED = 153;
CypherLexer.ALTER = 154;
CypherLexer.CURRENT = 155;
CypherLexer.TO = 156;
CypherLexer.PRIVILEGES = 157;
CypherLexer.GRANT = 158;
CypherLexer.DENY = 159;
CypherLexer.REVOKE = 160;
CypherLexer.RELATIONSHIPS = 161;
CypherLexer.NODES = 162;
CypherLexer.ELEMENT = 163;
CypherLexer.ELEMENTS = 164;
CypherLexer.COPY = 165;
CypherLexer.OF = 166;
CypherLexer.TRAVERSE = 167;
CypherLexer.READ = 168;
CypherLexer.WRITE = 169;
CypherLexer.ACCESS = 170;
CypherLexer.INDEXES = 171;
CypherLexer.MANAGEMENT = 172;
CypherLexer.NEW = 173;
CypherLexer.LABEL = 174;
CypherLexer.LABELS = 175;
CypherLexer.NAME = 176;
CypherLexer.NAMES = 177;
CypherLexer.TYPE = 178;
CypherLexer.TYPES = 179;
CypherLexer.PROPERTY = 180;
CypherLexer.CONSTRAINTS = 181;
CypherLexer.ASSIGN = 182;
CypherLexer.BTREE = 183;
CypherLexer.EXIST = 184;
CypherLexer.FOR = 185;
CypherLexer.OPTIONS = 186;
CypherLexer.EXECUTE = 187;
CypherLexer.DEFINED = 188;
CypherLexer.FUNCTION = 189;
CypherLexer.FUNCTIONS = 190;
CypherLexer.BOOSTED = 191;
CypherLexer.PROCEDURE = 192;
CypherLexer.PROCEDURES = 193;
CypherLexer.ADMIN = 194;
CypherLexer.ADMINISTRATOR = 195;
CypherLexer.BRIEF = 196;
CypherLexer.VERBOSE = 197;
CypherLexer.OUTPUT = 198;
CypherLexer.StringLiteral = 199;
CypherLexer.UrlHex = 200;
CypherLexer.EscapedChar = 201;
CypherLexer.HexInteger = 202;
CypherLexer.DecimalInteger = 203;
CypherLexer.OctalInteger = 204;
CypherLexer.HexLetter = 205;
CypherLexer.HexDigit = 206;
CypherLexer.Digit = 207;
CypherLexer.NonZeroDigit = 208;
CypherLexer.NonZeroOctDigit = 209;
CypherLexer.OctDigit = 210;
CypherLexer.ZeroDigit = 211;
CypherLexer.ExponentDecimalReal = 212;
CypherLexer.RegularDecimalReal = 213;
CypherLexer.UnescapedSymbolicName = 214;
CypherLexer.IdentifierStart = 215;
CypherLexer.IdentifierPart = 216;
CypherLexer.EscapedSymbolicName = 217;
CypherLexer.SP = 218;
CypherLexer.WHITESPACE = 219;
CypherLexer.Comment = 220;
CypherLexer.ERROR_TOKEN = 221;

// node_modules/@neo4j-cypher/antlr4/es/CypherListener.js
var CypherListener = class extends es_default.tree.ParseTreeListener {
  // Enter a parse tree produced by CypherParser#cypher.
  enterCypher(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypher.
  exitCypher(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherPart.
  enterCypherPart(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherPart.
  exitCypherPart(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherConsoleCommand.
  enterCypherConsoleCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherConsoleCommand.
  exitCypherConsoleCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherConsoleCommandName.
  enterCypherConsoleCommandName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherConsoleCommandName.
  exitCypherConsoleCommandName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherConsoleCommandParameters.
  enterCypherConsoleCommandParameters(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherConsoleCommandParameters.
  exitCypherConsoleCommandParameters(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherConsoleCommandParameter.
  enterCypherConsoleCommandParameter(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherConsoleCommandParameter.
  exitCypherConsoleCommandParameter(ctx) {
  }
  // Enter a parse tree produced by CypherParser#arrowExpression.
  enterArrowExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#arrowExpression.
  exitArrowExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#url.
  enterUrl(ctx) {
  }
  // Exit a parse tree produced by CypherParser#url.
  exitUrl(ctx) {
  }
  // Enter a parse tree produced by CypherParser#uri.
  enterUri(ctx) {
  }
  // Exit a parse tree produced by CypherParser#uri.
  exitUri(ctx) {
  }
  // Enter a parse tree produced by CypherParser#scheme.
  enterScheme(ctx) {
  }
  // Exit a parse tree produced by CypherParser#scheme.
  exitScheme(ctx) {
  }
  // Enter a parse tree produced by CypherParser#host.
  enterHost(ctx) {
  }
  // Exit a parse tree produced by CypherParser#host.
  exitHost(ctx) {
  }
  // Enter a parse tree produced by CypherParser#hostname.
  enterHostname(ctx) {
  }
  // Exit a parse tree produced by CypherParser#hostname.
  exitHostname(ctx) {
  }
  // Enter a parse tree produced by CypherParser#hostnumber.
  enterHostnumber(ctx) {
  }
  // Exit a parse tree produced by CypherParser#hostnumber.
  exitHostnumber(ctx) {
  }
  // Enter a parse tree produced by CypherParser#port.
  enterPort(ctx) {
  }
  // Exit a parse tree produced by CypherParser#port.
  exitPort(ctx) {
  }
  // Enter a parse tree produced by CypherParser#path.
  enterPath(ctx) {
  }
  // Exit a parse tree produced by CypherParser#path.
  exitPath(ctx) {
  }
  // Enter a parse tree produced by CypherParser#user.
  enterUser(ctx) {
  }
  // Exit a parse tree produced by CypherParser#user.
  exitUser(ctx) {
  }
  // Enter a parse tree produced by CypherParser#login.
  enterLogin(ctx) {
  }
  // Exit a parse tree produced by CypherParser#login.
  exitLogin(ctx) {
  }
  // Enter a parse tree produced by CypherParser#password.
  enterPassword(ctx) {
  }
  // Exit a parse tree produced by CypherParser#password.
  exitPassword(ctx) {
  }
  // Enter a parse tree produced by CypherParser#frag.
  enterFrag(ctx) {
  }
  // Exit a parse tree produced by CypherParser#frag.
  exitFrag(ctx) {
  }
  // Enter a parse tree produced by CypherParser#urlQuery.
  enterUrlQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#urlQuery.
  exitUrlQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#search.
  enterSearch(ctx) {
  }
  // Exit a parse tree produced by CypherParser#search.
  exitSearch(ctx) {
  }
  // Enter a parse tree produced by CypherParser#searchparameter.
  enterSearchparameter(ctx) {
  }
  // Exit a parse tree produced by CypherParser#searchparameter.
  exitSearchparameter(ctx) {
  }
  // Enter a parse tree produced by CypherParser#string.
  enterString(ctx) {
  }
  // Exit a parse tree produced by CypherParser#string.
  exitString(ctx) {
  }
  // Enter a parse tree produced by CypherParser#urlDigits.
  enterUrlDigits(ctx) {
  }
  // Exit a parse tree produced by CypherParser#urlDigits.
  exitUrlDigits(ctx) {
  }
  // Enter a parse tree produced by CypherParser#json.
  enterJson(ctx) {
  }
  // Exit a parse tree produced by CypherParser#json.
  exitJson(ctx) {
  }
  // Enter a parse tree produced by CypherParser#obj.
  enterObj(ctx) {
  }
  // Exit a parse tree produced by CypherParser#obj.
  exitObj(ctx) {
  }
  // Enter a parse tree produced by CypherParser#pair.
  enterPair(ctx) {
  }
  // Exit a parse tree produced by CypherParser#pair.
  exitPair(ctx) {
  }
  // Enter a parse tree produced by CypherParser#array.
  enterArray(ctx) {
  }
  // Exit a parse tree produced by CypherParser#array.
  exitArray(ctx) {
  }
  // Enter a parse tree produced by CypherParser#value.
  enterValue(ctx) {
  }
  // Exit a parse tree produced by CypherParser#value.
  exitValue(ctx) {
  }
  // Enter a parse tree produced by CypherParser#keyValueLiteral.
  enterKeyValueLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#keyValueLiteral.
  exitKeyValueLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#commandPath.
  enterCommandPath(ctx) {
  }
  // Exit a parse tree produced by CypherParser#commandPath.
  exitCommandPath(ctx) {
  }
  // Enter a parse tree produced by CypherParser#subCommand.
  enterSubCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#subCommand.
  exitSubCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherQuery.
  enterCypherQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherQuery.
  exitCypherQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#queryOptions.
  enterQueryOptions(ctx) {
  }
  // Exit a parse tree produced by CypherParser#queryOptions.
  exitQueryOptions(ctx) {
  }
  // Enter a parse tree produced by CypherParser#anyCypherOption.
  enterAnyCypherOption(ctx) {
  }
  // Exit a parse tree produced by CypherParser#anyCypherOption.
  exitAnyCypherOption(ctx) {
  }
  // Enter a parse tree produced by CypherParser#cypherOption.
  enterCypherOption(ctx) {
  }
  // Exit a parse tree produced by CypherParser#cypherOption.
  exitCypherOption(ctx) {
  }
  // Enter a parse tree produced by CypherParser#versionNumber.
  enterVersionNumber(ctx) {
  }
  // Exit a parse tree produced by CypherParser#versionNumber.
  exitVersionNumber(ctx) {
  }
  // Enter a parse tree produced by CypherParser#explain.
  enterExplain(ctx) {
  }
  // Exit a parse tree produced by CypherParser#explain.
  exitExplain(ctx) {
  }
  // Enter a parse tree produced by CypherParser#profile.
  enterProfile(ctx) {
  }
  // Exit a parse tree produced by CypherParser#profile.
  exitProfile(ctx) {
  }
  // Enter a parse tree produced by CypherParser#configurationOption.
  enterConfigurationOption(ctx) {
  }
  // Exit a parse tree produced by CypherParser#configurationOption.
  exitConfigurationOption(ctx) {
  }
  // Enter a parse tree produced by CypherParser#statement.
  enterStatement(ctx) {
  }
  // Exit a parse tree produced by CypherParser#statement.
  exitStatement(ctx) {
  }
  // Enter a parse tree produced by CypherParser#query.
  enterQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#query.
  exitQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#regularQuery.
  enterRegularQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#regularQuery.
  exitRegularQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#bulkImportQuery.
  enterBulkImportQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#bulkImportQuery.
  exitBulkImportQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#singleQuery.
  enterSingleQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#singleQuery.
  exitSingleQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#periodicCommitHint.
  enterPeriodicCommitHint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#periodicCommitHint.
  exitPeriodicCommitHint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#loadCSVQuery.
  enterLoadCSVQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#loadCSVQuery.
  exitLoadCSVQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#union.
  enterUnion(ctx) {
  }
  // Exit a parse tree produced by CypherParser#union.
  exitUnion(ctx) {
  }
  // Enter a parse tree produced by CypherParser#clause.
  enterClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#clause.
  exitClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#command.
  enterCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#command.
  exitCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#systemCommand.
  enterSystemCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#systemCommand.
  exitSystemCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#multidatabaseCommand.
  enterMultidatabaseCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#multidatabaseCommand.
  exitMultidatabaseCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#userCommand.
  enterUserCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#userCommand.
  exitUserCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#privilegeCommand.
  enterPrivilegeCommand(ctx) {
  }
  // Exit a parse tree produced by CypherParser#privilegeCommand.
  exitPrivilegeCommand(ctx) {
  }
  // Enter a parse tree produced by CypherParser#showRoles.
  enterShowRoles(ctx) {
  }
  // Exit a parse tree produced by CypherParser#showRoles.
  exitShowRoles(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createRole.
  enterCreateRole(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createRole.
  exitCreateRole(ctx) {
  }
  // Enter a parse tree produced by CypherParser#copyRole.
  enterCopyRole(ctx) {
  }
  // Exit a parse tree produced by CypherParser#copyRole.
  exitCopyRole(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropRole.
  enterDropRole(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropRole.
  exitDropRole(ctx) {
  }
  // Enter a parse tree produced by CypherParser#showUsers.
  enterShowUsers(ctx) {
  }
  // Exit a parse tree produced by CypherParser#showUsers.
  exitShowUsers(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createUser.
  enterCreateUser(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createUser.
  exitCreateUser(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropUser.
  enterDropUser(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropUser.
  exitDropUser(ctx) {
  }
  // Enter a parse tree produced by CypherParser#alterUser.
  enterAlterUser(ctx) {
  }
  // Exit a parse tree produced by CypherParser#alterUser.
  exitAlterUser(ctx) {
  }
  // Enter a parse tree produced by CypherParser#showPrivileges.
  enterShowPrivileges(ctx) {
  }
  // Exit a parse tree produced by CypherParser#showPrivileges.
  exitShowPrivileges(ctx) {
  }
  // Enter a parse tree produced by CypherParser#grantPrivilege.
  enterGrantPrivilege(ctx) {
  }
  // Exit a parse tree produced by CypherParser#grantPrivilege.
  exitGrantPrivilege(ctx) {
  }
  // Enter a parse tree produced by CypherParser#denyPrivilege.
  enterDenyPrivilege(ctx) {
  }
  // Exit a parse tree produced by CypherParser#denyPrivilege.
  exitDenyPrivilege(ctx) {
  }
  // Enter a parse tree produced by CypherParser#revokePrivilege.
  enterRevokePrivilege(ctx) {
  }
  // Exit a parse tree produced by CypherParser#revokePrivilege.
  exitRevokePrivilege(ctx) {
  }
  // Enter a parse tree produced by CypherParser#revokePart.
  enterRevokePart(ctx) {
  }
  // Exit a parse tree produced by CypherParser#revokePart.
  exitRevokePart(ctx) {
  }
  // Enter a parse tree produced by CypherParser#databaseScope.
  enterDatabaseScope(ctx) {
  }
  // Exit a parse tree produced by CypherParser#databaseScope.
  exitDatabaseScope(ctx) {
  }
  // Enter a parse tree produced by CypherParser#graphScope.
  enterGraphScope(ctx) {
  }
  // Exit a parse tree produced by CypherParser#graphScope.
  exitGraphScope(ctx) {
  }
  // Enter a parse tree produced by CypherParser#roles.
  enterRoles(ctx) {
  }
  // Exit a parse tree produced by CypherParser#roles.
  exitRoles(ctx) {
  }
  // Enter a parse tree produced by CypherParser#grantableGraphPrivileges.
  enterGrantableGraphPrivileges(ctx) {
  }
  // Exit a parse tree produced by CypherParser#grantableGraphPrivileges.
  exitGrantableGraphPrivileges(ctx) {
  }
  // Enter a parse tree produced by CypherParser#revokeableGraphPrivileges.
  enterRevokeableGraphPrivileges(ctx) {
  }
  // Exit a parse tree produced by CypherParser#revokeableGraphPrivileges.
  exitRevokeableGraphPrivileges(ctx) {
  }
  // Enter a parse tree produced by CypherParser#datasbasePrivilege.
  enterDatasbasePrivilege(ctx) {
  }
  // Exit a parse tree produced by CypherParser#datasbasePrivilege.
  exitDatasbasePrivilege(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dbmsPrivilege.
  enterDbmsPrivilege(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dbmsPrivilege.
  exitDbmsPrivilege(ctx) {
  }
  // Enter a parse tree produced by CypherParser#elementScope.
  enterElementScope(ctx) {
  }
  // Exit a parse tree produced by CypherParser#elementScope.
  exitElementScope(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertiesList.
  enterPropertiesList(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertiesList.
  exitPropertiesList(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyScope.
  enterPropertyScope(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyScope.
  exitPropertyScope(ctx) {
  }
  // Enter a parse tree produced by CypherParser#showDatabase.
  enterShowDatabase(ctx) {
  }
  // Exit a parse tree produced by CypherParser#showDatabase.
  exitShowDatabase(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createDatabase.
  enterCreateDatabase(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createDatabase.
  exitCreateDatabase(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropDatabase.
  enterDropDatabase(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropDatabase.
  exitDropDatabase(ctx) {
  }
  // Enter a parse tree produced by CypherParser#startDatabase.
  enterStartDatabase(ctx) {
  }
  // Exit a parse tree produced by CypherParser#startDatabase.
  exitStartDatabase(ctx) {
  }
  // Enter a parse tree produced by CypherParser#stopDatabase.
  enterStopDatabase(ctx) {
  }
  // Exit a parse tree produced by CypherParser#stopDatabase.
  exitStopDatabase(ctx) {
  }
  // Enter a parse tree produced by CypherParser#ifNotExists.
  enterIfNotExists(ctx) {
  }
  // Exit a parse tree produced by CypherParser#ifNotExists.
  exitIfNotExists(ctx) {
  }
  // Enter a parse tree produced by CypherParser#ifExists.
  enterIfExists(ctx) {
  }
  // Exit a parse tree produced by CypherParser#ifExists.
  exitIfExists(ctx) {
  }
  // Enter a parse tree produced by CypherParser#orReplace.
  enterOrReplace(ctx) {
  }
  // Exit a parse tree produced by CypherParser#orReplace.
  exitOrReplace(ctx) {
  }
  // Enter a parse tree produced by CypherParser#setPassword.
  enterSetPassword(ctx) {
  }
  // Exit a parse tree produced by CypherParser#setPassword.
  exitSetPassword(ctx) {
  }
  // Enter a parse tree produced by CypherParser#passwordStatus.
  enterPasswordStatus(ctx) {
  }
  // Exit a parse tree produced by CypherParser#passwordStatus.
  exitPasswordStatus(ctx) {
  }
  // Enter a parse tree produced by CypherParser#setStatus.
  enterSetStatus(ctx) {
  }
  // Exit a parse tree produced by CypherParser#setStatus.
  exitSetStatus(ctx) {
  }
  // Enter a parse tree produced by CypherParser#userStatus.
  enterUserStatus(ctx) {
  }
  // Exit a parse tree produced by CypherParser#userStatus.
  exitUserStatus(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createUniqueConstraint.
  enterCreateUniqueConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createUniqueConstraint.
  exitCreateUniqueConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createNodeKeyConstraint.
  enterCreateNodeKeyConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createNodeKeyConstraint.
  exitCreateNodeKeyConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createNodePropertyExistenceConstraint.
  enterCreateNodePropertyExistenceConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createNodePropertyExistenceConstraint.
  exitCreateNodePropertyExistenceConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createRelationshipPropertyExistenceConstraint.
  enterCreateRelationshipPropertyExistenceConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createRelationshipPropertyExistenceConstraint.
  exitCreateRelationshipPropertyExistenceConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createIndex.
  enterCreateIndex(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createIndex.
  exitCreateIndex(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropUniqueConstraint.
  enterDropUniqueConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropUniqueConstraint.
  exitDropUniqueConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropNodeKeyConstraint.
  enterDropNodeKeyConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropNodeKeyConstraint.
  exitDropNodeKeyConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropNodePropertyExistenceConstraint.
  enterDropNodePropertyExistenceConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropNodePropertyExistenceConstraint.
  exitDropNodePropertyExistenceConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropRelationshipPropertyExistenceConstraint.
  enterDropRelationshipPropertyExistenceConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropRelationshipPropertyExistenceConstraint.
  exitDropRelationshipPropertyExistenceConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dropIndex.
  enterDropIndex(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dropIndex.
  exitDropIndex(ctx) {
  }
  // Enter a parse tree produced by CypherParser#index.
  enterIndex(ctx) {
  }
  // Exit a parse tree produced by CypherParser#index.
  exitIndex(ctx) {
  }
  // Enter a parse tree produced by CypherParser#uniqueConstraint.
  enterUniqueConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#uniqueConstraint.
  exitUniqueConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#nodeKeyConstraint.
  enterNodeKeyConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#nodeKeyConstraint.
  exitNodeKeyConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#nodePropertyExistenceConstraint.
  enterNodePropertyExistenceConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#nodePropertyExistenceConstraint.
  exitNodePropertyExistenceConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipPropertyExistenceConstraint.
  enterRelationshipPropertyExistenceConstraint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipPropertyExistenceConstraint.
  exitRelationshipPropertyExistenceConstraint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipPatternSyntax.
  enterRelationshipPatternSyntax(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipPatternSyntax.
  exitRelationshipPatternSyntax(ctx) {
  }
  // Enter a parse tree produced by CypherParser#loadCSVClause.
  enterLoadCSVClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#loadCSVClause.
  exitLoadCSVClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#matchClause.
  enterMatchClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#matchClause.
  exitMatchClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#unwindClause.
  enterUnwindClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#unwindClause.
  exitUnwindClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#mergeClause.
  enterMergeClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#mergeClause.
  exitMergeClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#mergeAction.
  enterMergeAction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#mergeAction.
  exitMergeAction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createClause.
  enterCreateClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createClause.
  exitCreateClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#createUniqueClause.
  enterCreateUniqueClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#createUniqueClause.
  exitCreateUniqueClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#setClause.
  enterSetClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#setClause.
  exitSetClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#setItem.
  enterSetItem(ctx) {
  }
  // Exit a parse tree produced by CypherParser#setItem.
  exitSetItem(ctx) {
  }
  // Enter a parse tree produced by CypherParser#deleteClause.
  enterDeleteClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#deleteClause.
  exitDeleteClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#removeClause.
  enterRemoveClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#removeClause.
  exitRemoveClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#removeItem.
  enterRemoveItem(ctx) {
  }
  // Exit a parse tree produced by CypherParser#removeItem.
  exitRemoveItem(ctx) {
  }
  // Enter a parse tree produced by CypherParser#foreachClause.
  enterForeachClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#foreachClause.
  exitForeachClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#withClause.
  enterWithClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#withClause.
  exitWithClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#returnClause.
  enterReturnClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#returnClause.
  exitReturnClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#returnBody.
  enterReturnBody(ctx) {
  }
  // Exit a parse tree produced by CypherParser#returnBody.
  exitReturnBody(ctx) {
  }
  // Enter a parse tree produced by CypherParser#func.
  enterFunc(ctx) {
  }
  // Exit a parse tree produced by CypherParser#func.
  exitFunc(ctx) {
  }
  // Enter a parse tree produced by CypherParser#returnItems.
  enterReturnItems(ctx) {
  }
  // Exit a parse tree produced by CypherParser#returnItems.
  exitReturnItems(ctx) {
  }
  // Enter a parse tree produced by CypherParser#returnItem.
  enterReturnItem(ctx) {
  }
  // Exit a parse tree produced by CypherParser#returnItem.
  exitReturnItem(ctx) {
  }
  // Enter a parse tree produced by CypherParser#call.
  enterCall(ctx) {
  }
  // Exit a parse tree produced by CypherParser#call.
  exitCall(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureInvocation.
  enterProcedureInvocation(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureInvocation.
  exitProcedureInvocation(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureInvocationBody.
  enterProcedureInvocationBody(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureInvocationBody.
  exitProcedureInvocationBody(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureArguments.
  enterProcedureArguments(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureArguments.
  exitProcedureArguments(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureResults.
  enterProcedureResults(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureResults.
  exitProcedureResults(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureResult.
  enterProcedureResult(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureResult.
  exitProcedureResult(ctx) {
  }
  // Enter a parse tree produced by CypherParser#aliasedProcedureResult.
  enterAliasedProcedureResult(ctx) {
  }
  // Exit a parse tree produced by CypherParser#aliasedProcedureResult.
  exitAliasedProcedureResult(ctx) {
  }
  // Enter a parse tree produced by CypherParser#simpleProcedureResult.
  enterSimpleProcedureResult(ctx) {
  }
  // Exit a parse tree produced by CypherParser#simpleProcedureResult.
  exitSimpleProcedureResult(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureOutput.
  enterProcedureOutput(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureOutput.
  exitProcedureOutput(ctx) {
  }
  // Enter a parse tree produced by CypherParser#order.
  enterOrder(ctx) {
  }
  // Exit a parse tree produced by CypherParser#order.
  exitOrder(ctx) {
  }
  // Enter a parse tree produced by CypherParser#skip.
  enterSkip(ctx) {
  }
  // Exit a parse tree produced by CypherParser#skip.
  exitSkip(ctx) {
  }
  // Enter a parse tree produced by CypherParser#limit.
  enterLimit(ctx) {
  }
  // Exit a parse tree produced by CypherParser#limit.
  exitLimit(ctx) {
  }
  // Enter a parse tree produced by CypherParser#sortItem.
  enterSortItem(ctx) {
  }
  // Exit a parse tree produced by CypherParser#sortItem.
  exitSortItem(ctx) {
  }
  // Enter a parse tree produced by CypherParser#hint.
  enterHint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#hint.
  exitHint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#startClause.
  enterStartClause(ctx) {
  }
  // Exit a parse tree produced by CypherParser#startClause.
  exitStartClause(ctx) {
  }
  // Enter a parse tree produced by CypherParser#startPoint.
  enterStartPoint(ctx) {
  }
  // Exit a parse tree produced by CypherParser#startPoint.
  exitStartPoint(ctx) {
  }
  // Enter a parse tree produced by CypherParser#lookup.
  enterLookup(ctx) {
  }
  // Exit a parse tree produced by CypherParser#lookup.
  exitLookup(ctx) {
  }
  // Enter a parse tree produced by CypherParser#nodeLookup.
  enterNodeLookup(ctx) {
  }
  // Exit a parse tree produced by CypherParser#nodeLookup.
  exitNodeLookup(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipLookup.
  enterRelationshipLookup(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipLookup.
  exitRelationshipLookup(ctx) {
  }
  // Enter a parse tree produced by CypherParser#identifiedIndexLookup.
  enterIdentifiedIndexLookup(ctx) {
  }
  // Exit a parse tree produced by CypherParser#identifiedIndexLookup.
  exitIdentifiedIndexLookup(ctx) {
  }
  // Enter a parse tree produced by CypherParser#indexQuery.
  enterIndexQuery(ctx) {
  }
  // Exit a parse tree produced by CypherParser#indexQuery.
  exitIndexQuery(ctx) {
  }
  // Enter a parse tree produced by CypherParser#idLookup.
  enterIdLookup(ctx) {
  }
  // Exit a parse tree produced by CypherParser#idLookup.
  exitIdLookup(ctx) {
  }
  // Enter a parse tree produced by CypherParser#literalIds.
  enterLiteralIds(ctx) {
  }
  // Exit a parse tree produced by CypherParser#literalIds.
  exitLiteralIds(ctx) {
  }
  // Enter a parse tree produced by CypherParser#where.
  enterWhere(ctx) {
  }
  // Exit a parse tree produced by CypherParser#where.
  exitWhere(ctx) {
  }
  // Enter a parse tree produced by CypherParser#pattern.
  enterPattern(ctx) {
  }
  // Exit a parse tree produced by CypherParser#pattern.
  exitPattern(ctx) {
  }
  // Enter a parse tree produced by CypherParser#patternPart.
  enterPatternPart(ctx) {
  }
  // Exit a parse tree produced by CypherParser#patternPart.
  exitPatternPart(ctx) {
  }
  // Enter a parse tree produced by CypherParser#anonymousPatternPart.
  enterAnonymousPatternPart(ctx) {
  }
  // Exit a parse tree produced by CypherParser#anonymousPatternPart.
  exitAnonymousPatternPart(ctx) {
  }
  // Enter a parse tree produced by CypherParser#patternElement.
  enterPatternElement(ctx) {
  }
  // Exit a parse tree produced by CypherParser#patternElement.
  exitPatternElement(ctx) {
  }
  // Enter a parse tree produced by CypherParser#nodePattern.
  enterNodePattern(ctx) {
  }
  // Exit a parse tree produced by CypherParser#nodePattern.
  exitNodePattern(ctx) {
  }
  // Enter a parse tree produced by CypherParser#patternElementChain.
  enterPatternElementChain(ctx) {
  }
  // Exit a parse tree produced by CypherParser#patternElementChain.
  exitPatternElementChain(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipPattern.
  enterRelationshipPattern(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipPattern.
  exitRelationshipPattern(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipPatternStart.
  enterRelationshipPatternStart(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipPatternStart.
  exitRelationshipPatternStart(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipPatternEnd.
  enterRelationshipPatternEnd(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipPatternEnd.
  exitRelationshipPatternEnd(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipDetail.
  enterRelationshipDetail(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipDetail.
  exitRelationshipDetail(ctx) {
  }
  // Enter a parse tree produced by CypherParser#properties.
  enterProperties(ctx) {
  }
  // Exit a parse tree produced by CypherParser#properties.
  exitProperties(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relType.
  enterRelType(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relType.
  exitRelType(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipTypes.
  enterRelationshipTypes(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipTypes.
  exitRelationshipTypes(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipType.
  enterRelationshipType(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipType.
  exitRelationshipType(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipTypeOptionalColon.
  enterRelationshipTypeOptionalColon(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipTypeOptionalColon.
  exitRelationshipTypeOptionalColon(ctx) {
  }
  // Enter a parse tree produced by CypherParser#nodeLabels.
  enterNodeLabels(ctx) {
  }
  // Exit a parse tree produced by CypherParser#nodeLabels.
  exitNodeLabels(ctx) {
  }
  // Enter a parse tree produced by CypherParser#nodeLabel.
  enterNodeLabel(ctx) {
  }
  // Exit a parse tree produced by CypherParser#nodeLabel.
  exitNodeLabel(ctx) {
  }
  // Enter a parse tree produced by CypherParser#rangeLiteral.
  enterRangeLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#rangeLiteral.
  exitRangeLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#labelName.
  enterLabelName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#labelName.
  exitLabelName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relTypeName.
  enterRelTypeName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relTypeName.
  exitRelTypeName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#expression.
  enterExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#expression.
  exitExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#orExpression.
  enterOrExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#orExpression.
  exitOrExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#xorExpression.
  enterXorExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#xorExpression.
  exitXorExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#andExpression.
  enterAndExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#andExpression.
  exitAndExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#notExpression.
  enterNotExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#notExpression.
  exitNotExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#comparisonExpression.
  enterComparisonExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#comparisonExpression.
  exitComparisonExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#addOrSubtractExpression.
  enterAddOrSubtractExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#addOrSubtractExpression.
  exitAddOrSubtractExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#multiplyDivideModuloExpression.
  enterMultiplyDivideModuloExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#multiplyDivideModuloExpression.
  exitMultiplyDivideModuloExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#powerOfExpression.
  enterPowerOfExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#powerOfExpression.
  exitPowerOfExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#unaryAddOrSubtractExpression.
  enterUnaryAddOrSubtractExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#unaryAddOrSubtractExpression.
  exitUnaryAddOrSubtractExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#stringListNullOperatorExpression.
  enterStringListNullOperatorExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#stringListNullOperatorExpression.
  exitStringListNullOperatorExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyOrLabelsExpression.
  enterPropertyOrLabelsExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyOrLabelsExpression.
  exitPropertyOrLabelsExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#filterFunction.
  enterFilterFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#filterFunction.
  exitFilterFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#filterFunctionName.
  enterFilterFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#filterFunctionName.
  exitFilterFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#existsFunction.
  enterExistsFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#existsFunction.
  exitExistsFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#existsFunctionName.
  enterExistsFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#existsFunctionName.
  exitExistsFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#allFunction.
  enterAllFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#allFunction.
  exitAllFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#allFunctionName.
  enterAllFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#allFunctionName.
  exitAllFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#anyFunction.
  enterAnyFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#anyFunction.
  exitAnyFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#anyFunctionName.
  enterAnyFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#anyFunctionName.
  exitAnyFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#noneFunction.
  enterNoneFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#noneFunction.
  exitNoneFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#noneFunctionName.
  enterNoneFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#noneFunctionName.
  exitNoneFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#singleFunction.
  enterSingleFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#singleFunction.
  exitSingleFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#singleFunctionName.
  enterSingleFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#singleFunctionName.
  exitSingleFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#extractFunction.
  enterExtractFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#extractFunction.
  exitExtractFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#extractFunctionName.
  enterExtractFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#extractFunctionName.
  exitExtractFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#reduceFunction.
  enterReduceFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#reduceFunction.
  exitReduceFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#reduceFunctionName.
  enterReduceFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#reduceFunctionName.
  exitReduceFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#shortestPathPatternFunction.
  enterShortestPathPatternFunction(ctx) {
  }
  // Exit a parse tree produced by CypherParser#shortestPathPatternFunction.
  exitShortestPathPatternFunction(ctx) {
  }
  // Enter a parse tree produced by CypherParser#shortestPathFunctionName.
  enterShortestPathFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#shortestPathFunctionName.
  exitShortestPathFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#allShortestPathFunctionName.
  enterAllShortestPathFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#allShortestPathFunctionName.
  exitAllShortestPathFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#atom.
  enterAtom(ctx) {
  }
  // Exit a parse tree produced by CypherParser#atom.
  exitAtom(ctx) {
  }
  // Enter a parse tree produced by CypherParser#literal.
  enterLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#literal.
  exitLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#stringLiteral.
  enterStringLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#stringLiteral.
  exitStringLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#booleanLiteral.
  enterBooleanLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#booleanLiteral.
  exitBooleanLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#listLiteral.
  enterListLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#listLiteral.
  exitListLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#partialComparisonExpression.
  enterPartialComparisonExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#partialComparisonExpression.
  exitPartialComparisonExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#parenthesizedExpression.
  enterParenthesizedExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#parenthesizedExpression.
  exitParenthesizedExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#relationshipsPattern.
  enterRelationshipsPattern(ctx) {
  }
  // Exit a parse tree produced by CypherParser#relationshipsPattern.
  exitRelationshipsPattern(ctx) {
  }
  // Enter a parse tree produced by CypherParser#filterExpression.
  enterFilterExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#filterExpression.
  exitFilterExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#idInColl.
  enterIdInColl(ctx) {
  }
  // Exit a parse tree produced by CypherParser#idInColl.
  exitIdInColl(ctx) {
  }
  // Enter a parse tree produced by CypherParser#functionInvocation.
  enterFunctionInvocation(ctx) {
  }
  // Exit a parse tree produced by CypherParser#functionInvocation.
  exitFunctionInvocation(ctx) {
  }
  // Enter a parse tree produced by CypherParser#functionInvocationBody.
  enterFunctionInvocationBody(ctx) {
  }
  // Exit a parse tree produced by CypherParser#functionInvocationBody.
  exitFunctionInvocationBody(ctx) {
  }
  // Enter a parse tree produced by CypherParser#functionName.
  enterFunctionName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#functionName.
  exitFunctionName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#procedureName.
  enterProcedureName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#procedureName.
  exitProcedureName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#listComprehension.
  enterListComprehension(ctx) {
  }
  // Exit a parse tree produced by CypherParser#listComprehension.
  exitListComprehension(ctx) {
  }
  // Enter a parse tree produced by CypherParser#patternComprehension.
  enterPatternComprehension(ctx) {
  }
  // Exit a parse tree produced by CypherParser#patternComprehension.
  exitPatternComprehension(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyLookup.
  enterPropertyLookup(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyLookup.
  exitPropertyLookup(ctx) {
  }
  // Enter a parse tree produced by CypherParser#caseExpression.
  enterCaseExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#caseExpression.
  exitCaseExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#caseAlternatives.
  enterCaseAlternatives(ctx) {
  }
  // Exit a parse tree produced by CypherParser#caseAlternatives.
  exitCaseAlternatives(ctx) {
  }
  // Enter a parse tree produced by CypherParser#variable.
  enterVariable(ctx) {
  }
  // Exit a parse tree produced by CypherParser#variable.
  exitVariable(ctx) {
  }
  // Enter a parse tree produced by CypherParser#numberLiteral.
  enterNumberLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#numberLiteral.
  exitNumberLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#mapLiteral.
  enterMapLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#mapLiteral.
  exitMapLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#mapProjection.
  enterMapProjection(ctx) {
  }
  // Exit a parse tree produced by CypherParser#mapProjection.
  exitMapProjection(ctx) {
  }
  // Enter a parse tree produced by CypherParser#mapProjectionVariants.
  enterMapProjectionVariants(ctx) {
  }
  // Exit a parse tree produced by CypherParser#mapProjectionVariants.
  exitMapProjectionVariants(ctx) {
  }
  // Enter a parse tree produced by CypherParser#literalEntry.
  enterLiteralEntry(ctx) {
  }
  // Exit a parse tree produced by CypherParser#literalEntry.
  exitLiteralEntry(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertySelector.
  enterPropertySelector(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertySelector.
  exitPropertySelector(ctx) {
  }
  // Enter a parse tree produced by CypherParser#variableSelector.
  enterVariableSelector(ctx) {
  }
  // Exit a parse tree produced by CypherParser#variableSelector.
  exitVariableSelector(ctx) {
  }
  // Enter a parse tree produced by CypherParser#allPropertiesSelector.
  enterAllPropertiesSelector(ctx) {
  }
  // Exit a parse tree produced by CypherParser#allPropertiesSelector.
  exitAllPropertiesSelector(ctx) {
  }
  // Enter a parse tree produced by CypherParser#parameter.
  enterParameter(ctx) {
  }
  // Exit a parse tree produced by CypherParser#parameter.
  exitParameter(ctx) {
  }
  // Enter a parse tree produced by CypherParser#legacyParameter.
  enterLegacyParameter(ctx) {
  }
  // Exit a parse tree produced by CypherParser#legacyParameter.
  exitLegacyParameter(ctx) {
  }
  // Enter a parse tree produced by CypherParser#newParameter.
  enterNewParameter(ctx) {
  }
  // Exit a parse tree produced by CypherParser#newParameter.
  exitNewParameter(ctx) {
  }
  // Enter a parse tree produced by CypherParser#parameterName.
  enterParameterName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#parameterName.
  exitParameterName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyExpressions.
  enterPropertyExpressions(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyExpressions.
  exitPropertyExpressions(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyExpression.
  enterPropertyExpression(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyExpression.
  exitPropertyExpression(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyKeys.
  enterPropertyKeys(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyKeys.
  exitPropertyKeys(ctx) {
  }
  // Enter a parse tree produced by CypherParser#propertyKeyName.
  enterPropertyKeyName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#propertyKeyName.
  exitPropertyKeyName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#integerLiteral.
  enterIntegerLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#integerLiteral.
  exitIntegerLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#doubleLiteral.
  enterDoubleLiteral(ctx) {
  }
  // Exit a parse tree produced by CypherParser#doubleLiteral.
  exitDoubleLiteral(ctx) {
  }
  // Enter a parse tree produced by CypherParser#namespace.
  enterNamespace(ctx) {
  }
  // Exit a parse tree produced by CypherParser#namespace.
  exitNamespace(ctx) {
  }
  // Enter a parse tree produced by CypherParser#leftArrowHead.
  enterLeftArrowHead(ctx) {
  }
  // Exit a parse tree produced by CypherParser#leftArrowHead.
  exitLeftArrowHead(ctx) {
  }
  // Enter a parse tree produced by CypherParser#rightArrowHead.
  enterRightArrowHead(ctx) {
  }
  // Exit a parse tree produced by CypherParser#rightArrowHead.
  exitRightArrowHead(ctx) {
  }
  // Enter a parse tree produced by CypherParser#dash.
  enterDash(ctx) {
  }
  // Exit a parse tree produced by CypherParser#dash.
  exitDash(ctx) {
  }
  // Enter a parse tree produced by CypherParser#symbolicName.
  enterSymbolicName(ctx) {
  }
  // Exit a parse tree produced by CypherParser#symbolicName.
  exitSymbolicName(ctx) {
  }
  // Enter a parse tree produced by CypherParser#keyword.
  enterKeyword(ctx) {
  }
  // Exit a parse tree produced by CypherParser#keyword.
  exitKeyword(ctx) {
  }
};

// node_modules/@neo4j-cypher/antlr4/es/CypherParser.js
var serializedATN2 = [4, 1, 221, 3443, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2, 194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7, 207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2, 212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7, 216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2, 221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7, 225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2, 230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 234, 2, 235, 7, 235, 2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2, 239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 1, 0, 1, 0, 1, 0, 5, 0, 490, 8, 0, 10, 0, 12, 0, 493, 9, 0, 1, 0, 3, 0, 496, 8, 0, 1, 0, 1, 0, 1, 1, 3, 1, 501, 8, 1, 1, 1, 1, 1, 3, 1, 505, 8, 1, 1, 1, 3, 1, 508, 8, 1, 1, 2, 1, 2, 1, 2, 3, 2, 513, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 519, 8, 3, 10, 3, 12, 3, 522, 9, 3, 1, 4, 1, 4, 1, 4, 5, 4, 527, 8, 4, 10, 4, 12, 4, 530, 9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 542, 8, 5, 1, 6, 1, 6, 3, 6, 546, 8, 6, 1, 6, 1, 6, 3, 6, 550, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 3, 8, 559, 8, 8, 1, 8, 1, 8, 1, 8, 3, 8, 564, 8, 8, 1, 8, 1, 8, 3, 8, 568, 8, 8, 1, 8, 3, 8, 571, 8, 8, 1, 8, 3, 8, 574, 8, 8, 1, 9, 1, 9, 1, 10, 3, 10, 579, 8, 10, 1, 10, 1, 10, 3, 10, 583, 8, 10, 1, 11, 1, 11, 1, 11, 5, 11, 588, 8, 11, 10, 11, 12, 11, 591, 9, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 5, 14, 606, 8, 14, 10, 14, 12, 14, 609, 9, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 5, 20, 629, 8, 20, 10, 20, 12, 20, 632, 9, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 639, 8, 21, 3, 21, 641, 8, 21, 1, 22, 1, 22, 3, 22, 645, 8, 22, 1, 22, 5, 22, 648, 8, 22, 10, 22, 12, 22, 651, 9, 22, 1, 23, 4, 23, 654, 8, 23, 11, 23, 12, 23, 655, 1, 24, 1, 24, 1, 25, 1, 25, 3, 25, 662, 8, 25, 1, 25, 1, 25, 3, 25, 666, 8, 25, 1, 25, 1, 25, 3, 25, 670, 8, 25, 1, 25, 1, 25, 3, 25, 674, 8, 25, 5, 25, 676, 8, 25, 10, 25, 12, 25, 679, 9, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 685, 8, 25, 1, 25, 3, 25, 688, 8, 25, 1, 26, 1, 26, 3, 26, 692, 8, 26, 1, 26, 1, 26, 3, 26, 696, 8, 26, 1, 26, 1, 26, 1, 27, 1, 27, 3, 27, 702, 8, 27, 1, 27, 1, 27, 3, 27, 706, 8, 27, 1, 27, 1, 27, 3, 27, 710, 8, 27, 1, 27, 1, 27, 3, 27, 714, 8, 27, 5, 27, 716, 8, 27, 10, 27, 12, 27, 719, 9, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 725, 8, 27, 1, 27, 3, 27, 728, 8, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 736, 8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 745, 8, 29, 1, 30, 1, 30, 1, 30, 3, 30, 750, 8, 30, 4, 30, 752, 8, 30, 11, 30, 12, 30, 753, 1, 30, 3, 30, 757, 8, 30, 1, 31, 1, 31, 1, 31, 5, 31, 762, 8, 31, 10, 31, 12, 31, 765, 9, 31, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 3, 33, 772, 8, 33, 5, 33, 774, 8, 33, 10, 33, 12, 33, 777, 9, 33, 1, 34, 1, 34, 1, 34, 3, 34, 782, 8, 34, 1, 35, 1, 35, 1, 35, 3, 35, 787, 8, 35, 1, 35, 1, 35, 5, 35, 791, 8, 35, 10, 35, 12, 35, 794, 9, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 3, 39, 804, 8, 39, 1, 39, 1, 39, 3, 39, 808, 8, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 816, 8, 40, 1, 40, 3, 40, 819, 8, 40, 1, 41, 1, 41, 3, 41, 823, 8, 41, 1, 42, 1, 42, 3, 42, 827, 8, 42, 1, 42, 5, 42, 830, 8, 42, 10, 42, 12, 42, 833, 9, 42, 1, 43, 1, 43, 3, 43, 837, 8, 43, 1, 43, 1, 43, 1, 44, 1, 44, 3, 44, 843, 8, 44, 1, 44, 5, 44, 846, 8, 44, 10, 44, 12, 44, 849, 9, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 3, 45, 858, 8, 45, 1, 46, 1, 46, 3, 46, 862, 8, 46, 1, 46, 5, 46, 865, 8, 46, 10, 46, 12, 46, 868, 9, 46, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 874, 8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 879, 8, 47, 1, 47, 3, 47, 882, 8, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 898, 8, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 910, 8, 49, 1, 50, 1, 50, 1, 50, 3, 50, 915, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 922, 8, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 931, 8, 52, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 937, 8, 53, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 943, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 950, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 956, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 963, 8, 54, 3, 54, 965, 8, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 974, 8, 55, 1, 55, 1, 55, 3, 55, 978, 8, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 985, 8, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 992, 8, 55, 3, 55, 994, 8, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 1013, 8, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1027, 8, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1032, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1039, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1048, 8, 59, 3, 59, 1050, 8, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 1059, 8, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 1075, 8, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 1081, 8, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 1092, 8, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 1102, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 1108, 8, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 1118, 8, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 1128, 8, 62, 1, 62, 3, 62, 1131, 8, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63, 1178, 8, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 3, 64, 1225, 8, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 1240, 8, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 1248, 8, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1268, 8, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 1277, 8, 67, 1, 67, 1, 67, 3, 67, 1281, 8, 67, 1, 67, 5, 67, 1284, 8, 67, 10, 67, 12, 67, 1287, 9, 67, 3, 67, 1289, 8, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 3, 68, 1298, 8, 68, 1, 68, 1, 68, 3, 68, 1302, 8, 68, 1, 68, 5, 68, 1305, 8, 68, 10, 68, 12, 68, 1308, 9, 68, 3, 68, 1310, 8, 68, 1, 69, 1, 69, 3, 69, 1314, 8, 69, 1, 69, 1, 69, 3, 69, 1318, 8, 69, 1, 69, 5, 69, 1321, 8, 69, 10, 69, 12, 69, 1324, 9, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 3, 70, 1331, 8, 70, 1, 70, 1, 70, 1, 70, 3, 70, 1336, 8, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 3, 71, 1343, 8, 71, 1, 71, 1, 71, 1, 71, 1, 71, 3, 71, 1349, 8, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1378, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1387, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1396, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1402, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1408, 8, 72, 1, 72, 3, 72, 1411, 8, 72, 3, 72, 1413, 8, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1433, 8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1440, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1447, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1454, 8, 74, 3, 74, 1456, 8, 74, 1, 75, 1, 75, 1, 75, 3, 75, 1461, 8, 75, 1, 75, 1, 75, 3, 75, 1465, 8, 75, 1, 75, 5, 75, 1468, 8, 75, 10, 75, 12, 75, 1471, 9, 75, 3, 75, 1473, 8, 75, 1, 76, 1, 76, 3, 76, 1477, 8, 76, 1, 76, 1, 76, 3, 76, 1481, 8, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1489, 8, 77, 1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1495, 8, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 3, 78, 1504, 8, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 3, 78, 1511, 8, 78, 1, 78, 1, 78, 1, 78, 3, 78, 1516, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 3, 79, 1525, 8, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 1559, 8, 85, 1, 85, 1, 85, 3, 85, 1563, 8, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 1570, 8, 85, 1, 86, 1, 86, 1, 86, 1, 86, 3, 86, 1576, 8, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 90, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 1, 98, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1632, 8, 99, 1, 99, 1, 99, 3, 99, 1636, 8, 99, 1, 99, 1, 99, 3, 99, 1640, 8, 99, 1, 99, 1, 99, 3, 99, 1644, 8, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 1652, 8, 100, 1, 100, 1, 100, 3, 100, 1656, 8, 100, 1, 100, 1, 100, 1, 100, 3, 100, 1661, 8, 100, 1, 100, 1, 100, 3, 100, 1665, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101, 3, 101, 1679, 8, 101, 1, 101, 1, 101, 3, 101, 1683, 8, 101, 1, 101, 1, 101, 1, 101, 3, 101, 1688, 8, 101, 1, 101, 1, 101, 3, 101, 1692, 8, 101, 1, 101, 1, 101, 1, 101, 1, 101, 3, 101, 1698, 8, 101, 1, 101, 1, 101, 3, 101, 1702, 8, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 102, 1, 102, 1, 102, 1, 102, 3, 102, 1716, 8, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 3, 102, 1723, 8, 102, 1, 102, 1, 102, 1, 102, 1, 102, 3, 102, 1729, 8, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 1739, 8, 103, 1, 103, 1, 103, 3, 103, 1743, 8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 1749, 8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 104, 1, 104, 3, 104, 1757, 8, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1768, 8, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1774, 8, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1786, 8, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1792, 8, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1804, 8, 104, 1, 104, 1, 104, 3, 104, 1808, 8, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 1818, 8, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 1831, 8, 105, 1, 106, 1, 106, 3, 106, 1835, 8, 106, 1, 106, 1, 106, 3, 106, 1839, 8, 106, 1, 106, 1, 106, 5, 106, 1843, 8, 106, 10, 106, 12, 106, 1846, 9, 106, 1, 106, 3, 106, 1849, 8, 106, 1, 106, 3, 106, 1852, 8, 106, 1, 107, 1, 107, 3, 107, 1856, 8, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 108, 1, 108, 3, 108, 1866, 8, 108, 1, 108, 1, 108, 1, 108, 5, 108, 1871, 8, 108, 10, 108, 12, 108, 1874, 9, 108, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 3, 109, 1886, 8, 109, 1, 110, 1, 110, 3, 110, 1890, 8, 110, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 1, 111, 3, 111, 1898, 8, 111, 1, 111, 1, 111, 1, 112, 1, 112, 3, 112, 1904, 8, 112, 1, 112, 1, 112, 3, 112, 1908, 8, 112, 1, 112, 1, 112, 3, 112, 1912, 8, 112, 1, 112, 5, 112, 1915, 8, 112, 10, 112, 12, 112, 1918, 9, 112, 1, 113, 1, 113, 3, 113, 1922, 8, 113, 1, 113, 1, 113, 3, 113, 1926, 8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1932, 8, 113, 1, 113, 1, 113, 3, 113, 1936, 8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1942, 8, 113, 1, 113, 1, 113, 3, 113, 1946, 8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1952, 8, 113, 1, 113, 1, 113, 3, 113, 1956, 8, 113, 1, 114, 1, 114, 3, 114, 1960, 8, 114, 1, 114, 1, 114, 3, 114, 1964, 8, 114, 1, 114, 1, 114, 3, 114, 1968, 8, 114, 1, 114, 1, 114, 3, 114, 1972, 8, 114, 1, 114, 5, 114, 1975, 8, 114, 10, 114, 12, 114, 1978, 9, 114, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 1984, 8, 115, 1, 115, 1, 115, 3, 115, 1988, 8, 115, 1, 115, 5, 115, 1991, 8, 115, 10, 115, 12, 115, 1994, 9, 115, 1, 116, 1, 116, 1, 116, 1, 116, 3, 116, 2e3, 8, 116, 1, 117, 1, 117, 3, 117, 2004, 8, 117, 1, 117, 1, 117, 3, 117, 2008, 8, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 2016, 8, 117, 1, 117, 1, 117, 1, 117, 4, 117, 2021, 8, 117, 11, 117, 12, 117, 2022, 1, 117, 3, 117, 2026, 8, 117, 1, 117, 1, 117, 1, 118, 1, 118, 3, 118, 2032, 8, 118, 1, 118, 3, 118, 2035, 8, 118, 1, 118, 1, 118, 1, 118, 3, 118, 2040, 8, 118, 1, 118, 3, 118, 2043, 8, 118, 1, 119, 1, 119, 3, 119, 2047, 8, 119, 1, 119, 3, 119, 2050, 8, 119, 1, 119, 3, 119, 2053, 8, 119, 1, 119, 1, 119, 1, 120, 1, 120, 1, 120, 3, 120, 2060, 8, 120, 1, 120, 1, 120, 3, 120, 2064, 8, 120, 1, 120, 1, 120, 3, 120, 2068, 8, 120, 1, 121, 1, 121, 3, 121, 2072, 8, 121, 1, 121, 3, 121, 2075, 8, 121, 1, 122, 1, 122, 3, 122, 2079, 8, 122, 1, 122, 1, 122, 3, 122, 2083, 8, 122, 1, 122, 5, 122, 2086, 8, 122, 10, 122, 12, 122, 2089, 9, 122, 1, 122, 1, 122, 3, 122, 2093, 8, 122, 1, 122, 1, 122, 3, 122, 2097, 8, 122, 1, 122, 5, 122, 2100, 8, 122, 10, 122, 12, 122, 2103, 9, 122, 1, 122, 3, 122, 2106, 8, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 3, 123, 2115, 8, 123, 1, 124, 1, 124, 1, 124, 1, 124, 3, 124, 2121, 8, 124, 1, 124, 3, 124, 2124, 8, 124, 1, 125, 1, 125, 3, 125, 2128, 8, 125, 1, 125, 3, 125, 2131, 8, 125, 1, 126, 1, 126, 1, 126, 1, 127, 1, 127, 3, 127, 2138, 8, 127, 1, 127, 3, 127, 2141, 8, 127, 1, 127, 3, 127, 2144, 8, 127, 1, 127, 1, 127, 3, 127, 2148, 8, 127, 1, 127, 5, 127, 2151, 8, 127, 10, 127, 12, 127, 2154, 9, 127, 1, 127, 3, 127, 2157, 8, 127, 1, 127, 1, 127, 1, 128, 1, 128, 1, 128, 1, 128, 3, 128, 2165, 8, 128, 1, 128, 1, 128, 3, 128, 2169, 8, 128, 1, 128, 5, 128, 2172, 8, 128, 10, 128, 12, 128, 2175, 9, 128, 1, 128, 1, 128, 3, 128, 2179, 8, 128, 1, 129, 1, 129, 3, 129, 2183, 8, 129, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 131, 1, 131, 1, 132, 1, 132, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 3, 133, 2201, 8, 133, 1, 133, 1, 133, 3, 133, 2205, 8, 133, 1, 133, 5, 133, 2208, 8, 133, 10, 133, 12, 133, 2211, 9, 133, 1, 134, 1, 134, 1, 134, 1, 134, 1, 135, 1, 135, 1, 135, 1, 135, 1, 136, 1, 136, 3, 136, 2223, 8, 136, 1, 136, 1, 136, 3, 136, 2227, 8, 136, 3, 136, 2229, 8, 136, 1, 137, 3, 137, 2232, 8, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 2241, 8, 137, 1, 137, 1, 137, 3, 137, 2245, 8, 137, 1, 137, 1, 137, 3, 137, 2249, 8, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 2261, 8, 137, 1, 137, 1, 137, 3, 137, 2265, 8, 137, 1, 137, 5, 137, 2268, 8, 137, 10, 137, 12, 137, 2271, 9, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 2280, 8, 137, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 2286, 8, 138, 1, 138, 1, 138, 3, 138, 2290, 8, 138, 1, 138, 5, 138, 2293, 8, 138, 10, 138, 12, 138, 2296, 9, 138, 1, 138, 3, 138, 2299, 8, 138, 1, 139, 1, 139, 3, 139, 2303, 8, 139, 1, 139, 1, 139, 3, 139, 2307, 8, 139, 1, 139, 1, 139, 1, 140, 1, 140, 3, 140, 2313, 8, 140, 1, 141, 1, 141, 3, 141, 2317, 8, 141, 1, 141, 1, 141, 1, 141, 3, 141, 2322, 8, 141, 1, 142, 1, 142, 1, 142, 1, 142, 3, 142, 2328, 8, 142, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 3, 143, 2337, 8, 143, 1, 143, 1, 143, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 3, 144, 2346, 8, 144, 1, 144, 1, 144, 1, 145, 1, 145, 1, 145, 1, 145, 3, 145, 2354, 8, 145, 1, 145, 1, 145, 1, 146, 1, 146, 3, 146, 2360, 8, 146, 1, 146, 1, 146, 3, 146, 2364, 8, 146, 1, 146, 5, 146, 2367, 8, 146, 10, 146, 12, 146, 2370, 9, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 148, 1, 148, 3, 148, 2378, 8, 148, 1, 148, 1, 148, 3, 148, 2382, 8, 148, 1, 148, 5, 148, 2385, 8, 148, 10, 148, 12, 148, 2388, 9, 148, 1, 149, 1, 149, 3, 149, 2392, 8, 149, 1, 149, 1, 149, 3, 149, 2396, 8, 149, 1, 149, 1, 149, 1, 149, 3, 149, 2401, 8, 149, 1, 150, 1, 150, 3, 150, 2405, 8, 150, 1, 151, 1, 151, 3, 151, 2409, 8, 151, 1, 151, 5, 151, 2412, 8, 151, 10, 151, 12, 151, 2415, 9, 151, 1, 151, 1, 151, 1, 151, 1, 151, 3, 151, 2421, 8, 151, 1, 152, 1, 152, 3, 152, 2425, 8, 152, 1, 152, 1, 152, 3, 152, 2429, 8, 152, 3, 152, 2431, 8, 152, 1, 152, 1, 152, 3, 152, 2435, 8, 152, 3, 152, 2437, 8, 152, 1, 152, 1, 152, 3, 152, 2441, 8, 152, 3, 152, 2443, 8, 152, 1, 152, 1, 152, 1, 153, 1, 153, 3, 153, 2449, 8, 153, 1, 153, 1, 153, 1, 154, 1, 154, 3, 154, 2455, 8, 154, 1, 154, 3, 154, 2458, 8, 154, 1, 154, 3, 154, 2461, 8, 154, 1, 154, 1, 154, 1, 155, 1, 155, 3, 155, 2467, 8, 155, 1, 155, 1, 155, 1, 155, 3, 155, 2472, 8, 155, 1, 156, 1, 156, 3, 156, 2476, 8, 156, 1, 156, 1, 156, 1, 156, 3, 156, 2481, 8, 156, 1, 157, 1, 157, 3, 157, 2485, 8, 157, 1, 157, 1, 157, 3, 157, 2489, 8, 157, 3, 157, 2491, 8, 157, 1, 157, 1, 157, 3, 157, 2495, 8, 157, 3, 157, 2497, 8, 157, 1, 157, 3, 157, 2500, 8, 157, 1, 157, 1, 157, 3, 157, 2504, 8, 157, 3, 157, 2506, 8, 157, 1, 157, 1, 157, 1, 158, 1, 158, 3, 158, 2512, 8, 158, 1, 159, 1, 159, 3, 159, 2516, 8, 159, 1, 159, 1, 159, 1, 160, 1, 160, 3, 160, 2522, 8, 160, 1, 160, 1, 160, 5, 160, 2526, 8, 160, 10, 160, 12, 160, 2529, 9, 160, 1, 161, 1, 161, 1, 161, 1, 162, 3, 162, 2535, 8, 162, 1, 162, 1, 162, 1, 163, 1, 163, 3, 163, 2541, 8, 163, 1, 163, 5, 163, 2544, 8, 163, 10, 163, 12, 163, 2547, 9, 163, 1, 164, 1, 164, 1, 164, 1, 165, 1, 165, 3, 165, 2554, 8, 165, 1, 165, 1, 165, 3, 165, 2558, 8, 165, 3, 165, 2560, 8, 165, 1, 165, 1, 165, 3, 165, 2564, 8, 165, 1, 165, 1, 165, 3, 165, 2568, 8, 165, 3, 165, 2570, 8, 165, 3, 165, 2572, 8, 165, 1, 166, 1, 166, 1, 167, 1, 167, 1, 168, 1, 168, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 5, 169, 2585, 8, 169, 10, 169, 12, 169, 2588, 9, 169, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 5, 170, 2595, 8, 170, 10, 170, 12, 170, 2598, 9, 170, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 5, 171, 2605, 8, 171, 10, 171, 12, 171, 2608, 9, 171, 1, 172, 1, 172, 3, 172, 2612, 8, 172, 5, 172, 2614, 8, 172, 10, 172, 12, 172, 2617, 9, 172, 1, 172, 1, 172, 1, 173, 1, 173, 3, 173, 2623, 8, 173, 1, 173, 5, 173, 2626, 8, 173, 10, 173, 12, 173, 2629, 9, 173, 1, 174, 1, 174, 3, 174, 2633, 8, 174, 1, 174, 1, 174, 3, 174, 2637, 8, 174, 1, 174, 1, 174, 3, 174, 2641, 8, 174, 1, 174, 1, 174, 3, 174, 2645, 8, 174, 1, 174, 5, 174, 2648, 8, 174, 10, 174, 12, 174, 2651, 9, 174, 1, 175, 1, 175, 3, 175, 2655, 8, 175, 1, 175, 1, 175, 3, 175, 2659, 8, 175, 1, 175, 1, 175, 3, 175, 2663, 8, 175, 1, 175, 1, 175, 3, 175, 2667, 8, 175, 1, 175, 1, 175, 3, 175, 2671, 8, 175, 1, 175, 1, 175, 3, 175, 2675, 8, 175, 1, 175, 5, 175, 2678, 8, 175, 10, 175, 12, 175, 2681, 9, 175, 1, 176, 1, 176, 3, 176, 2685, 8, 176, 1, 176, 1, 176, 3, 176, 2689, 8, 176, 1, 176, 5, 176, 2692, 8, 176, 10, 176, 12, 176, 2695, 9, 176, 1, 177, 1, 177, 3, 177, 2699, 8, 177, 5, 177, 2701, 8, 177, 10, 177, 12, 177, 2704, 9, 177, 1, 177, 1, 177, 1, 178, 1, 178, 3, 178, 2710, 8, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 3, 178, 2717, 8, 178, 1, 178, 1, 178, 3, 178, 2721, 8, 178, 1, 178, 1, 178, 3, 178, 2725, 8, 178, 1, 178, 1, 178, 3, 178, 2729, 8, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 3, 178, 2744, 8, 178, 1, 178, 3, 178, 2747, 8, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 5, 178, 2760, 8, 178, 10, 178, 12, 178, 2763, 9, 178, 1, 179, 1, 179, 3, 179, 2767, 8, 179, 1, 179, 1, 179, 3, 179, 2771, 8, 179, 5, 179, 2773, 8, 179, 10, 179, 12, 179, 2776, 9, 179, 1, 180, 1, 180, 3, 180, 2780, 8, 180, 1, 180, 1, 180, 3, 180, 2784, 8, 180, 1, 180, 1, 180, 3, 180, 2788, 8, 180, 1, 180, 1, 180, 1, 181, 1, 181, 1, 182, 1, 182, 3, 182, 2796, 8, 182, 1, 182, 1, 182, 3, 182, 2800, 8, 182, 1, 182, 1, 182, 3, 182, 2804, 8, 182, 1, 182, 1, 182, 1, 183, 1, 183, 1, 184, 1, 184, 3, 184, 2812, 8, 184, 1, 184, 1, 184, 3, 184, 2816, 8, 184, 1, 184, 1, 184, 3, 184, 2820, 8, 184, 1, 184, 1, 184, 1, 185, 1, 185, 1, 186, 1, 186, 3, 186, 2828, 8, 186, 1, 186, 1, 186, 3, 186, 2832, 8, 186, 1, 186, 1, 186, 3, 186, 2836, 8, 186, 1, 186, 1, 186, 1, 187, 1, 187, 1, 188, 1, 188, 3, 188, 2844, 8, 188, 1, 188, 1, 188, 3, 188, 2848, 8, 188, 1, 188, 1, 188, 3, 188, 2852, 8, 188, 1, 188, 1, 188, 1, 189, 1, 189, 1, 190, 1, 190, 3, 190, 2860, 8, 190, 1, 190, 1, 190, 3, 190, 2864, 8, 190, 1, 190, 1, 190, 3, 190, 2868, 8, 190, 1, 190, 1, 190, 1, 191, 1, 191, 1, 192, 1, 192, 3, 192, 2876, 8, 192, 1, 192, 1, 192, 3, 192, 2880, 8, 192, 1, 192, 1, 192, 3, 192, 2884, 8, 192, 1, 192, 1, 192, 3, 192, 2888, 8, 192, 1, 192, 3, 192, 2891, 8, 192, 1, 192, 3, 192, 2894, 8, 192, 1, 192, 1, 192, 1, 193, 1, 193, 1, 194, 1, 194, 3, 194, 2902, 8, 194, 1, 194, 1, 194, 3, 194, 2906, 8, 194, 1, 194, 1, 194, 3, 194, 2910, 8, 194, 1, 194, 1, 194, 3, 194, 2914, 8, 194, 1, 194, 1, 194, 3, 194, 2918, 8, 194, 1, 194, 1, 194, 3, 194, 2922, 8, 194, 1, 194, 1, 194, 3, 194, 2926, 8, 194, 1, 194, 1, 194, 3, 194, 2930, 8, 194, 1, 194, 1, 194, 3, 194, 2934, 8, 194, 1, 194, 1, 194, 1, 195, 1, 195, 1, 196, 1, 196, 3, 196, 2942, 8, 196, 1, 196, 1, 196, 3, 196, 2946, 8, 196, 1, 196, 1, 196, 3, 196, 2950, 8, 196, 1, 196, 1, 196, 1, 196, 1, 196, 3, 196, 2956, 8, 196, 1, 196, 1, 196, 3, 196, 2960, 8, 196, 1, 196, 1, 196, 3, 196, 2964, 8, 196, 1, 196, 1, 196, 3, 196, 2968, 8, 196, 1, 197, 1, 197, 1, 198, 1, 198, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 2979, 8, 199, 1, 199, 1, 199, 3, 199, 2983, 8, 199, 1, 199, 1, 199, 3, 199, 2987, 8, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 3005, 8, 199, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 3014, 8, 200, 1, 201, 1, 201, 1, 202, 1, 202, 1, 203, 1, 203, 3, 203, 3022, 8, 203, 1, 203, 1, 203, 3, 203, 3026, 8, 203, 1, 203, 1, 203, 3, 203, 3030, 8, 203, 1, 203, 1, 203, 3, 203, 3034, 8, 203, 5, 203, 3036, 8, 203, 10, 203, 12, 203, 3039, 9, 203, 3, 203, 3041, 8, 203, 1, 203, 1, 203, 1, 204, 1, 204, 3, 204, 3047, 8, 204, 1, 204, 1, 204, 1, 204, 3, 204, 3052, 8, 204, 1, 204, 1, 204, 1, 204, 3, 204, 3057, 8, 204, 1, 204, 1, 204, 1, 204, 3, 204, 3062, 8, 204, 1, 204, 1, 204, 1, 204, 3, 204, 3067, 8, 204, 1, 204, 1, 204, 1, 204, 3, 204, 3072, 8, 204, 1, 204, 1, 204, 1, 204, 3, 204, 3077, 8, 204, 1, 204, 3, 204, 3080, 8, 204, 1, 205, 1, 205, 3, 205, 3084, 8, 205, 1, 205, 1, 205, 3, 205, 3088, 8, 205, 1, 205, 1, 205, 1, 206, 1, 206, 3, 206, 3094, 8, 206, 1, 206, 4, 206, 3097, 8, 206, 11, 206, 12, 206, 3098, 1, 207, 1, 207, 3, 207, 3103, 8, 207, 1, 207, 3, 207, 3106, 8, 207, 1, 208, 1, 208, 1, 208, 1, 208, 1, 208, 1, 208, 1, 209, 1, 209, 3, 209, 3116, 8, 209, 1, 209, 1, 209, 3, 209, 3120, 8, 209, 1, 209, 1, 209, 3, 209, 3124, 8, 209, 3, 209, 3126, 8, 209, 1, 209, 1, 209, 3, 209, 3130, 8, 209, 1, 209, 1, 209, 3, 209, 3134, 8, 209, 1, 209, 1, 209, 3, 209, 3138, 8, 209, 5, 209, 3140, 8, 209, 10, 209, 12, 209, 3143, 9, 209, 3, 209, 3145, 8, 209, 1, 209, 1, 209, 1, 210, 1, 210, 1, 210, 1, 211, 1, 211, 1, 212, 1, 212, 1, 213, 1, 213, 3, 213, 3158, 8, 213, 1, 213, 1, 213, 3, 213, 3162, 8, 213, 1, 213, 1, 213, 3, 213, 3166, 8, 213, 1, 213, 3, 213, 3169, 8, 213, 1, 213, 3, 213, 3172, 8, 213, 1, 213, 1, 213, 1, 214, 1, 214, 3, 214, 3178, 8, 214, 1, 214, 1, 214, 3, 214, 3182, 8, 214, 1, 214, 1, 214, 3, 214, 3186, 8, 214, 3, 214, 3188, 8, 214, 1, 214, 1, 214, 3, 214, 3192, 8, 214, 1, 214, 1, 214, 3, 214, 3196, 8, 214, 1, 214, 1, 214, 3, 214, 3200, 8, 214, 3, 214, 3202, 8, 214, 1, 214, 1, 214, 3, 214, 3206, 8, 214, 1, 214, 1, 214, 3, 214, 3210, 8, 214, 1, 214, 1, 214, 1, 215, 1, 215, 3, 215, 3216, 8, 215, 1, 215, 1, 215, 1, 216, 1, 216, 3, 216, 3222, 8, 216, 1, 216, 4, 216, 3225, 8, 216, 11, 216, 12, 216, 3226, 1, 216, 1, 216, 3, 216, 3231, 8, 216, 1, 216, 1, 216, 3, 216, 3235, 8, 216, 1, 216, 4, 216, 3238, 8, 216, 11, 216, 12, 216, 3239, 3, 216, 3242, 8, 216, 1, 216, 3, 216, 3245, 8, 216, 1, 216, 1, 216, 3, 216, 3249, 8, 216, 1, 216, 3, 216, 3252, 8, 216, 1, 216, 3, 216, 3255, 8, 216, 1, 216, 1, 216, 1, 217, 1, 217, 3, 217, 3261, 8, 217, 1, 217, 1, 217, 3, 217, 3265, 8, 217, 1, 217, 1, 217, 3, 217, 3269, 8, 217, 1, 217, 1, 217, 1, 218, 1, 218, 1, 219, 1, 219, 3, 219, 3277, 8, 219, 1, 220, 1, 220, 3, 220, 3281, 8, 220, 1, 220, 1, 220, 3, 220, 3285, 8, 220, 1, 220, 1, 220, 3, 220, 3289, 8, 220, 1, 220, 1, 220, 3, 220, 3293, 8, 220, 5, 220, 3295, 8, 220, 10, 220, 12, 220, 3298, 9, 220, 3, 220, 3300, 8, 220, 1, 220, 1, 220, 1, 221, 1, 221, 3, 221, 3306, 8, 221, 1, 221, 1, 221, 3, 221, 3310, 8, 221, 1, 221, 3, 221, 3313, 8, 221, 1, 221, 3, 221, 3316, 8, 221, 1, 221, 1, 221, 3, 221, 3320, 8, 221, 1, 221, 5, 221, 3323, 8, 221, 10, 221, 12, 221, 3326, 9, 221, 1, 221, 3, 221, 3329, 8, 221, 1, 221, 1, 221, 1, 222, 1, 222, 1, 222, 1, 222, 3, 222, 3337, 8, 222, 1, 223, 1, 223, 3, 223, 3341, 8, 223, 1, 223, 1, 223, 3, 223, 3345, 8, 223, 1, 223, 1, 223, 1, 224, 1, 224, 1, 224, 1, 225, 1, 225, 1, 226, 1, 226, 1, 226, 1, 227, 1, 227, 3, 227, 3359, 8, 227, 1, 228, 1, 228, 3, 228, 3363, 8, 228, 1, 228, 1, 228, 3, 228, 3367, 8, 228, 1, 228, 1, 228, 1, 229, 1, 229, 1, 229, 1, 230, 1, 230, 3, 230, 3376, 8, 230, 1, 231, 1, 231, 3, 231, 3380, 8, 231, 1, 231, 1, 231, 3, 231, 3384, 8, 231, 1, 231, 5, 231, 3387, 8, 231, 10, 231, 12, 231, 3390, 9, 231, 1, 232, 1, 232, 3, 232, 3394, 8, 232, 1, 232, 4, 232, 3397, 8, 232, 11, 232, 12, 232, 3398, 1, 233, 1, 233, 3, 233, 3403, 8, 233, 1, 233, 1, 233, 3, 233, 3407, 8, 233, 1, 233, 5, 233, 3410, 8, 233, 10, 233, 12, 233, 3413, 9, 233, 1, 234, 1, 234, 1, 235, 1, 235, 1, 236, 1, 236, 1, 237, 1, 237, 1, 237, 5, 237, 3424, 8, 237, 10, 237, 12, 237, 3427, 9, 237, 1, 238, 1, 238, 1, 239, 1, 239, 1, 240, 1, 240, 1, 241, 1, 241, 1, 241, 1, 241, 3, 241, 3439, 8, 241, 1, 242, 1, 242, 1, 242, 1, 649, 0, 243, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 0, 24, 2, 0, 7, 7, 13, 13, 1, 0, 158, 159, 1, 0, 136, 137, 1, 0, 138, 139, 2, 0, 64, 64, 171, 171, 2, 0, 66, 66, 181, 181, 1, 0, 174, 175, 1, 0, 178, 179, 1, 0, 176, 177, 2, 0, 102, 102, 161, 161, 2, 0, 101, 101, 162, 162, 1, 0, 163, 164, 1, 0, 152, 153, 1, 0, 94, 97, 1, 0, 102, 103, 2, 0, 3, 3, 13, 13, 1, 0, 121, 122, 3, 0, 115, 115, 214, 214, 217, 217, 1, 0, 202, 204, 1, 0, 212, 213, 2, 0, 30, 30, 35, 38, 2, 0, 31, 31, 39, 42, 2, 0, 3, 3, 43, 53, 1, 0, 54, 198, 3816, 0, 486, 1, 0, 0, 0, 2, 500, 1, 0, 0, 0, 4, 509, 1, 0, 0, 0, 6, 514, 1, 0, 0, 0, 8, 523, 1, 0, 0, 0, 10, 541, 1, 0, 0, 0, 12, 543, 1, 0, 0, 0, 14, 553, 1, 0, 0, 0, 16, 555, 1, 0, 0, 0, 18, 575, 1, 0, 0, 0, 20, 578, 1, 0, 0, 0, 22, 584, 1, 0, 0, 0, 24, 592, 1, 0, 0, 0, 26, 600, 1, 0, 0, 0, 28, 602, 1, 0, 0, 0, 30, 610, 1, 0, 0, 0, 32, 612, 1, 0, 0, 0, 34, 617, 1, 0, 0, 0, 36, 619, 1, 0, 0, 0, 38, 622, 1, 0, 0, 0, 40, 625, 1, 0, 0, 0, 42, 633, 1, 0, 0, 0, 44, 642, 1, 0, 0, 0, 46, 653, 1, 0, 0, 0, 48, 657, 1, 0, 0, 0, 50, 687, 1, 0, 0, 0, 52, 689, 1, 0, 0, 0, 54, 727, 1, 0, 0, 0, 56, 735, 1, 0, 0, 0, 58, 737, 1, 0, 0, 0, 60, 751, 1, 0, 0, 0, 62, 758, 1, 0, 0, 0, 64, 766, 1, 0, 0, 0, 66, 775, 1, 0, 0, 0, 68, 781, 1, 0, 0, 0, 70, 783, 1, 0, 0, 0, 72, 795, 1, 0, 0, 0, 74, 797, 1, 0, 0, 0, 76, 799, 1, 0, 0, 0, 78, 801, 1, 0, 0, 0, 80, 818, 1, 0, 0, 0, 82, 822, 1, 0, 0, 0, 84, 824, 1, 0, 0, 0, 86, 834, 1, 0, 0, 0, 88, 840, 1, 0, 0, 0, 90, 850, 1, 0, 0, 0, 92, 859, 1, 0, 0, 0, 94, 881, 1, 0, 0, 0, 96, 897, 1, 0, 0, 0, 98, 909, 1, 0, 0, 0, 100, 914, 1, 0, 0, 0, 102, 921, 1, 0, 0, 0, 104, 930, 1, 0, 0, 0, 106, 936, 1, 0, 0, 0, 108, 964, 1, 0, 0, 0, 110, 993, 1, 0, 0, 0, 112, 995, 1, 0, 0, 0, 114, 1003, 1, 0, 0, 0, 116, 1014, 1, 0, 0, 0, 118, 1049, 1, 0, 0, 0, 120, 1051, 1, 0, 0, 0, 122, 1101, 1, 0, 0, 0, 124, 1130, 1, 0, 0, 0, 126, 1177, 1, 0, 0, 0, 128, 1224, 1, 0, 0, 0, 130, 1247, 1, 0, 0, 0, 132, 1267, 1, 0, 0, 0, 134, 1288, 1, 0, 0, 0, 136, 1309, 1, 0, 0, 0, 138, 1311, 1, 0, 0, 0, 140, 1335, 1, 0, 0, 0, 142, 1348, 1, 0, 0, 0, 144, 1412, 1, 0, 0, 0, 146, 1432, 1, 0, 0, 0, 148, 1455, 1, 0, 0, 0, 150, 1472, 1, 0, 0, 0, 152, 1474, 1, 0, 0, 0, 154, 1494, 1, 0, 0, 0, 156, 1515, 1, 0, 0, 0, 158, 1517, 1, 0, 0, 0, 160, 1526, 1, 0, 0, 0, 162, 1532, 1, 0, 0, 0, 164, 1538, 1, 0, 0, 0, 166, 1544, 1, 0, 0, 0, 168, 1548, 1, 0, 0, 0, 170, 1569, 1, 0, 0, 0, 172, 1571, 1, 0, 0, 0, 174, 1579, 1, 0, 0, 0, 176, 1585, 1, 0, 0, 0, 178, 1587, 1, 0, 0, 0, 180, 1591, 1, 0, 0, 0, 182, 1595, 1, 0, 0, 0, 184, 1599, 1, 0, 0, 0, 186, 1603, 1, 0, 0, 0, 188, 1607, 1, 0, 0, 0, 190, 1611, 1, 0, 0, 0, 192, 1615, 1, 0, 0, 0, 194, 1619, 1, 0, 0, 0, 196, 1623, 1, 0, 0, 0, 198, 1627, 1, 0, 0, 0, 200, 1647, 1, 0, 0, 0, 202, 1674, 1, 0, 0, 0, 204, 1711, 1, 0, 0, 0, 206, 1734, 1, 0, 0, 0, 208, 1807, 1, 0, 0, 0, 210, 1809, 1, 0, 0, 0, 212, 1834, 1, 0, 0, 0, 214, 1853, 1, 0, 0, 0, 216, 1863, 1, 0, 0, 0, 218, 1885, 1, 0, 0, 0, 220, 1887, 1, 0, 0, 0, 222, 1893, 1, 0, 0, 0, 224, 1901, 1, 0, 0, 0, 226, 1955, 1, 0, 0, 0, 228, 1959, 1, 0, 0, 0, 230, 1979, 1, 0, 0, 0, 232, 1999, 1, 0, 0, 0, 234, 2001, 1, 0, 0, 0, 236, 2029, 1, 0, 0, 0, 238, 2044, 1, 0, 0, 0, 240, 2056, 1, 0, 0, 0, 242, 2069, 1, 0, 0, 0, 244, 2105, 1, 0, 0, 0, 246, 2114, 1, 0, 0, 0, 248, 2116, 1, 0, 0, 0, 250, 2125, 1, 0, 0, 0, 252, 2132, 1, 0, 0, 0, 254, 2135, 1, 0, 0, 0, 256, 2160, 1, 0, 0, 0, 258, 2182, 1, 0, 0, 0, 260, 2184, 1, 0, 0, 0, 262, 2190, 1, 0, 0, 0, 264, 2192, 1, 0, 0, 0, 266, 2194, 1, 0, 0, 0, 268, 2212, 1, 0, 0, 0, 270, 2216, 1, 0, 0, 0, 272, 2220, 1, 0, 0, 0, 274, 2231, 1, 0, 0, 0, 276, 2281, 1, 0, 0, 0, 278, 2300, 1, 0, 0, 0, 280, 2312, 1, 0, 0, 0, 282, 2314, 1, 0, 0, 0, 284, 2323, 1, 0, 0, 0, 286, 2329, 1, 0, 0, 0, 288, 2340, 1, 0, 0, 0, 290, 2349, 1, 0, 0, 0, 292, 2357, 1, 0, 0, 0, 294, 2371, 1, 0, 0, 0, 296, 2375, 1, 0, 0, 0, 298, 2400, 1, 0, 0, 0, 300, 2404, 1, 0, 0, 0, 302, 2420, 1, 0, 0, 0, 304, 2422, 1, 0, 0, 0, 306, 2446, 1, 0, 0, 0, 308, 2452, 1, 0, 0, 0, 310, 2471, 1, 0, 0, 0, 312, 2480, 1, 0, 0, 0, 314, 2482, 1, 0, 0, 0, 316, 2511, 1, 0, 0, 0, 318, 2513, 1, 0, 0, 0, 320, 2519, 1, 0, 0, 0, 322, 2530, 1, 0, 0, 0, 324, 2534, 1, 0, 0, 0, 326, 2538, 1, 0, 0, 0, 328, 2548, 1, 0, 0, 0, 330, 2551, 1, 0, 0, 0, 332, 2573, 1, 0, 0, 0, 334, 2575, 1, 0, 0, 0, 336, 2577, 1, 0, 0, 0, 338, 2579, 1, 0, 0, 0, 340, 2589, 1, 0, 0, 0, 342, 2599, 1, 0, 0, 0, 344, 2615, 1, 0, 0, 0, 346, 2620, 1, 0, 0, 0, 348, 2630, 1, 0, 0, 0, 350, 2652, 1, 0, 0, 0, 352, 2682, 1, 0, 0, 0, 354, 2702, 1, 0, 0, 0, 356, 2707, 1, 0, 0, 0, 358, 2764, 1, 0, 0, 0, 360, 2777, 1, 0, 0, 0, 362, 2791, 1, 0, 0, 0, 364, 2793, 1, 0, 0, 0, 366, 2807, 1, 0, 0, 0, 368, 2809, 1, 0, 0, 0, 370, 2823, 1, 0, 0, 0, 372, 2825, 1, 0, 0, 0, 374, 2839, 1, 0, 0, 0, 376, 2841, 1, 0, 0, 0, 378, 2855, 1, 0, 0, 0, 380, 2857, 1, 0, 0, 0, 382, 2871, 1, 0, 0, 0, 384, 2873, 1, 0, 0, 0, 386, 2897, 1, 0, 0, 0, 388, 2899, 1, 0, 0, 0, 390, 2937, 1, 0, 0, 0, 392, 2967, 1, 0, 0, 0, 394, 2969, 1, 0, 0, 0, 396, 2971, 1, 0, 0, 0, 398, 3004, 1, 0, 0, 0, 400, 3013, 1, 0, 0, 0, 402, 3015, 1, 0, 0, 0, 404, 3017, 1, 0, 0, 0, 406, 3019, 1, 0, 0, 0, 408, 3079, 1, 0, 0, 0, 410, 3081, 1, 0, 0, 0, 412, 3091, 1, 0, 0, 0, 414, 3100, 1, 0, 0, 0, 416, 3107, 1, 0, 0, 0, 418, 3113, 1, 0, 0, 0, 420, 3148, 1, 0, 0, 0, 422, 3151, 1, 0, 0, 0, 424, 3153, 1, 0, 0, 0, 426, 3155, 1, 0, 0, 0, 428, 3175, 1, 0, 0, 0, 430, 3213, 1, 0, 0, 0, 432, 3241, 1, 0, 0, 0, 434, 3258, 1, 0, 0, 0, 436, 3272, 1, 0, 0, 0, 438, 3276, 1, 0, 0, 0, 440, 3278, 1, 0, 0, 0, 442, 3303, 1, 0, 0, 0, 444, 3336, 1, 0, 0, 0, 446, 3338, 1, 0, 0, 0, 448, 3348, 1, 0, 0, 0, 450, 3351, 1, 0, 0, 0, 452, 3353, 1, 0, 0, 0, 454, 3358, 1, 0, 0, 0, 456, 3360, 1, 0, 0, 0, 458, 3370, 1, 0, 0, 0, 460, 3375, 1, 0, 0, 0, 462, 3377, 1, 0, 0, 0, 464, 3391, 1, 0, 0, 0, 466, 3400, 1, 0, 0, 0, 468, 3414, 1, 0, 0, 0, 470, 3416, 1, 0, 0, 0, 472, 3418, 1, 0, 0, 0, 474, 3425, 1, 0, 0, 0, 476, 3428, 1, 0, 0, 0, 478, 3430, 1, 0, 0, 0, 480, 3432, 1, 0, 0, 0, 482, 3438, 1, 0, 0, 0, 484, 3440, 1, 0, 0, 0, 486, 491, 3, 2, 1, 0, 487, 488, 5, 1, 0, 0, 488, 490, 3, 2, 1, 0, 489, 487, 1, 0, 0, 0, 490, 493, 1, 0, 0, 0, 491, 489, 1, 0, 0, 0, 491, 492, 1, 0, 0, 0, 492, 495, 1, 0, 0, 0, 493, 491, 1, 0, 0, 0, 494, 496, 5, 1, 0, 0, 495, 494, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 497, 1, 0, 0, 0, 497, 498, 5, 0, 0, 1, 498, 1, 1, 0, 0, 0, 499, 501, 5, 218, 0, 0, 500, 499, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 504, 1, 0, 0, 0, 502, 505, 3, 64, 32, 0, 503, 505, 3, 4, 2, 0, 504, 502, 1, 0, 0, 0, 504, 503, 1, 0, 0, 0, 505, 507, 1, 0, 0, 0, 506, 508, 5, 218, 0, 0, 507, 506, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508, 3, 1, 0, 0, 0, 509, 512, 3, 6, 3, 0, 510, 511, 5, 218, 0, 0, 511, 513, 3, 8, 4, 0, 512, 510, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 5, 1, 0, 0, 0, 514, 515, 5, 2, 0, 0, 515, 520, 3, 482, 241, 0, 516, 517, 5, 3, 0, 0, 517, 519, 3, 482, 241, 0, 518, 516, 1, 0, 0, 0, 519, 522, 1, 0, 0, 0, 520, 518, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 7, 1, 0, 0, 0, 522, 520, 1, 0, 0, 0, 523, 528, 3, 10, 5, 0, 524, 525, 5, 218, 0, 0, 525, 527, 3, 10, 5, 0, 526, 524, 1, 0, 0, 0, 527, 530, 1, 0, 0, 0, 528, 526, 1, 0, 0, 0, 528, 529, 1, 0, 0, 0, 529, 9, 1, 0, 0, 0, 530, 528, 1, 0, 0, 0, 531, 542, 3, 14, 7, 0, 532, 542, 3, 48, 24, 0, 533, 542, 3, 12, 6, 0, 534, 542, 3, 440, 220, 0, 535, 542, 3, 58, 29, 0, 536, 542, 3, 402, 201, 0, 537, 542, 3, 438, 219, 0, 538, 542, 3, 404, 202, 0, 539, 542, 3, 62, 31, 0, 540, 542, 3, 60, 30, 0, 541, 531, 1, 0, 0, 0, 541, 532, 1, 0, 0, 0, 541, 533, 1, 0, 0, 0, 541, 534, 1, 0, 0, 0, 541, 535, 1, 0, 0, 0, 541, 536, 1, 0, 0, 0, 541, 537, 1, 0, 0, 0, 541, 538, 1, 0, 0, 0, 541, 539, 1, 0, 0, 0, 541, 540, 1, 0, 0, 0, 542, 11, 1, 0, 0, 0, 543, 545, 3, 482, 241, 0, 544, 546, 5, 218, 0, 0, 545, 544, 1, 0, 0, 0, 545, 546, 1, 0, 0, 0, 546, 547, 1, 0, 0, 0, 547, 549, 5, 4, 0, 0, 548, 550, 5, 218, 0, 0, 549, 548, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 551, 1, 0, 0, 0, 551, 552, 3, 336, 168, 0, 552, 13, 1, 0, 0, 0, 553, 554, 3, 16, 8, 0, 554, 15, 1, 0, 0, 0, 555, 556, 3, 18, 9, 0, 556, 558, 5, 5, 0, 0, 557, 559, 3, 32, 16, 0, 558, 557, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 560, 1, 0, 0, 0, 560, 563, 3, 20, 10, 0, 561, 562, 5, 2, 0, 0, 562, 564, 3, 26, 13, 0, 563, 561, 1, 0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 567, 1, 0, 0, 0, 565, 566, 5, 6, 0, 0, 566, 568, 3, 28, 14, 0, 567, 565, 1, 0, 0, 0, 567, 568, 1, 0, 0, 0, 568, 570, 1, 0, 0, 0, 569, 571, 3, 38, 19, 0, 570, 569, 1, 0, 0, 0, 570, 571, 1, 0, 0, 0, 571, 573, 1, 0, 0, 0, 572, 574, 3, 36, 18, 0, 573, 572, 1, 0, 0, 0, 573, 574, 1, 0, 0, 0, 574, 17, 1, 0, 0, 0, 575, 576, 3, 44, 22, 0, 576, 19, 1, 0, 0, 0, 577, 579, 5, 6, 0, 0, 578, 577, 1, 0, 0, 0, 578, 579, 1, 0, 0, 0, 579, 582, 1, 0, 0, 0, 580, 583, 3, 22, 11, 0, 581, 583, 3, 24, 12, 0, 582, 580, 1, 0, 0, 0, 582, 581, 1, 0, 0, 0, 583, 21, 1, 0, 0, 0, 584, 589, 3, 44, 22, 0, 585, 586, 5, 7, 0, 0, 586, 588, 3, 44, 22, 0, 587, 585, 1, 0, 0, 0, 588, 591, 1, 0, 0, 0, 589, 587, 1, 0, 0, 0, 589, 590, 1, 0, 0, 0, 590, 23, 1, 0, 0, 0, 591, 589, 1, 0, 0, 0, 592, 593, 3, 46, 23, 0, 593, 594, 5, 7, 0, 0, 594, 595, 3, 46, 23, 0, 595, 596, 5, 7, 0, 0, 596, 597, 3, 46, 23, 0, 597, 598, 5, 7, 0, 0, 598, 599, 3, 46, 23, 0, 599, 25, 1, 0, 0, 0, 600, 601, 3, 46, 23, 0, 601, 27, 1, 0, 0, 0, 602, 607, 3, 44, 22, 0, 603, 604, 5, 6, 0, 0, 604, 606, 3, 44, 22, 0, 605, 603, 1, 0, 0, 0, 606, 609, 1, 0, 0, 0, 607, 605, 1, 0, 0, 0, 607, 608, 1, 0, 0, 0, 608, 29, 1, 0, 0, 0, 609, 607, 1, 0, 0, 0, 610, 611, 3, 44, 22, 0, 611, 31, 1, 0, 0, 0, 612, 613, 3, 30, 15, 0, 613, 614, 5, 2, 0, 0, 614, 615, 3, 34, 17, 0, 615, 616, 5, 8, 0, 0, 616, 33, 1, 0, 0, 0, 617, 618, 3, 44, 22, 0, 618, 35, 1, 0, 0, 0, 619, 620, 5, 9, 0, 0, 620, 621, 3, 44, 22, 0, 621, 37, 1, 0, 0, 0, 622, 623, 5, 10, 0, 0, 623, 624, 3, 40, 20, 0, 624, 39, 1, 0, 0, 0, 625, 630, 3, 42, 21, 0, 626, 627, 5, 11, 0, 0, 627, 629, 3, 42, 21, 0, 628, 626, 1, 0, 0, 0, 629, 632, 1, 0, 0, 0, 630, 628, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631, 41, 1, 0, 0, 0, 632, 630, 1, 0, 0, 0, 633, 640, 3, 44, 22, 0, 634, 638, 5, 12, 0, 0, 635, 639, 3, 44, 22, 0, 636, 639, 3, 46, 23, 0, 637, 639, 5, 200, 0, 0, 638, 635, 1, 0, 0, 0, 638, 636, 1, 0, 0, 0, 638, 637, 1, 0, 0, 0, 639, 641, 1, 0, 0, 0, 640, 634, 1, 0, 0, 0, 640, 641, 1, 0, 0, 0, 641, 43, 1, 0, 0, 0, 642, 649, 3, 482, 241, 0, 643, 645, 7, 0, 0, 0, 644, 643, 1, 0, 0, 0, 644, 645, 1, 0, 0, 0, 645, 646, 1, 0, 0, 0, 646, 648, 3, 482, 241, 0, 647, 644, 1, 0, 0, 0, 648, 651, 1, 0, 0, 0, 649, 650, 1, 0, 0, 0, 649, 647, 1, 0, 0, 0, 650, 45, 1, 0, 0, 0, 651, 649, 1, 0, 0, 0, 652, 654, 3, 470, 235, 0, 653, 652, 1, 0, 0, 0, 654, 655, 1, 0, 0, 0, 655, 653, 1, 0, 0, 0, 655, 656, 1, 0, 0, 0, 656, 47, 1, 0, 0, 0, 657, 658, 3, 56, 28, 0, 658, 49, 1, 0, 0, 0, 659, 661, 5, 14, 0, 0, 660, 662, 5, 218, 0, 0, 661, 660, 1, 0, 0, 0, 661, 662, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 665, 3, 52, 26, 0, 664, 666, 5, 218, 0, 0, 665, 664, 1, 0, 0, 0, 665, 666, 1, 0, 0, 0, 666, 677, 1, 0, 0, 0, 667, 669, 5, 15, 0, 0, 668, 670, 5, 218, 0, 0, 669, 668, 1, 0, 0, 0, 669, 670, 1, 0, 0, 0, 670, 671, 1, 0, 0, 0, 671, 673, 3, 52, 26, 0, 672, 674, 5, 218, 0, 0, 673, 672, 1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674, 676, 1, 0, 0, 0, 675, 667, 1, 0, 0, 0, 676, 679, 1, 0, 0, 0, 677, 675, 1, 0, 0, 0, 677, 678, 1, 0, 0, 0, 678, 680, 1, 0, 0, 0, 679, 677, 1, 0, 0, 0, 680, 681, 5, 16, 0, 0, 681, 688, 1, 0, 0, 0, 682, 684, 5, 14, 0, 0, 683, 685, 5, 218, 0, 0, 684, 683, 1, 0, 0, 0, 684, 685, 1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686, 688, 5, 16, 0, 0, 687, 659, 1, 0, 0, 0, 687, 682, 1, 0, 0, 0, 688, 51, 1, 0, 0, 0, 689, 691, 3, 402, 201, 0, 690, 692, 5, 218, 0, 0, 691, 690, 1, 0, 0, 0, 691, 692, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 695, 5, 2, 0, 0, 694, 696, 5, 218, 0, 0, 695, 694, 1, 0, 0, 0, 695, 696, 1, 0, 0, 0, 696, 697, 1, 0, 0, 0, 697, 698, 3, 56, 28, 0, 698, 53, 1, 0, 0, 0, 699, 701, 5, 17, 0, 0, 700, 702, 5, 218, 0, 0, 701, 700, 1, 0, 0, 0, 701, 702, 1, 0, 0, 0, 702, 703, 1, 0, 0, 0, 703, 705, 3, 56, 28, 0, 704, 706, 5, 218, 0, 0, 705, 704, 1, 0, 0, 0, 705, 706, 1, 0, 0, 0, 706, 717, 1, 0, 0, 0, 707, 709, 5, 15, 0, 0, 708, 710, 5, 218, 0, 0, 709, 708, 1, 0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711, 713, 3, 56, 28, 0, 712, 714, 5, 218, 0, 0, 713, 712, 1, 0, 0, 0, 713, 714, 1, 0, 0, 0, 714, 716, 1, 0, 0, 0, 715, 707, 1, 0, 0, 0, 716, 719, 1, 0, 0, 0, 717, 715, 1, 0, 0, 0, 717, 718, 1, 0, 0, 0, 718, 720, 1, 0, 0, 0, 719, 717, 1, 0, 0, 0, 720, 721, 5, 18, 0, 0, 721, 728, 1, 0, 0, 0, 722, 724, 5, 17, 0, 0, 723, 725, 5, 218, 0, 0, 724, 723, 1, 0, 0, 0, 724, 725, 1, 0, 0, 0, 725, 726, 1, 0, 0, 0, 726, 728, 5, 18, 0, 0, 727, 699, 1, 0, 0, 0, 727, 722, 1, 0, 0, 0, 728, 55, 1, 0, 0, 0, 729, 736, 3, 402, 201, 0, 730, 736, 3, 438, 219, 0, 731, 736, 3, 50, 25, 0, 732, 736, 3, 54, 27, 0, 733, 736, 3, 404, 202, 0, 734, 736, 5, 114, 0, 0, 735, 729, 1, 0, 0, 0, 735, 730, 1, 0, 0, 0, 735, 731, 1, 0, 0, 0, 735, 732, 1, 0, 0, 0, 735, 733, 1, 0, 0, 0, 735, 734, 1, 0, 0, 0, 736, 57, 1, 0, 0, 0, 737, 738, 3, 436, 218, 0, 738, 739, 5, 2, 0, 0, 739, 744, 5, 218, 0, 0, 740, 745, 5, 199, 0, 0, 741, 745, 3, 438, 219, 0, 742, 745, 3, 404, 202, 0, 743, 745, 3, 482, 241, 0, 744, 740, 1, 0, 0, 0, 744, 741, 1, 0, 0, 0, 744, 742, 1, 0, 0, 0, 744, 743, 1, 0, 0, 0, 745, 59, 1, 0, 0, 0, 746, 749, 5, 6, 0, 0, 747, 750, 3, 482, 241, 0, 748, 750, 3, 438, 219, 0, 749, 747, 1, 0, 0, 0, 749, 748, 1, 0, 0, 0, 750, 752, 1, 0, 0, 0, 751, 746, 1, 0, 0, 0, 752, 753, 1, 0, 0, 0, 753, 751, 1, 0, 0, 0, 753, 754, 1, 0, 0, 0, 754, 756, 1, 0, 0, 0, 755, 757, 5, 6, 0, 0, 756, 755, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757, 61, 1, 0, 0, 0, 758, 763, 3, 482, 241, 0, 759, 760, 5, 3, 0, 0, 760, 762, 3, 482, 241, 0, 761, 759, 1, 0, 0, 0, 762, 765, 1, 0, 0, 0, 763, 761, 1, 0, 0, 0, 763, 764, 1, 0, 0, 0, 764, 63, 1, 0, 0, 0, 765, 763, 1, 0, 0, 0, 766, 767, 3, 66, 33, 0, 767, 768, 3, 80, 40, 0, 768, 65, 1, 0, 0, 0, 769, 771, 3, 68, 34, 0, 770, 772, 5, 218, 0, 0, 771, 770, 1, 0, 0, 0, 771, 772, 1, 0, 0, 0, 772, 774, 1, 0, 0, 0, 773, 769, 1, 0, 0, 0, 774, 777, 1, 0, 0, 0, 775, 773, 1, 0, 0, 0, 775, 776, 1, 0, 0, 0, 776, 67, 1, 0, 0, 0, 777, 775, 1, 0, 0, 0, 778, 782, 3, 70, 35, 0, 779, 782, 3, 74, 37, 0, 780, 782, 3, 76, 38, 0, 781, 778, 1, 0, 0, 0, 781, 779, 1, 0, 0, 0, 781, 780, 1, 0, 0, 0, 782, 69, 1, 0, 0, 0, 783, 786, 5, 54, 0, 0, 784, 785, 5, 218, 0, 0, 785, 787, 3, 72, 36, 0, 786, 784, 1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787, 792, 1, 0, 0, 0, 788, 789, 5, 218, 0, 0, 789, 791, 3, 78, 39, 0, 790, 788, 1, 0, 0, 0, 791, 794, 1, 0, 0, 0, 792, 790, 1, 0, 0, 0, 792, 793, 1, 0, 0, 0, 793, 71, 1, 0, 0, 0, 794, 792, 1, 0, 0, 0, 795, 796, 5, 213, 0, 0, 796, 73, 1, 0, 0, 0, 797, 798, 5, 55, 0, 0, 798, 75, 1, 0, 0, 0, 799, 800, 5, 56, 0, 0, 800, 77, 1, 0, 0, 0, 801, 803, 3, 482, 241, 0, 802, 804, 5, 218, 0, 0, 803, 802, 1, 0, 0, 0, 803, 804, 1, 0, 0, 0, 804, 805, 1, 0, 0, 0, 805, 807, 5, 12, 0, 0, 806, 808, 5, 218, 0, 0, 807, 806, 1, 0, 0, 0, 807, 808, 1, 0, 0, 0, 808, 809, 1, 0, 0, 0, 809, 810, 3, 482, 241, 0, 810, 79, 1, 0, 0, 0, 811, 819, 3, 98, 49, 0, 812, 819, 3, 82, 41, 0, 813, 814, 5, 132, 0, 0, 814, 816, 5, 218, 0, 0, 815, 813, 1, 0, 0, 0, 815, 816, 1, 0, 0, 0, 816, 817, 1, 0, 0, 0, 817, 819, 3, 100, 50, 0, 818, 811, 1, 0, 0, 0, 818, 812, 1, 0, 0, 0, 818, 815, 1, 0, 0, 0, 819, 81, 1, 0, 0, 0, 820, 823, 3, 84, 42, 0, 821, 823, 3, 86, 43, 0, 822, 820, 1, 0, 0, 0, 822, 821, 1, 0, 0, 0, 823, 83, 1, 0, 0, 0, 824, 831, 3, 88, 44, 0, 825, 827, 5, 218, 0, 0, 826, 825, 1, 0, 0, 0, 826, 827, 1, 0, 0, 0, 827, 828, 1, 0, 0, 0, 828, 830, 3, 94, 47, 0, 829, 826, 1, 0, 0, 0, 830, 833, 1, 0, 0, 0, 831, 829, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 832, 85, 1, 0, 0, 0, 833, 831, 1, 0, 0, 0, 834, 836, 3, 90, 45, 0, 835, 837, 5, 218, 0, 0, 836, 835, 1, 0, 0, 0, 836, 837, 1, 0, 0, 0, 837, 838, 1, 0, 0, 0, 838, 839, 3, 92, 46, 0, 839, 87, 1, 0, 0, 0, 840, 847, 3, 96, 48, 0, 841, 843, 5, 218, 0, 0, 842, 841, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843, 844, 1, 0, 0, 0, 844, 846, 3, 96, 48, 0, 845, 842, 1, 0, 0, 0, 846, 849, 1, 0, 0, 0, 847, 845, 1, 0, 0, 0, 847, 848, 1, 0, 0, 0, 848, 89, 1, 0, 0, 0, 849, 847, 1, 0, 0, 0, 850, 851, 5, 57, 0, 0, 851, 852, 5, 218, 0, 0, 852, 853, 5, 58, 0, 0, 853, 854, 5, 218, 0, 0, 854, 857, 5, 59, 0, 0, 855, 856, 5, 218, 0, 0, 856, 858, 3, 470, 235, 0, 857, 855, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 91, 1, 0, 0, 0, 859, 866, 3, 210, 105, 0, 860, 862, 5, 218, 0, 0, 861, 860, 1, 0, 0, 0, 861, 862, 1, 0, 0, 0, 862, 863, 1, 0, 0, 0, 863, 865, 3, 96, 48, 0, 864, 861, 1, 0, 0, 0, 865, 868, 1, 0, 0, 0, 866, 864, 1, 0, 0, 0, 866, 867, 1, 0, 0, 0, 867, 93, 1, 0, 0, 0, 868, 866, 1, 0, 0, 0, 869, 870, 5, 60, 0, 0, 870, 871, 5, 218, 0, 0, 871, 873, 5, 61, 0, 0, 872, 874, 5, 218, 0, 0, 873, 872, 1, 0, 0, 0, 873, 874, 1, 0, 0, 0, 874, 875, 1, 0, 0, 0, 875, 882, 3, 88, 44, 0, 876, 878, 5, 60, 0, 0, 877, 879, 5, 218, 0, 0, 878, 877, 1, 0, 0, 0, 878, 879, 1, 0, 0, 0, 879, 880, 1, 0, 0, 0, 880, 882, 3, 88, 44, 0, 881, 869, 1, 0, 0, 0, 881, 876, 1, 0, 0, 0, 882, 95, 1, 0, 0, 0, 883, 898, 3, 210, 105, 0, 884, 898, 3, 276, 138, 0, 885, 898, 3, 212, 106, 0, 886, 898, 3, 214, 107, 0, 887, 898, 3, 216, 108, 0, 888, 898, 3, 220, 110, 0, 889, 898, 3, 222, 111, 0, 890, 898, 3, 224, 112, 0, 891, 898, 3, 228, 114, 0, 892, 898, 3, 230, 115, 0, 893, 898, 3, 234, 117, 0, 894, 898, 3, 236, 118, 0, 895, 898, 3, 238, 119, 0, 896, 898, 3, 248, 124, 0, 897, 883, 1, 0, 0, 0, 897, 884, 1, 0, 0, 0, 897, 885, 1, 0, 0, 0, 897, 886, 1, 0, 0, 0, 897, 887, 1, 0, 0, 0, 897, 888, 1, 0, 0, 0, 897, 889, 1, 0, 0, 0, 897, 890, 1, 0, 0, 0, 897, 891, 1, 0, 0, 0, 897, 892, 1, 0, 0, 0, 897, 893, 1, 0, 0, 0, 897, 894, 1, 0, 0, 0, 897, 895, 1, 0, 0, 0, 897, 896, 1, 0, 0, 0, 898, 97, 1, 0, 0, 0, 899, 910, 3, 186, 93, 0, 900, 910, 3, 196, 98, 0, 901, 910, 3, 178, 89, 0, 902, 910, 3, 188, 94, 0, 903, 910, 3, 180, 90, 0, 904, 910, 3, 190, 95, 0, 905, 910, 3, 182, 91, 0, 906, 910, 3, 192, 96, 0, 907, 910, 3, 184, 92, 0, 908, 910, 3, 194, 97, 0, 909, 899, 1, 0, 0, 0, 909, 900, 1, 0, 0, 0, 909, 901, 1, 0, 0, 0, 909, 902, 1, 0, 0, 0, 909, 903, 1, 0, 0, 0, 909, 904, 1, 0, 0, 0, 909, 905, 1, 0, 0, 0, 909, 906, 1, 0, 0, 0, 909, 907, 1, 0, 0, 0, 909, 908, 1, 0, 0, 0, 910, 99, 1, 0, 0, 0, 911, 915, 3, 102, 51, 0, 912, 915, 3, 104, 52, 0, 913, 915, 3, 106, 53, 0, 914, 911, 1, 0, 0, 0, 914, 912, 1, 0, 0, 0, 914, 913, 1, 0, 0, 0, 915, 101, 1, 0, 0, 0, 916, 922, 3, 154, 77, 0, 917, 922, 3, 156, 78, 0, 918, 922, 3, 158, 79, 0, 919, 922, 3, 160, 80, 0, 920, 922, 3, 162, 81, 0, 921, 916, 1, 0, 0, 0, 921, 917, 1, 0, 0, 0, 921, 918, 1, 0, 0, 0, 921, 919, 1, 0, 0, 0, 921, 920, 1, 0, 0, 0, 922, 103, 1, 0, 0, 0, 923, 931, 3, 108, 54, 0, 924, 931, 3, 110, 55, 0, 925, 931, 3, 114, 57, 0, 926, 931, 3, 116, 58, 0, 927, 931, 3, 118, 59, 0, 928, 931, 3, 120, 60, 0, 929, 931, 3, 122, 61, 0, 930, 923, 1, 0, 0, 0, 930, 924, 1, 0, 0, 0, 930, 925, 1, 0, 0, 0, 930, 926, 1, 0, 0, 0, 930, 927, 1, 0, 0, 0, 930, 928, 1, 0, 0, 0, 930, 929, 1, 0, 0, 0, 931, 105, 1, 0, 0, 0, 932, 937, 3, 124, 62, 0, 933, 937, 3, 126, 63, 0, 934, 937, 3, 128, 64, 0, 935, 937, 3, 130, 65, 0, 936, 932, 1, 0, 0, 0, 936, 933, 1, 0, 0, 0, 936, 934, 1, 0, 0, 0, 936, 935, 1, 0, 0, 0, 937, 107, 1, 0, 0, 0, 938, 939, 5, 133, 0, 0, 939, 942, 5, 218, 0, 0, 940, 941, 5, 61, 0, 0, 941, 943, 5, 218, 0, 0, 942, 940, 1, 0, 0, 0, 942, 943, 1, 0, 0, 0, 943, 944, 1, 0, 0, 0, 944, 949, 5, 144, 0, 0, 945, 946, 5, 218, 0, 0, 946, 947, 5, 73, 0, 0, 947, 948, 5, 218, 0, 0, 948, 950, 5, 146, 0, 0, 949, 945, 1, 0, 0, 0, 949, 950, 1, 0, 0, 0, 950, 965, 1, 0, 0, 0, 951, 952, 5, 133, 0, 0, 952, 955, 5, 218, 0, 0, 953, 954, 5, 147, 0, 0, 954, 956, 5, 218, 0, 0, 955, 953, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956, 957, 1, 0, 0, 0, 957, 962, 5, 144, 0, 0, 958, 959, 5, 218, 0, 0, 959, 960, 5, 73, 0, 0, 960, 961, 5, 218, 0, 0, 961, 963, 5, 146, 0, 0, 962, 958, 1, 0, 0, 0, 962, 963, 1, 0, 0, 0, 963, 965, 1, 0, 0, 0, 964, 938, 1, 0, 0, 0, 964, 951, 1, 0, 0, 0, 965, 109, 1, 0, 0, 0, 966, 967, 5, 62, 0, 0, 967, 968, 5, 218, 0, 0, 968, 969, 5, 143, 0, 0, 969, 970, 5, 218, 0, 0, 970, 973, 3, 482, 241, 0, 971, 972, 5, 218, 0, 0, 972, 974, 3, 164, 82, 0, 973, 971, 1, 0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 977, 1, 0, 0, 0, 975, 976, 5, 218, 0, 0, 976, 978, 3, 112, 56, 0, 977, 975, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0, 978, 994, 1, 0, 0, 0, 979, 980, 5, 62, 0, 0, 980, 984, 5, 218, 0, 0, 981, 982, 3, 168, 84, 0, 982, 983, 5, 218, 0, 0, 983, 985, 1, 0, 0, 0, 984, 981, 1, 0, 0, 0, 984, 985, 1, 0, 0, 0, 985, 986, 1, 0, 0, 0, 986, 987, 5, 143, 0, 0, 987, 988, 5, 218, 0, 0, 988, 991, 3, 482, 241, 0, 989, 990, 5, 218, 0, 0, 990, 992, 3, 112, 56, 0, 991, 989, 1, 0, 0, 0, 991, 992, 1, 0, 0, 0, 992, 994, 1, 0, 0, 0, 993, 966, 1, 0, 0, 0, 993, 979, 1, 0, 0, 0, 994, 111, 1, 0, 0, 0, 995, 996, 5, 76, 0, 0, 996, 997, 5, 218, 0, 0, 997, 998, 5, 165, 0, 0, 998, 999, 5, 218, 0, 0, 999, 1e3, 5, 166, 0, 0, 1e3, 1001, 5, 218, 0, 0, 1001, 1002, 3, 482, 241, 0, 1002, 113, 1, 0, 0, 0, 1003, 1004, 5, 63, 0, 0, 1004, 1005, 5, 218, 0, 0, 1005, 1006, 5, 143, 0, 0, 1006, 1007, 5, 218, 0, 0, 1007, 1012, 3, 482, 241, 0, 1008, 1009, 5, 218, 0, 0, 1009, 1010, 5, 141, 0, 0, 1010, 1011, 5, 218, 0, 0, 1011, 1013, 5, 70, 0, 0, 1012, 1008, 1, 0, 0, 0, 1012, 1013, 1, 0, 0, 0, 1013, 115, 1, 0, 0, 0, 1014, 1015, 5, 133, 0, 0, 1015, 1016, 5, 218, 0, 0, 1016, 1017, 5, 146, 0, 0, 1017, 117, 1, 0, 0, 0, 1018, 1019, 5, 62, 0, 0, 1019, 1020, 5, 218, 0, 0, 1020, 1021, 5, 145, 0, 0, 1021, 1022, 5, 218, 0, 0, 1022, 1023, 3, 30, 15, 0, 1023, 1026, 5, 218, 0, 0, 1024, 1025, 5, 218, 0, 0, 1025, 1027, 3, 164, 82, 0, 1026, 1024, 1, 0, 0, 0, 1026, 1027, 1, 0, 0, 0, 1027, 1028, 1, 0, 0, 0, 1028, 1031, 3, 170, 85, 0, 1029, 1030, 5, 218, 0, 0, 1030, 1032, 3, 174, 87, 0, 1031, 1029, 1, 0, 0, 0, 1031, 1032, 1, 0, 0, 0, 1032, 1050, 1, 0, 0, 0, 1033, 1034, 5, 62, 0, 0, 1034, 1038, 5, 218, 0, 0, 1035, 1036, 3, 168, 84, 0, 1036, 1037, 5, 218, 0, 0, 1037, 1039, 1, 0, 0, 0, 1038, 1035, 1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039, 1040, 1, 0, 0, 0, 1040, 1041, 5, 145, 0, 0, 1041, 1042, 5, 218, 0, 0, 1042, 1043, 3, 30, 15, 0, 1043, 1044, 5, 218, 0, 0, 1044, 1047, 3, 170, 85, 0, 1045, 1046, 5, 218, 0, 0, 1046, 1048, 3, 174, 87, 0, 1047, 1045, 1, 0, 0, 0, 1047, 1048, 1, 0, 0, 0, 1048, 1050, 1, 0, 0, 0, 1049, 1018, 1, 0, 0, 0, 1049, 1033, 1, 0, 0, 0, 1050, 119, 1, 0, 0, 0, 1051, 1052, 5, 63, 0, 0, 1052, 1053, 5, 218, 0, 0, 1053, 1054, 5, 145, 0, 0, 1054, 1055, 5, 218, 0, 0, 1055, 1058, 3, 30, 15, 0, 1056, 1057, 5, 218, 0, 0, 1057, 1059, 3, 166, 83, 0, 1058, 1056, 1, 0, 0, 0, 1058, 1059, 1, 0, 0, 0, 1059, 121, 1, 0, 0, 0, 1060, 1061, 5, 154, 0, 0, 1061, 1062, 5, 218, 0, 0, 1062, 1063, 5, 155, 0, 0, 1063, 1064, 5, 218, 0, 0, 1064, 1065, 5, 145, 0, 0, 1065, 1066, 5, 218, 0, 0, 1066, 1067, 5, 82, 0, 0, 1067, 1068, 5, 218, 0, 0, 1068, 1069, 5, 148, 0, 0, 1069, 1070, 5, 218, 0, 0, 1070, 1071, 5, 75, 0, 0, 1071, 1074, 5, 218, 0, 0, 1072, 1075, 3, 34, 17, 0, 1073, 1075, 3, 454, 227, 0, 1074, 1072, 1, 0, 0, 0, 1074, 1073, 1, 0, 0, 0, 1075, 1076, 1, 0, 0, 0, 1076, 1077, 5, 156, 0, 0, 1077, 1080, 5, 218, 0, 0, 1078, 1081, 3, 34, 17, 0, 1079, 1081, 3, 454, 227, 0, 1080, 1078, 1, 0, 0, 0, 1080, 1079, 1, 0, 0, 0, 1081, 1102, 1, 0, 0, 0, 1082, 1083, 5, 154, 0, 0, 1083, 1084, 5, 218, 0, 0, 1084, 1085, 5, 145, 0, 0, 1085, 1086, 5, 218, 0, 0, 1086, 1087, 3, 30, 15, 0, 1087, 1088, 5, 218, 0, 0, 1088, 1091, 3, 170, 85, 0, 1089, 1090, 5, 218, 0, 0, 1090, 1092, 3, 174, 87, 0, 1091, 1089, 1, 0, 0, 0, 1091, 1092, 1, 0, 0, 0, 1092, 1102, 1, 0, 0, 0, 1093, 1094, 5, 154, 0, 0, 1094, 1095, 5, 218, 0, 0, 1095, 1096, 5, 145, 0, 0, 1096, 1097, 5, 218, 0, 0, 1097, 1098, 3, 30, 15, 0, 1098, 1099, 5, 218, 0, 0, 1099, 1100, 3, 174, 87, 0, 1100, 1102, 1, 0, 0, 0, 1101, 1060, 1, 0, 0, 0, 1101, 1082, 1, 0, 0, 0, 1101, 1093, 1, 0, 0, 0, 1102, 123, 1, 0, 0, 0, 1103, 1104, 5, 133, 0, 0, 1104, 1107, 5, 218, 0, 0, 1105, 1106, 5, 61, 0, 0, 1106, 1108, 5, 218, 0, 0, 1107, 1105, 1, 0, 0, 0, 1107, 1108, 1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109, 1131, 5, 157, 0, 0, 1110, 1111, 5, 133, 0, 0, 1111, 1117, 5, 218, 0, 0, 1112, 1113, 5, 143, 0, 0, 1113, 1114, 5, 218, 0, 0, 1114, 1115, 3, 482, 241, 0, 1115, 1116, 5, 218, 0, 0, 1116, 1118, 1, 0, 0, 0, 1117, 1112, 1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 1119, 1, 0, 0, 0, 1119, 1131, 5, 157, 0, 0, 1120, 1121, 5, 133, 0, 0, 1121, 1127, 5, 218, 0, 0, 1122, 1123, 5, 145, 0, 0, 1123, 1124, 5, 218, 0, 0, 1124, 1125, 3, 30, 15, 0, 1125, 1126, 5, 218, 0, 0, 1126, 1128, 1, 0, 0, 0, 1127, 1122, 1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128, 1129, 1, 0, 0, 0, 1129, 1131, 5, 157, 0, 0, 1130, 1103, 1, 0, 0, 0, 1130, 1110, 1, 0, 0, 0, 1130, 1120, 1, 0, 0, 0, 1131, 125, 1, 0, 0, 0, 1132, 1133, 5, 158, 0, 0, 1133, 1134, 5, 218, 0, 0, 1134, 1135, 5, 143, 0, 0, 1135, 1136, 5, 218, 0, 0, 1136, 1137, 3, 138, 69, 0, 1137, 1138, 5, 218, 0, 0, 1138, 1139, 5, 156, 0, 0, 1139, 1140, 5, 218, 0, 0, 1140, 1141, 3, 30, 15, 0, 1141, 1178, 1, 0, 0, 0, 1142, 1143, 5, 158, 0, 0, 1143, 1144, 5, 218, 0, 0, 1144, 1145, 3, 144, 72, 0, 1145, 1146, 5, 218, 0, 0, 1146, 1147, 5, 65, 0, 0, 1147, 1148, 5, 218, 0, 0, 1148, 1149, 3, 134, 67, 0, 1149, 1150, 5, 218, 0, 0, 1150, 1151, 5, 156, 0, 0, 1151, 1152, 3, 138, 69, 0, 1152, 1178, 1, 0, 0, 0, 1153, 1154, 5, 158, 0, 0, 1154, 1155, 5, 218, 0, 0, 1155, 1156, 3, 140, 70, 0, 1156, 1157, 5, 218, 0, 0, 1157, 1158, 5, 65, 0, 0, 1158, 1159, 5, 218, 0, 0, 1159, 1160, 3, 136, 68, 0, 1160, 1161, 5, 218, 0, 0, 1161, 1162, 3, 148, 74, 0, 1162, 1163, 5, 218, 0, 0, 1163, 1164, 5, 156, 0, 0, 1164, 1165, 3, 138, 69, 0, 1165, 1178, 1, 0, 0, 0, 1166, 1167, 5, 158, 0, 0, 1167, 1168, 5, 218, 0, 0, 1168, 1169, 3, 146, 73, 0, 1169, 1170, 5, 218, 0, 0, 1170, 1171, 5, 65, 0, 0, 1171, 1172, 5, 218, 0, 0, 1172, 1173, 5, 135, 0, 0, 1173, 1174, 5, 218, 0, 0, 1174, 1175, 5, 156, 0, 0, 1175, 1176, 3, 138, 69, 0, 1176, 1178, 1, 0, 0, 0, 1177, 1132, 1, 0, 0, 0, 1177, 1142, 1, 0, 0, 0, 1177, 1153, 1, 0, 0, 0, 1177, 1166, 1, 0, 0, 0, 1178, 127, 1, 0, 0, 0, 1179, 1180, 5, 159, 0, 0, 1180, 1181, 5, 218, 0, 0, 1181, 1182, 5, 143, 0, 0, 1182, 1183, 5, 218, 0, 0, 1183, 1184, 3, 138, 69, 0, 1184, 1185, 5, 218, 0, 0, 1185, 1186, 5, 156, 0, 0, 1186, 1187, 5, 218, 0, 0, 1187, 1188, 3, 30, 15, 0, 1188, 1225, 1, 0, 0, 0, 1189, 1190, 5, 159, 0, 0, 1190, 1191, 5, 218, 0, 0, 1191, 1192, 3, 144, 72, 0, 1192, 1193, 5, 218, 0, 0, 1193, 1194, 5, 65, 0, 0, 1194, 1195, 5, 218, 0, 0, 1195, 1196, 3, 134, 67, 0, 1196, 1197, 5, 218, 0, 0, 1197, 1198, 5, 156, 0, 0, 1198, 1199, 3, 138, 69, 0, 1199, 1225, 1, 0, 0, 0, 1200, 1201, 5, 159, 0, 0, 1201, 1202, 5, 218, 0, 0, 1202, 1203, 3, 140, 70, 0, 1203, 1204, 5, 218, 0, 0, 1204, 1205, 5, 65, 0, 0, 1205, 1206, 5, 218, 0, 0, 1206, 1207, 3, 136, 68, 0, 1207, 1208, 5, 218, 0, 0, 1208, 1209, 3, 148, 74, 0, 1209, 1210, 5, 218, 0, 0, 1210, 1211, 5, 156, 0, 0, 1211, 1212, 3, 138, 69, 0, 1212, 1225, 1, 0, 0, 0, 1213, 1214, 5, 159, 0, 0, 1214, 1215, 5, 218, 0, 0, 1215, 1216, 3, 146, 73, 0, 1216, 1217, 5, 218, 0, 0, 1217, 1218, 5, 65, 0, 0, 1218, 1219, 5, 218, 0, 0, 1219, 1220, 5, 135, 0, 0, 1220, 1221, 5, 218, 0, 0, 1221, 1222, 5, 156, 0, 0, 1222, 1223, 3, 138, 69, 0, 1223, 1225, 1, 0, 0, 0, 1224, 1179, 1, 0, 0, 0, 1224, 1189, 1, 0, 0, 0, 1224, 1200, 1, 0, 0, 0, 1224, 1213, 1, 0, 0, 0, 1225, 129, 1, 0, 0, 0, 1226, 1227, 5, 160, 0, 0, 1227, 1228, 5, 218, 0, 0, 1228, 1229, 5, 143, 0, 0, 1229, 1230, 5, 218, 0, 0, 1230, 1231, 3, 138, 69, 0, 1231, 1232, 5, 218, 0, 0, 1232, 1233, 5, 75, 0, 0, 1233, 1234, 5, 218, 0, 0, 1234, 1235, 3, 30, 15, 0, 1235, 1248, 1, 0, 0, 0, 1236, 1239, 5, 160, 0, 0, 1237, 1238, 5, 218, 0, 0, 1238, 1240, 7, 1, 0, 0, 1239, 1237, 1, 0, 0, 0, 1239, 1240, 1, 0, 0, 0, 1240, 1241, 1, 0, 0, 0, 1241, 1242, 3, 132, 66, 0, 1242, 1243, 5, 218, 0, 0, 1243, 1244, 5, 75, 0, 0, 1244, 1245, 5, 218, 0, 0, 1245, 1246, 3, 138, 69, 0, 1246, 1248, 1, 0, 0, 0, 1247, 1226, 1, 0, 0, 0, 1247, 1236, 1, 0, 0, 0, 1248, 131, 1, 0, 0, 0, 1249, 1250, 3, 144, 72, 0, 1250, 1251, 5, 218, 0, 0, 1251, 1252, 5, 65, 0, 0, 1252, 1253, 5, 218, 0, 0, 1253, 1254, 3, 134, 67, 0, 1254, 1268, 1, 0, 0, 0, 1255, 1256, 3, 142, 71, 0, 1256, 1257, 5, 218, 0, 0, 1257, 1258, 5, 65, 0, 0, 1258, 1259, 5, 218, 0, 0, 1259, 1260, 3, 136, 68, 0, 1260, 1268, 1, 0, 0, 0, 1261, 1262, 3, 146, 73, 0, 1262, 1263, 5, 218, 0, 0, 1263, 1264, 5, 65, 0, 0, 1264, 1265, 5, 218, 0, 0, 1265, 1266, 5, 135, 0, 0, 1266, 1268, 1, 0, 0, 0, 1267, 1249, 1, 0, 0, 0, 1267, 1255, 1, 0, 0, 0, 1267, 1261, 1, 0, 0, 0, 1268, 133, 1, 0, 0, 0, 1269, 1270, 7, 2, 0, 0, 1270, 1271, 5, 218, 0, 0, 1271, 1289, 5, 19, 0, 0, 1272, 1273, 7, 2, 0, 0, 1273, 1274, 5, 218, 0, 0, 1274, 1285, 3, 482, 241, 0, 1275, 1277, 5, 218, 0, 0, 1276, 1275, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1278, 1, 0, 0, 0, 1278, 1280, 5, 15, 0, 0, 1279, 1281, 5, 218, 0, 0, 1280, 1279, 1, 0, 0, 0, 1280, 1281, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1284, 3, 482, 241, 0, 1283, 1276, 1, 0, 0, 0, 1284, 1287, 1, 0, 0, 0, 1285, 1283, 1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286, 1289, 1, 0, 0, 0, 1287, 1285, 1, 0, 0, 0, 1288, 1269, 1, 0, 0, 0, 1288, 1272, 1, 0, 0, 0, 1289, 135, 1, 0, 0, 0, 1290, 1291, 7, 3, 0, 0, 1291, 1292, 5, 218, 0, 0, 1292, 1310, 5, 19, 0, 0, 1293, 1294, 7, 3, 0, 0, 1294, 1295, 5, 218, 0, 0, 1295, 1306, 3, 482, 241, 0, 1296, 1298, 5, 218, 0, 0, 1297, 1296, 1, 0, 0, 0, 1297, 1298, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1301, 5, 15, 0, 0, 1300, 1302, 5, 218, 0, 0, 1301, 1300, 1, 0, 0, 0, 1301, 1302, 1, 0, 0, 0, 1302, 1303, 1, 0, 0, 0, 1303, 1305, 3, 482, 241, 0, 1304, 1297, 1, 0, 0, 0, 1305, 1308, 1, 0, 0, 0, 1306, 1304, 1, 0, 0, 0, 1306, 1307, 1, 0, 0, 0, 1307, 1310, 1, 0, 0, 0, 1308, 1306, 1, 0, 0, 0, 1309, 1290, 1, 0, 0, 0, 1309, 1293, 1, 0, 0, 0, 1310, 137, 1, 0, 0, 0, 1311, 1322, 3, 482, 241, 0, 1312, 1314, 5, 218, 0, 0, 1313, 1312, 1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 1315, 1, 0, 0, 0, 1315, 1317, 5, 15, 0, 0, 1316, 1318, 5, 218, 0, 0, 1317, 1316, 1, 0, 0, 0, 1317, 1318, 1, 0, 0, 0, 1318, 1319, 1, 0, 0, 0, 1319, 1321, 3, 482, 241, 0, 1320, 1313, 1, 0, 0, 0, 1321, 1324, 1, 0, 0, 0, 1322, 1320, 1, 0, 0, 0, 1322, 1323, 1, 0, 0, 0, 1323, 139, 1, 0, 0, 0, 1324, 1322, 1, 0, 0, 0, 1325, 1336, 3, 142, 71, 0, 1326, 1327, 5, 79, 0, 0, 1327, 1328, 5, 218, 0, 0, 1328, 1330, 5, 14, 0, 0, 1329, 1331, 5, 218, 0, 0, 1330, 1329, 1, 0, 0, 0, 1330, 1331, 1, 0, 0, 0, 1331, 1332, 1, 0, 0, 0, 1332, 1333, 3, 150, 75, 0, 1333, 1334, 5, 16, 0, 0, 1334, 1336, 1, 0, 0, 0, 1335, 1325, 1, 0, 0, 0, 1335, 1326, 1, 0, 0, 0, 1336, 141, 1, 0, 0, 0, 1337, 1349, 5, 167, 0, 0, 1338, 1339, 5, 168, 0, 0, 1339, 1340, 5, 218, 0, 0, 1340, 1342, 5, 14, 0, 0, 1341, 1343, 5, 218, 0, 0, 1342, 1341, 1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343, 1344, 1, 0, 0, 0, 1344, 1345, 3, 150, 75, 0, 1345, 1346, 5, 16, 0, 0, 1346, 1349, 1, 0, 0, 0, 1347, 1349, 5, 169, 0, 0, 1348, 1337, 1, 0, 0, 0, 1348, 1338, 1, 0, 0, 0, 1348, 1347, 1, 0, 0, 0, 1349, 143, 1, 0, 0, 0, 1350, 1413, 5, 170, 0, 0, 1351, 1413, 5, 100, 0, 0, 1352, 1413, 5, 142, 0, 0, 1353, 1354, 5, 62, 0, 0, 1354, 1355, 5, 218, 0, 0, 1355, 1413, 7, 4, 0, 0, 1356, 1357, 5, 63, 0, 0, 1357, 1358, 5, 218, 0, 0, 1358, 1413, 7, 4, 0, 0, 1359, 1360, 7, 4, 0, 0, 1360, 1361, 5, 218, 0, 0, 1361, 1413, 5, 172, 0, 0, 1362, 1363, 5, 62, 0, 0, 1363, 1364, 5, 218, 0, 0, 1364, 1413, 7, 5, 0, 0, 1365, 1366, 5, 63, 0, 0, 1366, 1367, 5, 218, 0, 0, 1367, 1413, 7, 5, 0, 0, 1368, 1369, 7, 5, 0, 0, 1369, 1370, 5, 218, 0, 0, 1370, 1413, 5, 172, 0, 0, 1371, 1372, 5, 62, 0, 0, 1372, 1373, 5, 218, 0, 0, 1373, 1374, 5, 173, 0, 0, 1374, 1377, 5, 218, 0, 0, 1375, 1376, 5, 101, 0, 0, 1376, 1378, 5, 218, 0, 0, 1377, 1375, 1, 0, 0, 0, 1377, 1378, 1, 0, 0, 0, 1378, 1379, 1, 0, 0, 0, 1379, 1413, 7, 6, 0, 0, 1380, 1381, 5, 62, 0, 0, 1381, 1382, 5, 218, 0, 0, 1382, 1383, 5, 173, 0, 0, 1383, 1386, 5, 218, 0, 0, 1384, 1385, 5, 102, 0, 0, 1385, 1387, 5, 218, 0, 0, 1386, 1384, 1, 0, 0, 0, 1386, 1387, 1, 0, 0, 0, 1387, 1388, 1, 0, 0, 0, 1388, 1413, 7, 7, 0, 0, 1389, 1390, 5, 62, 0, 0, 1390, 1391, 5, 218, 0, 0, 1391, 1392, 5, 173, 0, 0, 1392, 1395, 5, 218, 0, 0, 1393, 1394, 5, 180, 0, 0, 1394, 1396, 5, 218, 0, 0, 1395, 1393, 1, 0, 0, 0, 1395, 1396, 1, 0, 0, 0, 1396, 1397, 1, 0, 0, 0, 1397, 1413, 7, 8, 0, 0, 1398, 1401, 5, 176, 0, 0, 1399, 1400, 5, 218, 0, 0, 1400, 1402, 5, 172, 0, 0, 1401, 1399, 1, 0, 0, 0, 1401, 1402, 1, 0, 0, 0, 1402, 1413, 1, 0, 0, 0, 1403, 1410, 5, 61, 0, 0, 1404, 1407, 5, 218, 0, 0, 1405, 1406, 5, 136, 0, 0, 1406, 1408, 5, 218, 0, 0, 1407, 1405, 1, 0, 0, 0, 1407, 1408, 1, 0, 0, 0, 1408, 1409, 1, 0, 0, 0, 1409, 1411, 5, 157, 0, 0, 1410, 1404, 1, 0, 0, 0, 1410, 1411, 1, 0, 0, 0, 1411, 1413, 1, 0, 0, 0, 1412, 1350, 1, 0, 0, 0, 1412, 1351, 1, 0, 0, 0, 1412, 1352, 1, 0, 0, 0, 1412, 1353, 1, 0, 0, 0, 1412, 1356, 1, 0, 0, 0, 1412, 1359, 1, 0, 0, 0, 1412, 1362, 1, 0, 0, 0, 1412, 1365, 1, 0, 0, 0, 1412, 1368, 1, 0, 0, 0, 1412, 1371, 1, 0, 0, 0, 1412, 1380, 1, 0, 0, 0, 1412, 1389, 1, 0, 0, 0, 1412, 1398, 1, 0, 0, 0, 1412, 1403, 1, 0, 0, 0, 1413, 145, 1, 0, 0, 0, 1414, 1415, 5, 143, 0, 0, 1415, 1416, 5, 218, 0, 0, 1416, 1433, 5, 172, 0, 0, 1417, 1418, 5, 62, 0, 0, 1418, 1419, 5, 218, 0, 0, 1419, 1433, 5, 143, 0, 0, 1420, 1421, 5, 63, 0, 0, 1421, 1422, 5, 218, 0, 0, 1422, 1433, 5, 143, 0, 0, 1423, 1424, 5, 182, 0, 0, 1424, 1425, 5, 218, 0, 0, 1425, 1433, 5, 143, 0, 0, 1426, 1427, 5, 85, 0, 0, 1427, 1428, 5, 218, 0, 0, 1428, 1433, 5, 143, 0, 0, 1429, 1430, 5, 133, 0, 0, 1430, 1431, 5, 218, 0, 0, 1431, 1433, 5, 143, 0, 0, 1432, 1414, 1, 0, 0, 0, 1432, 1417, 1, 0, 0, 0, 1432, 1420, 1, 0, 0, 0, 1432, 1423, 1, 0, 0, 0, 1432, 1426, 1, 0, 0, 0, 1432, 1429, 1, 0, 0, 0, 1433, 147, 1, 0, 0, 0, 1434, 1435, 7, 9, 0, 0, 1435, 1436, 5, 218, 0, 0, 1436, 1439, 3, 150, 75, 0, 1437, 1438, 5, 218, 0, 0, 1438, 1440, 3, 152, 76, 0, 1439, 1437, 1, 0, 0, 0, 1439, 1440, 1, 0, 0, 0, 1440, 1456, 1, 0, 0, 0, 1441, 1442, 7, 10, 0, 0, 1442, 1443, 5, 218, 0, 0, 1443, 1446, 3, 150, 75, 0, 1444, 1445, 5, 218, 0, 0, 1445, 1447, 3, 152, 76, 0, 1446, 1444, 1, 0, 0, 0, 1446, 1447, 1, 0, 0, 0, 1447, 1456, 1, 0, 0, 0, 1448, 1449, 7, 11, 0, 0, 1449, 1450, 5, 218, 0, 0, 1450, 1453, 3, 150, 75, 0, 1451, 1452, 5, 218, 0, 0, 1452, 1454, 3, 152, 76, 0, 1453, 1451, 1, 0, 0, 0, 1453, 1454, 1, 0, 0, 0, 1454, 1456, 1, 0, 0, 0, 1455, 1434, 1, 0, 0, 0, 1455, 1441, 1, 0, 0, 0, 1455, 1448, 1, 0, 0, 0, 1456, 149, 1, 0, 0, 0, 1457, 1473, 5, 19, 0, 0, 1458, 1469, 3, 482, 241, 0, 1459, 1461, 5, 218, 0, 0, 1460, 1459, 1, 0, 0, 0, 1460, 1461, 1, 0, 0, 0, 1461, 1462, 1, 0, 0, 0, 1462, 1464, 5, 15, 0, 0, 1463, 1465, 5, 218, 0, 0, 1464, 1463, 1, 0, 0, 0, 1464, 1465, 1, 0, 0, 0, 1465, 1466, 1, 0, 0, 0, 1466, 1468, 3, 482, 241, 0, 1467, 1460, 1, 0, 0, 0, 1468, 1471, 1, 0, 0, 0, 1469, 1467, 1, 0, 0, 0, 1469, 1470, 1, 0, 0, 0, 1470, 1473, 1, 0, 0, 0, 1471, 1469, 1, 0, 0, 0, 1472, 1457, 1, 0, 0, 0, 1472, 1458, 1, 0, 0, 0, 1473, 151, 1, 0, 0, 0, 1474, 1476, 5, 20, 0, 0, 1475, 1477, 5, 218, 0, 0, 1476, 1475, 1, 0, 0, 0, 1476, 1477, 1, 0, 0, 0, 1477, 1478, 1, 0, 0, 0, 1478, 1480, 5, 19, 0, 0, 1479, 1481, 5, 218, 0, 0, 1480, 1479, 1, 0, 0, 0, 1480, 1481, 1, 0, 0, 0, 1481, 1482, 1, 0, 0, 0, 1482, 1483, 5, 21, 0, 0, 1483, 153, 1, 0, 0, 0, 1484, 1485, 5, 133, 0, 0, 1485, 1488, 5, 218, 0, 0, 1486, 1487, 5, 134, 0, 0, 1487, 1489, 5, 218, 0, 0, 1488, 1486, 1, 0, 0, 0, 1488, 1489, 1, 0, 0, 0, 1489, 1490, 1, 0, 0, 0, 1490, 1495, 5, 136, 0, 0, 1491, 1492, 5, 133, 0, 0, 1492, 1493, 5, 218, 0, 0, 1493, 1495, 5, 137, 0, 0, 1494, 1484, 1, 0, 0, 0, 1494, 1491, 1, 0, 0, 0, 1495, 155, 1, 0, 0, 0, 1496, 1497, 5, 62, 0, 0, 1497, 1498, 5, 218, 0, 0, 1498, 1499, 5, 136, 0, 0, 1499, 1500, 5, 218, 0, 0, 1500, 1503, 3, 482, 241, 0, 1501, 1502, 5, 218, 0, 0, 1502, 1504, 3, 164, 82, 0, 1503, 1501, 1, 0, 0, 0, 1503, 1504, 1, 0, 0, 0, 1504, 1516, 1, 0, 0, 0, 1505, 1506, 5, 62, 0, 0, 1506, 1510, 5, 218, 0, 0, 1507, 1508, 3, 168, 84, 0, 1508, 1509, 5, 218, 0, 0, 1509, 1511, 1, 0, 0, 0, 1510, 1507, 1, 0, 0, 0, 1510, 1511, 1, 0, 0, 0, 1511, 1512, 1, 0, 0, 0, 1512, 1513, 5, 136, 0, 0, 1513, 1514, 5, 218, 0, 0, 1514, 1516, 3, 482, 241, 0, 1515, 1496, 1, 0, 0, 0, 1515, 1505, 1, 0, 0, 0, 1516, 157, 1, 0, 0, 0, 1517, 1518, 5, 63, 0, 0, 1518, 1519, 5, 218, 0, 0, 1519, 1520, 5, 136, 0, 0, 1520, 1521, 5, 218, 0, 0, 1521, 1524, 3, 482, 241, 0, 1522, 1523, 5, 218, 0, 0, 1523, 1525, 3, 166, 83, 0, 1524, 1522, 1, 0, 0, 0, 1524, 1525, 1, 0, 0, 0, 1525, 159, 1, 0, 0, 0, 1526, 1527, 5, 100, 0, 0, 1527, 1528, 5, 218, 0, 0, 1528, 1529, 5, 136, 0, 0, 1529, 1530, 5, 218, 0, 0, 1530, 1531, 3, 482, 241, 0, 1531, 161, 1, 0, 0, 0, 1532, 1533, 5, 142, 0, 0, 1533, 1534, 5, 218, 0, 0, 1534, 1535, 5, 136, 0, 0, 1535, 1536, 5, 218, 0, 0, 1536, 1537, 3, 482, 241, 0, 1537, 163, 1, 0, 0, 0, 1538, 1539, 5, 141, 0, 0, 1539, 1540, 5, 218, 0, 0, 1540, 1541, 5, 110, 0, 0, 1541, 1542, 5, 218, 0, 0, 1542, 1543, 5, 70, 0, 0, 1543, 165, 1, 0, 0, 0, 1544, 1545, 5, 141, 0, 0, 1545, 1546, 5, 218, 0, 0, 1546, 1547, 5, 70, 0, 0, 1547, 167, 1, 0, 0, 0, 1548, 1549, 5, 107, 0, 0, 1549, 1550, 5, 218, 0, 0, 1550, 1551, 5, 140, 0, 0, 1551, 169, 1, 0, 0, 0, 1552, 1553, 5, 82, 0, 0, 1553, 1554, 5, 218, 0, 0, 1554, 1555, 5, 148, 0, 0, 1555, 1558, 5, 218, 0, 0, 1556, 1559, 3, 34, 17, 0, 1557, 1559, 3, 454, 227, 0, 1558, 1556, 1, 0, 0, 0, 1558, 1557, 1, 0, 0, 0, 1559, 1562, 1, 0, 0, 0, 1560, 1561, 5, 218, 0, 0, 1561, 1563, 3, 172, 86, 0, 1562, 1560, 1, 0, 0, 0, 1562, 1563, 1, 0, 0, 0, 1563, 1570, 1, 0, 0, 0, 1564, 1565, 5, 82, 0, 0, 1565, 1566, 5, 218, 0, 0, 1566, 1567, 5, 148, 0, 0, 1567, 1568, 5, 218, 0, 0, 1568, 1570, 3, 172, 86, 0, 1569, 1552, 1, 0, 0, 0, 1569, 1564, 1, 0, 0, 0, 1570, 171, 1, 0, 0, 0, 1571, 1572, 5, 149, 0, 0, 1572, 1575, 5, 218, 0, 0, 1573, 1574, 5, 110, 0, 0, 1574, 1576, 5, 218, 0, 0, 1575, 1573, 1, 0, 0, 0, 1575, 1576, 1, 0, 0, 0, 1576, 1577, 1, 0, 0, 0, 1577, 1578, 5, 150, 0, 0, 1578, 173, 1, 0, 0, 0, 1579, 1580, 5, 82, 0, 0, 1580, 1581, 5, 218, 0, 0, 1581, 1582, 5, 151, 0, 0, 1582, 1583, 5, 218, 0, 0, 1583, 1584, 3, 176, 88, 0, 1584, 175, 1, 0, 0, 0, 1585, 1586, 7, 12, 0, 0, 1586, 177, 1, 0, 0, 0, 1587, 1588, 5, 62, 0, 0, 1588, 1589, 5, 218, 0, 0, 1589, 1590, 3, 200, 100, 0, 1590, 179, 1, 0, 0, 0, 1591, 1592, 5, 62, 0, 0, 1592, 1593, 5, 218, 0, 0, 1593, 1594, 3, 202, 101, 0, 1594, 181, 1, 0, 0, 0, 1595, 1596, 5, 62, 0, 0, 1596, 1597, 5, 218, 0, 0, 1597, 1598, 3, 204, 102, 0, 1598, 183, 1, 0, 0, 0, 1599, 1600, 5, 62, 0, 0, 1600, 1601, 5, 218, 0, 0, 1601, 1602, 3, 206, 103, 0, 1602, 185, 1, 0, 0, 0, 1603, 1604, 5, 62, 0, 0, 1604, 1605, 5, 218, 0, 0, 1605, 1606, 3, 198, 99, 0, 1606, 187, 1, 0, 0, 0, 1607, 1608, 5, 63, 0, 0, 1608, 1609, 5, 218, 0, 0, 1609, 1610, 3, 200, 100, 0, 1610, 189, 1, 0, 0, 0, 1611, 1612, 5, 63, 0, 0, 1612, 1613, 5, 218, 0, 0, 1613, 1614, 3, 202, 101, 0, 1614, 191, 1, 0, 0, 0, 1615, 1616, 5, 63, 0, 0, 1616, 1617, 5, 218, 0, 0, 1617, 1618, 3, 204, 102, 0, 1618, 193, 1, 0, 0, 0, 1619, 1620, 5, 63, 0, 0, 1620, 1621, 5, 218, 0, 0, 1621, 1622, 3, 206, 103, 0, 1622, 195, 1, 0, 0, 0, 1623, 1624, 5, 63, 0, 0, 1624, 1625, 5, 218, 0, 0, 1625, 1626, 3, 198, 99, 0, 1626, 197, 1, 0, 0, 0, 1627, 1628, 5, 64, 0, 0, 1628, 1629, 5, 218, 0, 0, 1629, 1631, 5, 65, 0, 0, 1630, 1632, 5, 218, 0, 0, 1631, 1630, 1, 0, 0, 0, 1631, 1632, 1, 0, 0, 0, 1632, 1633, 1, 0, 0, 0, 1633, 1635, 3, 328, 164, 0, 1634, 1636, 5, 218, 0, 0, 1635, 1634, 1, 0, 0, 0, 1635, 1636, 1, 0, 0, 0, 1636, 1637, 1, 0, 0, 0, 1637, 1639, 5, 20, 0, 0, 1638, 1640, 5, 218, 0, 0, 1639, 1638, 1, 0, 0, 0, 1639, 1640, 1, 0, 0, 0, 1640, 1641, 1, 0, 0, 0, 1641, 1643, 3, 466, 233, 0, 1642, 1644, 5, 218, 0, 0, 1643, 1642, 1, 0, 0, 0, 1643, 1644, 1, 0, 0, 0, 1644, 1645, 1, 0, 0, 0, 1645, 1646, 5, 21, 0, 0, 1646, 199, 1, 0, 0, 0, 1647, 1648, 5, 66, 0, 0, 1648, 1649, 5, 218, 0, 0, 1649, 1651, 5, 65, 0, 0, 1650, 1652, 5, 218, 0, 0, 1651, 1650, 1, 0, 0, 0, 1651, 1652, 1, 0, 0, 0, 1652, 1653, 1, 0, 0, 0, 1653, 1655, 5, 20, 0, 0, 1654, 1656, 5, 218, 0, 0, 1655, 1654, 1, 0, 0, 0, 1655, 1656, 1, 0, 0, 0, 1656, 1657, 1, 0, 0, 0, 1657, 1658, 3, 436, 218, 0, 1658, 1660, 3, 328, 164, 0, 1659, 1661, 5, 218, 0, 0, 1660, 1659, 1, 0, 0, 0, 1660, 1661, 1, 0, 0, 0, 1661, 1662, 1, 0, 0, 0, 1662, 1664, 5, 21, 0, 0, 1663, 1665, 5, 218, 0, 0, 1664, 1663, 1, 0, 0, 0, 1664, 1665, 1, 0, 0, 0, 1665, 1666, 1, 0, 0, 0, 1666, 1667, 5, 67, 0, 0, 1667, 1668, 5, 218, 0, 0, 1668, 1669, 3, 464, 232, 0, 1669, 1670, 5, 218, 0, 0, 1670, 1671, 5, 68, 0, 0, 1671, 1672, 5, 218, 0, 0, 1672, 1673, 5, 69, 0, 0, 1673, 201, 1, 0, 0, 0, 1674, 1675, 5, 66, 0, 0, 1675, 1676, 5, 218, 0, 0, 1676, 1678, 5, 65, 0, 0, 1677, 1679, 5, 218, 0, 0, 1678, 1677, 1, 0, 0, 0, 1678, 1679, 1, 0, 0, 0, 1679, 1680, 1, 0, 0, 0, 1680, 1682, 5, 20, 0, 0, 1681, 1683, 5, 218, 0, 0, 1682, 1681, 1, 0, 0, 0, 1682, 1683, 1, 0, 0, 0, 1683, 1684, 1, 0, 0, 0, 1684, 1685, 3, 436, 218, 0, 1685, 1687, 3, 328, 164, 0, 1686, 1688, 5, 218, 0, 0, 1687, 1686, 1, 0, 0, 0, 1687, 1688, 1, 0, 0, 0, 1688, 1689, 1, 0, 0, 0, 1689, 1691, 5, 21, 0, 0, 1690, 1692, 5, 218, 0, 0, 1691, 1690, 1, 0, 0, 0, 1691, 1692, 1, 0, 0, 0, 1692, 1693, 1, 0, 0, 0, 1693, 1694, 5, 67, 0, 0, 1694, 1695, 5, 218, 0, 0, 1695, 1697, 5, 20, 0, 0, 1696, 1698, 5, 218, 0, 0, 1697, 1696, 1, 0, 0, 0, 1697, 1698, 1, 0, 0, 0, 1698, 1699, 1, 0, 0, 0, 1699, 1701, 3, 462, 231, 0, 1700, 1702, 5, 218, 0, 0, 1701, 1700, 1, 0, 0, 0, 1701, 1702, 1, 0, 0, 0, 1702, 1703, 1, 0, 0, 0, 1703, 1704, 5, 21, 0, 0, 1704, 1705, 5, 218, 0, 0, 1705, 1706, 5, 68, 0, 0, 1706, 1707, 5, 218, 0, 0, 1707, 1708, 5, 101, 0, 0, 1708, 1709, 5, 218, 0, 0, 1709, 1710, 5, 131, 0, 0, 1710, 203, 1, 0, 0, 0, 1711, 1712, 5, 66, 0, 0, 1712, 1713, 5, 218, 0, 0, 1713, 1715, 5, 65, 0, 0, 1714, 1716, 5, 218, 0, 0, 1715, 1714, 1, 0, 0, 0, 1715, 1716, 1, 0, 0, 0, 1716, 1717, 1, 0, 0, 0, 1717, 1718, 5, 20, 0, 0, 1718, 1719, 3, 436, 218, 0, 1719, 1720, 3, 328, 164, 0, 1720, 1722, 5, 21, 0, 0, 1721, 1723, 5, 218, 0, 0, 1722, 1721, 1, 0, 0, 0, 1722, 1723, 1, 0, 0, 0, 1723, 1724, 1, 0, 0, 0, 1724, 1725, 5, 67, 0, 0, 1725, 1726, 5, 218, 0, 0, 1726, 1728, 5, 70, 0, 0, 1727, 1729, 5, 218, 0, 0, 1728, 1727, 1, 0, 0, 0, 1728, 1729, 1, 0, 0, 0, 1729, 1730, 1, 0, 0, 0, 1730, 1731, 5, 20, 0, 0, 1731, 1732, 3, 464, 232, 0, 1732, 1733, 5, 21, 0, 0, 1733, 205, 1, 0, 0, 0, 1734, 1735, 5, 66, 0, 0, 1735, 1736, 5, 218, 0, 0, 1736, 1738, 5, 65, 0, 0, 1737, 1739, 5, 218, 0, 0, 1738, 1737, 1, 0, 0, 0, 1738, 1739, 1, 0, 0, 0, 1739, 1740, 1, 0, 0, 0, 1740, 1742, 3, 208, 104, 0, 1741, 1743, 5, 218, 0, 0, 1742, 1741, 1, 0, 0, 0, 1742, 1743, 1, 0, 0, 0, 1743, 1744, 1, 0, 0, 0, 1744, 1745, 5, 67, 0, 0, 1745, 1746, 5, 218, 0, 0, 1746, 1748, 5, 70, 0, 0, 1747, 1749, 5, 218, 0, 0, 1748, 1747, 1, 0, 0, 0, 1748, 1749, 1, 0, 0, 0, 1749, 1750, 1, 0, 0, 0, 1750, 1751, 5, 20, 0, 0, 1751, 1752, 3, 464, 232, 0, 1752, 1753, 5, 21, 0, 0, 1753, 207, 1, 0, 0, 0, 1754, 1756, 5, 20, 0, 0, 1755, 1757, 5, 218, 0, 0, 1756, 1755, 1, 0, 0, 0, 1756, 1757, 1, 0, 0, 0, 1757, 1758, 1, 0, 0, 0, 1758, 1759, 5, 21, 0, 0, 1759, 1760, 3, 480, 240, 0, 1760, 1761, 5, 17, 0, 0, 1761, 1762, 3, 436, 218, 0, 1762, 1763, 3, 318, 159, 0, 1763, 1764, 5, 18, 0, 0, 1764, 1765, 3, 480, 240, 0, 1765, 1767, 5, 20, 0, 0, 1766, 1768, 5, 218, 0, 0, 1767, 1766, 1, 0, 0, 0, 1767, 1768, 1, 0, 0, 0, 1768, 1769, 1, 0, 0, 0, 1769, 1770, 5, 21, 0, 0, 1770, 1808, 1, 0, 0, 0, 1771, 1773, 5, 20, 0, 0, 1772, 1774, 5, 218, 0, 0, 1773, 1772, 1, 0, 0, 0, 1773, 1774, 1, 0, 0, 0, 1774, 1775, 1, 0, 0, 0, 1775, 1776, 5, 21, 0, 0, 1776, 1777, 3, 480, 240, 0, 1777, 1778, 5, 17, 0, 0, 1778, 1779, 3, 436, 218, 0, 1779, 1780, 3, 318, 159, 0, 1780, 1781, 5, 18, 0, 0, 1781, 1782, 3, 480, 240, 0, 1782, 1783, 3, 478, 239, 0, 1783, 1785, 5, 20, 0, 0, 1784, 1786, 5, 218, 0, 0, 1785, 1784, 1, 0, 0, 0, 1785, 1786, 1, 0, 0, 0, 1786, 1787, 1, 0, 0, 0, 1787, 1788, 5, 21, 0, 0, 1788, 1808, 1, 0, 0, 0, 1789, 1791, 5, 20, 0, 0, 1790, 1792, 5, 218, 0, 0, 1791, 1790, 1, 0, 0, 0, 1791, 1792, 1, 0, 0, 0, 1792, 1793, 1, 0, 0, 0, 1793, 1794, 5, 21, 0, 0, 1794, 1795, 3, 476, 238, 0, 1795, 1796, 3, 480, 240, 0, 1796, 1797, 5, 17, 0, 0, 1797, 1798, 3, 436, 218, 0, 1798, 1799, 3, 318, 159, 0, 1799, 1800, 5, 18, 0, 0, 1800, 1801, 3, 480, 240, 0, 1801, 1803, 5, 20, 0, 0, 1802, 1804, 5, 218, 0, 0, 1803, 1802, 1, 0, 0, 0, 1803, 1804, 1, 0, 0, 0, 1804, 1805, 1, 0, 0, 0, 1805, 1806, 5, 21, 0, 0, 1806, 1808, 1, 0, 0, 0, 1807, 1754, 1, 0, 0, 0, 1807, 1771, 1, 0, 0, 0, 1807, 1789, 1, 0, 0, 0, 1808, 209, 1, 0, 0, 0, 1809, 1810, 5, 71, 0, 0, 1810, 1811, 5, 218, 0, 0, 1811, 1812, 5, 72, 0, 0, 1812, 1817, 5, 218, 0, 0, 1813, 1814, 5, 73, 0, 0, 1814, 1815, 5, 218, 0, 0, 1815, 1816, 5, 74, 0, 0, 1816, 1818, 5, 218, 0, 0, 1817, 1813, 1, 0, 0, 0, 1817, 1818, 1, 0, 0, 0, 1818, 1819, 1, 0, 0, 0, 1819, 1820, 5, 75, 0, 0, 1820, 1821, 5, 218, 0, 0, 1821, 1822, 3, 336, 168, 0, 1822, 1823, 5, 218, 0, 0, 1823, 1824, 5, 76, 0, 0, 1824, 1825, 5, 218, 0, 0, 1825, 1826, 3, 436, 218, 0, 1826, 1830, 5, 218, 0, 0, 1827, 1828, 5, 77, 0, 0, 1828, 1829, 5, 218, 0, 0, 1829, 1831, 5, 199, 0, 0, 1830, 1827, 1, 0, 0, 0, 1830, 1831, 1, 0, 0, 0, 1831, 211, 1, 0, 0, 0, 1832, 1833, 5, 78, 0, 0, 1833, 1835, 5, 218, 0, 0, 1834, 1832, 1, 0, 0, 0, 1834, 1835, 1, 0, 0, 0, 1835, 1836, 1, 0, 0, 0, 1836, 1838, 5, 79, 0, 0, 1837, 1839, 5, 218, 0, 0, 1838, 1837, 1, 0, 0, 0, 1838, 1839, 1, 0, 0, 0, 1839, 1840, 1, 0, 0, 0, 1840, 1844, 3, 296, 148, 0, 1841, 1843, 3, 274, 137, 0, 1842, 1841, 1, 0, 0, 0, 1843, 1846, 1, 0, 0, 0, 1844, 1842, 1, 0, 0, 0, 1844, 1845, 1, 0, 0, 0, 1845, 1851, 1, 0, 0, 0, 1846, 1844, 1, 0, 0, 0, 1847, 1849, 5, 218, 0, 0, 1848, 1847, 1, 0, 0, 0, 1848, 1849, 1, 0, 0, 0, 1849, 1850, 1, 0, 0, 0, 1850, 1852, 3, 294, 147, 0, 1851, 1848, 1, 0, 0, 0, 1851, 1852, 1, 0, 0, 0, 1852, 213, 1, 0, 0, 0, 1853, 1855, 5, 80, 0, 0, 1854, 1856, 5, 218, 0, 0, 1855, 1854, 1, 0, 0, 0, 1855, 1856, 1, 0, 0, 0, 1856, 1857, 1, 0, 0, 0, 1857, 1858, 3, 336, 168, 0, 1858, 1859, 5, 218, 0, 0, 1859, 1860, 5, 76, 0, 0, 1860, 1861, 5, 218, 0, 0, 1861, 1862, 3, 436, 218, 0, 1862, 215, 1, 0, 0, 0, 1863, 1865, 5, 81, 0, 0, 1864, 1866, 5, 218, 0, 0, 1865, 1864, 1, 0, 0, 0, 1865, 1866, 1, 0, 0, 0, 1866, 1867, 1, 0, 0, 0, 1867, 1872, 3, 298, 149, 0, 1868, 1869, 5, 218, 0, 0, 1869, 1871, 3, 218, 109, 0, 1870, 1868, 1, 0, 0, 0, 1871, 1874, 1, 0, 0, 0, 1872, 1870, 1, 0, 0, 0, 1872, 1873, 1, 0, 0, 0, 1873, 217, 1, 0, 0, 0, 1874, 1872, 1, 0, 0, 0, 1875, 1876, 5, 65, 0, 0, 1876, 1877, 5, 218, 0, 0, 1877, 1878, 5, 79, 0, 0, 1878, 1879, 5, 218, 0, 0, 1879, 1886, 3, 224, 112, 0, 1880, 1881, 5, 65, 0, 0, 1881, 1882, 5, 218, 0, 0, 1882, 1883, 5, 62, 0, 0, 1883, 1884, 5, 218, 0, 0, 1884, 1886, 3, 224, 112, 0, 1885, 1875, 1, 0, 0, 0, 1885, 1880, 1, 0, 0, 0, 1886, 219, 1, 0, 0, 0, 1887, 1889, 5, 62, 0, 0, 1888, 1890, 5, 218, 0, 0, 1889, 1888, 1, 0, 0, 0, 1889, 1890, 1, 0, 0, 0, 1890, 1891, 1, 0, 0, 0, 1891, 1892, 3, 296, 148, 0, 1892, 221, 1, 0, 0, 0, 1893, 1894, 5, 62, 0, 0, 1894, 1895, 5, 218, 0, 0, 1895, 1897, 5, 69, 0, 0, 1896, 1898, 5, 218, 0, 0, 1897, 1896, 1, 0, 0, 0, 1897, 1898, 1, 0, 0, 0, 1898, 1899, 1, 0, 0, 0, 1899, 1900, 3, 296, 148, 0, 1900, 223, 1, 0, 0, 0, 1901, 1903, 5, 82, 0, 0, 1902, 1904, 5, 218, 0, 0, 1903, 1902, 1, 0, 0, 0, 1903, 1904, 1, 0, 0, 0, 1904, 1905, 1, 0, 0, 0, 1905, 1916, 3, 226, 113, 0, 1906, 1908, 5, 218, 0, 0, 1907, 1906, 1, 0, 0, 0, 1907, 1908, 1, 0, 0, 0, 1908, 1909, 1, 0, 0, 0, 1909, 1911, 5, 15, 0, 0, 1910, 1912, 5, 218, 0, 0, 1911, 1910, 1, 0, 0, 0, 1911, 1912, 1, 0, 0, 0, 1912, 1913, 1, 0, 0, 0, 1913, 1915, 3, 226, 113, 0, 1914, 1907, 1, 0, 0, 0, 1915, 1918, 1, 0, 0, 0, 1916, 1914, 1, 0, 0, 0, 1916, 1917, 1, 0, 0, 0, 1917, 225, 1, 0, 0, 0, 1918, 1916, 1, 0, 0, 0, 1919, 1921, 3, 464, 232, 0, 1920, 1922, 5, 218, 0, 0, 1921, 1920, 1, 0, 0, 0, 1921, 1922, 1, 0, 0, 0, 1922, 1923, 1, 0, 0, 0, 1923, 1925, 5, 12, 0, 0, 1924, 1926, 5, 218, 0, 0, 1925, 1924, 1, 0, 0, 0, 1925, 1926, 1, 0, 0, 0, 1926, 1927, 1, 0, 0, 0, 1927, 1928, 3, 336, 168, 0, 1928, 1956, 1, 0, 0, 0, 1929, 1931, 3, 436, 218, 0, 1930, 1932, 5, 218, 0, 0, 1931, 1930, 1, 0, 0, 0, 1931, 1932, 1, 0, 0, 0, 1932, 1933, 1, 0, 0, 0, 1933, 1935, 5, 12, 0, 0, 1934, 1936, 5, 218, 0, 0, 1935, 1934, 1, 0, 0, 0, 1935, 1936, 1, 0, 0, 0, 1936, 1937, 1, 0, 0, 0, 1937, 1938, 3, 336, 168, 0, 1938, 1956, 1, 0, 0, 0, 1939, 1941, 3, 436, 218, 0, 1940, 1942, 5, 218, 0, 0, 1941, 1940, 1, 0, 0, 0, 1941, 1942, 1, 0, 0, 0, 1942, 1943, 1, 0, 0, 0, 1943, 1945, 5, 22, 0, 0, 1944, 1946, 5, 218, 0, 0, 1945, 1944, 1, 0, 0, 0, 1945, 1946, 1, 0, 0, 0, 1946, 1947, 1, 0, 0, 0, 1947, 1948, 3, 336, 168, 0, 1948, 1956, 1, 0, 0, 0, 1949, 1951, 3, 436, 218, 0, 1950, 1952, 5, 218, 0, 0, 1951, 1950, 1, 0, 0, 0, 1951, 1952, 1, 0, 0, 0, 1952, 1953, 1, 0, 0, 0, 1953, 1954, 3, 326, 163, 0, 1954, 1956, 1, 0, 0, 0, 1955, 1919, 1, 0, 0, 0, 1955, 1929, 1, 0, 0, 0, 1955, 1939, 1, 0, 0, 0, 1955, 1949, 1, 0, 0, 0, 1956, 227, 1, 0, 0, 0, 1957, 1958, 5, 83, 0, 0, 1958, 1960, 5, 218, 0, 0, 1959, 1957, 1, 0, 0, 0, 1959, 1960, 1, 0, 0, 0, 1960, 1961, 1, 0, 0, 0, 1961, 1963, 5, 84, 0, 0, 1962, 1964, 5, 218, 0, 0, 1963, 1962, 1, 0, 0, 0, 1963, 1964, 1, 0, 0, 0, 1964, 1965, 1, 0, 0, 0, 1965, 1976, 3, 336, 168, 0, 1966, 1968, 5, 218, 0, 0, 1967, 1966, 1, 0, 0, 0, 1967, 1968, 1, 0, 0, 0, 1968, 1969, 1, 0, 0, 0, 1969, 1971, 5, 15, 0, 0, 1970, 1972, 5, 218, 0, 0, 1971, 1970, 1, 0, 0, 0, 1971, 1972, 1, 0, 0, 0, 1972, 1973, 1, 0, 0, 0, 1973, 1975, 3, 336, 168, 0, 1974, 1967, 1, 0, 0, 0, 1975, 1978, 1, 0, 0, 0, 1976, 1974, 1, 0, 0, 0, 1976, 1977, 1, 0, 0, 0, 1977, 229, 1, 0, 0, 0, 1978, 1976, 1, 0, 0, 0, 1979, 1980, 5, 85, 0, 0, 1980, 1981, 5, 218, 0, 0, 1981, 1992, 3, 232, 116, 0, 1982, 1984, 5, 218, 0, 0, 1983, 1982, 1, 0, 0, 0, 1983, 1984, 1, 0, 0, 0, 1984, 1985, 1, 0, 0, 0, 1985, 1987, 5, 15, 0, 0, 1986, 1988, 5, 218, 0, 0, 1987, 1986, 1, 0, 0, 0, 1987, 1988, 1, 0, 0, 0, 1988, 1989, 1, 0, 0, 0, 1989, 1991, 3, 232, 116, 0, 1990, 1983, 1, 0, 0, 0, 1991, 1994, 1, 0, 0, 0, 1992, 1990, 1, 0, 0, 0, 1992, 1993, 1, 0, 0, 0, 1993, 231, 1, 0, 0, 0, 1994, 1992, 1, 0, 0, 0, 1995, 1996, 3, 436, 218, 0, 1996, 1997, 3, 326, 163, 0, 1997, 2e3, 1, 0, 0, 0, 1998, 2e3, 3, 464, 232, 0, 1999, 1995, 1, 0, 0, 0, 1999, 1998, 1, 0, 0, 0, 2e3, 233, 1, 0, 0, 0, 2001, 2003, 5, 86, 0, 0, 2002, 2004, 5, 218, 0, 0, 2003, 2002, 1, 0, 0, 0, 2003, 2004, 1, 0, 0, 0, 2004, 2005, 1, 0, 0, 0, 2005, 2007, 5, 20, 0, 0, 2006, 2008, 5, 218, 0, 0, 2007, 2006, 1, 0, 0, 0, 2007, 2008, 1, 0, 0, 0, 2008, 2009, 1, 0, 0, 0, 2009, 2010, 3, 436, 218, 0, 2010, 2011, 5, 218, 0, 0, 2011, 2012, 5, 87, 0, 0, 2012, 2013, 5, 218, 0, 0, 2013, 2015, 3, 336, 168, 0, 2014, 2016, 5, 218, 0, 0, 2015, 2014, 1, 0, 0, 0, 2015, 2016, 1, 0, 0, 0, 2016, 2017, 1, 0, 0, 0, 2017, 2020, 5, 23, 0, 0, 2018, 2019, 5, 218, 0, 0, 2019, 2021, 3, 96, 48, 0, 2020, 2018, 1, 0, 0, 0, 2021, 2022, 1, 0, 0, 0, 2022, 2020, 1, 0, 0, 0, 2022, 2023, 1, 0, 0, 0, 2023, 2025, 1, 0, 0, 0, 2024, 2026, 5, 218, 0, 0, 2025, 2024, 1, 0, 0, 0, 2025, 2026, 1, 0, 0, 0, 2026, 2027, 1, 0, 0, 0, 2027, 2028, 5, 21, 0, 0, 2028, 235, 1, 0, 0, 0, 2029, 2034, 5, 73, 0, 0, 2030, 2032, 5, 218, 0, 0, 2031, 2030, 1, 0, 0, 0, 2031, 2032, 1, 0, 0, 0, 2032, 2033, 1, 0, 0, 0, 2033, 2035, 5, 88, 0, 0, 2034, 2031, 1, 0, 0, 0, 2034, 2035, 1, 0, 0, 0, 2035, 2036, 1, 0, 0, 0, 2036, 2037, 5, 218, 0, 0, 2037, 2042, 3, 240, 120, 0, 2038, 2040, 5, 218, 0, 0, 2039, 2038, 1, 0, 0, 0, 2039, 2040, 1, 0, 0, 0, 2040, 2041, 1, 0, 0, 0, 2041, 2043, 3, 294, 147, 0, 2042, 2039, 1, 0, 0, 0, 2042, 2043, 1, 0, 0, 0, 2043, 237, 1, 0, 0, 0, 2044, 2049, 5, 89, 0, 0, 2045, 2047, 5, 218, 0, 0, 2046, 2045, 1, 0, 0, 0, 2046, 2047, 1, 0, 0, 0, 2047, 2048, 1, 0, 0, 0, 2048, 2050, 5, 88, 0, 0, 2049, 2046, 1, 0, 0, 0, 2049, 2050, 1, 0, 0, 0, 2050, 2052, 1, 0, 0, 0, 2051, 2053, 5, 218, 0, 0, 2052, 2051, 1, 0, 0, 0, 2052, 2053, 1, 0, 0, 0, 2053, 2054, 1, 0, 0, 0, 2054, 2055, 3, 240, 120, 0, 2055, 239, 1, 0, 0, 0, 2056, 2059, 3, 244, 122, 0, 2057, 2058, 5, 218, 0, 0, 2058, 2060, 3, 266, 133, 0, 2059, 2057, 1, 0, 0, 0, 2059, 2060, 1, 0, 0, 0, 2060, 2063, 1, 0, 0, 0, 2061, 2062, 5, 218, 0, 0, 2062, 2064, 3, 268, 134, 0, 2063, 2061, 1, 0, 0, 0, 2063, 2064, 1, 0, 0, 0, 2064, 2067, 1, 0, 0, 0, 2065, 2066, 5, 218, 0, 0, 2066, 2068, 3, 270, 135, 0, 2067, 2065, 1, 0, 0, 0, 2067, 2068, 1, 0, 0, 0, 2068, 241, 1, 0, 0, 0, 2069, 2071, 3, 250, 125, 0, 2070, 2072, 5, 218, 0, 0, 2071, 2070, 1, 0, 0, 0, 2071, 2072, 1, 0, 0, 0, 2072, 2074, 1, 0, 0, 0, 2073, 2075, 3, 256, 128, 0, 2074, 2073, 1, 0, 0, 0, 2074, 2075, 1, 0, 0, 0, 2075, 243, 1, 0, 0, 0, 2076, 2087, 5, 19, 0, 0, 2077, 2079, 5, 218, 0, 0, 2078, 2077, 1, 0, 0, 0, 2078, 2079, 1, 0, 0, 0, 2079, 2080, 1, 0, 0, 0, 2080, 2082, 5, 15, 0, 0, 2081, 2083, 5, 218, 0, 0, 2082, 2081, 1, 0, 0, 0, 2082, 2083, 1, 0, 0, 0, 2083, 2084, 1, 0, 0, 0, 2084, 2086, 3, 246, 123, 0, 2085, 2078, 1, 0, 0, 0, 2086, 2089, 1, 0, 0, 0, 2087, 2085, 1, 0, 0, 0, 2087, 2088, 1, 0, 0, 0, 2088, 2106, 1, 0, 0, 0, 2089, 2087, 1, 0, 0, 0, 2090, 2101, 3, 246, 123, 0, 2091, 2093, 5, 218, 0, 0, 2092, 2091, 1, 0, 0, 0, 2092, 2093, 1, 0, 0, 0, 2093, 2094, 1, 0, 0, 0, 2094, 2096, 5, 15, 0, 0, 2095, 2097, 5, 218, 0, 0, 2096, 2095, 1, 0, 0, 0, 2096, 2097, 1, 0, 0, 0, 2097, 2098, 1, 0, 0, 0, 2098, 2100, 3, 246, 123, 0, 2099, 2092, 1, 0, 0, 0, 2100, 2103, 1, 0, 0, 0, 2101, 2099, 1, 0, 0, 0, 2101, 2102, 1, 0, 0, 0, 2102, 2106, 1, 0, 0, 0, 2103, 2101, 1, 0, 0, 0, 2104, 2106, 3, 242, 121, 0, 2105, 2076, 1, 0, 0, 0, 2105, 2090, 1, 0, 0, 0, 2105, 2104, 1, 0, 0, 0, 2106, 245, 1, 0, 0, 0, 2107, 2108, 3, 336, 168, 0, 2108, 2109, 5, 218, 0, 0, 2109, 2110, 5, 76, 0, 0, 2110, 2111, 5, 218, 0, 0, 2111, 2112, 3, 436, 218, 0, 2112, 2115, 1, 0, 0, 0, 2113, 2115, 3, 336, 168, 0, 2114, 2107, 1, 0, 0, 0, 2114, 2113, 1, 0, 0, 0, 2115, 247, 1, 0, 0, 0, 2116, 2117, 5, 129, 0, 0, 2117, 2118, 5, 218, 0, 0, 2118, 2120, 3, 250, 125, 0, 2119, 2121, 5, 218, 0, 0, 2120, 2119, 1, 0, 0, 0, 2120, 2121, 1, 0, 0, 0, 2121, 2123, 1, 0, 0, 0, 2122, 2124, 3, 256, 128, 0, 2123, 2122, 1, 0, 0, 0, 2123, 2124, 1, 0, 0, 0, 2124, 249, 1, 0, 0, 0, 2125, 2127, 3, 252, 126, 0, 2126, 2128, 5, 218, 0, 0, 2127, 2126, 1, 0, 0, 0, 2127, 2128, 1, 0, 0, 0, 2128, 2130, 1, 0, 0, 0, 2129, 2131, 3, 254, 127, 0, 2130, 2129, 1, 0, 0, 0, 2130, 2131, 1, 0, 0, 0, 2131, 251, 1, 0, 0, 0, 2132, 2133, 3, 474, 237, 0, 2133, 2134, 3, 424, 212, 0, 2134, 253, 1, 0, 0, 0, 2135, 2137, 5, 20, 0, 0, 2136, 2138, 5, 218, 0, 0, 2137, 2136, 1, 0, 0, 0, 2137, 2138, 1, 0, 0, 0, 2138, 2140, 1, 0, 0, 0, 2139, 2141, 3, 336, 168, 0, 2140, 2139, 1, 0, 0, 0, 2140, 2141, 1, 0, 0, 0, 2141, 2152, 1, 0, 0, 0, 2142, 2144, 5, 218, 0, 0, 2143, 2142, 1, 0, 0, 0, 2143, 2144, 1, 0, 0, 0, 2144, 2145, 1, 0, 0, 0, 2145, 2147, 5, 15, 0, 0, 2146, 2148, 5, 218, 0, 0, 2147, 2146, 1, 0, 0, 0, 2147, 2148, 1, 0, 0, 0, 2148, 2149, 1, 0, 0, 0, 2149, 2151, 3, 336, 168, 0, 2150, 2143, 1, 0, 0, 0, 2151, 2154, 1, 0, 0, 0, 2152, 2150, 1, 0, 0, 0, 2152, 2153, 1, 0, 0, 0, 2153, 2156, 1, 0, 0, 0, 2154, 2152, 1, 0, 0, 0, 2155, 2157, 5, 218, 0, 0, 2156, 2155, 1, 0, 0, 0, 2156, 2157, 1, 0, 0, 0, 2157, 2158, 1, 0, 0, 0, 2158, 2159, 5, 21, 0, 0, 2159, 255, 1, 0, 0, 0, 2160, 2161, 5, 130, 0, 0, 2161, 2162, 5, 218, 0, 0, 2162, 2173, 3, 258, 129, 0, 2163, 2165, 5, 218, 0, 0, 2164, 2163, 1, 0, 0, 0, 2164, 2165, 1, 0, 0, 0, 2165, 2166, 1, 0, 0, 0, 2166, 2168, 5, 15, 0, 0, 2167, 2169, 5, 218, 0, 0, 2168, 2167, 1, 0, 0, 0, 2168, 2169, 1, 0, 0, 0, 2169, 2170, 1, 0, 0, 0, 2170, 2172, 3, 258, 129, 0, 2171, 2164, 1, 0, 0, 0, 2172, 2175, 1, 0, 0, 0, 2173, 2171, 1, 0, 0, 0, 2173, 2174, 1, 0, 0, 0, 2174, 2178, 1, 0, 0, 0, 2175, 2173, 1, 0, 0, 0, 2176, 2177, 5, 218, 0, 0, 2177, 2179, 3, 294, 147, 0, 2178, 2176, 1, 0, 0, 0, 2178, 2179, 1, 0, 0, 0, 2179, 257, 1, 0, 0, 0, 2180, 2183, 3, 260, 130, 0, 2181, 2183, 3, 262, 131, 0, 2182, 2180, 1, 0, 0, 0, 2182, 2181, 1, 0, 0, 0, 2183, 259, 1, 0, 0, 0, 2184, 2185, 3, 264, 132, 0, 2185, 2186, 5, 218, 0, 0, 2186, 2187, 5, 76, 0, 0, 2187, 2188, 5, 218, 0, 0, 2188, 2189, 3, 436, 218, 0, 2189, 261, 1, 0, 0, 0, 2190, 2191, 3, 264, 132, 0, 2191, 263, 1, 0, 0, 0, 2192, 2193, 3, 482, 241, 0, 2193, 265, 1, 0, 0, 0, 2194, 2195, 5, 90, 0, 0, 2195, 2196, 5, 218, 0, 0, 2196, 2197, 5, 91, 0, 0, 2197, 2198, 5, 218, 0, 0, 2198, 2209, 3, 272, 136, 0, 2199, 2201, 5, 218, 0, 0, 2200, 2199, 1, 0, 0, 0, 2200, 2201, 1, 0, 0, 0, 2201, 2202, 1, 0, 0, 0, 2202, 2204, 5, 15, 0, 0, 2203, 2205, 5, 218, 0, 0, 2204, 2203, 1, 0, 0, 0, 2204, 2205, 1, 0, 0, 0, 2205, 2206, 1, 0, 0, 0, 2206, 2208, 3, 272, 136, 0, 2207, 2200, 1, 0, 0, 0, 2208, 2211, 1, 0, 0, 0, 2209, 2207, 1, 0, 0, 0, 2209, 2210, 1, 0, 0, 0, 2210, 267, 1, 0, 0, 0, 2211, 2209, 1, 0, 0, 0, 2212, 2213, 5, 92, 0, 0, 2213, 2214, 5, 218, 0, 0, 2214, 2215, 3, 336, 168, 0, 2215, 269, 1, 0, 0, 0, 2216, 2217, 5, 93, 0, 0, 2217, 2218, 5, 218, 0, 0, 2218, 2219, 3, 336, 168, 0, 2219, 271, 1, 0, 0, 0, 2220, 2228, 3, 336, 168, 0, 2221, 2223, 5, 218, 0, 0, 2222, 2221, 1, 0, 0, 0, 2222, 2223, 1, 0, 0, 0, 2223, 2224, 1, 0, 0, 0, 2224, 2226, 7, 13, 0, 0, 2225, 2227, 5, 218, 0, 0, 2226, 2225, 1, 0, 0, 0, 2226, 2227, 1, 0, 0, 0, 2227, 2229, 1, 0, 0, 0, 2228, 2222, 1, 0, 0, 0, 2228, 2229, 1, 0, 0, 0, 2229, 273, 1, 0, 0, 0, 2230, 2232, 5, 218, 0, 0, 2231, 2230, 1, 0, 0, 0, 2231, 2232, 1, 0, 0, 0, 2232, 2279, 1, 0, 0, 0, 2233, 2234, 5, 57, 0, 0, 2234, 2235, 5, 218, 0, 0, 2235, 2236, 5, 64, 0, 0, 2236, 2237, 5, 218, 0, 0, 2237, 2238, 3, 436, 218, 0, 2238, 2240, 3, 328, 164, 0, 2239, 2241, 5, 218, 0, 0, 2240, 2239, 1, 0, 0, 0, 2240, 2241, 1, 0, 0, 0, 2241, 2242, 1, 0, 0, 0, 2242, 2244, 5, 20, 0, 0, 2243, 2245, 5, 218, 0, 0, 2244, 2243, 1, 0, 0, 0, 2244, 2245, 1, 0, 0, 0, 2245, 2246, 1, 0, 0, 0, 2246, 2248, 3, 466, 233, 0, 2247, 2249, 5, 218, 0, 0, 2248, 2247, 1, 0, 0, 0, 2248, 2249, 1, 0, 0, 0, 2249, 2250, 1, 0, 0, 0, 2250, 2251, 5, 21, 0, 0, 2251, 2280, 1, 0, 0, 0, 2252, 2253, 5, 57, 0, 0, 2253, 2254, 5, 218, 0, 0, 2254, 2255, 5, 98, 0, 0, 2255, 2256, 5, 218, 0, 0, 2256, 2257, 5, 65, 0, 0, 2257, 2258, 5, 218, 0, 0, 2258, 2269, 3, 436, 218, 0, 2259, 2261, 5, 218, 0, 0, 2260, 2259, 1, 0, 0, 0, 2260, 2261, 1, 0, 0, 0, 2261, 2262, 1, 0, 0, 0, 2262, 2264, 5, 15, 0, 0, 2263, 2265, 5, 218, 0, 0, 2264, 2263, 1, 0, 0, 0, 2264, 2265, 1, 0, 0, 0, 2265, 2266, 1, 0, 0, 0, 2266, 2268, 3, 436, 218, 0, 2267, 2260, 1, 0, 0, 0, 2268, 2271, 1, 0, 0, 0, 2269, 2267, 1, 0, 0, 0, 2269, 2270, 1, 0, 0, 0, 2270, 2280, 1, 0, 0, 0, 2271, 2269, 1, 0, 0, 0, 2272, 2273, 5, 57, 0, 0, 2273, 2274, 5, 218, 0, 0, 2274, 2275, 5, 99, 0, 0, 2275, 2276, 5, 218, 0, 0, 2276, 2277, 3, 436, 218, 0, 2277, 2278, 3, 328, 164, 0, 2278, 2280, 1, 0, 0, 0, 2279, 2233, 1, 0, 0, 0, 2279, 2252, 1, 0, 0, 0, 2279, 2272, 1, 0, 0, 0, 2280, 275, 1, 0, 0, 0, 2281, 2282, 5, 100, 0, 0, 2282, 2283, 5, 218, 0, 0, 2283, 2294, 3, 278, 139, 0, 2284, 2286, 5, 218, 0, 0, 2285, 2284, 1, 0, 0, 0, 2285, 2286, 1, 0, 0, 0, 2286, 2287, 1, 0, 0, 0, 2287, 2289, 5, 15, 0, 0, 2288, 2290, 5, 218, 0, 0, 2289, 2288, 1, 0, 0, 0, 2289, 2290, 1, 0, 0, 0, 2290, 2291, 1, 0, 0, 0, 2291, 2293, 3, 278, 139, 0, 2292, 2285, 1, 0, 0, 0, 2293, 2296, 1, 0, 0, 0, 2294, 2292, 1, 0, 0, 0, 2294, 2295, 1, 0, 0, 0, 2295, 2298, 1, 0, 0, 0, 2296, 2294, 1, 0, 0, 0, 2297, 2299, 3, 294, 147, 0, 2298, 2297, 1, 0, 0, 0, 2298, 2299, 1, 0, 0, 0, 2299, 277, 1, 0, 0, 0, 2300, 2302, 3, 436, 218, 0, 2301, 2303, 5, 218, 0, 0, 2302, 2301, 1, 0, 0, 0, 2302, 2303, 1, 0, 0, 0, 2303, 2304, 1, 0, 0, 0, 2304, 2306, 5, 12, 0, 0, 2305, 2307, 5, 218, 0, 0, 2306, 2305, 1, 0, 0, 0, 2306, 2307, 1, 0, 0, 0, 2307, 2308, 1, 0, 0, 0, 2308, 2309, 3, 280, 140, 0, 2309, 279, 1, 0, 0, 0, 2310, 2313, 3, 282, 141, 0, 2311, 2313, 3, 284, 142, 0, 2312, 2310, 1, 0, 0, 0, 2312, 2311, 1, 0, 0, 0, 2313, 281, 1, 0, 0, 0, 2314, 2316, 5, 101, 0, 0, 2315, 2317, 5, 218, 0, 0, 2316, 2315, 1, 0, 0, 0, 2316, 2317, 1, 0, 0, 0, 2317, 2321, 1, 0, 0, 0, 2318, 2322, 3, 286, 143, 0, 2319, 2322, 3, 288, 144, 0, 2320, 2322, 3, 290, 145, 0, 2321, 2318, 1, 0, 0, 0, 2321, 2319, 1, 0, 0, 0, 2321, 2320, 1, 0, 0, 0, 2322, 283, 1, 0, 0, 0, 2323, 2327, 7, 14, 0, 0, 2324, 2328, 3, 286, 143, 0, 2325, 2328, 3, 288, 144, 0, 2326, 2328, 3, 290, 145, 0, 2327, 2324, 1, 0, 0, 0, 2327, 2325, 1, 0, 0, 0, 2327, 2326, 1, 0, 0, 0, 2328, 285, 1, 0, 0, 0, 2329, 2330, 5, 2, 0, 0, 2330, 2331, 3, 482, 241, 0, 2331, 2332, 5, 20, 0, 0, 2332, 2333, 3, 482, 241, 0, 2333, 2336, 5, 12, 0, 0, 2334, 2337, 5, 199, 0, 0, 2335, 2337, 3, 454, 227, 0, 2336, 2334, 1, 0, 0, 0, 2336, 2335, 1, 0, 0, 0, 2337, 2338, 1, 0, 0, 0, 2338, 2339, 5, 21, 0, 0, 2339, 287, 1, 0, 0, 0, 2340, 2341, 5, 2, 0, 0, 2341, 2342, 3, 482, 241, 0, 2342, 2345, 5, 20, 0, 0, 2343, 2346, 5, 199, 0, 0, 2344, 2346, 3, 454, 227, 0, 2345, 2343, 1, 0, 0, 0, 2345, 2344, 1, 0, 0, 0, 2346, 2347, 1, 0, 0, 0, 2347, 2348, 5, 21, 0, 0, 2348, 289, 1, 0, 0, 0, 2349, 2353, 5, 20, 0, 0, 2350, 2354, 3, 292, 146, 0, 2351, 2354, 3, 454, 227, 0, 2352, 2354, 5, 19, 0, 0, 2353, 2350, 1, 0, 0, 0, 2353, 2351, 1, 0, 0, 0, 2353, 2352, 1, 0, 0, 0, 2354, 2355, 1, 0, 0, 0, 2355, 2356, 5, 21, 0, 0, 2356, 291, 1, 0, 0, 0, 2357, 2368, 3, 470, 235, 0, 2358, 2360, 5, 218, 0, 0, 2359, 2358, 1, 0, 0, 0, 2359, 2360, 1, 0, 0, 0, 2360, 2361, 1, 0, 0, 0, 2361, 2363, 5, 15, 0, 0, 2362, 2364, 5, 218, 0, 0, 2363, 2362, 1, 0, 0, 0, 2363, 2364, 1, 0, 0, 0, 2364, 2365, 1, 0, 0, 0, 2365, 2367, 3, 470, 235, 0, 2366, 2359, 1, 0, 0, 0, 2367, 2370, 1, 0, 0, 0, 2368, 2366, 1, 0, 0, 0, 2368, 2369, 1, 0, 0, 0, 2369, 293, 1, 0, 0, 0, 2370, 2368, 1, 0, 0, 0, 2371, 2372, 5, 104, 0, 0, 2372, 2373, 5, 218, 0, 0, 2373, 2374, 3, 336, 168, 0, 2374, 295, 1, 0, 0, 0, 2375, 2386, 3, 298, 149, 0, 2376, 2378, 5, 218, 0, 0, 2377, 2376, 1, 0, 0, 0, 2377, 2378, 1, 0, 0, 0, 2378, 2379, 1, 0, 0, 0, 2379, 2381, 5, 15, 0, 0, 2380, 2382, 5, 218, 0, 0, 2381, 2380, 1, 0, 0, 0, 2381, 2382, 1, 0, 0, 0, 2382, 2383, 1, 0, 0, 0, 2383, 2385, 3, 298, 149, 0, 2384, 2377, 1, 0, 0, 0, 2385, 2388, 1, 0, 0, 0, 2386, 2384, 1, 0, 0, 0, 2386, 2387, 1, 0, 0, 0, 2387, 297, 1, 0, 0, 0, 2388, 2386, 1, 0, 0, 0, 2389, 2391, 3, 436, 218, 0, 2390, 2392, 5, 218, 0, 0, 2391, 2390, 1, 0, 0, 0, 2391, 2392, 1, 0, 0, 0, 2392, 2393, 1, 0, 0, 0, 2393, 2395, 5, 12, 0, 0, 2394, 2396, 5, 218, 0, 0, 2395, 2394, 1, 0, 0, 0, 2395, 2396, 1, 0, 0, 0, 2396, 2397, 1, 0, 0, 0, 2397, 2398, 3, 300, 150, 0, 2398, 2401, 1, 0, 0, 0, 2399, 2401, 3, 300, 150, 0, 2400, 2389, 1, 0, 0, 0, 2400, 2399, 1, 0, 0, 0, 2401, 299, 1, 0, 0, 0, 2402, 2405, 3, 392, 196, 0, 2403, 2405, 3, 302, 151, 0, 2404, 2402, 1, 0, 0, 0, 2404, 2403, 1, 0, 0, 0, 2405, 301, 1, 0, 0, 0, 2406, 2413, 3, 304, 152, 0, 2407, 2409, 5, 218, 0, 0, 2408, 2407, 1, 0, 0, 0, 2408, 2409, 1, 0, 0, 0, 2409, 2410, 1, 0, 0, 0, 2410, 2412, 3, 306, 153, 0, 2411, 2408, 1, 0, 0, 0, 2412, 2415, 1, 0, 0, 0, 2413, 2411, 1, 0, 0, 0, 2413, 2414, 1, 0, 0, 0, 2414, 2421, 1, 0, 0, 0, 2415, 2413, 1, 0, 0, 0, 2416, 2417, 5, 20, 0, 0, 2417, 2418, 3, 302, 151, 0, 2418, 2419, 5, 21, 0, 0, 2419, 2421, 1, 0, 0, 0, 2420, 2406, 1, 0, 0, 0, 2420, 2416, 1, 0, 0, 0, 2421, 303, 1, 0, 0, 0, 2422, 2424, 5, 20, 0, 0, 2423, 2425, 5, 218, 0, 0, 2424, 2423, 1, 0, 0, 0, 2424, 2425, 1, 0, 0, 0, 2425, 2430, 1, 0, 0, 0, 2426, 2428, 3, 436, 218, 0, 2427, 2429, 5, 218, 0, 0, 2428, 2427, 1, 0, 0, 0, 2428, 2429, 1, 0, 0, 0, 2429, 2431, 1, 0, 0, 0, 2430, 2426, 1, 0, 0, 0, 2430, 2431, 1, 0, 0, 0, 2431, 2436, 1, 0, 0, 0, 2432, 2434, 3, 326, 163, 0, 2433, 2435, 5, 218, 0, 0, 2434, 2433, 1, 0, 0, 0, 2434, 2435, 1, 0, 0, 0, 2435, 2437, 1, 0, 0, 0, 2436, 2432, 1, 0, 0, 0, 2436, 2437, 1, 0, 0, 0, 2437, 2442, 1, 0, 0, 0, 2438, 2440, 3, 316, 158, 0, 2439, 2441, 5, 218, 0, 0, 2440, 2439, 1, 0, 0, 0, 2440, 2441, 1, 0, 0, 0, 2441, 2443, 1, 0, 0, 0, 2442, 2438, 1, 0, 0, 0, 2442, 2443, 1, 0, 0, 0, 2443, 2444, 1, 0, 0, 0, 2444, 2445, 5, 21, 0, 0, 2445, 305, 1, 0, 0, 0, 2446, 2448, 3, 308, 154, 0, 2447, 2449, 5, 218, 0, 0, 2448, 2447, 1, 0, 0, 0, 2448, 2449, 1, 0, 0, 0, 2449, 2450, 1, 0, 0, 0, 2450, 2451, 3, 304, 152, 0, 2451, 307, 1, 0, 0, 0, 2452, 2454, 3, 310, 155, 0, 2453, 2455, 5, 218, 0, 0, 2454, 2453, 1, 0, 0, 0, 2454, 2455, 1, 0, 0, 0, 2455, 2457, 1, 0, 0, 0, 2456, 2458, 3, 314, 157, 0, 2457, 2456, 1, 0, 0, 0, 2457, 2458, 1, 0, 0, 0, 2458, 2460, 1, 0, 0, 0, 2459, 2461, 5, 218, 0, 0, 2460, 2459, 1, 0, 0, 0, 2460, 2461, 1, 0, 0, 0, 2461, 2462, 1, 0, 0, 0, 2462, 2463, 3, 312, 156, 0, 2463, 309, 1, 0, 0, 0, 2464, 2466, 3, 476, 238, 0, 2465, 2467, 5, 218, 0, 0, 2466, 2465, 1, 0, 0, 0, 2466, 2467, 1, 0, 0, 0, 2467, 2468, 1, 0, 0, 0, 2468, 2469, 3, 480, 240, 0, 2469, 2472, 1, 0, 0, 0, 2470, 2472, 3, 480, 240, 0, 2471, 2464, 1, 0, 0, 0, 2471, 2470, 1, 0, 0, 0, 2472, 311, 1, 0, 0, 0, 2473, 2475, 3, 480, 240, 0, 2474, 2476, 5, 218, 0, 0, 2475, 2474, 1, 0, 0, 0, 2475, 2476, 1, 0, 0, 0, 2476, 2477, 1, 0, 0, 0, 2477, 2478, 3, 478, 239, 0, 2478, 2481, 1, 0, 0, 0, 2479, 2481, 3, 480, 240, 0, 2480, 2473, 1, 0, 0, 0, 2480, 2479, 1, 0, 0, 0, 2481, 313, 1, 0, 0, 0, 2482, 2484, 5, 17, 0, 0, 2483, 2485, 5, 218, 0, 0, 2484, 2483, 1, 0, 0, 0, 2484, 2485, 1, 0, 0, 0, 2485, 2490, 1, 0, 0, 0, 2486, 2488, 3, 436, 218, 0, 2487, 2489, 5, 218, 0, 0, 2488, 2487, 1, 0, 0, 0, 2488, 2489, 1, 0, 0, 0, 2489, 2491, 1, 0, 0, 0, 2490, 2486, 1, 0, 0, 0, 2490, 2491, 1, 0, 0, 0, 2491, 2496, 1, 0, 0, 0, 2492, 2494, 3, 320, 160, 0, 2493, 2495, 5, 218, 0, 0, 2494, 2493, 1, 0, 0, 0, 2494, 2495, 1, 0, 0, 0, 2495, 2497, 1, 0, 0, 0, 2496, 2492, 1, 0, 0, 0, 2496, 2497, 1, 0, 0, 0, 2497, 2499, 1, 0, 0, 0, 2498, 2500, 3, 330, 165, 0, 2499, 2498, 1, 0, 0, 0, 2499, 2500, 1, 0, 0, 0, 2500, 2505, 1, 0, 0, 0, 2501, 2503, 3, 316, 158, 0, 2502, 2504, 5, 218, 0, 0, 2503, 2502, 1, 0, 0, 0, 2503, 2504, 1, 0, 0, 0, 2504, 2506, 1, 0, 0, 0, 2505, 2501, 1, 0, 0, 0, 2505, 2506, 1, 0, 0, 0, 2506, 2507, 1, 0, 0, 0, 2507, 2508, 5, 18, 0, 0, 2508, 315, 1, 0, 0, 0, 2509, 2512, 3, 440, 220, 0, 2510, 2512, 3, 454, 227, 0, 2511, 2509, 1, 0, 0, 0, 2511, 2510, 1, 0, 0, 0, 2512, 317, 1, 0, 0, 0, 2513, 2515, 5, 2, 0, 0, 2514, 2516, 5, 218, 0, 0, 2515, 2514, 1, 0, 0, 0, 2515, 2516, 1, 0, 0, 0, 2516, 2517, 1, 0, 0, 0, 2517, 2518, 3, 334, 167, 0, 2518, 319, 1, 0, 0, 0, 2519, 2527, 3, 322, 161, 0, 2520, 2522, 5, 218, 0, 0, 2521, 2520, 1, 0, 0, 0, 2521, 2522, 1, 0, 0, 0, 2522, 2523, 1, 0, 0, 0, 2523, 2524, 5, 23, 0, 0, 2524, 2526, 3, 324, 162, 0, 2525, 2521, 1, 0, 0, 0, 2526, 2529, 1, 0, 0, 0, 2527, 2525, 1, 0, 0, 0, 2527, 2528, 1, 0, 0, 0, 2528, 321, 1, 0, 0, 0, 2529, 2527, 1, 0, 0, 0, 2530, 2531, 5, 2, 0, 0, 2531, 2532, 3, 334, 167, 0, 2532, 323, 1, 0, 0, 0, 2533, 2535, 5, 2, 0, 0, 2534, 2533, 1, 0, 0, 0, 2534, 2535, 1, 0, 0, 0, 2535, 2536, 1, 0, 0, 0, 2536, 2537, 3, 334, 167, 0, 2537, 325, 1, 0, 0, 0, 2538, 2545, 3, 328, 164, 0, 2539, 2541, 5, 218, 0, 0, 2540, 2539, 1, 0, 0, 0, 2540, 2541, 1, 0, 0, 0, 2541, 2542, 1, 0, 0, 0, 2542, 2544, 3, 328, 164, 0, 2543, 2540, 1, 0, 0, 0, 2544, 2547, 1, 0, 0, 0, 2545, 2543, 1, 0, 0, 0, 2545, 2546, 1, 0, 0, 0, 2546, 327, 1, 0, 0, 0, 2547, 2545, 1, 0, 0, 0, 2548, 2549, 5, 2, 0, 0, 2549, 2550, 3, 332, 166, 0, 2550, 329, 1, 0, 0, 0, 2551, 2553, 5, 19, 0, 0, 2552, 2554, 5, 218, 0, 0, 2553, 2552, 1, 0, 0, 0, 2553, 2554, 1, 0, 0, 0, 2554, 2559, 1, 0, 0, 0, 2555, 2557, 3, 470, 235, 0, 2556, 2558, 5, 218, 0, 0, 2557, 2556, 1, 0, 0, 0, 2557, 2558, 1, 0, 0, 0, 2558, 2560, 1, 0, 0, 0, 2559, 2555, 1, 0, 0, 0, 2559, 2560, 1, 0, 0, 0, 2560, 2571, 1, 0, 0, 0, 2561, 2563, 5, 24, 0, 0, 2562, 2564, 5, 218, 0, 0, 2563, 2562, 1, 0, 0, 0, 2563, 2564, 1, 0, 0, 0, 2564, 2569, 1, 0, 0, 0, 2565, 2567, 3, 470, 235, 0, 2566, 2568, 5, 218, 0, 0, 2567, 2566, 1, 0, 0, 0, 2567, 2568, 1, 0, 0, 0, 2568, 2570, 1, 0, 0, 0, 2569, 2565, 1, 0, 0, 0, 2569, 2570, 1, 0, 0, 0, 2570, 2572, 1, 0, 0, 0, 2571, 2561, 1, 0, 0, 0, 2571, 2572, 1, 0, 0, 0, 2572, 331, 1, 0, 0, 0, 2573, 2574, 3, 482, 241, 0, 2574, 333, 1, 0, 0, 0, 2575, 2576, 3, 482, 241, 0, 2576, 335, 1, 0, 0, 0, 2577, 2578, 3, 338, 169, 0, 2578, 337, 1, 0, 0, 0, 2579, 2586, 3, 340, 170, 0, 2580, 2581, 5, 218, 0, 0, 2581, 2582, 5, 107, 0, 0, 2582, 2583, 5, 218, 0, 0, 2583, 2585, 3, 340, 170, 0, 2584, 2580, 1, 0, 0, 0, 2585, 2588, 1, 0, 0, 0, 2586, 2584, 1, 0, 0, 0, 2586, 2587, 1, 0, 0, 0, 2587, 339, 1, 0, 0, 0, 2588, 2586, 1, 0, 0, 0, 2589, 2596, 3, 342, 171, 0, 2590, 2591, 5, 218, 0, 0, 2591, 2592, 5, 108, 0, 0, 2592, 2593, 5, 218, 0, 0, 2593, 2595, 3, 342, 171, 0, 2594, 2590, 1, 0, 0, 0, 2595, 2598, 1, 0, 0, 0, 2596, 2594, 1, 0, 0, 0, 2596, 2597, 1, 0, 0, 0, 2597, 341, 1, 0, 0, 0, 2598, 2596, 1, 0, 0, 0, 2599, 2606, 3, 344, 172, 0, 2600, 2601, 5, 218, 0, 0, 2601, 2602, 5, 109, 0, 0, 2602, 2603, 5, 218, 0, 0, 2603, 2605, 3, 344, 172, 0, 2604, 2600, 1, 0, 0, 0, 2605, 2608, 1, 0, 0, 0, 2606, 2604, 1, 0, 0, 0, 2606, 2607, 1, 0, 0, 0, 2607, 343, 1, 0, 0, 0, 2608, 2606, 1, 0, 0, 0, 2609, 2611, 5, 110, 0, 0, 2610, 2612, 5, 218, 0, 0, 2611, 2610, 1, 0, 0, 0, 2611, 2612, 1, 0, 0, 0, 2612, 2614, 1, 0, 0, 0, 2613, 2609, 1, 0, 0, 0, 2614, 2617, 1, 0, 0, 0, 2615, 2613, 1, 0, 0, 0, 2615, 2616, 1, 0, 0, 0, 2616, 2618, 1, 0, 0, 0, 2617, 2615, 1, 0, 0, 0, 2618, 2619, 3, 346, 173, 0, 2619, 345, 1, 0, 0, 0, 2620, 2627, 3, 348, 174, 0, 2621, 2623, 5, 218, 0, 0, 2622, 2621, 1, 0, 0, 0, 2622, 2623, 1, 0, 0, 0, 2623, 2624, 1, 0, 0, 0, 2624, 2626, 3, 408, 204, 0, 2625, 2622, 1, 0, 0, 0, 2626, 2629, 1, 0, 0, 0, 2627, 2625, 1, 0, 0, 0, 2627, 2628, 1, 0, 0, 0, 2628, 347, 1, 0, 0, 0, 2629, 2627, 1, 0, 0, 0, 2630, 2649, 3, 350, 175, 0, 2631, 2633, 5, 218, 0, 0, 2632, 2631, 1, 0, 0, 0, 2632, 2633, 1, 0, 0, 0, 2633, 2634, 1, 0, 0, 0, 2634, 2636, 5, 13, 0, 0, 2635, 2637, 5, 218, 0, 0, 2636, 2635, 1, 0, 0, 0, 2636, 2637, 1, 0, 0, 0, 2637, 2638, 1, 0, 0, 0, 2638, 2648, 3, 350, 175, 0, 2639, 2641, 5, 218, 0, 0, 2640, 2639, 1, 0, 0, 0, 2640, 2641, 1, 0, 0, 0, 2641, 2642, 1, 0, 0, 0, 2642, 2644, 5, 3, 0, 0, 2643, 2645, 5, 218, 0, 0, 2644, 2643, 1, 0, 0, 0, 2644, 2645, 1, 0, 0, 0, 2645, 2646, 1, 0, 0, 0, 2646, 2648, 3, 350, 175, 0, 2647, 2632, 1, 0, 0, 0, 2647, 2640, 1, 0, 0, 0, 2648, 2651, 1, 0, 0, 0, 2649, 2647, 1, 0, 0, 0, 2649, 2650, 1, 0, 0, 0, 2650, 349, 1, 0, 0, 0, 2651, 2649, 1, 0, 0, 0, 2652, 2679, 3, 352, 176, 0, 2653, 2655, 5, 218, 0, 0, 2654, 2653, 1, 0, 0, 0, 2654, 2655, 1, 0, 0, 0, 2655, 2656, 1, 0, 0, 0, 2656, 2658, 5, 19, 0, 0, 2657, 2659, 5, 218, 0, 0, 2658, 2657, 1, 0, 0, 0, 2658, 2659, 1, 0, 0, 0, 2659, 2660, 1, 0, 0, 0, 2660, 2678, 3, 352, 176, 0, 2661, 2663, 5, 218, 0, 0, 2662, 2661, 1, 0, 0, 0, 2662, 2663, 1, 0, 0, 0, 2663, 2664, 1, 0, 0, 0, 2664, 2666, 5, 6, 0, 0, 2665, 2667, 5, 218, 0, 0, 2666, 2665, 1, 0, 0, 0, 2666, 2667, 1, 0, 0, 0, 2667, 2668, 1, 0, 0, 0, 2668, 2678, 3, 352, 176, 0, 2669, 2671, 5, 218, 0, 0, 2670, 2669, 1, 0, 0, 0, 2670, 2671, 1, 0, 0, 0, 2671, 2672, 1, 0, 0, 0, 2672, 2674, 5, 25, 0, 0, 2673, 2675, 5, 218, 0, 0, 2674, 2673, 1, 0, 0, 0, 2674, 2675, 1, 0, 0, 0, 2675, 2676, 1, 0, 0, 0, 2676, 2678, 3, 352, 176, 0, 2677, 2654, 1, 0, 0, 0, 2677, 2662, 1, 0, 0, 0, 2677, 2670, 1, 0, 0, 0, 2678, 2681, 1, 0, 0, 0, 2679, 2677, 1, 0, 0, 0, 2679, 2680, 1, 0, 0, 0, 2680, 351, 1, 0, 0, 0, 2681, 2679, 1, 0, 0, 0, 2682, 2693, 3, 354, 177, 0, 2683, 2685, 5, 218, 0, 0, 2684, 2683, 1, 0, 0, 0, 2684, 2685, 1, 0, 0, 0, 2685, 2686, 1, 0, 0, 0, 2686, 2688, 5, 26, 0, 0, 2687, 2689, 5, 218, 0, 0, 2688, 2687, 1, 0, 0, 0, 2688, 2689, 1, 0, 0, 0, 2689, 2690, 1, 0, 0, 0, 2690, 2692, 3, 354, 177, 0, 2691, 2684, 1, 0, 0, 0, 2692, 2695, 1, 0, 0, 0, 2693, 2691, 1, 0, 0, 0, 2693, 2694, 1, 0, 0, 0, 2694, 353, 1, 0, 0, 0, 2695, 2693, 1, 0, 0, 0, 2696, 2698, 7, 15, 0, 0, 2697, 2699, 5, 218, 0, 0, 2698, 2697, 1, 0, 0, 0, 2698, 2699, 1, 0, 0, 0, 2699, 2701, 1, 0, 0, 0, 2700, 2696, 1, 0, 0, 0, 2701, 2704, 1, 0, 0, 0, 2702, 2700, 1, 0, 0, 0, 2702, 2703, 1, 0, 0, 0, 2703, 2705, 1, 0, 0, 0, 2704, 2702, 1, 0, 0, 0, 2705, 2706, 3, 356, 178, 0, 2706, 355, 1, 0, 0, 0, 2707, 2761, 3, 358, 179, 0, 2708, 2710, 5, 218, 0, 0, 2709, 2708, 1, 0, 0, 0, 2709, 2710, 1, 0, 0, 0, 2710, 2711, 1, 0, 0, 0, 2711, 2712, 5, 17, 0, 0, 2712, 2713, 3, 336, 168, 0, 2713, 2714, 5, 18, 0, 0, 2714, 2760, 1, 0, 0, 0, 2715, 2717, 5, 218, 0, 0, 2716, 2715, 1, 0, 0, 0, 2716, 2717, 1, 0, 0, 0, 2717, 2718, 1, 0, 0, 0, 2718, 2720, 5, 17, 0, 0, 2719, 2721, 3, 336, 168, 0, 2720, 2719, 1, 0, 0, 0, 2720, 2721, 1, 0, 0, 0, 2721, 2722, 1, 0, 0, 0, 2722, 2724, 5, 24, 0, 0, 2723, 2725, 3, 336, 168, 0, 2724, 2723, 1, 0, 0, 0, 2724, 2725, 1, 0, 0, 0, 2725, 2726, 1, 0, 0, 0, 2726, 2760, 5, 18, 0, 0, 2727, 2729, 5, 218, 0, 0, 2728, 2727, 1, 0, 0, 0, 2728, 2729, 1, 0, 0, 0, 2729, 2730, 1, 0, 0, 0, 2730, 2744, 5, 27, 0, 0, 2731, 2732, 5, 218, 0, 0, 2732, 2744, 5, 87, 0, 0, 2733, 2734, 5, 218, 0, 0, 2734, 2735, 5, 111, 0, 0, 2735, 2736, 5, 218, 0, 0, 2736, 2744, 5, 73, 0, 0, 2737, 2738, 5, 218, 0, 0, 2738, 2739, 5, 112, 0, 0, 2739, 2740, 5, 218, 0, 0, 2740, 2744, 5, 73, 0, 0, 2741, 2742, 5, 218, 0, 0, 2742, 2744, 5, 113, 0, 0, 2743, 2728, 1, 0, 0, 0, 2743, 2731, 1, 0, 0, 0, 2743, 2733, 1, 0, 0, 0, 2743, 2737, 1, 0, 0, 0, 2743, 2741, 1, 0, 0, 0, 2744, 2746, 1, 0, 0, 0, 2745, 2747, 5, 218, 0, 0, 2746, 2745, 1, 0, 0, 0, 2746, 2747, 1, 0, 0, 0, 2747, 2748, 1, 0, 0, 0, 2748, 2760, 3, 358, 179, 0, 2749, 2750, 5, 218, 0, 0, 2750, 2751, 5, 68, 0, 0, 2751, 2752, 5, 218, 0, 0, 2752, 2760, 5, 114, 0, 0, 2753, 2754, 5, 218, 0, 0, 2754, 2755, 5, 68, 0, 0, 2755, 2756, 5, 218, 0, 0, 2756, 2757, 5, 110, 0, 0, 2757, 2758, 5, 218, 0, 0, 2758, 2760, 5, 114, 0, 0, 2759, 2709, 1, 0, 0, 0, 2759, 2716, 1, 0, 0, 0, 2759, 2743, 1, 0, 0, 0, 2759, 2749, 1, 0, 0, 0, 2759, 2753, 1, 0, 0, 0, 2760, 2763, 1, 0, 0, 0, 2761, 2759, 1, 0, 0, 0, 2761, 2762, 1, 0, 0, 0, 2762, 357, 1, 0, 0, 0, 2763, 2761, 1, 0, 0, 0, 2764, 2774, 3, 398, 199, 0, 2765, 2767, 5, 218, 0, 0, 2766, 2765, 1, 0, 0, 0, 2766, 2767, 1, 0, 0, 0, 2767, 2770, 1, 0, 0, 0, 2768, 2771, 3, 430, 215, 0, 2769, 2771, 3, 326, 163, 0, 2770, 2768, 1, 0, 0, 0, 2770, 2769, 1, 0, 0, 0, 2771, 2773, 1, 0, 0, 0, 2772, 2766, 1, 0, 0, 0, 2773, 2776, 1, 0, 0, 0, 2774, 2772, 1, 0, 0, 0, 2774, 2775, 1, 0, 0, 0, 2775, 359, 1, 0, 0, 0, 2776, 2774, 1, 0, 0, 0, 2777, 2779, 3, 362, 181, 0, 2778, 2780, 5, 218, 0, 0, 2779, 2778, 1, 0, 0, 0, 2779, 2780, 1, 0, 0, 0, 2780, 2781, 1, 0, 0, 0, 2781, 2783, 5, 20, 0, 0, 2782, 2784, 5, 218, 0, 0, 2783, 2782, 1, 0, 0, 0, 2783, 2784, 1, 0, 0, 0, 2784, 2785, 1, 0, 0, 0, 2785, 2787, 3, 414, 207, 0, 2786, 2788, 5, 218, 0, 0, 2787, 2786, 1, 0, 0, 0, 2787, 2788, 1, 0, 0, 0, 2788, 2789, 1, 0, 0, 0, 2789, 2790, 5, 21, 0, 0, 2790, 361, 1, 0, 0, 0, 2791, 2792, 5, 116, 0, 0, 2792, 363, 1, 0, 0, 0, 2793, 2795, 3, 366, 183, 0, 2794, 2796, 5, 218, 0, 0, 2795, 2794, 1, 0, 0, 0, 2795, 2796, 1, 0, 0, 0, 2796, 2797, 1, 0, 0, 0, 2797, 2799, 5, 20, 0, 0, 2798, 2800, 5, 218, 0, 0, 2799, 2798, 1, 0, 0, 0, 2799, 2800, 1, 0, 0, 0, 2800, 2801, 1, 0, 0, 0, 2801, 2803, 3, 336, 168, 0, 2802, 2804, 5, 218, 0, 0, 2803, 2802, 1, 0, 0, 0, 2803, 2804, 1, 0, 0, 0, 2804, 2805, 1, 0, 0, 0, 2805, 2806, 5, 21, 0, 0, 2806, 365, 1, 0, 0, 0, 2807, 2808, 5, 70, 0, 0, 2808, 367, 1, 0, 0, 0, 2809, 2811, 3, 370, 185, 0, 2810, 2812, 5, 218, 0, 0, 2811, 2810, 1, 0, 0, 0, 2811, 2812, 1, 0, 0, 0, 2812, 2813, 1, 0, 0, 0, 2813, 2815, 5, 20, 0, 0, 2814, 2816, 5, 218, 0, 0, 2815, 2814, 1, 0, 0, 0, 2815, 2816, 1, 0, 0, 0, 2816, 2817, 1, 0, 0, 0, 2817, 2819, 3, 414, 207, 0, 2818, 2820, 5, 218, 0, 0, 2819, 2818, 1, 0, 0, 0, 2819, 2820, 1, 0, 0, 0, 2820, 2821, 1, 0, 0, 0, 2821, 2822, 5, 21, 0, 0, 2822, 369, 1, 0, 0, 0, 2823, 2824, 5, 61, 0, 0, 2824, 371, 1, 0, 0, 0, 2825, 2827, 3, 374, 187, 0, 2826, 2828, 5, 218, 0, 0, 2827, 2826, 1, 0, 0, 0, 2827, 2828, 1, 0, 0, 0, 2828, 2829, 1, 0, 0, 0, 2829, 2831, 5, 20, 0, 0, 2830, 2832, 5, 218, 0, 0, 2831, 2830, 1, 0, 0, 0, 2831, 2832, 1, 0, 0, 0, 2832, 2833, 1, 0, 0, 0, 2833, 2835, 3, 414, 207, 0, 2834, 2836, 5, 218, 0, 0, 2835, 2834, 1, 0, 0, 0, 2835, 2836, 1, 0, 0, 0, 2836, 2837, 1, 0, 0, 0, 2837, 2838, 5, 21, 0, 0, 2838, 373, 1, 0, 0, 0, 2839, 2840, 5, 118, 0, 0, 2840, 375, 1, 0, 0, 0, 2841, 2843, 3, 378, 189, 0, 2842, 2844, 5, 218, 0, 0, 2843, 2842, 1, 0, 0, 0, 2843, 2844, 1, 0, 0, 0, 2844, 2845, 1, 0, 0, 0, 2845, 2847, 5, 20, 0, 0, 2846, 2848, 5, 218, 0, 0, 2847, 2846, 1, 0, 0, 0, 2847, 2848, 1, 0, 0, 0, 2848, 2849, 1, 0, 0, 0, 2849, 2851, 3, 414, 207, 0, 2850, 2852, 5, 218, 0, 0, 2851, 2850, 1, 0, 0, 0, 2851, 2852, 1, 0, 0, 0, 2852, 2853, 1, 0, 0, 0, 2853, 2854, 5, 21, 0, 0, 2854, 377, 1, 0, 0, 0, 2855, 2856, 5, 119, 0, 0, 2856, 379, 1, 0, 0, 0, 2857, 2859, 3, 382, 191, 0, 2858, 2860, 5, 218, 0, 0, 2859, 2858, 1, 0, 0, 0, 2859, 2860, 1, 0, 0, 0, 2860, 2861, 1, 0, 0, 0, 2861, 2863, 5, 20, 0, 0, 2862, 2864, 5, 218, 0, 0, 2863, 2862, 1, 0, 0, 0, 2863, 2864, 1, 0, 0, 0, 2864, 2865, 1, 0, 0, 0, 2865, 2867, 3, 414, 207, 0, 2866, 2868, 5, 218, 0, 0, 2867, 2866, 1, 0, 0, 0, 2867, 2868, 1, 0, 0, 0, 2868, 2869, 1, 0, 0, 0, 2869, 2870, 5, 21, 0, 0, 2870, 381, 1, 0, 0, 0, 2871, 2872, 5, 120, 0, 0, 2872, 383, 1, 0, 0, 0, 2873, 2875, 3, 386, 193, 0, 2874, 2876, 5, 218, 0, 0, 2875, 2874, 1, 0, 0, 0, 2875, 2876, 1, 0, 0, 0, 2876, 2877, 1, 0, 0, 0, 2877, 2879, 5, 20, 0, 0, 2878, 2880, 5, 218, 0, 0, 2879, 2878, 1, 0, 0, 0, 2879, 2880, 1, 0, 0, 0, 2880, 2881, 1, 0, 0, 0, 2881, 2890, 3, 414, 207, 0, 2882, 2884, 5, 218, 0, 0, 2883, 2882, 1, 0, 0, 0, 2883, 2884, 1, 0, 0, 0, 2884, 2885, 1, 0, 0, 0, 2885, 2887, 5, 23, 0, 0, 2886, 2888, 5, 218, 0, 0, 2887, 2886, 1, 0, 0, 0, 2887, 2888, 1, 0, 0, 0, 2888, 2889, 1, 0, 0, 0, 2889, 2891, 3, 336, 168, 0, 2890, 2883, 1, 0, 0, 0, 2890, 2891, 1, 0, 0, 0, 2891, 2893, 1, 0, 0, 0, 2892, 2894, 5, 218, 0, 0, 2893, 2892, 1, 0, 0, 0, 2893, 2894, 1, 0, 0, 0, 2894, 2895, 1, 0, 0, 0, 2895, 2896, 5, 21, 0, 0, 2896, 385, 1, 0, 0, 0, 2897, 2898, 5, 117, 0, 0, 2898, 387, 1, 0, 0, 0, 2899, 2901, 3, 390, 195, 0, 2900, 2902, 5, 218, 0, 0, 2901, 2900, 1, 0, 0, 0, 2901, 2902, 1, 0, 0, 0, 2902, 2903, 1, 0, 0, 0, 2903, 2905, 5, 20, 0, 0, 2904, 2906, 5, 218, 0, 0, 2905, 2904, 1, 0, 0, 0, 2905, 2906, 1, 0, 0, 0, 2906, 2907, 1, 0, 0, 0, 2907, 2909, 3, 436, 218, 0, 2908, 2910, 5, 218, 0, 0, 2909, 2908, 1, 0, 0, 0, 2909, 2910, 1, 0, 0, 0, 2910, 2911, 1, 0, 0, 0, 2911, 2913, 5, 12, 0, 0, 2912, 2914, 5, 218, 0, 0, 2913, 2912, 1, 0, 0, 0, 2913, 2914, 1, 0, 0, 0, 2914, 2915, 1, 0, 0, 0, 2915, 2917, 3, 336, 168, 0, 2916, 2918, 5, 218, 0, 0, 2917, 2916, 1, 0, 0, 0, 2917, 2918, 1, 0, 0, 0, 2918, 2919, 1, 0, 0, 0, 2919, 2921, 5, 15, 0, 0, 2920, 2922, 5, 218, 0, 0, 2921, 2920, 1, 0, 0, 0, 2921, 2922, 1, 0, 0, 0, 2922, 2923, 1, 0, 0, 0, 2923, 2925, 3, 416, 208, 0, 2924, 2926, 5, 218, 0, 0, 2925, 2924, 1, 0, 0, 0, 2925, 2926, 1, 0, 0, 0, 2926, 2927, 1, 0, 0, 0, 2927, 2929, 5, 23, 0, 0, 2928, 2930, 5, 218, 0, 0, 2929, 2928, 1, 0, 0, 0, 2929, 2930, 1, 0, 0, 0, 2930, 2931, 1, 0, 0, 0, 2931, 2933, 3, 336, 168, 0, 2932, 2934, 5, 218, 0, 0, 2933, 2932, 1, 0, 0, 0, 2933, 2934, 1, 0, 0, 0, 2934, 2935, 1, 0, 0, 0, 2935, 2936, 5, 21, 0, 0, 2936, 389, 1, 0, 0, 0, 2937, 2938, 5, 123, 0, 0, 2938, 391, 1, 0, 0, 0, 2939, 2941, 3, 394, 197, 0, 2940, 2942, 5, 218, 0, 0, 2941, 2940, 1, 0, 0, 0, 2941, 2942, 1, 0, 0, 0, 2942, 2943, 1, 0, 0, 0, 2943, 2945, 5, 20, 0, 0, 2944, 2946, 5, 218, 0, 0, 2945, 2944, 1, 0, 0, 0, 2945, 2946, 1, 0, 0, 0, 2946, 2947, 1, 0, 0, 0, 2947, 2949, 3, 302, 151, 0, 2948, 2950, 5, 218, 0, 0, 2949, 2948, 1, 0, 0, 0, 2949, 2950, 1, 0, 0, 0, 2950, 2951, 1, 0, 0, 0, 2951, 2952, 5, 21, 0, 0, 2952, 2968, 1, 0, 0, 0, 2953, 2955, 3, 396, 198, 0, 2954, 2956, 5, 218, 0, 0, 2955, 2954, 1, 0, 0, 0, 2955, 2956, 1, 0, 0, 0, 2956, 2957, 1, 0, 0, 0, 2957, 2959, 5, 20, 0, 0, 2958, 2960, 5, 218, 0, 0, 2959, 2958, 1, 0, 0, 0, 2959, 2960, 1, 0, 0, 0, 2960, 2961, 1, 0, 0, 0, 2961, 2963, 3, 302, 151, 0, 2962, 2964, 5, 218, 0, 0, 2963, 2962, 1, 0, 0, 0, 2963, 2964, 1, 0, 0, 0, 2964, 2965, 1, 0, 0, 0, 2965, 2966, 5, 21, 0, 0, 2966, 2968, 1, 0, 0, 0, 2967, 2939, 1, 0, 0, 0, 2967, 2953, 1, 0, 0, 0, 2968, 393, 1, 0, 0, 0, 2969, 2970, 5, 105, 0, 0, 2970, 395, 1, 0, 0, 0, 2971, 2972, 5, 106, 0, 0, 2972, 397, 1, 0, 0, 0, 2973, 3005, 3, 400, 200, 0, 2974, 3005, 3, 454, 227, 0, 2975, 3005, 3, 432, 216, 0, 2976, 2978, 5, 115, 0, 0, 2977, 2979, 5, 218, 0, 0, 2978, 2977, 1, 0, 0, 0, 2978, 2979, 1, 0, 0, 0, 2979, 2980, 1, 0, 0, 0, 2980, 2982, 5, 20, 0, 0, 2981, 2983, 5, 218, 0, 0, 2982, 2981, 1, 0, 0, 0, 2982, 2983, 1, 0, 0, 0, 2983, 2984, 1, 0, 0, 0, 2984, 2986, 5, 19, 0, 0, 2985, 2987, 5, 218, 0, 0, 2986, 2985, 1, 0, 0, 0, 2986, 2987, 1, 0, 0, 0, 2987, 2988, 1, 0, 0, 0, 2988, 3005, 5, 21, 0, 0, 2989, 3005, 3, 426, 213, 0, 2990, 3005, 3, 428, 214, 0, 2991, 3005, 3, 360, 180, 0, 2992, 3005, 3, 384, 192, 0, 2993, 3005, 3, 388, 194, 0, 2994, 3005, 3, 368, 184, 0, 2995, 3005, 3, 372, 186, 0, 2996, 3005, 3, 376, 188, 0, 2997, 3005, 3, 380, 190, 0, 2998, 3005, 3, 364, 182, 0, 2999, 3005, 3, 392, 196, 0, 3e3, 3005, 3, 412, 206, 0, 3001, 3005, 3, 410, 205, 0, 3002, 3005, 3, 418, 209, 0, 3003, 3005, 3, 436, 218, 0, 3004, 2973, 1, 0, 0, 0, 3004, 2974, 1, 0, 0, 0, 3004, 2975, 1, 0, 0, 0, 3004, 2976, 1, 0, 0, 0, 3004, 2989, 1, 0, 0, 0, 3004, 2990, 1, 0, 0, 0, 3004, 2991, 1, 0, 0, 0, 3004, 2992, 1, 0, 0, 0, 3004, 2993, 1, 0, 0, 0, 3004, 2994, 1, 0, 0, 0, 3004, 2995, 1, 0, 0, 0, 3004, 2996, 1, 0, 0, 0, 3004, 2997, 1, 0, 0, 0, 3004, 2998, 1, 0, 0, 0, 3004, 2999, 1, 0, 0, 0, 3004, 3e3, 1, 0, 0, 0, 3004, 3001, 1, 0, 0, 0, 3004, 3002, 1, 0, 0, 0, 3004, 3003, 1, 0, 0, 0, 3005, 399, 1, 0, 0, 0, 3006, 3014, 3, 438, 219, 0, 3007, 3014, 3, 402, 201, 0, 3008, 3014, 3, 404, 202, 0, 3009, 3014, 5, 114, 0, 0, 3010, 3014, 3, 440, 220, 0, 3011, 3014, 3, 406, 203, 0, 3012, 3014, 3, 442, 221, 0, 3013, 3006, 1, 0, 0, 0, 3013, 3007, 1, 0, 0, 0, 3013, 3008, 1, 0, 0, 0, 3013, 3009, 1, 0, 0, 0, 3013, 3010, 1, 0, 0, 0, 3013, 3011, 1, 0, 0, 0, 3013, 3012, 1, 0, 0, 0, 3014, 401, 1, 0, 0, 0, 3015, 3016, 5, 199, 0, 0, 3016, 403, 1, 0, 0, 0, 3017, 3018, 7, 16, 0, 0, 3018, 405, 1, 0, 0, 0, 3019, 3021, 5, 17, 0, 0, 3020, 3022, 5, 218, 0, 0, 3021, 3020, 1, 0, 0, 0, 3021, 3022, 1, 0, 0, 0, 3022, 3040, 1, 0, 0, 0, 3023, 3025, 3, 336, 168, 0, 3024, 3026, 5, 218, 0, 0, 3025, 3024, 1, 0, 0, 0, 3025, 3026, 1, 0, 0, 0, 3026, 3037, 1, 0, 0, 0, 3027, 3029, 5, 15, 0, 0, 3028, 3030, 5, 218, 0, 0, 3029, 3028, 1, 0, 0, 0, 3029, 3030, 1, 0, 0, 0, 3030, 3031, 1, 0, 0, 0, 3031, 3033, 3, 336, 168, 0, 3032, 3034, 5, 218, 0, 0, 3033, 3032, 1, 0, 0, 0, 3033, 3034, 1, 0, 0, 0, 3034, 3036, 1, 0, 0, 0, 3035, 3027, 1, 0, 0, 0, 3036, 3039, 1, 0, 0, 0, 3037, 3035, 1, 0, 0, 0, 3037, 3038, 1, 0, 0, 0, 3038, 3041, 1, 0, 0, 0, 3039, 3037, 1, 0, 0, 0, 3040, 3023, 1, 0, 0, 0, 3040, 3041, 1, 0, 0, 0, 3041, 3042, 1, 0, 0, 0, 3042, 3043, 5, 18, 0, 0, 3043, 407, 1, 0, 0, 0, 3044, 3046, 5, 12, 0, 0, 3045, 3047, 5, 218, 0, 0, 3046, 3045, 1, 0, 0, 0, 3046, 3047, 1, 0, 0, 0, 3047, 3048, 1, 0, 0, 0, 3048, 3080, 3, 348, 174, 0, 3049, 3051, 5, 28, 0, 0, 3050, 3052, 5, 218, 0, 0, 3051, 3050, 1, 0, 0, 0, 3051, 3052, 1, 0, 0, 0, 3052, 3053, 1, 0, 0, 0, 3053, 3080, 3, 348, 174, 0, 3054, 3056, 5, 29, 0, 0, 3055, 3057, 5, 218, 0, 0, 3056, 3055, 1, 0, 0, 0, 3056, 3057, 1, 0, 0, 0, 3057, 3058, 1, 0, 0, 0, 3058, 3080, 3, 348, 174, 0, 3059, 3061, 5, 30, 0, 0, 3060, 3062, 5, 218, 0, 0, 3061, 3060, 1, 0, 0, 0, 3061, 3062, 1, 0, 0, 0, 3062, 3063, 1, 0, 0, 0, 3063, 3080, 3, 348, 174, 0, 3064, 3066, 5, 31, 0, 0, 3065, 3067, 5, 218, 0, 0, 3066, 3065, 1, 0, 0, 0, 3066, 3067, 1, 0, 0, 0, 3067, 3068, 1, 0, 0, 0, 3068, 3080, 3, 348, 174, 0, 3069, 3071, 5, 32, 0, 0, 3070, 3072, 5, 218, 0, 0, 3071, 3070, 1, 0, 0, 0, 3071, 3072, 1, 0, 0, 0, 3072, 3073, 1, 0, 0, 0, 3073, 3080, 3, 348, 174, 0, 3074, 3076, 5, 33, 0, 0, 3075, 3077, 5, 218, 0, 0, 3076, 3075, 1, 0, 0, 0, 3076, 3077, 1, 0, 0, 0, 3077, 3078, 1, 0, 0, 0, 3078, 3080, 3, 348, 174, 0, 3079, 3044, 1, 0, 0, 0, 3079, 3049, 1, 0, 0, 0, 3079, 3054, 1, 0, 0, 0, 3079, 3059, 1, 0, 0, 0, 3079, 3064, 1, 0, 0, 0, 3079, 3069, 1, 0, 0, 0, 3079, 3074, 1, 0, 0, 0, 3080, 409, 1, 0, 0, 0, 3081, 3083, 5, 20, 0, 0, 3082, 3084, 5, 218, 0, 0, 3083, 3082, 1, 0, 0, 0, 3083, 3084, 1, 0, 0, 0, 3084, 3085, 1, 0, 0, 0, 3085, 3087, 3, 336, 168, 0, 3086, 3088, 5, 218, 0, 0, 3087, 3086, 1, 0, 0, 0, 3087, 3088, 1, 0, 0, 0, 3088, 3089, 1, 0, 0, 0, 3089, 3090, 5, 21, 0, 0, 3090, 411, 1, 0, 0, 0, 3091, 3096, 3, 304, 152, 0, 3092, 3094, 5, 218, 0, 0, 3093, 3092, 1, 0, 0, 0, 3093, 3094, 1, 0, 0, 0, 3094, 3095, 1, 0, 0, 0, 3095, 3097, 3, 306, 153, 0, 3096, 3093, 1, 0, 0, 0, 3097, 3098, 1, 0, 0, 0, 3098, 3096, 1, 0, 0, 0, 3098, 3099, 1, 0, 0, 0, 3099, 413, 1, 0, 0, 0, 3100, 3105, 3, 416, 208, 0, 3101, 3103, 5, 218, 0, 0, 3102, 3101, 1, 0, 0, 0, 3102, 3103, 1, 0, 0, 0, 3103, 3104, 1, 0, 0, 0, 3104, 3106, 3, 294, 147, 0, 3105, 3102, 1, 0, 0, 0, 3105, 3106, 1, 0, 0, 0, 3106, 415, 1, 0, 0, 0, 3107, 3108, 3, 436, 218, 0, 3108, 3109, 5, 218, 0, 0, 3109, 3110, 5, 87, 0, 0, 3110, 3111, 5, 218, 0, 0, 3111, 3112, 3, 336, 168, 0, 3112, 417, 1, 0, 0, 0, 3113, 3115, 3, 420, 210, 0, 3114, 3116, 5, 218, 0, 0, 3115, 3114, 1, 0, 0, 0, 3115, 3116, 1, 0, 0, 0, 3116, 3117, 1, 0, 0, 0, 3117, 3119, 5, 20, 0, 0, 3118, 3120, 5, 218, 0, 0, 3119, 3118, 1, 0, 0, 0, 3119, 3120, 1, 0, 0, 0, 3120, 3125, 1, 0, 0, 0, 3121, 3123, 5, 88, 0, 0, 3122, 3124, 5, 218, 0, 0, 3123, 3122, 1, 0, 0, 0, 3123, 3124, 1, 0, 0, 0, 3124, 3126, 1, 0, 0, 0, 3125, 3121, 1, 0, 0, 0, 3125, 3126, 1, 0, 0, 0, 3126, 3144, 1, 0, 0, 0, 3127, 3129, 3, 336, 168, 0, 3128, 3130, 5, 218, 0, 0, 3129, 3128, 1, 0, 0, 0, 3129, 3130, 1, 0, 0, 0, 3130, 3141, 1, 0, 0, 0, 3131, 3133, 5, 15, 0, 0, 3132, 3134, 5, 218, 0, 0, 3133, 3132, 1, 0, 0, 0, 3133, 3134, 1, 0, 0, 0, 3134, 3135, 1, 0, 0, 0, 3135, 3137, 3, 336, 168, 0, 3136, 3138, 5, 218, 0, 0, 3137, 3136, 1, 0, 0, 0, 3137, 3138, 1, 0, 0, 0, 3138, 3140, 1, 0, 0, 0, 3139, 3131, 1, 0, 0, 0, 3140, 3143, 1, 0, 0, 0, 3141, 3139, 1, 0, 0, 0, 3141, 3142, 1, 0, 0, 0, 3142, 3145, 1, 0, 0, 0, 3143, 3141, 1, 0, 0, 0, 3144, 3127, 1, 0, 0, 0, 3144, 3145, 1, 0, 0, 0, 3145, 3146, 1, 0, 0, 0, 3146, 3147, 5, 21, 0, 0, 3147, 419, 1, 0, 0, 0, 3148, 3149, 3, 474, 237, 0, 3149, 3150, 3, 422, 211, 0, 3150, 421, 1, 0, 0, 0, 3151, 3152, 7, 17, 0, 0, 3152, 423, 1, 0, 0, 0, 3153, 3154, 3, 482, 241, 0, 3154, 425, 1, 0, 0, 0, 3155, 3157, 5, 17, 0, 0, 3156, 3158, 5, 218, 0, 0, 3157, 3156, 1, 0, 0, 0, 3157, 3158, 1, 0, 0, 0, 3158, 3159, 1, 0, 0, 0, 3159, 3168, 3, 414, 207, 0, 3160, 3162, 5, 218, 0, 0, 3161, 3160, 1, 0, 0, 0, 3161, 3162, 1, 0, 0, 0, 3162, 3163, 1, 0, 0, 0, 3163, 3165, 5, 23, 0, 0, 3164, 3166, 5, 218, 0, 0, 3165, 3164, 1, 0, 0, 0, 3165, 3166, 1, 0, 0, 0, 3166, 3167, 1, 0, 0, 0, 3167, 3169, 3, 336, 168, 0, 3168, 3161, 1, 0, 0, 0, 3168, 3169, 1, 0, 0, 0, 3169, 3171, 1, 0, 0, 0, 3170, 3172, 5, 218, 0, 0, 3171, 3170, 1, 0, 0, 0, 3171, 3172, 1, 0, 0, 0, 3172, 3173, 1, 0, 0, 0, 3173, 3174, 5, 18, 0, 0, 3174, 427, 1, 0, 0, 0, 3175, 3177, 5, 17, 0, 0, 3176, 3178, 5, 218, 0, 0, 3177, 3176, 1, 0, 0, 0, 3177, 3178, 1, 0, 0, 0, 3178, 3187, 1, 0, 0, 0, 3179, 3181, 3, 436, 218, 0, 3180, 3182, 5, 218, 0, 0, 3181, 3180, 1, 0, 0, 0, 3181, 3182, 1, 0, 0, 0, 3182, 3183, 1, 0, 0, 0, 3183, 3185, 5, 12, 0, 0, 3184, 3186, 5, 218, 0, 0, 3185, 3184, 1, 0, 0, 0, 3185, 3186, 1, 0, 0, 0, 3186, 3188, 1, 0, 0, 0, 3187, 3179, 1, 0, 0, 0, 3187, 3188, 1, 0, 0, 0, 3188, 3189, 1, 0, 0, 0, 3189, 3191, 3, 412, 206, 0, 3190, 3192, 5, 218, 0, 0, 3191, 3190, 1, 0, 0, 0, 3191, 3192, 1, 0, 0, 0, 3192, 3201, 1, 0, 0, 0, 3193, 3195, 5, 104, 0, 0, 3194, 3196, 5, 218, 0, 0, 3195, 3194, 1, 0, 0, 0, 3195, 3196, 1, 0, 0, 0, 3196, 3197, 1, 0, 0, 0, 3197, 3199, 3, 336, 168, 0, 3198, 3200, 5, 218, 0, 0, 3199, 3198, 1, 0, 0, 0, 3199, 3200, 1, 0, 0, 0, 3200, 3202, 1, 0, 0, 0, 3201, 3193, 1, 0, 0, 0, 3201, 3202, 1, 0, 0, 0, 3202, 3203, 1, 0, 0, 0, 3203, 3205, 5, 23, 0, 0, 3204, 3206, 5, 218, 0, 0, 3205, 3204, 1, 0, 0, 0, 3205, 3206, 1, 0, 0, 0, 3206, 3207, 1, 0, 0, 0, 3207, 3209, 3, 336, 168, 0, 3208, 3210, 5, 218, 0, 0, 3209, 3208, 1, 0, 0, 0, 3209, 3210, 1, 0, 0, 0, 3210, 3211, 1, 0, 0, 0, 3211, 3212, 5, 18, 0, 0, 3212, 429, 1, 0, 0, 0, 3213, 3215, 5, 7, 0, 0, 3214, 3216, 5, 218, 0, 0, 3215, 3214, 1, 0, 0, 0, 3215, 3216, 1, 0, 0, 0, 3216, 3217, 1, 0, 0, 0, 3217, 3218, 3, 468, 234, 0, 3218, 431, 1, 0, 0, 0, 3219, 3224, 5, 124, 0, 0, 3220, 3222, 5, 218, 0, 0, 3221, 3220, 1, 0, 0, 0, 3221, 3222, 1, 0, 0, 0, 3222, 3223, 1, 0, 0, 0, 3223, 3225, 3, 434, 217, 0, 3224, 3221, 1, 0, 0, 0, 3225, 3226, 1, 0, 0, 0, 3226, 3224, 1, 0, 0, 0, 3226, 3227, 1, 0, 0, 0, 3227, 3242, 1, 0, 0, 0, 3228, 3230, 5, 124, 0, 0, 3229, 3231, 5, 218, 0, 0, 3230, 3229, 1, 0, 0, 0, 3230, 3231, 1, 0, 0, 0, 3231, 3232, 1, 0, 0, 0, 3232, 3237, 3, 336, 168, 0, 3233, 3235, 5, 218, 0, 0, 3234, 3233, 1, 0, 0, 0, 3234, 3235, 1, 0, 0, 0, 3235, 3236, 1, 0, 0, 0, 3236, 3238, 3, 434, 217, 0, 3237, 3234, 1, 0, 0, 0, 3238, 3239, 1, 0, 0, 0, 3239, 3237, 1, 0, 0, 0, 3239, 3240, 1, 0, 0, 0, 3240, 3242, 1, 0, 0, 0, 3241, 3219, 1, 0, 0, 0, 3241, 3228, 1, 0, 0, 0, 3242, 3251, 1, 0, 0, 0, 3243, 3245, 5, 218, 0, 0, 3244, 3243, 1, 0, 0, 0, 3244, 3245, 1, 0, 0, 0, 3245, 3246, 1, 0, 0, 0, 3246, 3248, 5, 125, 0, 0, 3247, 3249, 5, 218, 0, 0, 3248, 3247, 1, 0, 0, 0, 3248, 3249, 1, 0, 0, 0, 3249, 3250, 1, 0, 0, 0, 3250, 3252, 3, 336, 168, 0, 3251, 3244, 1, 0, 0, 0, 3251, 3252, 1, 0, 0, 0, 3252, 3254, 1, 0, 0, 0, 3253, 3255, 5, 218, 0, 0, 3254, 3253, 1, 0, 0, 0, 3254, 3255, 1, 0, 0, 0, 3255, 3256, 1, 0, 0, 0, 3256, 3257, 5, 126, 0, 0, 3257, 433, 1, 0, 0, 0, 3258, 3260, 5, 127, 0, 0, 3259, 3261, 5, 218, 0, 0, 3260, 3259, 1, 0, 0, 0, 3260, 3261, 1, 0, 0, 0, 3261, 3262, 1, 0, 0, 0, 3262, 3264, 3, 336, 168, 0, 3263, 3265, 5, 218, 0, 0, 3264, 3263, 1, 0, 0, 0, 3264, 3265, 1, 0, 0, 0, 3265, 3266, 1, 0, 0, 0, 3266, 3268, 5, 128, 0, 0, 3267, 3269, 5, 218, 0, 0, 3268, 3267, 1, 0, 0, 0, 3268, 3269, 1, 0, 0, 0, 3269, 3270, 1, 0, 0, 0, 3270, 3271, 3, 336, 168, 0, 3271, 435, 1, 0, 0, 0, 3272, 3273, 3, 482, 241, 0, 3273, 437, 1, 0, 0, 0, 3274, 3277, 3, 472, 236, 0, 3275, 3277, 3, 470, 235, 0, 3276, 3274, 1, 0, 0, 0, 3276, 3275, 1, 0, 0, 0, 3277, 439, 1, 0, 0, 0, 3278, 3280, 5, 14, 0, 0, 3279, 3281, 5, 218, 0, 0, 3280, 3279, 1, 0, 0, 0, 3280, 3281, 1, 0, 0, 0, 3281, 3299, 1, 0, 0, 0, 3282, 3284, 3, 446, 223, 0, 3283, 3285, 5, 218, 0, 0, 3284, 3283, 1, 0, 0, 0, 3284, 3285, 1, 0, 0, 0, 3285, 3296, 1, 0, 0, 0, 3286, 3288, 5, 15, 0, 0, 3287, 3289, 5, 218, 0, 0, 3288, 3287, 1, 0, 0, 0, 3288, 3289, 1, 0, 0, 0, 3289, 3290, 1, 0, 0, 0, 3290, 3292, 3, 446, 223, 0, 3291, 3293, 5, 218, 0, 0, 3292, 3291, 1, 0, 0, 0, 3292, 3293, 1, 0, 0, 0, 3293, 3295, 1, 0, 0, 0, 3294, 3286, 1, 0, 0, 0, 3295, 3298, 1, 0, 0, 0, 3296, 3294, 1, 0, 0, 0, 3296, 3297, 1, 0, 0, 0, 3297, 3300, 1, 0, 0, 0, 3298, 3296, 1, 0, 0, 0, 3299, 3282, 1, 0, 0, 0, 3299, 3300, 1, 0, 0, 0, 3300, 3301, 1, 0, 0, 0, 3301, 3302, 5, 16, 0, 0, 3302, 441, 1, 0, 0, 0, 3303, 3305, 3, 436, 218, 0, 3304, 3306, 5, 218, 0, 0, 3305, 3304, 1, 0, 0, 0, 3305, 3306, 1, 0, 0, 0, 3306, 3307, 1, 0, 0, 0, 3307, 3309, 5, 14, 0, 0, 3308, 3310, 5, 218, 0, 0, 3309, 3308, 1, 0, 0, 0, 3309, 3310, 1, 0, 0, 0, 3310, 3312, 1, 0, 0, 0, 3311, 3313, 3, 444, 222, 0, 3312, 3311, 1, 0, 0, 0, 3312, 3313, 1, 0, 0, 0, 3313, 3324, 1, 0, 0, 0, 3314, 3316, 5, 218, 0, 0, 3315, 3314, 1, 0, 0, 0, 3315, 3316, 1, 0, 0, 0, 3316, 3317, 1, 0, 0, 0, 3317, 3319, 5, 15, 0, 0, 3318, 3320, 5, 218, 0, 0, 3319, 3318, 1, 0, 0, 0, 3319, 3320, 1, 0, 0, 0, 3320, 3321, 1, 0, 0, 0, 3321, 3323, 3, 444, 222, 0, 3322, 3315, 1, 0, 0, 0, 3323, 3326, 1, 0, 0, 0, 3324, 3322, 1, 0, 0, 0, 3324, 3325, 1, 0, 0, 0, 3325, 3328, 1, 0, 0, 0, 3326, 3324, 1, 0, 0, 0, 3327, 3329, 5, 218, 0, 0, 3328, 3327, 1, 0, 0, 0, 3328, 3329, 1, 0, 0, 0, 3329, 3330, 1, 0, 0, 0, 3330, 3331, 5, 16, 0, 0, 3331, 443, 1, 0, 0, 0, 3332, 3337, 3, 446, 223, 0, 3333, 3337, 3, 448, 224, 0, 3334, 3337, 3, 450, 225, 0, 3335, 3337, 3, 452, 226, 0, 3336, 3332, 1, 0, 0, 0, 3336, 3333, 1, 0, 0, 0, 3336, 3334, 1, 0, 0, 0, 3336, 3335, 1, 0, 0, 0, 3337, 445, 1, 0, 0, 0, 3338, 3340, 3, 468, 234, 0, 3339, 3341, 5, 218, 0, 0, 3340, 3339, 1, 0, 0, 0, 3340, 3341, 1, 0, 0, 0, 3341, 3342, 1, 0, 0, 0, 3342, 3344, 5, 2, 0, 0, 3343, 3345, 5, 218, 0, 0, 3344, 3343, 1, 0, 0, 0, 3344, 3345, 1, 0, 0, 0, 3345, 3346, 1, 0, 0, 0, 3346, 3347, 3, 336, 168, 0, 3347, 447, 1, 0, 0, 0, 3348, 3349, 5, 7, 0, 0, 3349, 3350, 3, 436, 218, 0, 3350, 449, 1, 0, 0, 0, 3351, 3352, 3, 436, 218, 0, 3352, 451, 1, 0, 0, 0, 3353, 3354, 5, 7, 0, 0, 3354, 3355, 5, 19, 0, 0, 3355, 453, 1, 0, 0, 0, 3356, 3359, 3, 456, 228, 0, 3357, 3359, 3, 458, 229, 0, 3358, 3356, 1, 0, 0, 0, 3358, 3357, 1, 0, 0, 0, 3359, 455, 1, 0, 0, 0, 3360, 3362, 5, 14, 0, 0, 3361, 3363, 5, 218, 0, 0, 3362, 3361, 1, 0, 0, 0, 3362, 3363, 1, 0, 0, 0, 3363, 3364, 1, 0, 0, 0, 3364, 3366, 3, 460, 230, 0, 3365, 3367, 5, 218, 0, 0, 3366, 3365, 1, 0, 0, 0, 3366, 3367, 1, 0, 0, 0, 3367, 3368, 1, 0, 0, 0, 3368, 3369, 5, 16, 0, 0, 3369, 457, 1, 0, 0, 0, 3370, 3371, 5, 34, 0, 0, 3371, 3372, 3, 460, 230, 0, 3372, 459, 1, 0, 0, 0, 3373, 3376, 3, 482, 241, 0, 3374, 3376, 5, 203, 0, 0, 3375, 3373, 1, 0, 0, 0, 3375, 3374, 1, 0, 0, 0, 3376, 461, 1, 0, 0, 0, 3377, 3388, 3, 464, 232, 0, 3378, 3380, 5, 218, 0, 0, 3379, 3378, 1, 0, 0, 0, 3379, 3380, 1, 0, 0, 0, 3380, 3381, 1, 0, 0, 0, 3381, 3383, 5, 15, 0, 0, 3382, 3384, 5, 218, 0, 0, 3383, 3382, 1, 0, 0, 0, 3383, 3384, 1, 0, 0, 0, 3384, 3385, 1, 0, 0, 0, 3385, 3387, 3, 464, 232, 0, 3386, 3379, 1, 0, 0, 0, 3387, 3390, 1, 0, 0, 0, 3388, 3386, 1, 0, 0, 0, 3388, 3389, 1, 0, 0, 0, 3389, 463, 1, 0, 0, 0, 3390, 3388, 1, 0, 0, 0, 3391, 3396, 3, 398, 199, 0, 3392, 3394, 5, 218, 0, 0, 3393, 3392, 1, 0, 0, 0, 3393, 3394, 1, 0, 0, 0, 3394, 3395, 1, 0, 0, 0, 3395, 3397, 3, 430, 215, 0, 3396, 3393, 1, 0, 0, 0, 3397, 3398, 1, 0, 0, 0, 3398, 3396, 1, 0, 0, 0, 3398, 3399, 1, 0, 0, 0, 3399, 465, 1, 0, 0, 0, 3400, 3411, 3, 468, 234, 0, 3401, 3403, 5, 218, 0, 0, 3402, 3401, 1, 0, 0, 0, 3402, 3403, 1, 0, 0, 0, 3403, 3404, 1, 0, 0, 0, 3404, 3406, 5, 15, 0, 0, 3405, 3407, 5, 218, 0, 0, 3406, 3405, 1, 0, 0, 0, 3406, 3407, 1, 0, 0, 0, 3407, 3408, 1, 0, 0, 0, 3408, 3410, 3, 468, 234, 0, 3409, 3402, 1, 0, 0, 0, 3410, 3413, 1, 0, 0, 0, 3411, 3409, 1, 0, 0, 0, 3411, 3412, 1, 0, 0, 0, 3412, 467, 1, 0, 0, 0, 3413, 3411, 1, 0, 0, 0, 3414, 3415, 3, 482, 241, 0, 3415, 469, 1, 0, 0, 0, 3416, 3417, 7, 18, 0, 0, 3417, 471, 1, 0, 0, 0, 3418, 3419, 7, 19, 0, 0, 3419, 473, 1, 0, 0, 0, 3420, 3421, 3, 482, 241, 0, 3421, 3422, 5, 7, 0, 0, 3422, 3424, 1, 0, 0, 0, 3423, 3420, 1, 0, 0, 0, 3424, 3427, 1, 0, 0, 0, 3425, 3423, 1, 0, 0, 0, 3425, 3426, 1, 0, 0, 0, 3426, 475, 1, 0, 0, 0, 3427, 3425, 1, 0, 0, 0, 3428, 3429, 7, 20, 0, 0, 3429, 477, 1, 0, 0, 0, 3430, 3431, 7, 21, 0, 0, 3431, 479, 1, 0, 0, 0, 3432, 3433, 7, 22, 0, 0, 3433, 481, 1, 0, 0, 0, 3434, 3439, 3, 484, 242, 0, 3435, 3439, 5, 214, 0, 0, 3436, 3439, 5, 217, 0, 0, 3437, 3439, 5, 205, 0, 0, 3438, 3434, 1, 0, 0, 0, 3438, 3435, 1, 0, 0, 0, 3438, 3436, 1, 0, 0, 0, 3438, 3437, 1, 0, 0, 0, 3439, 483, 1, 0, 0, 0, 3440, 3441, 7, 23, 0, 0, 3441, 485, 1, 0, 0, 0, 498, 491, 495, 500, 504, 507, 512, 520, 528, 541, 545, 549, 558, 563, 567, 570, 573, 578, 582, 589, 607, 630, 638, 640, 644, 649, 655, 661, 665, 669, 673, 677, 684, 687, 691, 695, 701, 705, 709, 713, 717, 724, 727, 735, 744, 749, 753, 756, 763, 771, 775, 781, 786, 792, 803, 807, 815, 818, 822, 826, 831, 836, 842, 847, 857, 861, 866, 873, 878, 881, 897, 909, 914, 921, 930, 936, 942, 949, 955, 962, 964, 973, 977, 984, 991, 993, 1012, 1026, 1031, 1038, 1047, 1049, 1058, 1074, 1080, 1091, 1101, 1107, 1117, 1127, 1130, 1177, 1224, 1239, 1247, 1267, 1276, 1280, 1285, 1288, 1297, 1301, 1306, 1309, 1313, 1317, 1322, 1330, 1335, 1342, 1348, 1377, 1386, 1395, 1401, 1407, 1410, 1412, 1432, 1439, 1446, 1453, 1455, 1460, 1464, 1469, 1472, 1476, 1480, 1488, 1494, 1503, 1510, 1515, 1524, 1558, 1562, 1569, 1575, 1631, 1635, 1639, 1643, 1651, 1655, 1660, 1664, 1678, 1682, 1687, 1691, 1697, 1701, 1715, 1722, 1728, 1738, 1742, 1748, 1756, 1767, 1773, 1785, 1791, 1803, 1807, 1817, 1830, 1834, 1838, 1844, 1848, 1851, 1855, 1865, 1872, 1885, 1889, 1897, 1903, 1907, 1911, 1916, 1921, 1925, 1931, 1935, 1941, 1945, 1951, 1955, 1959, 1963, 1967, 1971, 1976, 1983, 1987, 1992, 1999, 2003, 2007, 2015, 2022, 2025, 2031, 2034, 2039, 2042, 2046, 2049, 2052, 2059, 2063, 2067, 2071, 2074, 2078, 2082, 2087, 2092, 2096, 2101, 2105, 2114, 2120, 2123, 2127, 2130, 2137, 2140, 2143, 2147, 2152, 2156, 2164, 2168, 2173, 2178, 2182, 2200, 2204, 2209, 2222, 2226, 2228, 2231, 2240, 2244, 2248, 2260, 2264, 2269, 2279, 2285, 2289, 2294, 2298, 2302, 2306, 2312, 2316, 2321, 2327, 2336, 2345, 2353, 2359, 2363, 2368, 2377, 2381, 2386, 2391, 2395, 2400, 2404, 2408, 2413, 2420, 2424, 2428, 2430, 2434, 2436, 2440, 2442, 2448, 2454, 2457, 2460, 2466, 2471, 2475, 2480, 2484, 2488, 2490, 2494, 2496, 2499, 2503, 2505, 2511, 2515, 2521, 2527, 2534, 2540, 2545, 2553, 2557, 2559, 2563, 2567, 2569, 2571, 2586, 2596, 2606, 2611, 2615, 2622, 2627, 2632, 2636, 2640, 2644, 2647, 2649, 2654, 2658, 2662, 2666, 2670, 2674, 2677, 2679, 2684, 2688, 2693, 2698, 2702, 2709, 2716, 2720, 2724, 2728, 2743, 2746, 2759, 2761, 2766, 2770, 2774, 2779, 2783, 2787, 2795, 2799, 2803, 2811, 2815, 2819, 2827, 2831, 2835, 2843, 2847, 2851, 2859, 2863, 2867, 2875, 2879, 2883, 2887, 2890, 2893, 2901, 2905, 2909, 2913, 2917, 2921, 2925, 2929, 2933, 2941, 2945, 2949, 2955, 2959, 2963, 2967, 2978, 2982, 2986, 3004, 3013, 3021, 3025, 3029, 3033, 3037, 3040, 3046, 3051, 3056, 3061, 3066, 3071, 3076, 3079, 3083, 3087, 3093, 3098, 3102, 3105, 3115, 3119, 3123, 3125, 3129, 3133, 3137, 3141, 3144, 3157, 3161, 3165, 3168, 3171, 3177, 3181, 3185, 3187, 3191, 3195, 3199, 3201, 3205, 3209, 3215, 3221, 3226, 3230, 3234, 3239, 3241, 3244, 3248, 3251, 3254, 3260, 3264, 3268, 3276, 3280, 3284, 3288, 3292, 3296, 3299, 3305, 3309, 3312, 3315, 3319, 3324, 3328, 3336, 3340, 3344, 3358, 3362, 3366, 3375, 3379, 3383, 3388, 3393, 3398, 3402, 3406, 3411, 3425, 3438];
var atn2 = new es_default.atn.ATNDeserializer().deserialize(serializedATN2);
var decisionsToDFA2 = atn2.decisionToState.map((ds, index) => new es_default.dfa.DFA(ds, index));
var sharedContextCache = new es_default.PredictionContextCache();
var CypherParser = class _CypherParser extends es_default.Parser {
  constructor(input) {
    super(input);
    this._interp = new es_default.atn.ParserATNSimulator(this, atn2, decisionsToDFA2, sharedContextCache);
    this.ruleNames = _CypherParser.ruleNames;
    this.literalNames = _CypherParser.literalNames;
    this.symbolicNames = _CypherParser.symbolicNames;
  }
  get atn() {
    return atn2;
  }
  cypher() {
    let localctx = new CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, _CypherParser.RULE_cypher);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 486;
      this.cypherPart();
      this.state = 491;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 0, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 487;
          this.match(_CypherParser.T__0);
          this.state = 488;
          this.cypherPart();
        }
        this.state = 493;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 0, this._ctx);
      }
      this.state = 495;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__0) {
        this.state = 494;
        this.match(_CypherParser.T__0);
      }
      this.state = 497;
      this.match(_CypherParser.EOF);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherPart() {
    let localctx = new CypherPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, _CypherParser.RULE_cypherPart);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 500;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 499;
        this.match(_CypherParser.SP);
      }
      this.state = 504;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.CYPHER:
        case _CypherParser.EXPLAIN:
        case _CypherParser.PROFILE:
        case _CypherParser.USING:
        case _CypherParser.CREATE:
        case _CypherParser.DROP:
        case _CypherParser.LOAD:
        case _CypherParser.WITH:
        case _CypherParser.OPTIONAL:
        case _CypherParser.MATCH:
        case _CypherParser.UNWIND:
        case _CypherParser.MERGE:
        case _CypherParser.SET:
        case _CypherParser.DETACH:
        case _CypherParser.DELETE:
        case _CypherParser.REMOVE:
        case _CypherParser.FOREACH:
        case _CypherParser.RETURN:
        case _CypherParser.START:
        case _CypherParser.CALL:
        case _CypherParser.CATALOG:
        case _CypherParser.SHOW:
        case _CypherParser.STOP:
        case _CypherParser.ALTER:
        case _CypherParser.GRANT:
        case _CypherParser.DENY:
        case _CypherParser.REVOKE:
          this.state = 502;
          this.cypherQuery();
          break;
        case _CypherParser.T__1:
          this.state = 503;
          this.cypherConsoleCommand();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
      this.state = 507;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 506;
        this.match(_CypherParser.SP);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherConsoleCommand() {
    let localctx = new CypherConsoleCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, _CypherParser.RULE_cypherConsoleCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 509;
      this.cypherConsoleCommandName();
      this.state = 512;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);
      if (la_ === 1) {
        this.state = 510;
        this.match(_CypherParser.SP);
        this.state = 511;
        this.cypherConsoleCommandParameters();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherConsoleCommandName() {
    let localctx = new CypherConsoleCommandNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, _CypherParser.RULE_cypherConsoleCommandName);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 514;
      this.match(_CypherParser.T__1);
      this.state = 515;
      this.symbolicName();
      this.state = 520;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__2) {
        this.state = 516;
        this.match(_CypherParser.T__2);
        this.state = 517;
        this.symbolicName();
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherConsoleCommandParameters() {
    let localctx = new CypherConsoleCommandParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, _CypherParser.RULE_cypherConsoleCommandParameters);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 523;
      this.cypherConsoleCommandParameter();
      this.state = 528;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 524;
          this.match(_CypherParser.SP);
          this.state = 525;
          this.cypherConsoleCommandParameter();
        }
        this.state = 530;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherConsoleCommandParameter() {
    let localctx = new CypherConsoleCommandParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, _CypherParser.RULE_cypherConsoleCommandParameter);
    try {
      this.state = 541;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 531;
          this.url();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 532;
          this.json();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 533;
          this.arrowExpression();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 534;
          this.mapLiteral();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 535;
          this.keyValueLiteral();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 536;
          this.stringLiteral();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 537;
          this.numberLiteral();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 538;
          this.booleanLiteral();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 539;
          this.subCommand();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 540;
          this.commandPath();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrowExpression() {
    let localctx = new ArrowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, _CypherParser.RULE_arrowExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 543;
      this.symbolicName();
      this.state = 545;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 544;
        this.match(_CypherParser.SP);
      }
      this.state = 547;
      this.match(_CypherParser.T__3);
      this.state = 549;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 548;
        this.match(_CypherParser.SP);
      }
      this.state = 551;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  url() {
    let localctx = new UrlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, _CypherParser.RULE_url);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 553;
      this.uri();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  uri() {
    let localctx = new UriContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, _CypherParser.RULE_uri);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 555;
      this.scheme();
      this.state = 556;
      this.match(_CypherParser.T__4);
      this.state = 558;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
      if (la_ === 1) {
        this.state = 557;
        this.login();
      }
      this.state = 560;
      this.host();
      this.state = 563;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__1) {
        this.state = 561;
        this.match(_CypherParser.T__1);
        this.state = 562;
        this.port();
      }
      this.state = 567;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__5) {
        this.state = 565;
        this.match(_CypherParser.T__5);
        this.state = 566;
        this.path();
      }
      this.state = 570;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__9) {
        this.state = 569;
        this.urlQuery();
      }
      this.state = 573;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__8) {
        this.state = 572;
        this.frag();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  scheme() {
    let localctx = new SchemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, _CypherParser.RULE_scheme);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 575;
      this.string();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  host() {
    let localctx = new HostContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, _CypherParser.RULE_host);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 578;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__5) {
        this.state = 577;
        this.match(_CypherParser.T__5);
      }
      this.state = 582;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.CYPHER:
        case _CypherParser.EXPLAIN:
        case _CypherParser.PROFILE:
        case _CypherParser.USING:
        case _CypherParser.PERIODIC:
        case _CypherParser.COMMIT:
        case _CypherParser.UNION:
        case _CypherParser.ALL:
        case _CypherParser.CREATE:
        case _CypherParser.DROP:
        case _CypherParser.INDEX:
        case _CypherParser.ON:
        case _CypherParser.CONSTRAINT:
        case _CypherParser.ASSERT:
        case _CypherParser.IS:
        case _CypherParser.UNIQUE:
        case _CypherParser.EXISTS:
        case _CypherParser.LOAD:
        case _CypherParser.CSV:
        case _CypherParser.WITH:
        case _CypherParser.HEADERS:
        case _CypherParser.FROM:
        case _CypherParser.AS:
        case _CypherParser.FIELDTERMINATOR:
        case _CypherParser.OPTIONAL:
        case _CypherParser.MATCH:
        case _CypherParser.UNWIND:
        case _CypherParser.MERGE:
        case _CypherParser.SET:
        case _CypherParser.DETACH:
        case _CypherParser.DELETE:
        case _CypherParser.REMOVE:
        case _CypherParser.FOREACH:
        case _CypherParser.IN:
        case _CypherParser.DISTINCT:
        case _CypherParser.RETURN:
        case _CypherParser.ORDER:
        case _CypherParser.BY:
        case _CypherParser.L_SKIP:
        case _CypherParser.LIMIT:
        case _CypherParser.ASCENDING:
        case _CypherParser.ASC:
        case _CypherParser.DESCENDING:
        case _CypherParser.DESC:
        case _CypherParser.JOIN:
        case _CypherParser.SCAN:
        case _CypherParser.START:
        case _CypherParser.NODE:
        case _CypherParser.RELATIONSHIP:
        case _CypherParser.REL:
        case _CypherParser.WHERE:
        case _CypherParser.SHORTESTPATH:
        case _CypherParser.ALLSHORTESTPATHS:
        case _CypherParser.OR:
        case _CypherParser.XOR:
        case _CypherParser.AND:
        case _CypherParser.NOT:
        case _CypherParser.STARTS:
        case _CypherParser.ENDS:
        case _CypherParser.CONTAINS:
        case _CypherParser.NULL:
        case _CypherParser.COUNT:
        case _CypherParser.FILTER:
        case _CypherParser.EXTRACT:
        case _CypherParser.ANY:
        case _CypherParser.NONE:
        case _CypherParser.SINGLE:
        case _CypherParser.TRUE:
        case _CypherParser.FALSE:
        case _CypherParser.REDUCE:
        case _CypherParser.CASE:
        case _CypherParser.ELSE:
        case _CypherParser.END:
        case _CypherParser.WHEN:
        case _CypherParser.THEN:
        case _CypherParser.CALL:
        case _CypherParser.YIELD:
        case _CypherParser.KEY:
        case _CypherParser.CATALOG:
        case _CypherParser.SHOW:
        case _CypherParser.DEFAULT:
        case _CypherParser.DBMS:
        case _CypherParser.DATABASE:
        case _CypherParser.DATABASES:
        case _CypherParser.GRAPH:
        case _CypherParser.GRAPHS:
        case _CypherParser.REPLACE:
        case _CypherParser.IF:
        case _CypherParser.STOP:
        case _CypherParser.ROLE:
        case _CypherParser.ROLES:
        case _CypherParser.USER:
        case _CypherParser.USERS:
        case _CypherParser.POPULATED:
        case _CypherParser.PASSWORD:
        case _CypherParser.CHANGE:
        case _CypherParser.REQUIRED:
        case _CypherParser.STATUS:
        case _CypherParser.ACTIVE:
        case _CypherParser.SUSPENDED:
        case _CypherParser.ALTER:
        case _CypherParser.CURRENT:
        case _CypherParser.TO:
        case _CypherParser.PRIVILEGES:
        case _CypherParser.GRANT:
        case _CypherParser.DENY:
        case _CypherParser.REVOKE:
        case _CypherParser.RELATIONSHIPS:
        case _CypherParser.NODES:
        case _CypherParser.ELEMENT:
        case _CypherParser.ELEMENTS:
        case _CypherParser.COPY:
        case _CypherParser.OF:
        case _CypherParser.TRAVERSE:
        case _CypherParser.READ:
        case _CypherParser.WRITE:
        case _CypherParser.ACCESS:
        case _CypherParser.INDEXES:
        case _CypherParser.MANAGEMENT:
        case _CypherParser.NEW:
        case _CypherParser.LABEL:
        case _CypherParser.LABELS:
        case _CypherParser.NAME:
        case _CypherParser.NAMES:
        case _CypherParser.TYPE:
        case _CypherParser.TYPES:
        case _CypherParser.PROPERTY:
        case _CypherParser.CONSTRAINTS:
        case _CypherParser.ASSIGN:
        case _CypherParser.BTREE:
        case _CypherParser.EXIST:
        case _CypherParser.FOR:
        case _CypherParser.OPTIONS:
        case _CypherParser.EXECUTE:
        case _CypherParser.DEFINED:
        case _CypherParser.FUNCTION:
        case _CypherParser.FUNCTIONS:
        case _CypherParser.BOOSTED:
        case _CypherParser.PROCEDURE:
        case _CypherParser.PROCEDURES:
        case _CypherParser.ADMIN:
        case _CypherParser.ADMINISTRATOR:
        case _CypherParser.BRIEF:
        case _CypherParser.VERBOSE:
        case _CypherParser.OUTPUT:
        case _CypherParser.HexLetter:
        case _CypherParser.UnescapedSymbolicName:
        case _CypherParser.EscapedSymbolicName:
          this.state = 580;
          this.hostname();
          break;
        case _CypherParser.HexInteger:
        case _CypherParser.DecimalInteger:
        case _CypherParser.OctalInteger:
          this.state = 581;
          this.hostnumber();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  hostname() {
    let localctx = new HostnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, _CypherParser.RULE_hostname);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 584;
      this.string();
      this.state = 589;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__6) {
        this.state = 585;
        this.match(_CypherParser.T__6);
        this.state = 586;
        this.string();
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  hostnumber() {
    let localctx = new HostnumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, _CypherParser.RULE_hostnumber);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 592;
      this.urlDigits();
      this.state = 593;
      this.match(_CypherParser.T__6);
      this.state = 594;
      this.urlDigits();
      this.state = 595;
      this.match(_CypherParser.T__6);
      this.state = 596;
      this.urlDigits();
      this.state = 597;
      this.match(_CypherParser.T__6);
      this.state = 598;
      this.urlDigits();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  port() {
    let localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, _CypherParser.RULE_port);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 600;
      this.urlDigits();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  path() {
    let localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, _CypherParser.RULE_path);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 602;
      this.string();
      this.state = 607;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__5) {
        this.state = 603;
        this.match(_CypherParser.T__5);
        this.state = 604;
        this.string();
        this.state = 609;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  user() {
    let localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, _CypherParser.RULE_user);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 610;
      this.string();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  login() {
    let localctx = new LoginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, _CypherParser.RULE_login);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 612;
      this.user();
      this.state = 613;
      this.match(_CypherParser.T__1);
      this.state = 614;
      this.password();
      this.state = 615;
      this.match(_CypherParser.T__7);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  password() {
    let localctx = new PasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, _CypherParser.RULE_password);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 617;
      this.string();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  frag() {
    let localctx = new FragContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, _CypherParser.RULE_frag);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 619;
      this.match(_CypherParser.T__8);
      this.state = 620;
      this.string();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  urlQuery() {
    let localctx = new UrlQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, _CypherParser.RULE_urlQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 622;
      this.match(_CypherParser.T__9);
      this.state = 623;
      this.search();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  search() {
    let localctx = new SearchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, _CypherParser.RULE_search);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 625;
      this.searchparameter();
      this.state = 630;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__10) {
        this.state = 626;
        this.match(_CypherParser.T__10);
        this.state = 627;
        this.searchparameter();
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  searchparameter() {
    let localctx = new SearchparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, _CypherParser.RULE_searchparameter);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 633;
      this.string();
      this.state = 640;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__11) {
        this.state = 634;
        this.match(_CypherParser.T__11);
        this.state = 638;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _CypherParser.CYPHER:
          case _CypherParser.EXPLAIN:
          case _CypherParser.PROFILE:
          case _CypherParser.USING:
          case _CypherParser.PERIODIC:
          case _CypherParser.COMMIT:
          case _CypherParser.UNION:
          case _CypherParser.ALL:
          case _CypherParser.CREATE:
          case _CypherParser.DROP:
          case _CypherParser.INDEX:
          case _CypherParser.ON:
          case _CypherParser.CONSTRAINT:
          case _CypherParser.ASSERT:
          case _CypherParser.IS:
          case _CypherParser.UNIQUE:
          case _CypherParser.EXISTS:
          case _CypherParser.LOAD:
          case _CypherParser.CSV:
          case _CypherParser.WITH:
          case _CypherParser.HEADERS:
          case _CypherParser.FROM:
          case _CypherParser.AS:
          case _CypherParser.FIELDTERMINATOR:
          case _CypherParser.OPTIONAL:
          case _CypherParser.MATCH:
          case _CypherParser.UNWIND:
          case _CypherParser.MERGE:
          case _CypherParser.SET:
          case _CypherParser.DETACH:
          case _CypherParser.DELETE:
          case _CypherParser.REMOVE:
          case _CypherParser.FOREACH:
          case _CypherParser.IN:
          case _CypherParser.DISTINCT:
          case _CypherParser.RETURN:
          case _CypherParser.ORDER:
          case _CypherParser.BY:
          case _CypherParser.L_SKIP:
          case _CypherParser.LIMIT:
          case _CypherParser.ASCENDING:
          case _CypherParser.ASC:
          case _CypherParser.DESCENDING:
          case _CypherParser.DESC:
          case _CypherParser.JOIN:
          case _CypherParser.SCAN:
          case _CypherParser.START:
          case _CypherParser.NODE:
          case _CypherParser.RELATIONSHIP:
          case _CypherParser.REL:
          case _CypherParser.WHERE:
          case _CypherParser.SHORTESTPATH:
          case _CypherParser.ALLSHORTESTPATHS:
          case _CypherParser.OR:
          case _CypherParser.XOR:
          case _CypherParser.AND:
          case _CypherParser.NOT:
          case _CypherParser.STARTS:
          case _CypherParser.ENDS:
          case _CypherParser.CONTAINS:
          case _CypherParser.NULL:
          case _CypherParser.COUNT:
          case _CypherParser.FILTER:
          case _CypherParser.EXTRACT:
          case _CypherParser.ANY:
          case _CypherParser.NONE:
          case _CypherParser.SINGLE:
          case _CypherParser.TRUE:
          case _CypherParser.FALSE:
          case _CypherParser.REDUCE:
          case _CypherParser.CASE:
          case _CypherParser.ELSE:
          case _CypherParser.END:
          case _CypherParser.WHEN:
          case _CypherParser.THEN:
          case _CypherParser.CALL:
          case _CypherParser.YIELD:
          case _CypherParser.KEY:
          case _CypherParser.CATALOG:
          case _CypherParser.SHOW:
          case _CypherParser.DEFAULT:
          case _CypherParser.DBMS:
          case _CypherParser.DATABASE:
          case _CypherParser.DATABASES:
          case _CypherParser.GRAPH:
          case _CypherParser.GRAPHS:
          case _CypherParser.REPLACE:
          case _CypherParser.IF:
          case _CypherParser.STOP:
          case _CypherParser.ROLE:
          case _CypherParser.ROLES:
          case _CypherParser.USER:
          case _CypherParser.USERS:
          case _CypherParser.POPULATED:
          case _CypherParser.PASSWORD:
          case _CypherParser.CHANGE:
          case _CypherParser.REQUIRED:
          case _CypherParser.STATUS:
          case _CypherParser.ACTIVE:
          case _CypherParser.SUSPENDED:
          case _CypherParser.ALTER:
          case _CypherParser.CURRENT:
          case _CypherParser.TO:
          case _CypherParser.PRIVILEGES:
          case _CypherParser.GRANT:
          case _CypherParser.DENY:
          case _CypherParser.REVOKE:
          case _CypherParser.RELATIONSHIPS:
          case _CypherParser.NODES:
          case _CypherParser.ELEMENT:
          case _CypherParser.ELEMENTS:
          case _CypherParser.COPY:
          case _CypherParser.OF:
          case _CypherParser.TRAVERSE:
          case _CypherParser.READ:
          case _CypherParser.WRITE:
          case _CypherParser.ACCESS:
          case _CypherParser.INDEXES:
          case _CypherParser.MANAGEMENT:
          case _CypherParser.NEW:
          case _CypherParser.LABEL:
          case _CypherParser.LABELS:
          case _CypherParser.NAME:
          case _CypherParser.NAMES:
          case _CypherParser.TYPE:
          case _CypherParser.TYPES:
          case _CypherParser.PROPERTY:
          case _CypherParser.CONSTRAINTS:
          case _CypherParser.ASSIGN:
          case _CypherParser.BTREE:
          case _CypherParser.EXIST:
          case _CypherParser.FOR:
          case _CypherParser.OPTIONS:
          case _CypherParser.EXECUTE:
          case _CypherParser.DEFINED:
          case _CypherParser.FUNCTION:
          case _CypherParser.FUNCTIONS:
          case _CypherParser.BOOSTED:
          case _CypherParser.PROCEDURE:
          case _CypherParser.PROCEDURES:
          case _CypherParser.ADMIN:
          case _CypherParser.ADMINISTRATOR:
          case _CypherParser.BRIEF:
          case _CypherParser.VERBOSE:
          case _CypherParser.OUTPUT:
          case _CypherParser.HexLetter:
          case _CypherParser.UnescapedSymbolicName:
          case _CypherParser.EscapedSymbolicName:
            this.state = 635;
            this.string();
            break;
          case _CypherParser.HexInteger:
          case _CypherParser.DecimalInteger:
          case _CypherParser.OctalInteger:
            this.state = 636;
            this.urlDigits();
            break;
          case _CypherParser.UrlHex:
            this.state = 637;
            this.match(_CypherParser.UrlHex);
            break;
          default:
            throw new es_default.error.NoViableAltException(this);
        }
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  string() {
    let localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, _CypherParser.RULE_string);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 642;
      this.symbolicName();
      this.state = 649;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
      while (_alt != 1 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1 + 1) {
          this.state = 644;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.T__6 || _la === _CypherParser.T__12) {
            this.state = 643;
            _la = this._input.LA(1);
            if (!(_la === _CypherParser.T__6 || _la === _CypherParser.T__12)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          this.state = 646;
          this.symbolicName();
        }
        this.state = 651;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  urlDigits() {
    let localctx = new UrlDigitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, _CypherParser.RULE_urlDigits);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 653;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 652;
        this.integerLiteral();
        this.state = 655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while ((_la - 202 & ~31) == 0 && (1 << _la - 202 & (1 << _CypherParser.HexInteger - 202 | 1 << _CypherParser.DecimalInteger - 202 | 1 << _CypherParser.OctalInteger - 202)) !== 0);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  json() {
    let localctx = new JsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, _CypherParser.RULE_json);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 657;
      this.value();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  obj() {
    let localctx = new ObjContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, _CypherParser.RULE_obj);
    var _la = 0;
    try {
      this.state = 687;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 659;
          this.match(_CypherParser.T__13);
          this.state = 661;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 660;
            this.match(_CypherParser.SP);
          }
          this.state = 663;
          this.pair();
          this.state = 665;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 664;
            this.match(_CypherParser.SP);
          }
          this.state = 677;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === _CypherParser.T__14) {
            this.state = 667;
            this.match(_CypherParser.T__14);
            this.state = 669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.SP) {
              this.state = 668;
              this.match(_CypherParser.SP);
            }
            this.state = 671;
            this.pair();
            this.state = 673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.SP) {
              this.state = 672;
              this.match(_CypherParser.SP);
            }
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 680;
          this.match(_CypherParser.T__15);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 682;
          this.match(_CypherParser.T__13);
          this.state = 684;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 683;
            this.match(_CypherParser.SP);
          }
          this.state = 686;
          this.match(_CypherParser.T__15);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pair() {
    let localctx = new PairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, _CypherParser.RULE_pair);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 689;
      this.stringLiteral();
      this.state = 691;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 690;
        this.match(_CypherParser.SP);
      }
      this.state = 693;
      this.match(_CypherParser.T__1);
      this.state = 695;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 694;
        this.match(_CypherParser.SP);
      }
      this.state = 697;
      this.value();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  array() {
    let localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, _CypherParser.RULE_array);
    var _la = 0;
    try {
      this.state = 727;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 699;
          this.match(_CypherParser.T__16);
          this.state = 701;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 700;
            this.match(_CypherParser.SP);
          }
          this.state = 703;
          this.value();
          this.state = 705;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 704;
            this.match(_CypherParser.SP);
          }
          this.state = 717;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === _CypherParser.T__14) {
            this.state = 707;
            this.match(_CypherParser.T__14);
            this.state = 709;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.SP) {
              this.state = 708;
              this.match(_CypherParser.SP);
            }
            this.state = 711;
            this.value();
            this.state = 713;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.SP) {
              this.state = 712;
              this.match(_CypherParser.SP);
            }
            this.state = 719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 720;
          this.match(_CypherParser.T__17);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 722;
          this.match(_CypherParser.T__16);
          this.state = 724;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 723;
            this.match(_CypherParser.SP);
          }
          this.state = 726;
          this.match(_CypherParser.T__17);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  value() {
    let localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, _CypherParser.RULE_value);
    try {
      this.state = 735;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.StringLiteral:
          this.enterOuterAlt(localctx, 1);
          this.state = 729;
          this.stringLiteral();
          break;
        case _CypherParser.HexInteger:
        case _CypherParser.DecimalInteger:
        case _CypherParser.OctalInteger:
        case _CypherParser.ExponentDecimalReal:
        case _CypherParser.RegularDecimalReal:
          this.enterOuterAlt(localctx, 2);
          this.state = 730;
          this.numberLiteral();
          break;
        case _CypherParser.T__13:
          this.enterOuterAlt(localctx, 3);
          this.state = 731;
          this.obj();
          break;
        case _CypherParser.T__16:
          this.enterOuterAlt(localctx, 4);
          this.state = 732;
          this.array();
          break;
        case _CypherParser.TRUE:
        case _CypherParser.FALSE:
          this.enterOuterAlt(localctx, 5);
          this.state = 733;
          this.booleanLiteral();
          break;
        case _CypherParser.NULL:
          this.enterOuterAlt(localctx, 6);
          this.state = 734;
          this.match(_CypherParser.NULL);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  keyValueLiteral() {
    let localctx = new KeyValueLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, _CypherParser.RULE_keyValueLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 737;
      this.variable();
      this.state = 738;
      this.match(_CypherParser.T__1);
      this.state = 739;
      this.match(_CypherParser.SP);
      this.state = 744;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
      switch (la_) {
        case 1:
          this.state = 740;
          this.match(_CypherParser.StringLiteral);
          break;
        case 2:
          this.state = 741;
          this.numberLiteral();
          break;
        case 3:
          this.state = 742;
          this.booleanLiteral();
          break;
        case 4:
          this.state = 743;
          this.symbolicName();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  commandPath() {
    let localctx = new CommandPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, _CypherParser.RULE_commandPath);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 751;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 746;
            this.match(_CypherParser.T__5);
            this.state = 749;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case _CypherParser.CYPHER:
              case _CypherParser.EXPLAIN:
              case _CypherParser.PROFILE:
              case _CypherParser.USING:
              case _CypherParser.PERIODIC:
              case _CypherParser.COMMIT:
              case _CypherParser.UNION:
              case _CypherParser.ALL:
              case _CypherParser.CREATE:
              case _CypherParser.DROP:
              case _CypherParser.INDEX:
              case _CypherParser.ON:
              case _CypherParser.CONSTRAINT:
              case _CypherParser.ASSERT:
              case _CypherParser.IS:
              case _CypherParser.UNIQUE:
              case _CypherParser.EXISTS:
              case _CypherParser.LOAD:
              case _CypherParser.CSV:
              case _CypherParser.WITH:
              case _CypherParser.HEADERS:
              case _CypherParser.FROM:
              case _CypherParser.AS:
              case _CypherParser.FIELDTERMINATOR:
              case _CypherParser.OPTIONAL:
              case _CypherParser.MATCH:
              case _CypherParser.UNWIND:
              case _CypherParser.MERGE:
              case _CypherParser.SET:
              case _CypherParser.DETACH:
              case _CypherParser.DELETE:
              case _CypherParser.REMOVE:
              case _CypherParser.FOREACH:
              case _CypherParser.IN:
              case _CypherParser.DISTINCT:
              case _CypherParser.RETURN:
              case _CypherParser.ORDER:
              case _CypherParser.BY:
              case _CypherParser.L_SKIP:
              case _CypherParser.LIMIT:
              case _CypherParser.ASCENDING:
              case _CypherParser.ASC:
              case _CypherParser.DESCENDING:
              case _CypherParser.DESC:
              case _CypherParser.JOIN:
              case _CypherParser.SCAN:
              case _CypherParser.START:
              case _CypherParser.NODE:
              case _CypherParser.RELATIONSHIP:
              case _CypherParser.REL:
              case _CypherParser.WHERE:
              case _CypherParser.SHORTESTPATH:
              case _CypherParser.ALLSHORTESTPATHS:
              case _CypherParser.OR:
              case _CypherParser.XOR:
              case _CypherParser.AND:
              case _CypherParser.NOT:
              case _CypherParser.STARTS:
              case _CypherParser.ENDS:
              case _CypherParser.CONTAINS:
              case _CypherParser.NULL:
              case _CypherParser.COUNT:
              case _CypherParser.FILTER:
              case _CypherParser.EXTRACT:
              case _CypherParser.ANY:
              case _CypherParser.NONE:
              case _CypherParser.SINGLE:
              case _CypherParser.TRUE:
              case _CypherParser.FALSE:
              case _CypherParser.REDUCE:
              case _CypherParser.CASE:
              case _CypherParser.ELSE:
              case _CypherParser.END:
              case _CypherParser.WHEN:
              case _CypherParser.THEN:
              case _CypherParser.CALL:
              case _CypherParser.YIELD:
              case _CypherParser.KEY:
              case _CypherParser.CATALOG:
              case _CypherParser.SHOW:
              case _CypherParser.DEFAULT:
              case _CypherParser.DBMS:
              case _CypherParser.DATABASE:
              case _CypherParser.DATABASES:
              case _CypherParser.GRAPH:
              case _CypherParser.GRAPHS:
              case _CypherParser.REPLACE:
              case _CypherParser.IF:
              case _CypherParser.STOP:
              case _CypherParser.ROLE:
              case _CypherParser.ROLES:
              case _CypherParser.USER:
              case _CypherParser.USERS:
              case _CypherParser.POPULATED:
              case _CypherParser.PASSWORD:
              case _CypherParser.CHANGE:
              case _CypherParser.REQUIRED:
              case _CypherParser.STATUS:
              case _CypherParser.ACTIVE:
              case _CypherParser.SUSPENDED:
              case _CypherParser.ALTER:
              case _CypherParser.CURRENT:
              case _CypherParser.TO:
              case _CypherParser.PRIVILEGES:
              case _CypherParser.GRANT:
              case _CypherParser.DENY:
              case _CypherParser.REVOKE:
              case _CypherParser.RELATIONSHIPS:
              case _CypherParser.NODES:
              case _CypherParser.ELEMENT:
              case _CypherParser.ELEMENTS:
              case _CypherParser.COPY:
              case _CypherParser.OF:
              case _CypherParser.TRAVERSE:
              case _CypherParser.READ:
              case _CypherParser.WRITE:
              case _CypherParser.ACCESS:
              case _CypherParser.INDEXES:
              case _CypherParser.MANAGEMENT:
              case _CypherParser.NEW:
              case _CypherParser.LABEL:
              case _CypherParser.LABELS:
              case _CypherParser.NAME:
              case _CypherParser.NAMES:
              case _CypherParser.TYPE:
              case _CypherParser.TYPES:
              case _CypherParser.PROPERTY:
              case _CypherParser.CONSTRAINTS:
              case _CypherParser.ASSIGN:
              case _CypherParser.BTREE:
              case _CypherParser.EXIST:
              case _CypherParser.FOR:
              case _CypherParser.OPTIONS:
              case _CypherParser.EXECUTE:
              case _CypherParser.DEFINED:
              case _CypherParser.FUNCTION:
              case _CypherParser.FUNCTIONS:
              case _CypherParser.BOOSTED:
              case _CypherParser.PROCEDURE:
              case _CypherParser.PROCEDURES:
              case _CypherParser.ADMIN:
              case _CypherParser.ADMINISTRATOR:
              case _CypherParser.BRIEF:
              case _CypherParser.VERBOSE:
              case _CypherParser.OUTPUT:
              case _CypherParser.HexLetter:
              case _CypherParser.UnescapedSymbolicName:
              case _CypherParser.EscapedSymbolicName:
                this.state = 747;
                this.symbolicName();
                break;
              case _CypherParser.HexInteger:
              case _CypherParser.DecimalInteger:
              case _CypherParser.OctalInteger:
              case _CypherParser.ExponentDecimalReal:
              case _CypherParser.RegularDecimalReal:
                this.state = 748;
                this.numberLiteral();
                break;
              default:
                throw new es_default.error.NoViableAltException(this);
            }
            break;
          default:
            throw new es_default.error.NoViableAltException(this);
        }
        this.state = 753;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);
      } while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 756;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__5) {
        this.state = 755;
        this.match(_CypherParser.T__5);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  subCommand() {
    let localctx = new SubCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, _CypherParser.RULE_subCommand);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 758;
      this.symbolicName();
      this.state = 763;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__2) {
        this.state = 759;
        this.match(_CypherParser.T__2);
        this.state = 760;
        this.symbolicName();
        this.state = 765;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherQuery() {
    let localctx = new CypherQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, _CypherParser.RULE_cypherQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 766;
      this.queryOptions();
      this.state = 767;
      this.statement();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  queryOptions() {
    let localctx = new QueryOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, _CypherParser.RULE_queryOptions);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 775;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54)) !== 0) {
        this.state = 769;
        this.anyCypherOption();
        this.state = 771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 770;
          this.match(_CypherParser.SP);
        }
        this.state = 777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  anyCypherOption() {
    let localctx = new AnyCypherOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, _CypherParser.RULE_anyCypherOption);
    try {
      this.state = 781;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.CYPHER:
          this.enterOuterAlt(localctx, 1);
          this.state = 778;
          this.cypherOption();
          break;
        case _CypherParser.EXPLAIN:
          this.enterOuterAlt(localctx, 2);
          this.state = 779;
          this.explain();
          break;
        case _CypherParser.PROFILE:
          this.enterOuterAlt(localctx, 3);
          this.state = 780;
          this.profile();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cypherOption() {
    let localctx = new CypherOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, _CypherParser.RULE_cypherOption);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 783;
      this.match(_CypherParser.CYPHER);
      this.state = 786;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
      if (la_ === 1) {
        this.state = 784;
        this.match(_CypherParser.SP);
        this.state = 785;
        this.versionNumber();
      }
      this.state = 792;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 788;
          this.match(_CypherParser.SP);
          this.state = 789;
          this.configurationOption();
        }
        this.state = 794;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  versionNumber() {
    let localctx = new VersionNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, _CypherParser.RULE_versionNumber);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 795;
      this.match(_CypherParser.RegularDecimalReal);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  explain() {
    let localctx = new ExplainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, _CypherParser.RULE_explain);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 797;
      this.match(_CypherParser.EXPLAIN);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  profile() {
    let localctx = new ProfileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, _CypherParser.RULE_profile);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 799;
      this.match(_CypherParser.PROFILE);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  configurationOption() {
    let localctx = new ConfigurationOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, _CypherParser.RULE_configurationOption);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 801;
      this.symbolicName();
      this.state = 803;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 802;
        this.match(_CypherParser.SP);
      }
      this.state = 805;
      this.match(_CypherParser.T__11);
      this.state = 807;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 806;
        this.match(_CypherParser.SP);
      }
      this.state = 809;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, _CypherParser.RULE_statement);
    var _la = 0;
    try {
      this.state = 818;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 811;
          this.command();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 812;
          this.query();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 815;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.CATALOG) {
            this.state = 813;
            this.match(_CypherParser.CATALOG);
            this.state = 814;
            this.match(_CypherParser.SP);
          }
          this.state = 817;
          this.systemCommand();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  query() {
    let localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, _CypherParser.RULE_query);
    try {
      this.state = 822;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.CREATE:
        case _CypherParser.LOAD:
        case _CypherParser.WITH:
        case _CypherParser.OPTIONAL:
        case _CypherParser.MATCH:
        case _CypherParser.UNWIND:
        case _CypherParser.MERGE:
        case _CypherParser.SET:
        case _CypherParser.DETACH:
        case _CypherParser.DELETE:
        case _CypherParser.REMOVE:
        case _CypherParser.FOREACH:
        case _CypherParser.RETURN:
        case _CypherParser.START:
        case _CypherParser.CALL:
          this.enterOuterAlt(localctx, 1);
          this.state = 820;
          this.regularQuery();
          break;
        case _CypherParser.USING:
          this.enterOuterAlt(localctx, 2);
          this.state = 821;
          this.bulkImportQuery();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  regularQuery() {
    let localctx = new RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, _CypherParser.RULE_regularQuery);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 824;
      this.singleQuery();
      this.state = 831;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 826;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 825;
            this.match(_CypherParser.SP);
          }
          this.state = 828;
          this.union();
        }
        this.state = 833;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  bulkImportQuery() {
    let localctx = new BulkImportQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, _CypherParser.RULE_bulkImportQuery);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 834;
      this.periodicCommitHint();
      this.state = 836;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 835;
        this.match(_CypherParser.SP);
      }
      this.state = 838;
      this.loadCSVQuery();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  singleQuery() {
    let localctx = new SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, _CypherParser.RULE_singleQuery);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 840;
      this.clause();
      this.state = 847;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 842;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 841;
            this.match(_CypherParser.SP);
          }
          this.state = 844;
          this.clause();
        }
        this.state = 849;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  periodicCommitHint() {
    let localctx = new PeriodicCommitHintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, _CypherParser.RULE_periodicCommitHint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 850;
      this.match(_CypherParser.USING);
      this.state = 851;
      this.match(_CypherParser.SP);
      this.state = 852;
      this.match(_CypherParser.PERIODIC);
      this.state = 853;
      this.match(_CypherParser.SP);
      this.state = 854;
      this.match(_CypherParser.COMMIT);
      this.state = 857;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
      if (la_ === 1) {
        this.state = 855;
        this.match(_CypherParser.SP);
        this.state = 856;
        this.integerLiteral();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  loadCSVQuery() {
    let localctx = new LoadCSVQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, _CypherParser.RULE_loadCSVQuery);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 859;
      this.loadCSVClause();
      this.state = 866;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 65, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 861;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 860;
            this.match(_CypherParser.SP);
          }
          this.state = 863;
          this.clause();
        }
        this.state = 868;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 65, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  union() {
    let localctx = new UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, _CypherParser.RULE_union);
    var _la = 0;
    try {
      this.state = 881;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 869;
          this.match(_CypherParser.UNION);
          this.state = 870;
          this.match(_CypherParser.SP);
          this.state = 871;
          this.match(_CypherParser.ALL);
          this.state = 873;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 872;
            this.match(_CypherParser.SP);
          }
          this.state = 875;
          this.singleQuery();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 876;
          this.match(_CypherParser.UNION);
          this.state = 878;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 877;
            this.match(_CypherParser.SP);
          }
          this.state = 880;
          this.singleQuery();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  clause() {
    let localctx = new ClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, _CypherParser.RULE_clause);
    try {
      this.state = 897;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 883;
          this.loadCSVClause();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 884;
          this.startClause();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 885;
          this.matchClause();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 886;
          this.unwindClause();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 887;
          this.mergeClause();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 888;
          this.createClause();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 889;
          this.createUniqueClause();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 890;
          this.setClause();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 891;
          this.deleteClause();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 892;
          this.removeClause();
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 893;
          this.foreachClause();
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 894;
          this.withClause();
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 895;
          this.returnClause();
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 896;
          this.call();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  command() {
    let localctx = new CommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, _CypherParser.RULE_command);
    try {
      this.state = 909;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 899;
          this.createIndex();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 900;
          this.dropIndex();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 901;
          this.createUniqueConstraint();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 902;
          this.dropUniqueConstraint();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 903;
          this.createNodeKeyConstraint();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 904;
          this.dropNodeKeyConstraint();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 905;
          this.createNodePropertyExistenceConstraint();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 906;
          this.dropNodePropertyExistenceConstraint();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 907;
          this.createRelationshipPropertyExistenceConstraint();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 908;
          this.dropRelationshipPropertyExistenceConstraint();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  systemCommand() {
    let localctx = new SystemCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, _CypherParser.RULE_systemCommand);
    try {
      this.state = 914;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 911;
          this.multidatabaseCommand();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 912;
          this.userCommand();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 913;
          this.privilegeCommand();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  multidatabaseCommand() {
    let localctx = new MultidatabaseCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, _CypherParser.RULE_multidatabaseCommand);
    try {
      this.state = 921;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.SHOW:
          this.enterOuterAlt(localctx, 1);
          this.state = 916;
          this.showDatabase();
          break;
        case _CypherParser.CREATE:
          this.enterOuterAlt(localctx, 2);
          this.state = 917;
          this.createDatabase();
          break;
        case _CypherParser.DROP:
          this.enterOuterAlt(localctx, 3);
          this.state = 918;
          this.dropDatabase();
          break;
        case _CypherParser.START:
          this.enterOuterAlt(localctx, 4);
          this.state = 919;
          this.startDatabase();
          break;
        case _CypherParser.STOP:
          this.enterOuterAlt(localctx, 5);
          this.state = 920;
          this.stopDatabase();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  userCommand() {
    let localctx = new UserCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, _CypherParser.RULE_userCommand);
    try {
      this.state = 930;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 923;
          this.showRoles();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 924;
          this.createRole();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 925;
          this.dropRole();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 926;
          this.showUsers();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 927;
          this.createUser();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 928;
          this.dropUser();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 929;
          this.alterUser();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  privilegeCommand() {
    let localctx = new PrivilegeCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, _CypherParser.RULE_privilegeCommand);
    try {
      this.state = 936;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.SHOW:
          this.enterOuterAlt(localctx, 1);
          this.state = 932;
          this.showPrivileges();
          break;
        case _CypherParser.GRANT:
          this.enterOuterAlt(localctx, 2);
          this.state = 933;
          this.grantPrivilege();
          break;
        case _CypherParser.DENY:
          this.enterOuterAlt(localctx, 3);
          this.state = 934;
          this.denyPrivilege();
          break;
        case _CypherParser.REVOKE:
          this.enterOuterAlt(localctx, 4);
          this.state = 935;
          this.revokePrivilege();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  showRoles() {
    let localctx = new ShowRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, _CypherParser.RULE_showRoles);
    var _la = 0;
    try {
      this.state = 964;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 938;
          this.match(_CypherParser.SHOW);
          this.state = 939;
          this.match(_CypherParser.SP);
          this.state = 942;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.ALL) {
            this.state = 940;
            this.match(_CypherParser.ALL);
            this.state = 941;
            this.match(_CypherParser.SP);
          }
          this.state = 944;
          this.match(_CypherParser.ROLES);
          this.state = 949;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
          if (la_ === 1) {
            this.state = 945;
            this.match(_CypherParser.SP);
            this.state = 946;
            this.match(_CypherParser.WITH);
            this.state = 947;
            this.match(_CypherParser.SP);
            this.state = 948;
            this.match(_CypherParser.USERS);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 951;
          this.match(_CypherParser.SHOW);
          this.state = 952;
          this.match(_CypherParser.SP);
          this.state = 955;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.POPULATED) {
            this.state = 953;
            this.match(_CypherParser.POPULATED);
            this.state = 954;
            this.match(_CypherParser.SP);
          }
          this.state = 957;
          this.match(_CypherParser.ROLES);
          this.state = 962;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
          if (la_ === 1) {
            this.state = 958;
            this.match(_CypherParser.SP);
            this.state = 959;
            this.match(_CypherParser.WITH);
            this.state = 960;
            this.match(_CypherParser.SP);
            this.state = 961;
            this.match(_CypherParser.USERS);
          }
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createRole() {
    let localctx = new CreateRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, _CypherParser.RULE_createRole);
    var _la = 0;
    try {
      this.state = 993;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 84, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 966;
          this.match(_CypherParser.CREATE);
          this.state = 967;
          this.match(_CypherParser.SP);
          this.state = 968;
          this.match(_CypherParser.ROLE);
          this.state = 969;
          this.match(_CypherParser.SP);
          this.state = 970;
          this.symbolicName();
          this.state = 973;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
          if (la_ === 1) {
            this.state = 971;
            this.match(_CypherParser.SP);
            this.state = 972;
            this.ifNotExists();
          }
          this.state = 977;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
          if (la_ === 1) {
            this.state = 975;
            this.match(_CypherParser.SP);
            this.state = 976;
            this.copyRole();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 979;
          this.match(_CypherParser.CREATE);
          this.state = 980;
          this.match(_CypherParser.SP);
          this.state = 984;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.OR) {
            this.state = 981;
            this.orReplace();
            this.state = 982;
            this.match(_CypherParser.SP);
          }
          this.state = 986;
          this.match(_CypherParser.ROLE);
          this.state = 987;
          this.match(_CypherParser.SP);
          this.state = 988;
          this.symbolicName();
          this.state = 991;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
          if (la_ === 1) {
            this.state = 989;
            this.match(_CypherParser.SP);
            this.state = 990;
            this.copyRole();
          }
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  copyRole() {
    let localctx = new CopyRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, _CypherParser.RULE_copyRole);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 995;
      this.match(_CypherParser.AS);
      this.state = 996;
      this.match(_CypherParser.SP);
      this.state = 997;
      this.match(_CypherParser.COPY);
      this.state = 998;
      this.match(_CypherParser.SP);
      this.state = 999;
      this.match(_CypherParser.OF);
      this.state = 1e3;
      this.match(_CypherParser.SP);
      this.state = 1001;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropRole() {
    let localctx = new DropRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, _CypherParser.RULE_dropRole);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1003;
      this.match(_CypherParser.DROP);
      this.state = 1004;
      this.match(_CypherParser.SP);
      this.state = 1005;
      this.match(_CypherParser.ROLE);
      this.state = 1006;
      this.match(_CypherParser.SP);
      this.state = 1007;
      this.symbolicName();
      this.state = 1012;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);
      if (la_ === 1) {
        this.state = 1008;
        this.match(_CypherParser.SP);
        this.state = 1009;
        this.match(_CypherParser.IF);
        this.state = 1010;
        this.match(_CypherParser.SP);
        this.state = 1011;
        this.match(_CypherParser.EXISTS);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  showUsers() {
    let localctx = new ShowUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, _CypherParser.RULE_showUsers);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1014;
      this.match(_CypherParser.SHOW);
      this.state = 1015;
      this.match(_CypherParser.SP);
      this.state = 1016;
      this.match(_CypherParser.USERS);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createUser() {
    let localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, _CypherParser.RULE_createUser);
    var _la = 0;
    try {
      this.state = 1049;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1018;
          this.match(_CypherParser.CREATE);
          this.state = 1019;
          this.match(_CypherParser.SP);
          this.state = 1020;
          this.match(_CypherParser.USER);
          this.state = 1021;
          this.match(_CypherParser.SP);
          this.state = 1022;
          this.user();
          this.state = 1023;
          this.match(_CypherParser.SP);
          this.state = 1026;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1024;
            this.match(_CypherParser.SP);
            this.state = 1025;
            this.ifNotExists();
          }
          this.state = 1028;
          this.setPassword();
          this.state = 1031;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
          if (la_ === 1) {
            this.state = 1029;
            this.match(_CypherParser.SP);
            this.state = 1030;
            this.setStatus();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1033;
          this.match(_CypherParser.CREATE);
          this.state = 1034;
          this.match(_CypherParser.SP);
          this.state = 1038;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.OR) {
            this.state = 1035;
            this.orReplace();
            this.state = 1036;
            this.match(_CypherParser.SP);
          }
          this.state = 1040;
          this.match(_CypherParser.USER);
          this.state = 1041;
          this.match(_CypherParser.SP);
          this.state = 1042;
          this.user();
          this.state = 1043;
          this.match(_CypherParser.SP);
          this.state = 1044;
          this.setPassword();
          this.state = 1047;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
          if (la_ === 1) {
            this.state = 1045;
            this.match(_CypherParser.SP);
            this.state = 1046;
            this.setStatus();
          }
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropUser() {
    let localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, _CypherParser.RULE_dropUser);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1051;
      this.match(_CypherParser.DROP);
      this.state = 1052;
      this.match(_CypherParser.SP);
      this.state = 1053;
      this.match(_CypherParser.USER);
      this.state = 1054;
      this.match(_CypherParser.SP);
      this.state = 1055;
      this.user();
      this.state = 1058;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
      if (la_ === 1) {
        this.state = 1056;
        this.match(_CypherParser.SP);
        this.state = 1057;
        this.ifExists();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  alterUser() {
    let localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, _CypherParser.RULE_alterUser);
    try {
      this.state = 1101;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1060;
          this.match(_CypherParser.ALTER);
          this.state = 1061;
          this.match(_CypherParser.SP);
          this.state = 1062;
          this.match(_CypherParser.CURRENT);
          this.state = 1063;
          this.match(_CypherParser.SP);
          this.state = 1064;
          this.match(_CypherParser.USER);
          this.state = 1065;
          this.match(_CypherParser.SP);
          this.state = 1066;
          this.match(_CypherParser.SET);
          this.state = 1067;
          this.match(_CypherParser.SP);
          this.state = 1068;
          this.match(_CypherParser.PASSWORD);
          this.state = 1069;
          this.match(_CypherParser.SP);
          this.state = 1070;
          this.match(_CypherParser.FROM);
          this.state = 1071;
          this.match(_CypherParser.SP);
          this.state = 1074;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case _CypherParser.CYPHER:
            case _CypherParser.EXPLAIN:
            case _CypherParser.PROFILE:
            case _CypherParser.USING:
            case _CypherParser.PERIODIC:
            case _CypherParser.COMMIT:
            case _CypherParser.UNION:
            case _CypherParser.ALL:
            case _CypherParser.CREATE:
            case _CypherParser.DROP:
            case _CypherParser.INDEX:
            case _CypherParser.ON:
            case _CypherParser.CONSTRAINT:
            case _CypherParser.ASSERT:
            case _CypherParser.IS:
            case _CypherParser.UNIQUE:
            case _CypherParser.EXISTS:
            case _CypherParser.LOAD:
            case _CypherParser.CSV:
            case _CypherParser.WITH:
            case _CypherParser.HEADERS:
            case _CypherParser.FROM:
            case _CypherParser.AS:
            case _CypherParser.FIELDTERMINATOR:
            case _CypherParser.OPTIONAL:
            case _CypherParser.MATCH:
            case _CypherParser.UNWIND:
            case _CypherParser.MERGE:
            case _CypherParser.SET:
            case _CypherParser.DETACH:
            case _CypherParser.DELETE:
            case _CypherParser.REMOVE:
            case _CypherParser.FOREACH:
            case _CypherParser.IN:
            case _CypherParser.DISTINCT:
            case _CypherParser.RETURN:
            case _CypherParser.ORDER:
            case _CypherParser.BY:
            case _CypherParser.L_SKIP:
            case _CypherParser.LIMIT:
            case _CypherParser.ASCENDING:
            case _CypherParser.ASC:
            case _CypherParser.DESCENDING:
            case _CypherParser.DESC:
            case _CypherParser.JOIN:
            case _CypherParser.SCAN:
            case _CypherParser.START:
            case _CypherParser.NODE:
            case _CypherParser.RELATIONSHIP:
            case _CypherParser.REL:
            case _CypherParser.WHERE:
            case _CypherParser.SHORTESTPATH:
            case _CypherParser.ALLSHORTESTPATHS:
            case _CypherParser.OR:
            case _CypherParser.XOR:
            case _CypherParser.AND:
            case _CypherParser.NOT:
            case _CypherParser.STARTS:
            case _CypherParser.ENDS:
            case _CypherParser.CONTAINS:
            case _CypherParser.NULL:
            case _CypherParser.COUNT:
            case _CypherParser.FILTER:
            case _CypherParser.EXTRACT:
            case _CypherParser.ANY:
            case _CypherParser.NONE:
            case _CypherParser.SINGLE:
            case _CypherParser.TRUE:
            case _CypherParser.FALSE:
            case _CypherParser.REDUCE:
            case _CypherParser.CASE:
            case _CypherParser.ELSE:
            case _CypherParser.END:
            case _CypherParser.WHEN:
            case _CypherParser.THEN:
            case _CypherParser.CALL:
            case _CypherParser.YIELD:
            case _CypherParser.KEY:
            case _CypherParser.CATALOG:
            case _CypherParser.SHOW:
            case _CypherParser.DEFAULT:
            case _CypherParser.DBMS:
            case _CypherParser.DATABASE:
            case _CypherParser.DATABASES:
            case _CypherParser.GRAPH:
            case _CypherParser.GRAPHS:
            case _CypherParser.REPLACE:
            case _CypherParser.IF:
            case _CypherParser.STOP:
            case _CypherParser.ROLE:
            case _CypherParser.ROLES:
            case _CypherParser.USER:
            case _CypherParser.USERS:
            case _CypherParser.POPULATED:
            case _CypherParser.PASSWORD:
            case _CypherParser.CHANGE:
            case _CypherParser.REQUIRED:
            case _CypherParser.STATUS:
            case _CypherParser.ACTIVE:
            case _CypherParser.SUSPENDED:
            case _CypherParser.ALTER:
            case _CypherParser.CURRENT:
            case _CypherParser.TO:
            case _CypherParser.PRIVILEGES:
            case _CypherParser.GRANT:
            case _CypherParser.DENY:
            case _CypherParser.REVOKE:
            case _CypherParser.RELATIONSHIPS:
            case _CypherParser.NODES:
            case _CypherParser.ELEMENT:
            case _CypherParser.ELEMENTS:
            case _CypherParser.COPY:
            case _CypherParser.OF:
            case _CypherParser.TRAVERSE:
            case _CypherParser.READ:
            case _CypherParser.WRITE:
            case _CypherParser.ACCESS:
            case _CypherParser.INDEXES:
            case _CypherParser.MANAGEMENT:
            case _CypherParser.NEW:
            case _CypherParser.LABEL:
            case _CypherParser.LABELS:
            case _CypherParser.NAME:
            case _CypherParser.NAMES:
            case _CypherParser.TYPE:
            case _CypherParser.TYPES:
            case _CypherParser.PROPERTY:
            case _CypherParser.CONSTRAINTS:
            case _CypherParser.ASSIGN:
            case _CypherParser.BTREE:
            case _CypherParser.EXIST:
            case _CypherParser.FOR:
            case _CypherParser.OPTIONS:
            case _CypherParser.EXECUTE:
            case _CypherParser.DEFINED:
            case _CypherParser.FUNCTION:
            case _CypherParser.FUNCTIONS:
            case _CypherParser.BOOSTED:
            case _CypherParser.PROCEDURE:
            case _CypherParser.PROCEDURES:
            case _CypherParser.ADMIN:
            case _CypherParser.ADMINISTRATOR:
            case _CypherParser.BRIEF:
            case _CypherParser.VERBOSE:
            case _CypherParser.OUTPUT:
            case _CypherParser.HexLetter:
            case _CypherParser.UnescapedSymbolicName:
            case _CypherParser.EscapedSymbolicName:
              this.state = 1072;
              this.password();
              break;
            case _CypherParser.T__13:
            case _CypherParser.T__33:
              this.state = 1073;
              this.parameter();
              break;
            default:
              throw new es_default.error.NoViableAltException(this);
          }
          this.state = 1076;
          this.match(_CypherParser.TO);
          this.state = 1077;
          this.match(_CypherParser.SP);
          this.state = 1080;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case _CypherParser.CYPHER:
            case _CypherParser.EXPLAIN:
            case _CypherParser.PROFILE:
            case _CypherParser.USING:
            case _CypherParser.PERIODIC:
            case _CypherParser.COMMIT:
            case _CypherParser.UNION:
            case _CypherParser.ALL:
            case _CypherParser.CREATE:
            case _CypherParser.DROP:
            case _CypherParser.INDEX:
            case _CypherParser.ON:
            case _CypherParser.CONSTRAINT:
            case _CypherParser.ASSERT:
            case _CypherParser.IS:
            case _CypherParser.UNIQUE:
            case _CypherParser.EXISTS:
            case _CypherParser.LOAD:
            case _CypherParser.CSV:
            case _CypherParser.WITH:
            case _CypherParser.HEADERS:
            case _CypherParser.FROM:
            case _CypherParser.AS:
            case _CypherParser.FIELDTERMINATOR:
            case _CypherParser.OPTIONAL:
            case _CypherParser.MATCH:
            case _CypherParser.UNWIND:
            case _CypherParser.MERGE:
            case _CypherParser.SET:
            case _CypherParser.DETACH:
            case _CypherParser.DELETE:
            case _CypherParser.REMOVE:
            case _CypherParser.FOREACH:
            case _CypherParser.IN:
            case _CypherParser.DISTINCT:
            case _CypherParser.RETURN:
            case _CypherParser.ORDER:
            case _CypherParser.BY:
            case _CypherParser.L_SKIP:
            case _CypherParser.LIMIT:
            case _CypherParser.ASCENDING:
            case _CypherParser.ASC:
            case _CypherParser.DESCENDING:
            case _CypherParser.DESC:
            case _CypherParser.JOIN:
            case _CypherParser.SCAN:
            case _CypherParser.START:
            case _CypherParser.NODE:
            case _CypherParser.RELATIONSHIP:
            case _CypherParser.REL:
            case _CypherParser.WHERE:
            case _CypherParser.SHORTESTPATH:
            case _CypherParser.ALLSHORTESTPATHS:
            case _CypherParser.OR:
            case _CypherParser.XOR:
            case _CypherParser.AND:
            case _CypherParser.NOT:
            case _CypherParser.STARTS:
            case _CypherParser.ENDS:
            case _CypherParser.CONTAINS:
            case _CypherParser.NULL:
            case _CypherParser.COUNT:
            case _CypherParser.FILTER:
            case _CypherParser.EXTRACT:
            case _CypherParser.ANY:
            case _CypherParser.NONE:
            case _CypherParser.SINGLE:
            case _CypherParser.TRUE:
            case _CypherParser.FALSE:
            case _CypherParser.REDUCE:
            case _CypherParser.CASE:
            case _CypherParser.ELSE:
            case _CypherParser.END:
            case _CypherParser.WHEN:
            case _CypherParser.THEN:
            case _CypherParser.CALL:
            case _CypherParser.YIELD:
            case _CypherParser.KEY:
            case _CypherParser.CATALOG:
            case _CypherParser.SHOW:
            case _CypherParser.DEFAULT:
            case _CypherParser.DBMS:
            case _CypherParser.DATABASE:
            case _CypherParser.DATABASES:
            case _CypherParser.GRAPH:
            case _CypherParser.GRAPHS:
            case _CypherParser.REPLACE:
            case _CypherParser.IF:
            case _CypherParser.STOP:
            case _CypherParser.ROLE:
            case _CypherParser.ROLES:
            case _CypherParser.USER:
            case _CypherParser.USERS:
            case _CypherParser.POPULATED:
            case _CypherParser.PASSWORD:
            case _CypherParser.CHANGE:
            case _CypherParser.REQUIRED:
            case _CypherParser.STATUS:
            case _CypherParser.ACTIVE:
            case _CypherParser.SUSPENDED:
            case _CypherParser.ALTER:
            case _CypherParser.CURRENT:
            case _CypherParser.TO:
            case _CypherParser.PRIVILEGES:
            case _CypherParser.GRANT:
            case _CypherParser.DENY:
            case _CypherParser.REVOKE:
            case _CypherParser.RELATIONSHIPS:
            case _CypherParser.NODES:
            case _CypherParser.ELEMENT:
            case _CypherParser.ELEMENTS:
            case _CypherParser.COPY:
            case _CypherParser.OF:
            case _CypherParser.TRAVERSE:
            case _CypherParser.READ:
            case _CypherParser.WRITE:
            case _CypherParser.ACCESS:
            case _CypherParser.INDEXES:
            case _CypherParser.MANAGEMENT:
            case _CypherParser.NEW:
            case _CypherParser.LABEL:
            case _CypherParser.LABELS:
            case _CypherParser.NAME:
            case _CypherParser.NAMES:
            case _CypherParser.TYPE:
            case _CypherParser.TYPES:
            case _CypherParser.PROPERTY:
            case _CypherParser.CONSTRAINTS:
            case _CypherParser.ASSIGN:
            case _CypherParser.BTREE:
            case _CypherParser.EXIST:
            case _CypherParser.FOR:
            case _CypherParser.OPTIONS:
            case _CypherParser.EXECUTE:
            case _CypherParser.DEFINED:
            case _CypherParser.FUNCTION:
            case _CypherParser.FUNCTIONS:
            case _CypherParser.BOOSTED:
            case _CypherParser.PROCEDURE:
            case _CypherParser.PROCEDURES:
            case _CypherParser.ADMIN:
            case _CypherParser.ADMINISTRATOR:
            case _CypherParser.BRIEF:
            case _CypherParser.VERBOSE:
            case _CypherParser.OUTPUT:
            case _CypherParser.HexLetter:
            case _CypherParser.UnescapedSymbolicName:
            case _CypherParser.EscapedSymbolicName:
              this.state = 1078;
              this.password();
              break;
            case _CypherParser.T__13:
            case _CypherParser.T__33:
              this.state = 1079;
              this.parameter();
              break;
            default:
              throw new es_default.error.NoViableAltException(this);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1082;
          this.match(_CypherParser.ALTER);
          this.state = 1083;
          this.match(_CypherParser.SP);
          this.state = 1084;
          this.match(_CypherParser.USER);
          this.state = 1085;
          this.match(_CypherParser.SP);
          this.state = 1086;
          this.user();
          this.state = 1087;
          this.match(_CypherParser.SP);
          this.state = 1088;
          this.setPassword();
          this.state = 1091;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);
          if (la_ === 1) {
            this.state = 1089;
            this.match(_CypherParser.SP);
            this.state = 1090;
            this.setStatus();
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1093;
          this.match(_CypherParser.ALTER);
          this.state = 1094;
          this.match(_CypherParser.SP);
          this.state = 1095;
          this.match(_CypherParser.USER);
          this.state = 1096;
          this.match(_CypherParser.SP);
          this.state = 1097;
          this.user();
          this.state = 1098;
          this.match(_CypherParser.SP);
          this.state = 1099;
          this.setStatus();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  showPrivileges() {
    let localctx = new ShowPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, _CypherParser.RULE_showPrivileges);
    var _la = 0;
    try {
      this.state = 1130;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1103;
          this.match(_CypherParser.SHOW);
          this.state = 1104;
          this.match(_CypherParser.SP);
          this.state = 1107;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.ALL) {
            this.state = 1105;
            this.match(_CypherParser.ALL);
            this.state = 1106;
            this.match(_CypherParser.SP);
          }
          this.state = 1109;
          this.match(_CypherParser.PRIVILEGES);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1110;
          this.match(_CypherParser.SHOW);
          this.state = 1111;
          this.match(_CypherParser.SP);
          this.state = 1117;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.ROLE) {
            this.state = 1112;
            this.match(_CypherParser.ROLE);
            this.state = 1113;
            this.match(_CypherParser.SP);
            this.state = 1114;
            this.symbolicName();
            this.state = 1115;
            this.match(_CypherParser.SP);
          }
          this.state = 1119;
          this.match(_CypherParser.PRIVILEGES);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1120;
          this.match(_CypherParser.SHOW);
          this.state = 1121;
          this.match(_CypherParser.SP);
          this.state = 1127;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.USER) {
            this.state = 1122;
            this.match(_CypherParser.USER);
            this.state = 1123;
            this.match(_CypherParser.SP);
            this.state = 1124;
            this.user();
            this.state = 1125;
            this.match(_CypherParser.SP);
          }
          this.state = 1129;
          this.match(_CypherParser.PRIVILEGES);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  grantPrivilege() {
    let localctx = new GrantPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, _CypherParser.RULE_grantPrivilege);
    try {
      this.state = 1177;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1132;
          this.match(_CypherParser.GRANT);
          this.state = 1133;
          this.match(_CypherParser.SP);
          this.state = 1134;
          this.match(_CypherParser.ROLE);
          this.state = 1135;
          this.match(_CypherParser.SP);
          this.state = 1136;
          this.roles();
          this.state = 1137;
          this.match(_CypherParser.SP);
          this.state = 1138;
          this.match(_CypherParser.TO);
          this.state = 1139;
          this.match(_CypherParser.SP);
          this.state = 1140;
          this.user();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1142;
          this.match(_CypherParser.GRANT);
          this.state = 1143;
          this.match(_CypherParser.SP);
          this.state = 1144;
          this.datasbasePrivilege();
          this.state = 1145;
          this.match(_CypherParser.SP);
          this.state = 1146;
          this.match(_CypherParser.ON);
          this.state = 1147;
          this.match(_CypherParser.SP);
          this.state = 1148;
          this.databaseScope();
          this.state = 1149;
          this.match(_CypherParser.SP);
          this.state = 1150;
          this.match(_CypherParser.TO);
          this.state = 1151;
          this.roles();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1153;
          this.match(_CypherParser.GRANT);
          this.state = 1154;
          this.match(_CypherParser.SP);
          this.state = 1155;
          this.grantableGraphPrivileges();
          this.state = 1156;
          this.match(_CypherParser.SP);
          this.state = 1157;
          this.match(_CypherParser.ON);
          this.state = 1158;
          this.match(_CypherParser.SP);
          this.state = 1159;
          this.graphScope();
          this.state = 1160;
          this.match(_CypherParser.SP);
          this.state = 1161;
          this.elementScope();
          this.state = 1162;
          this.match(_CypherParser.SP);
          this.state = 1163;
          this.match(_CypherParser.TO);
          this.state = 1164;
          this.roles();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1166;
          this.match(_CypherParser.GRANT);
          this.state = 1167;
          this.match(_CypherParser.SP);
          this.state = 1168;
          this.dbmsPrivilege();
          this.state = 1169;
          this.match(_CypherParser.SP);
          this.state = 1170;
          this.match(_CypherParser.ON);
          this.state = 1171;
          this.match(_CypherParser.SP);
          this.state = 1172;
          this.match(_CypherParser.DBMS);
          this.state = 1173;
          this.match(_CypherParser.SP);
          this.state = 1174;
          this.match(_CypherParser.TO);
          this.state = 1175;
          this.roles();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  denyPrivilege() {
    let localctx = new DenyPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, _CypherParser.RULE_denyPrivilege);
    try {
      this.state = 1224;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1179;
          this.match(_CypherParser.DENY);
          this.state = 1180;
          this.match(_CypherParser.SP);
          this.state = 1181;
          this.match(_CypherParser.ROLE);
          this.state = 1182;
          this.match(_CypherParser.SP);
          this.state = 1183;
          this.roles();
          this.state = 1184;
          this.match(_CypherParser.SP);
          this.state = 1185;
          this.match(_CypherParser.TO);
          this.state = 1186;
          this.match(_CypherParser.SP);
          this.state = 1187;
          this.user();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1189;
          this.match(_CypherParser.DENY);
          this.state = 1190;
          this.match(_CypherParser.SP);
          this.state = 1191;
          this.datasbasePrivilege();
          this.state = 1192;
          this.match(_CypherParser.SP);
          this.state = 1193;
          this.match(_CypherParser.ON);
          this.state = 1194;
          this.match(_CypherParser.SP);
          this.state = 1195;
          this.databaseScope();
          this.state = 1196;
          this.match(_CypherParser.SP);
          this.state = 1197;
          this.match(_CypherParser.TO);
          this.state = 1198;
          this.roles();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1200;
          this.match(_CypherParser.DENY);
          this.state = 1201;
          this.match(_CypherParser.SP);
          this.state = 1202;
          this.grantableGraphPrivileges();
          this.state = 1203;
          this.match(_CypherParser.SP);
          this.state = 1204;
          this.match(_CypherParser.ON);
          this.state = 1205;
          this.match(_CypherParser.SP);
          this.state = 1206;
          this.graphScope();
          this.state = 1207;
          this.match(_CypherParser.SP);
          this.state = 1208;
          this.elementScope();
          this.state = 1209;
          this.match(_CypherParser.SP);
          this.state = 1210;
          this.match(_CypherParser.TO);
          this.state = 1211;
          this.roles();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1213;
          this.match(_CypherParser.DENY);
          this.state = 1214;
          this.match(_CypherParser.SP);
          this.state = 1215;
          this.dbmsPrivilege();
          this.state = 1216;
          this.match(_CypherParser.SP);
          this.state = 1217;
          this.match(_CypherParser.ON);
          this.state = 1218;
          this.match(_CypherParser.SP);
          this.state = 1219;
          this.match(_CypherParser.DBMS);
          this.state = 1220;
          this.match(_CypherParser.SP);
          this.state = 1221;
          this.match(_CypherParser.TO);
          this.state = 1222;
          this.roles();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  revokePrivilege() {
    let localctx = new RevokePrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, _CypherParser.RULE_revokePrivilege);
    var _la = 0;
    try {
      this.state = 1247;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1226;
          this.match(_CypherParser.REVOKE);
          this.state = 1227;
          this.match(_CypherParser.SP);
          this.state = 1228;
          this.match(_CypherParser.ROLE);
          this.state = 1229;
          this.match(_CypherParser.SP);
          this.state = 1230;
          this.roles();
          this.state = 1231;
          this.match(_CypherParser.SP);
          this.state = 1232;
          this.match(_CypherParser.FROM);
          this.state = 1233;
          this.match(_CypherParser.SP);
          this.state = 1234;
          this.user();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1236;
          this.match(_CypherParser.REVOKE);
          this.state = 1239;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1237;
            this.match(_CypherParser.SP);
            this.state = 1238;
            _la = this._input.LA(1);
            if (!(_la === _CypherParser.GRANT || _la === _CypherParser.DENY)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          this.state = 1241;
          this.revokePart();
          this.state = 1242;
          this.match(_CypherParser.SP);
          this.state = 1243;
          this.match(_CypherParser.FROM);
          this.state = 1244;
          this.match(_CypherParser.SP);
          this.state = 1245;
          this.roles();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  revokePart() {
    let localctx = new RevokePartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, _CypherParser.RULE_revokePart);
    try {
      this.state = 1267;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1249;
          this.datasbasePrivilege();
          this.state = 1250;
          this.match(_CypherParser.SP);
          this.state = 1251;
          this.match(_CypherParser.ON);
          this.state = 1252;
          this.match(_CypherParser.SP);
          this.state = 1253;
          this.databaseScope();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1255;
          this.revokeableGraphPrivileges();
          this.state = 1256;
          this.match(_CypherParser.SP);
          this.state = 1257;
          this.match(_CypherParser.ON);
          this.state = 1258;
          this.match(_CypherParser.SP);
          this.state = 1259;
          this.graphScope();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1261;
          this.dbmsPrivilege();
          this.state = 1262;
          this.match(_CypherParser.SP);
          this.state = 1263;
          this.match(_CypherParser.ON);
          this.state = 1264;
          this.match(_CypherParser.SP);
          this.state = 1265;
          this.match(_CypherParser.DBMS);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  databaseScope() {
    let localctx = new DatabaseScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, _CypherParser.RULE_databaseScope);
    var _la = 0;
    try {
      this.state = 1288;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1269;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.DATABASE || _la === _CypherParser.DATABASES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1270;
          this.match(_CypherParser.SP);
          this.state = 1271;
          this.match(_CypherParser.T__18);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1272;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.DATABASE || _la === _CypherParser.DATABASES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1273;
          this.match(_CypherParser.SP);
          this.state = 1274;
          this.symbolicName();
          this.state = 1285;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1276;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 1275;
                this.match(_CypherParser.SP);
              }
              this.state = 1278;
              this.match(_CypherParser.T__14);
              this.state = 1280;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 1279;
                this.match(_CypherParser.SP);
              }
              this.state = 1282;
              this.symbolicName();
            }
            this.state = 1287;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
          }
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  graphScope() {
    let localctx = new GraphScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, _CypherParser.RULE_graphScope);
    var _la = 0;
    try {
      this.state = 1309;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 112, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1290;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.GRAPH || _la === _CypherParser.GRAPHS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1291;
          this.match(_CypherParser.SP);
          this.state = 1292;
          this.match(_CypherParser.T__18);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1293;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.GRAPH || _la === _CypherParser.GRAPHS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1294;
          this.match(_CypherParser.SP);
          this.state = 1295;
          this.symbolicName();
          this.state = 1306;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 111, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1297;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 1296;
                this.match(_CypherParser.SP);
              }
              this.state = 1299;
              this.match(_CypherParser.T__14);
              this.state = 1301;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 1300;
                this.match(_CypherParser.SP);
              }
              this.state = 1303;
              this.symbolicName();
            }
            this.state = 1308;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 111, this._ctx);
          }
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  roles() {
    let localctx = new RolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, _CypherParser.RULE_roles);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1311;
      this.symbolicName();
      this.state = 1322;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 115, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1313;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1312;
            this.match(_CypherParser.SP);
          }
          this.state = 1315;
          this.match(_CypherParser.T__14);
          this.state = 1317;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1316;
            this.match(_CypherParser.SP);
          }
          this.state = 1319;
          this.symbolicName();
        }
        this.state = 1324;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 115, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  grantableGraphPrivileges() {
    let localctx = new GrantableGraphPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, _CypherParser.RULE_grantableGraphPrivileges);
    var _la = 0;
    try {
      this.state = 1335;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.TRAVERSE:
        case _CypherParser.READ:
        case _CypherParser.WRITE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1325;
          this.revokeableGraphPrivileges();
          break;
        case _CypherParser.MATCH:
          this.enterOuterAlt(localctx, 2);
          this.state = 1326;
          this.match(_CypherParser.MATCH);
          this.state = 1327;
          this.match(_CypherParser.SP);
          this.state = 1328;
          this.match(_CypherParser.T__13);
          this.state = 1330;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1329;
            this.match(_CypherParser.SP);
          }
          this.state = 1332;
          this.propertiesList();
          this.state = 1333;
          this.match(_CypherParser.T__15);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  revokeableGraphPrivileges() {
    let localctx = new RevokeableGraphPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, _CypherParser.RULE_revokeableGraphPrivileges);
    var _la = 0;
    try {
      this.state = 1348;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.TRAVERSE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1337;
          this.match(_CypherParser.TRAVERSE);
          break;
        case _CypherParser.READ:
          this.enterOuterAlt(localctx, 2);
          this.state = 1338;
          this.match(_CypherParser.READ);
          this.state = 1339;
          this.match(_CypherParser.SP);
          this.state = 1340;
          this.match(_CypherParser.T__13);
          this.state = 1342;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1341;
            this.match(_CypherParser.SP);
          }
          this.state = 1344;
          this.propertiesList();
          this.state = 1345;
          this.match(_CypherParser.T__15);
          break;
        case _CypherParser.WRITE:
          this.enterOuterAlt(localctx, 3);
          this.state = 1347;
          this.match(_CypherParser.WRITE);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  datasbasePrivilege() {
    let localctx = new DatasbasePrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, _CypherParser.RULE_datasbasePrivilege);
    var _la = 0;
    try {
      this.state = 1412;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1350;
          this.match(_CypherParser.ACCESS);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1351;
          this.match(_CypherParser.START);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1352;
          this.match(_CypherParser.STOP);
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1353;
          this.match(_CypherParser.CREATE);
          this.state = 1354;
          this.match(_CypherParser.SP);
          this.state = 1355;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.INDEX || _la === _CypherParser.INDEXES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1356;
          this.match(_CypherParser.DROP);
          this.state = 1357;
          this.match(_CypherParser.SP);
          this.state = 1358;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.INDEX || _la === _CypherParser.INDEXES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1359;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.INDEX || _la === _CypherParser.INDEXES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1360;
          this.match(_CypherParser.SP);
          this.state = 1361;
          this.match(_CypherParser.MANAGEMENT);
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1362;
          this.match(_CypherParser.CREATE);
          this.state = 1363;
          this.match(_CypherParser.SP);
          this.state = 1364;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.CONSTRAINT || _la === _CypherParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1365;
          this.match(_CypherParser.DROP);
          this.state = 1366;
          this.match(_CypherParser.SP);
          this.state = 1367;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.CONSTRAINT || _la === _CypherParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1368;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.CONSTRAINT || _la === _CypherParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1369;
          this.match(_CypherParser.SP);
          this.state = 1370;
          this.match(_CypherParser.MANAGEMENT);
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1371;
          this.match(_CypherParser.CREATE);
          this.state = 1372;
          this.match(_CypherParser.SP);
          this.state = 1373;
          this.match(_CypherParser.NEW);
          this.state = 1374;
          this.match(_CypherParser.SP);
          this.state = 1377;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.NODE) {
            this.state = 1375;
            this.match(_CypherParser.NODE);
            this.state = 1376;
            this.match(_CypherParser.SP);
          }
          this.state = 1379;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.LABEL || _la === _CypherParser.LABELS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1380;
          this.match(_CypherParser.CREATE);
          this.state = 1381;
          this.match(_CypherParser.SP);
          this.state = 1382;
          this.match(_CypherParser.NEW);
          this.state = 1383;
          this.match(_CypherParser.SP);
          this.state = 1386;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.RELATIONSHIP) {
            this.state = 1384;
            this.match(_CypherParser.RELATIONSHIP);
            this.state = 1385;
            this.match(_CypherParser.SP);
          }
          this.state = 1388;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.TYPE || _la === _CypherParser.TYPES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1389;
          this.match(_CypherParser.CREATE);
          this.state = 1390;
          this.match(_CypherParser.SP);
          this.state = 1391;
          this.match(_CypherParser.NEW);
          this.state = 1392;
          this.match(_CypherParser.SP);
          this.state = 1395;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.PROPERTY) {
            this.state = 1393;
            this.match(_CypherParser.PROPERTY);
            this.state = 1394;
            this.match(_CypherParser.SP);
          }
          this.state = 1397;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.NAME || _la === _CypherParser.NAMES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1398;
          this.match(_CypherParser.NAME);
          this.state = 1401;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
          if (la_ === 1) {
            this.state = 1399;
            this.match(_CypherParser.SP);
            this.state = 1400;
            this.match(_CypherParser.MANAGEMENT);
          }
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1403;
          this.match(_CypherParser.ALL);
          this.state = 1410;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 125, this._ctx);
          if (la_ === 1) {
            this.state = 1404;
            this.match(_CypherParser.SP);
            this.state = 1407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.DATABASE) {
              this.state = 1405;
              this.match(_CypherParser.DATABASE);
              this.state = 1406;
              this.match(_CypherParser.SP);
            }
            this.state = 1409;
            this.match(_CypherParser.PRIVILEGES);
          }
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dbmsPrivilege() {
    let localctx = new DbmsPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, _CypherParser.RULE_dbmsPrivilege);
    try {
      this.state = 1432;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.ROLE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1414;
          this.match(_CypherParser.ROLE);
          this.state = 1415;
          this.match(_CypherParser.SP);
          this.state = 1416;
          this.match(_CypherParser.MANAGEMENT);
          break;
        case _CypherParser.CREATE:
          this.enterOuterAlt(localctx, 2);
          this.state = 1417;
          this.match(_CypherParser.CREATE);
          this.state = 1418;
          this.match(_CypherParser.SP);
          this.state = 1419;
          this.match(_CypherParser.ROLE);
          break;
        case _CypherParser.DROP:
          this.enterOuterAlt(localctx, 3);
          this.state = 1420;
          this.match(_CypherParser.DROP);
          this.state = 1421;
          this.match(_CypherParser.SP);
          this.state = 1422;
          this.match(_CypherParser.ROLE);
          break;
        case _CypherParser.ASSIGN:
          this.enterOuterAlt(localctx, 4);
          this.state = 1423;
          this.match(_CypherParser.ASSIGN);
          this.state = 1424;
          this.match(_CypherParser.SP);
          this.state = 1425;
          this.match(_CypherParser.ROLE);
          break;
        case _CypherParser.REMOVE:
          this.enterOuterAlt(localctx, 5);
          this.state = 1426;
          this.match(_CypherParser.REMOVE);
          this.state = 1427;
          this.match(_CypherParser.SP);
          this.state = 1428;
          this.match(_CypherParser.ROLE);
          break;
        case _CypherParser.SHOW:
          this.enterOuterAlt(localctx, 6);
          this.state = 1429;
          this.match(_CypherParser.SHOW);
          this.state = 1430;
          this.match(_CypherParser.SP);
          this.state = 1431;
          this.match(_CypherParser.ROLE);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementScope() {
    let localctx = new ElementScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, _CypherParser.RULE_elementScope);
    var _la = 0;
    try {
      this.state = 1455;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.RELATIONSHIP:
        case _CypherParser.RELATIONSHIPS:
          this.enterOuterAlt(localctx, 1);
          this.state = 1434;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.RELATIONSHIP || _la === _CypherParser.RELATIONSHIPS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1435;
          this.match(_CypherParser.SP);
          this.state = 1436;
          this.propertiesList();
          this.state = 1439;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 128, this._ctx);
          if (la_ === 1) {
            this.state = 1437;
            this.match(_CypherParser.SP);
            this.state = 1438;
            this.propertyScope();
          }
          break;
        case _CypherParser.NODE:
        case _CypherParser.NODES:
          this.enterOuterAlt(localctx, 2);
          this.state = 1441;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.NODE || _la === _CypherParser.NODES)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1442;
          this.match(_CypherParser.SP);
          this.state = 1443;
          this.propertiesList();
          this.state = 1446;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
          if (la_ === 1) {
            this.state = 1444;
            this.match(_CypherParser.SP);
            this.state = 1445;
            this.propertyScope();
          }
          break;
        case _CypherParser.ELEMENT:
        case _CypherParser.ELEMENTS:
          this.enterOuterAlt(localctx, 3);
          this.state = 1448;
          _la = this._input.LA(1);
          if (!(_la === _CypherParser.ELEMENT || _la === _CypherParser.ELEMENTS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1449;
          this.match(_CypherParser.SP);
          this.state = 1450;
          this.propertiesList();
          this.state = 1453;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 130, this._ctx);
          if (la_ === 1) {
            this.state = 1451;
            this.match(_CypherParser.SP);
            this.state = 1452;
            this.propertyScope();
          }
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertiesList() {
    let localctx = new PropertiesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, _CypherParser.RULE_propertiesList);
    var _la = 0;
    try {
      this.state = 1472;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.T__18:
          this.enterOuterAlt(localctx, 1);
          this.state = 1457;
          this.match(_CypherParser.T__18);
          break;
        case _CypherParser.CYPHER:
        case _CypherParser.EXPLAIN:
        case _CypherParser.PROFILE:
        case _CypherParser.USING:
        case _CypherParser.PERIODIC:
        case _CypherParser.COMMIT:
        case _CypherParser.UNION:
        case _CypherParser.ALL:
        case _CypherParser.CREATE:
        case _CypherParser.DROP:
        case _CypherParser.INDEX:
        case _CypherParser.ON:
        case _CypherParser.CONSTRAINT:
        case _CypherParser.ASSERT:
        case _CypherParser.IS:
        case _CypherParser.UNIQUE:
        case _CypherParser.EXISTS:
        case _CypherParser.LOAD:
        case _CypherParser.CSV:
        case _CypherParser.WITH:
        case _CypherParser.HEADERS:
        case _CypherParser.FROM:
        case _CypherParser.AS:
        case _CypherParser.FIELDTERMINATOR:
        case _CypherParser.OPTIONAL:
        case _CypherParser.MATCH:
        case _CypherParser.UNWIND:
        case _CypherParser.MERGE:
        case _CypherParser.SET:
        case _CypherParser.DETACH:
        case _CypherParser.DELETE:
        case _CypherParser.REMOVE:
        case _CypherParser.FOREACH:
        case _CypherParser.IN:
        case _CypherParser.DISTINCT:
        case _CypherParser.RETURN:
        case _CypherParser.ORDER:
        case _CypherParser.BY:
        case _CypherParser.L_SKIP:
        case _CypherParser.LIMIT:
        case _CypherParser.ASCENDING:
        case _CypherParser.ASC:
        case _CypherParser.DESCENDING:
        case _CypherParser.DESC:
        case _CypherParser.JOIN:
        case _CypherParser.SCAN:
        case _CypherParser.START:
        case _CypherParser.NODE:
        case _CypherParser.RELATIONSHIP:
        case _CypherParser.REL:
        case _CypherParser.WHERE:
        case _CypherParser.SHORTESTPATH:
        case _CypherParser.ALLSHORTESTPATHS:
        case _CypherParser.OR:
        case _CypherParser.XOR:
        case _CypherParser.AND:
        case _CypherParser.NOT:
        case _CypherParser.STARTS:
        case _CypherParser.ENDS:
        case _CypherParser.CONTAINS:
        case _CypherParser.NULL:
        case _CypherParser.COUNT:
        case _CypherParser.FILTER:
        case _CypherParser.EXTRACT:
        case _CypherParser.ANY:
        case _CypherParser.NONE:
        case _CypherParser.SINGLE:
        case _CypherParser.TRUE:
        case _CypherParser.FALSE:
        case _CypherParser.REDUCE:
        case _CypherParser.CASE:
        case _CypherParser.ELSE:
        case _CypherParser.END:
        case _CypherParser.WHEN:
        case _CypherParser.THEN:
        case _CypherParser.CALL:
        case _CypherParser.YIELD:
        case _CypherParser.KEY:
        case _CypherParser.CATALOG:
        case _CypherParser.SHOW:
        case _CypherParser.DEFAULT:
        case _CypherParser.DBMS:
        case _CypherParser.DATABASE:
        case _CypherParser.DATABASES:
        case _CypherParser.GRAPH:
        case _CypherParser.GRAPHS:
        case _CypherParser.REPLACE:
        case _CypherParser.IF:
        case _CypherParser.STOP:
        case _CypherParser.ROLE:
        case _CypherParser.ROLES:
        case _CypherParser.USER:
        case _CypherParser.USERS:
        case _CypherParser.POPULATED:
        case _CypherParser.PASSWORD:
        case _CypherParser.CHANGE:
        case _CypherParser.REQUIRED:
        case _CypherParser.STATUS:
        case _CypherParser.ACTIVE:
        case _CypherParser.SUSPENDED:
        case _CypherParser.ALTER:
        case _CypherParser.CURRENT:
        case _CypherParser.TO:
        case _CypherParser.PRIVILEGES:
        case _CypherParser.GRANT:
        case _CypherParser.DENY:
        case _CypherParser.REVOKE:
        case _CypherParser.RELATIONSHIPS:
        case _CypherParser.NODES:
        case _CypherParser.ELEMENT:
        case _CypherParser.ELEMENTS:
        case _CypherParser.COPY:
        case _CypherParser.OF:
        case _CypherParser.TRAVERSE:
        case _CypherParser.READ:
        case _CypherParser.WRITE:
        case _CypherParser.ACCESS:
        case _CypherParser.INDEXES:
        case _CypherParser.MANAGEMENT:
        case _CypherParser.NEW:
        case _CypherParser.LABEL:
        case _CypherParser.LABELS:
        case _CypherParser.NAME:
        case _CypherParser.NAMES:
        case _CypherParser.TYPE:
        case _CypherParser.TYPES:
        case _CypherParser.PROPERTY:
        case _CypherParser.CONSTRAINTS:
        case _CypherParser.ASSIGN:
        case _CypherParser.BTREE:
        case _CypherParser.EXIST:
        case _CypherParser.FOR:
        case _CypherParser.OPTIONS:
        case _CypherParser.EXECUTE:
        case _CypherParser.DEFINED:
        case _CypherParser.FUNCTION:
        case _CypherParser.FUNCTIONS:
        case _CypherParser.BOOSTED:
        case _CypherParser.PROCEDURE:
        case _CypherParser.PROCEDURES:
        case _CypherParser.ADMIN:
        case _CypherParser.ADMINISTRATOR:
        case _CypherParser.BRIEF:
        case _CypherParser.VERBOSE:
        case _CypherParser.OUTPUT:
        case _CypherParser.HexLetter:
        case _CypherParser.UnescapedSymbolicName:
        case _CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 2);
          this.state = 1458;
          this.symbolicName();
          this.state = 1469;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 134, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1460;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 1459;
                this.match(_CypherParser.SP);
              }
              this.state = 1462;
              this.match(_CypherParser.T__14);
              this.state = 1464;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 1463;
                this.match(_CypherParser.SP);
              }
              this.state = 1466;
              this.symbolicName();
            }
            this.state = 1471;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 134, this._ctx);
          }
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyScope() {
    let localctx = new PropertyScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, _CypherParser.RULE_propertyScope);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1474;
      this.match(_CypherParser.T__19);
      this.state = 1476;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1475;
        this.match(_CypherParser.SP);
      }
      this.state = 1478;
      this.match(_CypherParser.T__18);
      this.state = 1480;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1479;
        this.match(_CypherParser.SP);
      }
      this.state = 1482;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  showDatabase() {
    let localctx = new ShowDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, _CypherParser.RULE_showDatabase);
    var _la = 0;
    try {
      this.state = 1494;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 139, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1484;
          this.match(_CypherParser.SHOW);
          this.state = 1485;
          this.match(_CypherParser.SP);
          this.state = 1488;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.DEFAULT) {
            this.state = 1486;
            this.match(_CypherParser.DEFAULT);
            this.state = 1487;
            this.match(_CypherParser.SP);
          }
          this.state = 1490;
          this.match(_CypherParser.DATABASE);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1491;
          this.match(_CypherParser.SHOW);
          this.state = 1492;
          this.match(_CypherParser.SP);
          this.state = 1493;
          this.match(_CypherParser.DATABASES);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createDatabase() {
    let localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, _CypherParser.RULE_createDatabase);
    var _la = 0;
    try {
      this.state = 1515;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1496;
          this.match(_CypherParser.CREATE);
          this.state = 1497;
          this.match(_CypherParser.SP);
          this.state = 1498;
          this.match(_CypherParser.DATABASE);
          this.state = 1499;
          this.match(_CypherParser.SP);
          this.state = 1500;
          this.symbolicName();
          this.state = 1503;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
          if (la_ === 1) {
            this.state = 1501;
            this.match(_CypherParser.SP);
            this.state = 1502;
            this.ifNotExists();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1505;
          this.match(_CypherParser.CREATE);
          this.state = 1506;
          this.match(_CypherParser.SP);
          this.state = 1510;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.OR) {
            this.state = 1507;
            this.orReplace();
            this.state = 1508;
            this.match(_CypherParser.SP);
          }
          this.state = 1512;
          this.match(_CypherParser.DATABASE);
          this.state = 1513;
          this.match(_CypherParser.SP);
          this.state = 1514;
          this.symbolicName();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropDatabase() {
    let localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, _CypherParser.RULE_dropDatabase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1517;
      this.match(_CypherParser.DROP);
      this.state = 1518;
      this.match(_CypherParser.SP);
      this.state = 1519;
      this.match(_CypherParser.DATABASE);
      this.state = 1520;
      this.match(_CypherParser.SP);
      this.state = 1521;
      this.symbolicName();
      this.state = 1524;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 143, this._ctx);
      if (la_ === 1) {
        this.state = 1522;
        this.match(_CypherParser.SP);
        this.state = 1523;
        this.ifExists();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  startDatabase() {
    let localctx = new StartDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, _CypherParser.RULE_startDatabase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1526;
      this.match(_CypherParser.START);
      this.state = 1527;
      this.match(_CypherParser.SP);
      this.state = 1528;
      this.match(_CypherParser.DATABASE);
      this.state = 1529;
      this.match(_CypherParser.SP);
      this.state = 1530;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  stopDatabase() {
    let localctx = new StopDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, _CypherParser.RULE_stopDatabase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1532;
      this.match(_CypherParser.STOP);
      this.state = 1533;
      this.match(_CypherParser.SP);
      this.state = 1534;
      this.match(_CypherParser.DATABASE);
      this.state = 1535;
      this.match(_CypherParser.SP);
      this.state = 1536;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  ifNotExists() {
    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, _CypherParser.RULE_ifNotExists);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1538;
      this.match(_CypherParser.IF);
      this.state = 1539;
      this.match(_CypherParser.SP);
      this.state = 1540;
      this.match(_CypherParser.NOT);
      this.state = 1541;
      this.match(_CypherParser.SP);
      this.state = 1542;
      this.match(_CypherParser.EXISTS);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  ifExists() {
    let localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, _CypherParser.RULE_ifExists);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1544;
      this.match(_CypherParser.IF);
      this.state = 1545;
      this.match(_CypherParser.SP);
      this.state = 1546;
      this.match(_CypherParser.EXISTS);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  orReplace() {
    let localctx = new OrReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, _CypherParser.RULE_orReplace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1548;
      this.match(_CypherParser.OR);
      this.state = 1549;
      this.match(_CypherParser.SP);
      this.state = 1550;
      this.match(_CypherParser.REPLACE);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  setPassword() {
    let localctx = new SetPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, _CypherParser.RULE_setPassword);
    try {
      this.state = 1569;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 146, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1552;
          this.match(_CypherParser.SET);
          this.state = 1553;
          this.match(_CypherParser.SP);
          this.state = 1554;
          this.match(_CypherParser.PASSWORD);
          this.state = 1555;
          this.match(_CypherParser.SP);
          this.state = 1558;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case _CypherParser.CYPHER:
            case _CypherParser.EXPLAIN:
            case _CypherParser.PROFILE:
            case _CypherParser.USING:
            case _CypherParser.PERIODIC:
            case _CypherParser.COMMIT:
            case _CypherParser.UNION:
            case _CypherParser.ALL:
            case _CypherParser.CREATE:
            case _CypherParser.DROP:
            case _CypherParser.INDEX:
            case _CypherParser.ON:
            case _CypherParser.CONSTRAINT:
            case _CypherParser.ASSERT:
            case _CypherParser.IS:
            case _CypherParser.UNIQUE:
            case _CypherParser.EXISTS:
            case _CypherParser.LOAD:
            case _CypherParser.CSV:
            case _CypherParser.WITH:
            case _CypherParser.HEADERS:
            case _CypherParser.FROM:
            case _CypherParser.AS:
            case _CypherParser.FIELDTERMINATOR:
            case _CypherParser.OPTIONAL:
            case _CypherParser.MATCH:
            case _CypherParser.UNWIND:
            case _CypherParser.MERGE:
            case _CypherParser.SET:
            case _CypherParser.DETACH:
            case _CypherParser.DELETE:
            case _CypherParser.REMOVE:
            case _CypherParser.FOREACH:
            case _CypherParser.IN:
            case _CypherParser.DISTINCT:
            case _CypherParser.RETURN:
            case _CypherParser.ORDER:
            case _CypherParser.BY:
            case _CypherParser.L_SKIP:
            case _CypherParser.LIMIT:
            case _CypherParser.ASCENDING:
            case _CypherParser.ASC:
            case _CypherParser.DESCENDING:
            case _CypherParser.DESC:
            case _CypherParser.JOIN:
            case _CypherParser.SCAN:
            case _CypherParser.START:
            case _CypherParser.NODE:
            case _CypherParser.RELATIONSHIP:
            case _CypherParser.REL:
            case _CypherParser.WHERE:
            case _CypherParser.SHORTESTPATH:
            case _CypherParser.ALLSHORTESTPATHS:
            case _CypherParser.OR:
            case _CypherParser.XOR:
            case _CypherParser.AND:
            case _CypherParser.NOT:
            case _CypherParser.STARTS:
            case _CypherParser.ENDS:
            case _CypherParser.CONTAINS:
            case _CypherParser.NULL:
            case _CypherParser.COUNT:
            case _CypherParser.FILTER:
            case _CypherParser.EXTRACT:
            case _CypherParser.ANY:
            case _CypherParser.NONE:
            case _CypherParser.SINGLE:
            case _CypherParser.TRUE:
            case _CypherParser.FALSE:
            case _CypherParser.REDUCE:
            case _CypherParser.CASE:
            case _CypherParser.ELSE:
            case _CypherParser.END:
            case _CypherParser.WHEN:
            case _CypherParser.THEN:
            case _CypherParser.CALL:
            case _CypherParser.YIELD:
            case _CypherParser.KEY:
            case _CypherParser.CATALOG:
            case _CypherParser.SHOW:
            case _CypherParser.DEFAULT:
            case _CypherParser.DBMS:
            case _CypherParser.DATABASE:
            case _CypherParser.DATABASES:
            case _CypherParser.GRAPH:
            case _CypherParser.GRAPHS:
            case _CypherParser.REPLACE:
            case _CypherParser.IF:
            case _CypherParser.STOP:
            case _CypherParser.ROLE:
            case _CypherParser.ROLES:
            case _CypherParser.USER:
            case _CypherParser.USERS:
            case _CypherParser.POPULATED:
            case _CypherParser.PASSWORD:
            case _CypherParser.CHANGE:
            case _CypherParser.REQUIRED:
            case _CypherParser.STATUS:
            case _CypherParser.ACTIVE:
            case _CypherParser.SUSPENDED:
            case _CypherParser.ALTER:
            case _CypherParser.CURRENT:
            case _CypherParser.TO:
            case _CypherParser.PRIVILEGES:
            case _CypherParser.GRANT:
            case _CypherParser.DENY:
            case _CypherParser.REVOKE:
            case _CypherParser.RELATIONSHIPS:
            case _CypherParser.NODES:
            case _CypherParser.ELEMENT:
            case _CypherParser.ELEMENTS:
            case _CypherParser.COPY:
            case _CypherParser.OF:
            case _CypherParser.TRAVERSE:
            case _CypherParser.READ:
            case _CypherParser.WRITE:
            case _CypherParser.ACCESS:
            case _CypherParser.INDEXES:
            case _CypherParser.MANAGEMENT:
            case _CypherParser.NEW:
            case _CypherParser.LABEL:
            case _CypherParser.LABELS:
            case _CypherParser.NAME:
            case _CypherParser.NAMES:
            case _CypherParser.TYPE:
            case _CypherParser.TYPES:
            case _CypherParser.PROPERTY:
            case _CypherParser.CONSTRAINTS:
            case _CypherParser.ASSIGN:
            case _CypherParser.BTREE:
            case _CypherParser.EXIST:
            case _CypherParser.FOR:
            case _CypherParser.OPTIONS:
            case _CypherParser.EXECUTE:
            case _CypherParser.DEFINED:
            case _CypherParser.FUNCTION:
            case _CypherParser.FUNCTIONS:
            case _CypherParser.BOOSTED:
            case _CypherParser.PROCEDURE:
            case _CypherParser.PROCEDURES:
            case _CypherParser.ADMIN:
            case _CypherParser.ADMINISTRATOR:
            case _CypherParser.BRIEF:
            case _CypherParser.VERBOSE:
            case _CypherParser.OUTPUT:
            case _CypherParser.HexLetter:
            case _CypherParser.UnescapedSymbolicName:
            case _CypherParser.EscapedSymbolicName:
              this.state = 1556;
              this.password();
              break;
            case _CypherParser.T__13:
            case _CypherParser.T__33:
              this.state = 1557;
              this.parameter();
              break;
            default:
              throw new es_default.error.NoViableAltException(this);
          }
          this.state = 1562;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
          if (la_ === 1) {
            this.state = 1560;
            this.match(_CypherParser.SP);
            this.state = 1561;
            this.passwordStatus();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1564;
          this.match(_CypherParser.SET);
          this.state = 1565;
          this.match(_CypherParser.SP);
          this.state = 1566;
          this.match(_CypherParser.PASSWORD);
          this.state = 1567;
          this.match(_CypherParser.SP);
          this.state = 1568;
          this.passwordStatus();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  passwordStatus() {
    let localctx = new PasswordStatusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, _CypherParser.RULE_passwordStatus);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1571;
      this.match(_CypherParser.CHANGE);
      this.state = 1572;
      this.match(_CypherParser.SP);
      this.state = 1575;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.NOT) {
        this.state = 1573;
        this.match(_CypherParser.NOT);
        this.state = 1574;
        this.match(_CypherParser.SP);
      }
      this.state = 1577;
      this.match(_CypherParser.REQUIRED);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  setStatus() {
    let localctx = new SetStatusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, _CypherParser.RULE_setStatus);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1579;
      this.match(_CypherParser.SET);
      this.state = 1580;
      this.match(_CypherParser.SP);
      this.state = 1581;
      this.match(_CypherParser.STATUS);
      this.state = 1582;
      this.match(_CypherParser.SP);
      this.state = 1583;
      this.userStatus();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  userStatus() {
    let localctx = new UserStatusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, _CypherParser.RULE_userStatus);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1585;
      _la = this._input.LA(1);
      if (!(_la === _CypherParser.ACTIVE || _la === _CypherParser.SUSPENDED)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createUniqueConstraint() {
    let localctx = new CreateUniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, _CypherParser.RULE_createUniqueConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1587;
      this.match(_CypherParser.CREATE);
      this.state = 1588;
      this.match(_CypherParser.SP);
      this.state = 1589;
      this.uniqueConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createNodeKeyConstraint() {
    let localctx = new CreateNodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, _CypherParser.RULE_createNodeKeyConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1591;
      this.match(_CypherParser.CREATE);
      this.state = 1592;
      this.match(_CypherParser.SP);
      this.state = 1593;
      this.nodeKeyConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createNodePropertyExistenceConstraint() {
    let localctx = new CreateNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, _CypherParser.RULE_createNodePropertyExistenceConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1595;
      this.match(_CypherParser.CREATE);
      this.state = 1596;
      this.match(_CypherParser.SP);
      this.state = 1597;
      this.nodePropertyExistenceConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createRelationshipPropertyExistenceConstraint() {
    let localctx = new CreateRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, _CypherParser.RULE_createRelationshipPropertyExistenceConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1599;
      this.match(_CypherParser.CREATE);
      this.state = 1600;
      this.match(_CypherParser.SP);
      this.state = 1601;
      this.relationshipPropertyExistenceConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createIndex() {
    let localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, _CypherParser.RULE_createIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1603;
      this.match(_CypherParser.CREATE);
      this.state = 1604;
      this.match(_CypherParser.SP);
      this.state = 1605;
      this.index();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropUniqueConstraint() {
    let localctx = new DropUniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, _CypherParser.RULE_dropUniqueConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1607;
      this.match(_CypherParser.DROP);
      this.state = 1608;
      this.match(_CypherParser.SP);
      this.state = 1609;
      this.uniqueConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropNodeKeyConstraint() {
    let localctx = new DropNodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, _CypherParser.RULE_dropNodeKeyConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1611;
      this.match(_CypherParser.DROP);
      this.state = 1612;
      this.match(_CypherParser.SP);
      this.state = 1613;
      this.nodeKeyConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropNodePropertyExistenceConstraint() {
    let localctx = new DropNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, _CypherParser.RULE_dropNodePropertyExistenceConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1615;
      this.match(_CypherParser.DROP);
      this.state = 1616;
      this.match(_CypherParser.SP);
      this.state = 1617;
      this.nodePropertyExistenceConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropRelationshipPropertyExistenceConstraint() {
    let localctx = new DropRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, _CypherParser.RULE_dropRelationshipPropertyExistenceConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1619;
      this.match(_CypherParser.DROP);
      this.state = 1620;
      this.match(_CypherParser.SP);
      this.state = 1621;
      this.relationshipPropertyExistenceConstraint();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dropIndex() {
    let localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, _CypherParser.RULE_dropIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1623;
      this.match(_CypherParser.DROP);
      this.state = 1624;
      this.match(_CypherParser.SP);
      this.state = 1625;
      this.index();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  index() {
    let localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, _CypherParser.RULE_index);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1627;
      this.match(_CypherParser.INDEX);
      this.state = 1628;
      this.match(_CypherParser.SP);
      this.state = 1629;
      this.match(_CypherParser.ON);
      this.state = 1631;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1630;
        this.match(_CypherParser.SP);
      }
      this.state = 1633;
      this.nodeLabel();
      this.state = 1635;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1634;
        this.match(_CypherParser.SP);
      }
      this.state = 1637;
      this.match(_CypherParser.T__19);
      this.state = 1639;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1638;
        this.match(_CypherParser.SP);
      }
      this.state = 1641;
      this.propertyKeys();
      this.state = 1643;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1642;
        this.match(_CypherParser.SP);
      }
      this.state = 1645;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  uniqueConstraint() {
    let localctx = new UniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, _CypherParser.RULE_uniqueConstraint);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1647;
      this.match(_CypherParser.CONSTRAINT);
      this.state = 1648;
      this.match(_CypherParser.SP);
      this.state = 1649;
      this.match(_CypherParser.ON);
      this.state = 1651;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1650;
        this.match(_CypherParser.SP);
      }
      this.state = 1653;
      this.match(_CypherParser.T__19);
      this.state = 1655;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1654;
        this.match(_CypherParser.SP);
      }
      this.state = 1657;
      this.variable();
      this.state = 1658;
      this.nodeLabel();
      this.state = 1660;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1659;
        this.match(_CypherParser.SP);
      }
      this.state = 1662;
      this.match(_CypherParser.T__20);
      this.state = 1664;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1663;
        this.match(_CypherParser.SP);
      }
      this.state = 1666;
      this.match(_CypherParser.ASSERT);
      this.state = 1667;
      this.match(_CypherParser.SP);
      this.state = 1668;
      this.propertyExpression();
      this.state = 1669;
      this.match(_CypherParser.SP);
      this.state = 1670;
      this.match(_CypherParser.IS);
      this.state = 1671;
      this.match(_CypherParser.SP);
      this.state = 1672;
      this.match(_CypherParser.UNIQUE);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nodeKeyConstraint() {
    let localctx = new NodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, _CypherParser.RULE_nodeKeyConstraint);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1674;
      this.match(_CypherParser.CONSTRAINT);
      this.state = 1675;
      this.match(_CypherParser.SP);
      this.state = 1676;
      this.match(_CypherParser.ON);
      this.state = 1678;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1677;
        this.match(_CypherParser.SP);
      }
      this.state = 1680;
      this.match(_CypherParser.T__19);
      this.state = 1682;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1681;
        this.match(_CypherParser.SP);
      }
      this.state = 1684;
      this.variable();
      this.state = 1685;
      this.nodeLabel();
      this.state = 1687;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1686;
        this.match(_CypherParser.SP);
      }
      this.state = 1689;
      this.match(_CypherParser.T__20);
      this.state = 1691;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1690;
        this.match(_CypherParser.SP);
      }
      this.state = 1693;
      this.match(_CypherParser.ASSERT);
      this.state = 1694;
      this.match(_CypherParser.SP);
      this.state = 1695;
      this.match(_CypherParser.T__19);
      this.state = 1697;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1696;
        this.match(_CypherParser.SP);
      }
      this.state = 1699;
      this.propertyExpressions();
      this.state = 1701;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1700;
        this.match(_CypherParser.SP);
      }
      this.state = 1703;
      this.match(_CypherParser.T__20);
      this.state = 1704;
      this.match(_CypherParser.SP);
      this.state = 1705;
      this.match(_CypherParser.IS);
      this.state = 1706;
      this.match(_CypherParser.SP);
      this.state = 1707;
      this.match(_CypherParser.NODE);
      this.state = 1708;
      this.match(_CypherParser.SP);
      this.state = 1709;
      this.match(_CypherParser.KEY);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nodePropertyExistenceConstraint() {
    let localctx = new NodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, _CypherParser.RULE_nodePropertyExistenceConstraint);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1711;
      this.match(_CypherParser.CONSTRAINT);
      this.state = 1712;
      this.match(_CypherParser.SP);
      this.state = 1713;
      this.match(_CypherParser.ON);
      this.state = 1715;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1714;
        this.match(_CypherParser.SP);
      }
      this.state = 1717;
      this.match(_CypherParser.T__19);
      this.state = 1718;
      this.variable();
      this.state = 1719;
      this.nodeLabel();
      this.state = 1720;
      this.match(_CypherParser.T__20);
      this.state = 1722;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1721;
        this.match(_CypherParser.SP);
      }
      this.state = 1724;
      this.match(_CypherParser.ASSERT);
      this.state = 1725;
      this.match(_CypherParser.SP);
      this.state = 1726;
      this.match(_CypherParser.EXISTS);
      this.state = 1728;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1727;
        this.match(_CypherParser.SP);
      }
      this.state = 1730;
      this.match(_CypherParser.T__19);
      this.state = 1731;
      this.propertyExpression();
      this.state = 1732;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipPropertyExistenceConstraint() {
    let localctx = new RelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, _CypherParser.RULE_relationshipPropertyExistenceConstraint);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1734;
      this.match(_CypherParser.CONSTRAINT);
      this.state = 1735;
      this.match(_CypherParser.SP);
      this.state = 1736;
      this.match(_CypherParser.ON);
      this.state = 1738;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1737;
        this.match(_CypherParser.SP);
      }
      this.state = 1740;
      this.relationshipPatternSyntax();
      this.state = 1742;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1741;
        this.match(_CypherParser.SP);
      }
      this.state = 1744;
      this.match(_CypherParser.ASSERT);
      this.state = 1745;
      this.match(_CypherParser.SP);
      this.state = 1746;
      this.match(_CypherParser.EXISTS);
      this.state = 1748;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1747;
        this.match(_CypherParser.SP);
      }
      this.state = 1750;
      this.match(_CypherParser.T__19);
      this.state = 1751;
      this.propertyExpression();
      this.state = 1752;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipPatternSyntax() {
    let localctx = new RelationshipPatternSyntaxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, _CypherParser.RULE_relationshipPatternSyntax);
    var _la = 0;
    try {
      this.state = 1807;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 174, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1754;
          this.match(_CypherParser.T__19);
          this.state = 1756;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1755;
            this.match(_CypherParser.SP);
          }
          this.state = 1758;
          this.match(_CypherParser.T__20);
          this.state = 1759;
          this.dash();
          this.state = 1760;
          this.match(_CypherParser.T__16);
          this.state = 1761;
          this.variable();
          this.state = 1762;
          this.relType();
          this.state = 1763;
          this.match(_CypherParser.T__17);
          this.state = 1764;
          this.dash();
          this.state = 1765;
          this.match(_CypherParser.T__19);
          this.state = 1767;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1766;
            this.match(_CypherParser.SP);
          }
          this.state = 1769;
          this.match(_CypherParser.T__20);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1771;
          this.match(_CypherParser.T__19);
          this.state = 1773;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1772;
            this.match(_CypherParser.SP);
          }
          this.state = 1775;
          this.match(_CypherParser.T__20);
          this.state = 1776;
          this.dash();
          this.state = 1777;
          this.match(_CypherParser.T__16);
          this.state = 1778;
          this.variable();
          this.state = 1779;
          this.relType();
          this.state = 1780;
          this.match(_CypherParser.T__17);
          this.state = 1781;
          this.dash();
          this.state = 1782;
          this.rightArrowHead();
          this.state = 1783;
          this.match(_CypherParser.T__19);
          this.state = 1785;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1784;
            this.match(_CypherParser.SP);
          }
          this.state = 1787;
          this.match(_CypherParser.T__20);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1789;
          this.match(_CypherParser.T__19);
          this.state = 1791;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1790;
            this.match(_CypherParser.SP);
          }
          this.state = 1793;
          this.match(_CypherParser.T__20);
          this.state = 1794;
          this.leftArrowHead();
          this.state = 1795;
          this.dash();
          this.state = 1796;
          this.match(_CypherParser.T__16);
          this.state = 1797;
          this.variable();
          this.state = 1798;
          this.relType();
          this.state = 1799;
          this.match(_CypherParser.T__17);
          this.state = 1800;
          this.dash();
          this.state = 1801;
          this.match(_CypherParser.T__19);
          this.state = 1803;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1802;
            this.match(_CypherParser.SP);
          }
          this.state = 1805;
          this.match(_CypherParser.T__20);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  loadCSVClause() {
    let localctx = new LoadCSVClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, _CypherParser.RULE_loadCSVClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1809;
      this.match(_CypherParser.LOAD);
      this.state = 1810;
      this.match(_CypherParser.SP);
      this.state = 1811;
      this.match(_CypherParser.CSV);
      this.state = 1812;
      this.match(_CypherParser.SP);
      this.state = 1817;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.WITH) {
        this.state = 1813;
        this.match(_CypherParser.WITH);
        this.state = 1814;
        this.match(_CypherParser.SP);
        this.state = 1815;
        this.match(_CypherParser.HEADERS);
        this.state = 1816;
        this.match(_CypherParser.SP);
      }
      this.state = 1819;
      this.match(_CypherParser.FROM);
      this.state = 1820;
      this.match(_CypherParser.SP);
      this.state = 1821;
      this.expression();
      this.state = 1822;
      this.match(_CypherParser.SP);
      this.state = 1823;
      this.match(_CypherParser.AS);
      this.state = 1824;
      this.match(_CypherParser.SP);
      this.state = 1825;
      this.variable();
      this.state = 1826;
      this.match(_CypherParser.SP);
      this.state = 1830;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.FIELDTERMINATOR) {
        this.state = 1827;
        this.match(_CypherParser.FIELDTERMINATOR);
        this.state = 1828;
        this.match(_CypherParser.SP);
        this.state = 1829;
        this.match(_CypherParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  matchClause() {
    let localctx = new MatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, _CypherParser.RULE_matchClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1834;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.OPTIONAL) {
        this.state = 1832;
        this.match(_CypherParser.OPTIONAL);
        this.state = 1833;
        this.match(_CypherParser.SP);
      }
      this.state = 1836;
      this.match(_CypherParser.MATCH);
      this.state = 1838;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1837;
        this.match(_CypherParser.SP);
      }
      this.state = 1840;
      this.pattern();
      this.state = 1844;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 179, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1841;
          this.hint();
        }
        this.state = 1846;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 179, this._ctx);
      }
      this.state = 1851;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);
      if (la_ === 1) {
        this.state = 1848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 1847;
          this.match(_CypherParser.SP);
        }
        this.state = 1850;
        this.where();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  unwindClause() {
    let localctx = new UnwindClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, _CypherParser.RULE_unwindClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1853;
      this.match(_CypherParser.UNWIND);
      this.state = 1855;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1854;
        this.match(_CypherParser.SP);
      }
      this.state = 1857;
      this.expression();
      this.state = 1858;
      this.match(_CypherParser.SP);
      this.state = 1859;
      this.match(_CypherParser.AS);
      this.state = 1860;
      this.match(_CypherParser.SP);
      this.state = 1861;
      this.variable();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  mergeClause() {
    let localctx = new MergeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, _CypherParser.RULE_mergeClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1863;
      this.match(_CypherParser.MERGE);
      this.state = 1865;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1864;
        this.match(_CypherParser.SP);
      }
      this.state = 1867;
      this.patternPart();
      this.state = 1872;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1868;
          this.match(_CypherParser.SP);
          this.state = 1869;
          this.mergeAction();
        }
        this.state = 1874;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  mergeAction() {
    let localctx = new MergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, _CypherParser.RULE_mergeAction);
    try {
      this.state = 1885;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 185, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1875;
          this.match(_CypherParser.ON);
          this.state = 1876;
          this.match(_CypherParser.SP);
          this.state = 1877;
          this.match(_CypherParser.MATCH);
          this.state = 1878;
          this.match(_CypherParser.SP);
          this.state = 1879;
          this.setClause();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1880;
          this.match(_CypherParser.ON);
          this.state = 1881;
          this.match(_CypherParser.SP);
          this.state = 1882;
          this.match(_CypherParser.CREATE);
          this.state = 1883;
          this.match(_CypherParser.SP);
          this.state = 1884;
          this.setClause();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createClause() {
    let localctx = new CreateClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, _CypherParser.RULE_createClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1887;
      this.match(_CypherParser.CREATE);
      this.state = 1889;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1888;
        this.match(_CypherParser.SP);
      }
      this.state = 1891;
      this.pattern();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createUniqueClause() {
    let localctx = new CreateUniqueClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, _CypherParser.RULE_createUniqueClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1893;
      this.match(_CypherParser.CREATE);
      this.state = 1894;
      this.match(_CypherParser.SP);
      this.state = 1895;
      this.match(_CypherParser.UNIQUE);
      this.state = 1897;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1896;
        this.match(_CypherParser.SP);
      }
      this.state = 1899;
      this.pattern();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  setClause() {
    let localctx = new SetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, _CypherParser.RULE_setClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1901;
      this.match(_CypherParser.SET);
      this.state = 1903;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1902;
        this.match(_CypherParser.SP);
      }
      this.state = 1905;
      this.setItem();
      this.state = 1916;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 191, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1907;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1906;
            this.match(_CypherParser.SP);
          }
          this.state = 1909;
          this.match(_CypherParser.T__14);
          this.state = 1911;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1910;
            this.match(_CypherParser.SP);
          }
          this.state = 1913;
          this.setItem();
        }
        this.state = 1918;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 191, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  setItem() {
    let localctx = new SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, _CypherParser.RULE_setItem);
    var _la = 0;
    try {
      this.state = 1955;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 199, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1919;
          this.propertyExpression();
          this.state = 1921;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1920;
            this.match(_CypherParser.SP);
          }
          this.state = 1923;
          this.match(_CypherParser.T__11);
          this.state = 1925;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1924;
            this.match(_CypherParser.SP);
          }
          this.state = 1927;
          this.expression();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1929;
          this.variable();
          this.state = 1931;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1930;
            this.match(_CypherParser.SP);
          }
          this.state = 1933;
          this.match(_CypherParser.T__11);
          this.state = 1935;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1934;
            this.match(_CypherParser.SP);
          }
          this.state = 1937;
          this.expression();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1939;
          this.variable();
          this.state = 1941;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1940;
            this.match(_CypherParser.SP);
          }
          this.state = 1943;
          this.match(_CypherParser.T__21);
          this.state = 1945;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1944;
            this.match(_CypherParser.SP);
          }
          this.state = 1947;
          this.expression();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1949;
          this.variable();
          this.state = 1951;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1950;
            this.match(_CypherParser.SP);
          }
          this.state = 1953;
          this.nodeLabels();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  deleteClause() {
    let localctx = new DeleteClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, _CypherParser.RULE_deleteClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1959;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.DETACH) {
        this.state = 1957;
        this.match(_CypherParser.DETACH);
        this.state = 1958;
        this.match(_CypherParser.SP);
      }
      this.state = 1961;
      this.match(_CypherParser.DELETE);
      this.state = 1963;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 1962;
        this.match(_CypherParser.SP);
      }
      this.state = 1965;
      this.expression();
      this.state = 1976;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 204, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1967;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1966;
            this.match(_CypherParser.SP);
          }
          this.state = 1969;
          this.match(_CypherParser.T__14);
          this.state = 1971;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1970;
            this.match(_CypherParser.SP);
          }
          this.state = 1973;
          this.expression();
        }
        this.state = 1978;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 204, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  removeClause() {
    let localctx = new RemoveClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, _CypherParser.RULE_removeClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1979;
      this.match(_CypherParser.REMOVE);
      this.state = 1980;
      this.match(_CypherParser.SP);
      this.state = 1981;
      this.removeItem();
      this.state = 1992;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 207, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1983;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1982;
            this.match(_CypherParser.SP);
          }
          this.state = 1985;
          this.match(_CypherParser.T__14);
          this.state = 1987;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 1986;
            this.match(_CypherParser.SP);
          }
          this.state = 1989;
          this.removeItem();
        }
        this.state = 1994;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 207, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  removeItem() {
    let localctx = new RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, _CypherParser.RULE_removeItem);
    try {
      this.state = 1999;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1995;
          this.variable();
          this.state = 1996;
          this.nodeLabels();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1998;
          this.propertyExpression();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  foreachClause() {
    let localctx = new ForeachClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, _CypherParser.RULE_foreachClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2001;
      this.match(_CypherParser.FOREACH);
      this.state = 2003;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2002;
        this.match(_CypherParser.SP);
      }
      this.state = 2005;
      this.match(_CypherParser.T__19);
      this.state = 2007;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2006;
        this.match(_CypherParser.SP);
      }
      this.state = 2009;
      this.variable();
      this.state = 2010;
      this.match(_CypherParser.SP);
      this.state = 2011;
      this.match(_CypherParser.IN);
      this.state = 2012;
      this.match(_CypherParser.SP);
      this.state = 2013;
      this.expression();
      this.state = 2015;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2014;
        this.match(_CypherParser.SP);
      }
      this.state = 2017;
      this.match(_CypherParser.T__22);
      this.state = 2020;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 2018;
            this.match(_CypherParser.SP);
            this.state = 2019;
            this.clause();
            break;
          default:
            throw new es_default.error.NoViableAltException(this);
        }
        this.state = 2022;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
      } while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 2025;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2024;
        this.match(_CypherParser.SP);
      }
      this.state = 2027;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  withClause() {
    let localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, _CypherParser.RULE_withClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2029;
      this.match(_CypherParser.WITH);
      this.state = 2034;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 215, this._ctx);
      if (la_ === 1) {
        this.state = 2031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2030;
          this.match(_CypherParser.SP);
        }
        this.state = 2033;
        this.match(_CypherParser.DISTINCT);
      }
      this.state = 2036;
      this.match(_CypherParser.SP);
      this.state = 2037;
      this.returnBody();
      this.state = 2042;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 217, this._ctx);
      if (la_ === 1) {
        this.state = 2039;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2038;
          this.match(_CypherParser.SP);
        }
        this.state = 2041;
        this.where();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  returnClause() {
    let localctx = new ReturnClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, _CypherParser.RULE_returnClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2044;
      this.match(_CypherParser.RETURN);
      this.state = 2049;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 219, this._ctx);
      if (la_ === 1) {
        this.state = 2046;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2045;
          this.match(_CypherParser.SP);
        }
        this.state = 2048;
        this.match(_CypherParser.DISTINCT);
      }
      this.state = 2052;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2051;
        this.match(_CypherParser.SP);
      }
      this.state = 2054;
      this.returnBody();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  returnBody() {
    let localctx = new ReturnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, _CypherParser.RULE_returnBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2056;
      this.returnItems();
      this.state = 2059;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 221, this._ctx);
      if (la_ === 1) {
        this.state = 2057;
        this.match(_CypherParser.SP);
        this.state = 2058;
        this.order();
      }
      this.state = 2063;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 222, this._ctx);
      if (la_ === 1) {
        this.state = 2061;
        this.match(_CypherParser.SP);
        this.state = 2062;
        this.skip();
      }
      this.state = 2067;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
      if (la_ === 1) {
        this.state = 2065;
        this.match(_CypherParser.SP);
        this.state = 2066;
        this.limit();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  func() {
    let localctx = new FuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, _CypherParser.RULE_func);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2069;
      this.procedureInvocation();
      this.state = 2071;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 224, this._ctx);
      if (la_ === 1) {
        this.state = 2070;
        this.match(_CypherParser.SP);
      }
      this.state = 2074;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.YIELD) {
        this.state = 2073;
        this.procedureResults();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  returnItems() {
    let localctx = new ReturnItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, _CypherParser.RULE_returnItems);
    var _la = 0;
    try {
      this.state = 2105;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2076;
          this.match(_CypherParser.T__18);
          this.state = 2087;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 228, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 2078;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2077;
                this.match(_CypherParser.SP);
              }
              this.state = 2080;
              this.match(_CypherParser.T__14);
              this.state = 2082;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2081;
                this.match(_CypherParser.SP);
              }
              this.state = 2084;
              this.returnItem();
            }
            this.state = 2089;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 228, this._ctx);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2090;
          this.returnItem();
          this.state = 2101;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 231, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 2092;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2091;
                this.match(_CypherParser.SP);
              }
              this.state = 2094;
              this.match(_CypherParser.T__14);
              this.state = 2096;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2095;
                this.match(_CypherParser.SP);
              }
              this.state = 2098;
              this.returnItem();
            }
            this.state = 2103;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 231, this._ctx);
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2104;
          this.func();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  returnItem() {
    let localctx = new ReturnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, _CypherParser.RULE_returnItem);
    try {
      this.state = 2114;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2107;
          this.expression();
          this.state = 2108;
          this.match(_CypherParser.SP);
          this.state = 2109;
          this.match(_CypherParser.AS);
          this.state = 2110;
          this.match(_CypherParser.SP);
          this.state = 2111;
          this.variable();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2113;
          this.expression();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  call() {
    let localctx = new CallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, _CypherParser.RULE_call);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2116;
      this.match(_CypherParser.CALL);
      this.state = 2117;
      this.match(_CypherParser.SP);
      this.state = 2118;
      this.procedureInvocation();
      this.state = 2120;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
      if (la_ === 1) {
        this.state = 2119;
        this.match(_CypherParser.SP);
      }
      this.state = 2123;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.YIELD) {
        this.state = 2122;
        this.procedureResults();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureInvocation() {
    let localctx = new ProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, _CypherParser.RULE_procedureInvocation);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2125;
      this.procedureInvocationBody();
      this.state = 2127;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 236, this._ctx);
      if (la_ === 1) {
        this.state = 2126;
        this.match(_CypherParser.SP);
      }
      this.state = 2130;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__19) {
        this.state = 2129;
        this.procedureArguments();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureInvocationBody() {
    let localctx = new ProcedureInvocationBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, _CypherParser.RULE_procedureInvocationBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2132;
      this.namespace();
      this.state = 2133;
      this.procedureName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureArguments() {
    let localctx = new ProcedureArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, _CypherParser.RULE_procedureArguments);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2135;
      this.match(_CypherParser.T__19);
      this.state = 2137;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 238, this._ctx);
      if (la_ === 1) {
        this.state = 2136;
        this.match(_CypherParser.SP);
      }
      this.state = 2140;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << _CypherParser.T__2 | 1 << _CypherParser.T__12 | 1 << _CypherParser.T__13 | 1 << _CypherParser.T__16 | 1 << _CypherParser.T__19)) !== 0 || (_la - 34 & ~31) == 0 && (1 << _la - 34 & (1 << _CypherParser.T__33 - 34 | 1 << _CypherParser.CYPHER - 34 | 1 << _CypherParser.EXPLAIN - 34 | 1 << _CypherParser.PROFILE - 34 | 1 << _CypherParser.USING - 34 | 1 << _CypherParser.PERIODIC - 34 | 1 << _CypherParser.COMMIT - 34 | 1 << _CypherParser.UNION - 34 | 1 << _CypherParser.ALL - 34 | 1 << _CypherParser.CREATE - 34 | 1 << _CypherParser.DROP - 34 | 1 << _CypherParser.INDEX - 34 | 1 << _CypherParser.ON - 34)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << _CypherParser.CONSTRAINT - 66 | 1 << _CypherParser.ASSERT - 66 | 1 << _CypherParser.IS - 66 | 1 << _CypherParser.UNIQUE - 66 | 1 << _CypherParser.EXISTS - 66 | 1 << _CypherParser.LOAD - 66 | 1 << _CypherParser.CSV - 66 | 1 << _CypherParser.WITH - 66 | 1 << _CypherParser.HEADERS - 66 | 1 << _CypherParser.FROM - 66 | 1 << _CypherParser.AS - 66 | 1 << _CypherParser.FIELDTERMINATOR - 66 | 1 << _CypherParser.OPTIONAL - 66 | 1 << _CypherParser.MATCH - 66 | 1 << _CypherParser.UNWIND - 66 | 1 << _CypherParser.MERGE - 66 | 1 << _CypherParser.SET - 66 | 1 << _CypherParser.DETACH - 66 | 1 << _CypherParser.DELETE - 66 | 1 << _CypherParser.REMOVE - 66 | 1 << _CypherParser.FOREACH - 66 | 1 << _CypherParser.IN - 66 | 1 << _CypherParser.DISTINCT - 66 | 1 << _CypherParser.RETURN - 66 | 1 << _CypherParser.ORDER - 66 | 1 << _CypherParser.BY - 66 | 1 << _CypherParser.L_SKIP - 66 | 1 << _CypherParser.LIMIT - 66 | 1 << _CypherParser.ASCENDING - 66 | 1 << _CypherParser.ASC - 66 | 1 << _CypherParser.DESCENDING - 66 | 1 << _CypherParser.DESC - 66)) !== 0 || (_la - 98 & ~31) == 0 && (1 << _la - 98 & (1 << _CypherParser.JOIN - 98 | 1 << _CypherParser.SCAN - 98 | 1 << _CypherParser.START - 98 | 1 << _CypherParser.NODE - 98 | 1 << _CypherParser.RELATIONSHIP - 98 | 1 << _CypherParser.REL - 98 | 1 << _CypherParser.WHERE - 98 | 1 << _CypherParser.SHORTESTPATH - 98 | 1 << _CypherParser.ALLSHORTESTPATHS - 98 | 1 << _CypherParser.OR - 98 | 1 << _CypherParser.XOR - 98 | 1 << _CypherParser.AND - 98 | 1 << _CypherParser.NOT - 98 | 1 << _CypherParser.STARTS - 98 | 1 << _CypherParser.ENDS - 98 | 1 << _CypherParser.CONTAINS - 98 | 1 << _CypherParser.NULL - 98 | 1 << _CypherParser.COUNT - 98 | 1 << _CypherParser.FILTER - 98 | 1 << _CypherParser.EXTRACT - 98 | 1 << _CypherParser.ANY - 98 | 1 << _CypherParser.NONE - 98 | 1 << _CypherParser.SINGLE - 98 | 1 << _CypherParser.TRUE - 98 | 1 << _CypherParser.FALSE - 98 | 1 << _CypherParser.REDUCE - 98 | 1 << _CypherParser.CASE - 98 | 1 << _CypherParser.ELSE - 98 | 1 << _CypherParser.END - 98 | 1 << _CypherParser.WHEN - 98 | 1 << _CypherParser.THEN - 98 | 1 << _CypherParser.CALL - 98)) !== 0 || (_la - 130 & ~31) == 0 && (1 << _la - 130 & (1 << _CypherParser.YIELD - 130 | 1 << _CypherParser.KEY - 130 | 1 << _CypherParser.CATALOG - 130 | 1 << _CypherParser.SHOW - 130 | 1 << _CypherParser.DEFAULT - 130 | 1 << _CypherParser.DBMS - 130 | 1 << _CypherParser.DATABASE - 130 | 1 << _CypherParser.DATABASES - 130 | 1 << _CypherParser.GRAPH - 130 | 1 << _CypherParser.GRAPHS - 130 | 1 << _CypherParser.REPLACE - 130 | 1 << _CypherParser.IF - 130 | 1 << _CypherParser.STOP - 130 | 1 << _CypherParser.ROLE - 130 | 1 << _CypherParser.ROLES - 130 | 1 << _CypherParser.USER - 130 | 1 << _CypherParser.USERS - 130 | 1 << _CypherParser.POPULATED - 130 | 1 << _CypherParser.PASSWORD - 130 | 1 << _CypherParser.CHANGE - 130 | 1 << _CypherParser.REQUIRED - 130 | 1 << _CypherParser.STATUS - 130 | 1 << _CypherParser.ACTIVE - 130 | 1 << _CypherParser.SUSPENDED - 130 | 1 << _CypherParser.ALTER - 130 | 1 << _CypherParser.CURRENT - 130 | 1 << _CypherParser.TO - 130 | 1 << _CypherParser.PRIVILEGES - 130 | 1 << _CypherParser.GRANT - 130 | 1 << _CypherParser.DENY - 130 | 1 << _CypherParser.REVOKE - 130 | 1 << _CypherParser.RELATIONSHIPS - 130)) !== 0 || (_la - 162 & ~31) == 0 && (1 << _la - 162 & (1 << _CypherParser.NODES - 162 | 1 << _CypherParser.ELEMENT - 162 | 1 << _CypherParser.ELEMENTS - 162 | 1 << _CypherParser.COPY - 162 | 1 << _CypherParser.OF - 162 | 1 << _CypherParser.TRAVERSE - 162 | 1 << _CypherParser.READ - 162 | 1 << _CypherParser.WRITE - 162 | 1 << _CypherParser.ACCESS - 162 | 1 << _CypherParser.INDEXES - 162 | 1 << _CypherParser.MANAGEMENT - 162 | 1 << _CypherParser.NEW - 162 | 1 << _CypherParser.LABEL - 162 | 1 << _CypherParser.LABELS - 162 | 1 << _CypherParser.NAME - 162 | 1 << _CypherParser.NAMES - 162 | 1 << _CypherParser.TYPE - 162 | 1 << _CypherParser.TYPES - 162 | 1 << _CypherParser.PROPERTY - 162 | 1 << _CypherParser.CONSTRAINTS - 162 | 1 << _CypherParser.ASSIGN - 162 | 1 << _CypherParser.BTREE - 162 | 1 << _CypherParser.EXIST - 162 | 1 << _CypherParser.FOR - 162 | 1 << _CypherParser.OPTIONS - 162 | 1 << _CypherParser.EXECUTE - 162 | 1 << _CypherParser.DEFINED - 162 | 1 << _CypherParser.FUNCTION - 162 | 1 << _CypherParser.FUNCTIONS - 162 | 1 << _CypherParser.BOOSTED - 162 | 1 << _CypherParser.PROCEDURE - 162 | 1 << _CypherParser.PROCEDURES - 162)) !== 0 || (_la - 194 & ~31) == 0 && (1 << _la - 194 & (1 << _CypherParser.ADMIN - 194 | 1 << _CypherParser.ADMINISTRATOR - 194 | 1 << _CypherParser.BRIEF - 194 | 1 << _CypherParser.VERBOSE - 194 | 1 << _CypherParser.OUTPUT - 194 | 1 << _CypherParser.StringLiteral - 194 | 1 << _CypherParser.HexInteger - 194 | 1 << _CypherParser.DecimalInteger - 194 | 1 << _CypherParser.OctalInteger - 194 | 1 << _CypherParser.HexLetter - 194 | 1 << _CypherParser.ExponentDecimalReal - 194 | 1 << _CypherParser.RegularDecimalReal - 194 | 1 << _CypherParser.UnescapedSymbolicName - 194 | 1 << _CypherParser.EscapedSymbolicName - 194)) !== 0) {
        this.state = 2139;
        this.expression();
      }
      this.state = 2152;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2143;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2142;
            this.match(_CypherParser.SP);
          }
          this.state = 2145;
          this.match(_CypherParser.T__14);
          this.state = 2147;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2146;
            this.match(_CypherParser.SP);
          }
          this.state = 2149;
          this.expression();
        }
        this.state = 2154;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
      }
      this.state = 2156;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2155;
        this.match(_CypherParser.SP);
      }
      this.state = 2158;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureResults() {
    let localctx = new ProcedureResultsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, _CypherParser.RULE_procedureResults);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2160;
      this.match(_CypherParser.YIELD);
      this.state = 2161;
      this.match(_CypherParser.SP);
      this.state = 2162;
      this.procedureResult();
      this.state = 2173;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 246, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2164;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2163;
            this.match(_CypherParser.SP);
          }
          this.state = 2166;
          this.match(_CypherParser.T__14);
          this.state = 2168;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2167;
            this.match(_CypherParser.SP);
          }
          this.state = 2170;
          this.procedureResult();
        }
        this.state = 2175;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 246, this._ctx);
      }
      this.state = 2178;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 247, this._ctx);
      if (la_ === 1) {
        this.state = 2176;
        this.match(_CypherParser.SP);
        this.state = 2177;
        this.where();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureResult() {
    let localctx = new ProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, _CypherParser.RULE_procedureResult);
    try {
      this.state = 2182;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 248, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2180;
          this.aliasedProcedureResult();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2181;
          this.simpleProcedureResult();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  aliasedProcedureResult() {
    let localctx = new AliasedProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, _CypherParser.RULE_aliasedProcedureResult);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2184;
      this.procedureOutput();
      this.state = 2185;
      this.match(_CypherParser.SP);
      this.state = 2186;
      this.match(_CypherParser.AS);
      this.state = 2187;
      this.match(_CypherParser.SP);
      this.state = 2188;
      this.variable();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleProcedureResult() {
    let localctx = new SimpleProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, _CypherParser.RULE_simpleProcedureResult);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2190;
      this.procedureOutput();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureOutput() {
    let localctx = new ProcedureOutputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, _CypherParser.RULE_procedureOutput);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2192;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  order() {
    let localctx = new OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, _CypherParser.RULE_order);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2194;
      this.match(_CypherParser.ORDER);
      this.state = 2195;
      this.match(_CypherParser.SP);
      this.state = 2196;
      this.match(_CypherParser.BY);
      this.state = 2197;
      this.match(_CypherParser.SP);
      this.state = 2198;
      this.sortItem();
      this.state = 2209;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 251, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2200;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2199;
            this.match(_CypherParser.SP);
          }
          this.state = 2202;
          this.match(_CypherParser.T__14);
          this.state = 2204;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2203;
            this.match(_CypherParser.SP);
          }
          this.state = 2206;
          this.sortItem();
        }
        this.state = 2211;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 251, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  skip() {
    let localctx = new SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, _CypherParser.RULE_skip);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2212;
      this.match(_CypherParser.L_SKIP);
      this.state = 2213;
      this.match(_CypherParser.SP);
      this.state = 2214;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  limit() {
    let localctx = new LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, _CypherParser.RULE_limit);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2216;
      this.match(_CypherParser.LIMIT);
      this.state = 2217;
      this.match(_CypherParser.SP);
      this.state = 2218;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sortItem() {
    let localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, _CypherParser.RULE_sortItem);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2220;
      this.expression();
      this.state = 2228;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 254, this._ctx);
      if (la_ === 1) {
        this.state = 2222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2221;
          this.match(_CypherParser.SP);
        }
        this.state = 2224;
        _la = this._input.LA(1);
        if (!((_la - 94 & ~31) == 0 && (1 << _la - 94 & (1 << _CypherParser.ASCENDING - 94 | 1 << _CypherParser.ASC - 94 | 1 << _CypherParser.DESCENDING - 94 | 1 << _CypherParser.DESC - 94)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 2226;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 253, this._ctx);
        if (la_ === 1) {
          this.state = 2225;
          this.match(_CypherParser.SP);
        }
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  hint() {
    let localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, _CypherParser.RULE_hint);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2231;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2230;
        this.match(_CypherParser.SP);
      }
      this.state = 2279;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2233;
          this.match(_CypherParser.USING);
          this.state = 2234;
          this.match(_CypherParser.SP);
          this.state = 2235;
          this.match(_CypherParser.INDEX);
          this.state = 2236;
          this.match(_CypherParser.SP);
          this.state = 2237;
          this.variable();
          this.state = 2238;
          this.nodeLabel();
          this.state = 2240;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2239;
            this.match(_CypherParser.SP);
          }
          this.state = 2242;
          this.match(_CypherParser.T__19);
          this.state = 2244;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2243;
            this.match(_CypherParser.SP);
          }
          this.state = 2246;
          this.propertyKeys();
          this.state = 2248;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2247;
            this.match(_CypherParser.SP);
          }
          this.state = 2250;
          this.match(_CypherParser.T__20);
          break;
        case 2:
          this.state = 2252;
          this.match(_CypherParser.USING);
          this.state = 2253;
          this.match(_CypherParser.SP);
          this.state = 2254;
          this.match(_CypherParser.JOIN);
          this.state = 2255;
          this.match(_CypherParser.SP);
          this.state = 2256;
          this.match(_CypherParser.ON);
          this.state = 2257;
          this.match(_CypherParser.SP);
          this.state = 2258;
          this.variable();
          this.state = 2269;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 261, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 2260;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2259;
                this.match(_CypherParser.SP);
              }
              this.state = 2262;
              this.match(_CypherParser.T__14);
              this.state = 2264;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2263;
                this.match(_CypherParser.SP);
              }
              this.state = 2266;
              this.variable();
            }
            this.state = 2271;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 261, this._ctx);
          }
          break;
        case 3:
          this.state = 2272;
          this.match(_CypherParser.USING);
          this.state = 2273;
          this.match(_CypherParser.SP);
          this.state = 2274;
          this.match(_CypherParser.SCAN);
          this.state = 2275;
          this.match(_CypherParser.SP);
          this.state = 2276;
          this.variable();
          this.state = 2277;
          this.nodeLabel();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  startClause() {
    let localctx = new StartClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, _CypherParser.RULE_startClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2281;
      this.match(_CypherParser.START);
      this.state = 2282;
      this.match(_CypherParser.SP);
      this.state = 2283;
      this.startPoint();
      this.state = 2294;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 265, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2285;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2284;
            this.match(_CypherParser.SP);
          }
          this.state = 2287;
          this.match(_CypherParser.T__14);
          this.state = 2289;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2288;
            this.match(_CypherParser.SP);
          }
          this.state = 2291;
          this.startPoint();
        }
        this.state = 2296;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 265, this._ctx);
      }
      this.state = 2298;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.WHERE) {
        this.state = 2297;
        this.where();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  startPoint() {
    let localctx = new StartPointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, _CypherParser.RULE_startPoint);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2300;
      this.variable();
      this.state = 2302;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2301;
        this.match(_CypherParser.SP);
      }
      this.state = 2304;
      this.match(_CypherParser.T__11);
      this.state = 2306;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2305;
        this.match(_CypherParser.SP);
      }
      this.state = 2308;
      this.lookup();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lookup() {
    let localctx = new LookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, _CypherParser.RULE_lookup);
    try {
      this.state = 2312;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.NODE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2310;
          this.nodeLookup();
          break;
        case _CypherParser.RELATIONSHIP:
        case _CypherParser.REL:
          this.enterOuterAlt(localctx, 2);
          this.state = 2311;
          this.relationshipLookup();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nodeLookup() {
    let localctx = new NodeLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, _CypherParser.RULE_nodeLookup);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2314;
      this.match(_CypherParser.NODE);
      this.state = 2316;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2315;
        this.match(_CypherParser.SP);
      }
      this.state = 2321;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 271, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2318;
          this.identifiedIndexLookup();
          break;
        case 2:
          this.state = 2319;
          this.indexQuery();
          break;
        case 3:
          this.state = 2320;
          this.idLookup();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipLookup() {
    let localctx = new RelationshipLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, _CypherParser.RULE_relationshipLookup);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2323;
      _la = this._input.LA(1);
      if (!(_la === _CypherParser.RELATIONSHIP || _la === _CypherParser.REL)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 2327;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 272, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2324;
          this.identifiedIndexLookup();
          break;
        case 2:
          this.state = 2325;
          this.indexQuery();
          break;
        case 3:
          this.state = 2326;
          this.idLookup();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  identifiedIndexLookup() {
    let localctx = new IdentifiedIndexLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, _CypherParser.RULE_identifiedIndexLookup);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2329;
      this.match(_CypherParser.T__1);
      this.state = 2330;
      this.symbolicName();
      this.state = 2331;
      this.match(_CypherParser.T__19);
      this.state = 2332;
      this.symbolicName();
      this.state = 2333;
      this.match(_CypherParser.T__11);
      this.state = 2336;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.StringLiteral:
          this.state = 2334;
          this.match(_CypherParser.StringLiteral);
          break;
        case _CypherParser.T__13:
        case _CypherParser.T__33:
          this.state = 2335;
          this.parameter();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
      this.state = 2338;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  indexQuery() {
    let localctx = new IndexQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, _CypherParser.RULE_indexQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2340;
      this.match(_CypherParser.T__1);
      this.state = 2341;
      this.symbolicName();
      this.state = 2342;
      this.match(_CypherParser.T__19);
      this.state = 2345;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.StringLiteral:
          this.state = 2343;
          this.match(_CypherParser.StringLiteral);
          break;
        case _CypherParser.T__13:
        case _CypherParser.T__33:
          this.state = 2344;
          this.parameter();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
      this.state = 2347;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  idLookup() {
    let localctx = new IdLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, _CypherParser.RULE_idLookup);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2349;
      this.match(_CypherParser.T__19);
      this.state = 2353;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.HexInteger:
        case _CypherParser.DecimalInteger:
        case _CypherParser.OctalInteger:
          this.state = 2350;
          this.literalIds();
          break;
        case _CypherParser.T__13:
        case _CypherParser.T__33:
          this.state = 2351;
          this.parameter();
          break;
        case _CypherParser.T__18:
          this.state = 2352;
          this.match(_CypherParser.T__18);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
      this.state = 2355;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literalIds() {
    let localctx = new LiteralIdsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, _CypherParser.RULE_literalIds);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2357;
      this.integerLiteral();
      this.state = 2368;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__14 || _la === _CypherParser.SP) {
        this.state = 2359;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2358;
          this.match(_CypherParser.SP);
        }
        this.state = 2361;
        this.match(_CypherParser.T__14);
        this.state = 2363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2362;
          this.match(_CypherParser.SP);
        }
        this.state = 2365;
        this.integerLiteral();
        this.state = 2370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  where() {
    let localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, _CypherParser.RULE_where);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2371;
      this.match(_CypherParser.WHERE);
      this.state = 2372;
      this.match(_CypherParser.SP);
      this.state = 2373;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pattern() {
    let localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, _CypherParser.RULE_pattern);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2375;
      this.patternPart();
      this.state = 2386;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 281, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2377;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2376;
            this.match(_CypherParser.SP);
          }
          this.state = 2379;
          this.match(_CypherParser.T__14);
          this.state = 2381;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2380;
            this.match(_CypherParser.SP);
          }
          this.state = 2383;
          this.patternPart();
        }
        this.state = 2388;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 281, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  patternPart() {
    let localctx = new PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, _CypherParser.RULE_patternPart);
    var _la = 0;
    try {
      this.state = 2400;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 284, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2389;
          this.variable();
          this.state = 2391;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2390;
            this.match(_CypherParser.SP);
          }
          this.state = 2393;
          this.match(_CypherParser.T__11);
          this.state = 2395;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2394;
            this.match(_CypherParser.SP);
          }
          this.state = 2397;
          this.anonymousPatternPart();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2399;
          this.anonymousPatternPart();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  anonymousPatternPart() {
    let localctx = new AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, _CypherParser.RULE_anonymousPatternPart);
    try {
      this.state = 2404;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.SHORTESTPATH:
        case _CypherParser.ALLSHORTESTPATHS:
          this.enterOuterAlt(localctx, 1);
          this.state = 2402;
          this.shortestPathPatternFunction();
          break;
        case _CypherParser.T__19:
          this.enterOuterAlt(localctx, 2);
          this.state = 2403;
          this.patternElement();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  patternElement() {
    let localctx = new PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, _CypherParser.RULE_patternElement);
    var _la = 0;
    try {
      this.state = 2420;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 288, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2406;
          this.nodePattern();
          this.state = 2413;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 287, this._ctx);
          while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 2408;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2407;
                this.match(_CypherParser.SP);
              }
              this.state = 2410;
              this.patternElementChain();
            }
            this.state = 2415;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 287, this._ctx);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2416;
          this.match(_CypherParser.T__19);
          this.state = 2417;
          this.patternElement();
          this.state = 2418;
          this.match(_CypherParser.T__20);
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nodePattern() {
    let localctx = new NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, _CypherParser.RULE_nodePattern);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2422;
      this.match(_CypherParser.T__19);
      this.state = 2424;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2423;
        this.match(_CypherParser.SP);
      }
      this.state = 2430;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54 | 1 << _CypherParser.USING - 54 | 1 << _CypherParser.PERIODIC - 54 | 1 << _CypherParser.COMMIT - 54 | 1 << _CypherParser.UNION - 54 | 1 << _CypherParser.ALL - 54 | 1 << _CypherParser.CREATE - 54 | 1 << _CypherParser.DROP - 54 | 1 << _CypherParser.INDEX - 54 | 1 << _CypherParser.ON - 54 | 1 << _CypherParser.CONSTRAINT - 54 | 1 << _CypherParser.ASSERT - 54 | 1 << _CypherParser.IS - 54 | 1 << _CypherParser.UNIQUE - 54 | 1 << _CypherParser.EXISTS - 54 | 1 << _CypherParser.LOAD - 54 | 1 << _CypherParser.CSV - 54 | 1 << _CypherParser.WITH - 54 | 1 << _CypherParser.HEADERS - 54 | 1 << _CypherParser.FROM - 54 | 1 << _CypherParser.AS - 54 | 1 << _CypherParser.FIELDTERMINATOR - 54 | 1 << _CypherParser.OPTIONAL - 54 | 1 << _CypherParser.MATCH - 54 | 1 << _CypherParser.UNWIND - 54 | 1 << _CypherParser.MERGE - 54 | 1 << _CypherParser.SET - 54 | 1 << _CypherParser.DETACH - 54 | 1 << _CypherParser.DELETE - 54 | 1 << _CypherParser.REMOVE - 54)) !== 0 || (_la - 86 & ~31) == 0 && (1 << _la - 86 & (1 << _CypherParser.FOREACH - 86 | 1 << _CypherParser.IN - 86 | 1 << _CypherParser.DISTINCT - 86 | 1 << _CypherParser.RETURN - 86 | 1 << _CypherParser.ORDER - 86 | 1 << _CypherParser.BY - 86 | 1 << _CypherParser.L_SKIP - 86 | 1 << _CypherParser.LIMIT - 86 | 1 << _CypherParser.ASCENDING - 86 | 1 << _CypherParser.ASC - 86 | 1 << _CypherParser.DESCENDING - 86 | 1 << _CypherParser.DESC - 86 | 1 << _CypherParser.JOIN - 86 | 1 << _CypherParser.SCAN - 86 | 1 << _CypherParser.START - 86 | 1 << _CypherParser.NODE - 86 | 1 << _CypherParser.RELATIONSHIP - 86 | 1 << _CypherParser.REL - 86 | 1 << _CypherParser.WHERE - 86 | 1 << _CypherParser.SHORTESTPATH - 86 | 1 << _CypherParser.ALLSHORTESTPATHS - 86 | 1 << _CypherParser.OR - 86 | 1 << _CypherParser.XOR - 86 | 1 << _CypherParser.AND - 86 | 1 << _CypherParser.NOT - 86 | 1 << _CypherParser.STARTS - 86 | 1 << _CypherParser.ENDS - 86 | 1 << _CypherParser.CONTAINS - 86 | 1 << _CypherParser.NULL - 86 | 1 << _CypherParser.COUNT - 86 | 1 << _CypherParser.FILTER - 86 | 1 << _CypherParser.EXTRACT - 86)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << _CypherParser.ANY - 118 | 1 << _CypherParser.NONE - 118 | 1 << _CypherParser.SINGLE - 118 | 1 << _CypherParser.TRUE - 118 | 1 << _CypherParser.FALSE - 118 | 1 << _CypherParser.REDUCE - 118 | 1 << _CypherParser.CASE - 118 | 1 << _CypherParser.ELSE - 118 | 1 << _CypherParser.END - 118 | 1 << _CypherParser.WHEN - 118 | 1 << _CypherParser.THEN - 118 | 1 << _CypherParser.CALL - 118 | 1 << _CypherParser.YIELD - 118 | 1 << _CypherParser.KEY - 118 | 1 << _CypherParser.CATALOG - 118 | 1 << _CypherParser.SHOW - 118 | 1 << _CypherParser.DEFAULT - 118 | 1 << _CypherParser.DBMS - 118 | 1 << _CypherParser.DATABASE - 118 | 1 << _CypherParser.DATABASES - 118 | 1 << _CypherParser.GRAPH - 118 | 1 << _CypherParser.GRAPHS - 118 | 1 << _CypherParser.REPLACE - 118 | 1 << _CypherParser.IF - 118 | 1 << _CypherParser.STOP - 118 | 1 << _CypherParser.ROLE - 118 | 1 << _CypherParser.ROLES - 118 | 1 << _CypherParser.USER - 118 | 1 << _CypherParser.USERS - 118 | 1 << _CypherParser.POPULATED - 118 | 1 << _CypherParser.PASSWORD - 118 | 1 << _CypherParser.CHANGE - 118)) !== 0 || (_la - 150 & ~31) == 0 && (1 << _la - 150 & (1 << _CypherParser.REQUIRED - 150 | 1 << _CypherParser.STATUS - 150 | 1 << _CypherParser.ACTIVE - 150 | 1 << _CypherParser.SUSPENDED - 150 | 1 << _CypherParser.ALTER - 150 | 1 << _CypherParser.CURRENT - 150 | 1 << _CypherParser.TO - 150 | 1 << _CypherParser.PRIVILEGES - 150 | 1 << _CypherParser.GRANT - 150 | 1 << _CypherParser.DENY - 150 | 1 << _CypherParser.REVOKE - 150 | 1 << _CypherParser.RELATIONSHIPS - 150 | 1 << _CypherParser.NODES - 150 | 1 << _CypherParser.ELEMENT - 150 | 1 << _CypherParser.ELEMENTS - 150 | 1 << _CypherParser.COPY - 150 | 1 << _CypherParser.OF - 150 | 1 << _CypherParser.TRAVERSE - 150 | 1 << _CypherParser.READ - 150 | 1 << _CypherParser.WRITE - 150 | 1 << _CypherParser.ACCESS - 150 | 1 << _CypherParser.INDEXES - 150 | 1 << _CypherParser.MANAGEMENT - 150 | 1 << _CypherParser.NEW - 150 | 1 << _CypherParser.LABEL - 150 | 1 << _CypherParser.LABELS - 150 | 1 << _CypherParser.NAME - 150 | 1 << _CypherParser.NAMES - 150 | 1 << _CypherParser.TYPE - 150 | 1 << _CypherParser.TYPES - 150 | 1 << _CypherParser.PROPERTY - 150 | 1 << _CypherParser.CONSTRAINTS - 150)) !== 0 || (_la - 182 & ~31) == 0 && (1 << _la - 182 & (1 << _CypherParser.ASSIGN - 182 | 1 << _CypherParser.BTREE - 182 | 1 << _CypherParser.EXIST - 182 | 1 << _CypherParser.FOR - 182 | 1 << _CypherParser.OPTIONS - 182 | 1 << _CypherParser.EXECUTE - 182 | 1 << _CypherParser.DEFINED - 182 | 1 << _CypherParser.FUNCTION - 182 | 1 << _CypherParser.FUNCTIONS - 182 | 1 << _CypherParser.BOOSTED - 182 | 1 << _CypherParser.PROCEDURE - 182 | 1 << _CypherParser.PROCEDURES - 182 | 1 << _CypherParser.ADMIN - 182 | 1 << _CypherParser.ADMINISTRATOR - 182 | 1 << _CypherParser.BRIEF - 182 | 1 << _CypherParser.VERBOSE - 182 | 1 << _CypherParser.OUTPUT - 182 | 1 << _CypherParser.HexLetter - 182)) !== 0 || _la === _CypherParser.UnescapedSymbolicName || _la === _CypherParser.EscapedSymbolicName) {
        this.state = 2426;
        this.variable();
        this.state = 2428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2427;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2436;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__1) {
        this.state = 2432;
        this.nodeLabels();
        this.state = 2434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2433;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2442;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__13 || _la === _CypherParser.T__33) {
        this.state = 2438;
        this.properties();
        this.state = 2440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2439;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2444;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  patternElementChain() {
    let localctx = new PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, _CypherParser.RULE_patternElementChain);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2446;
      this.relationshipPattern();
      this.state = 2448;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2447;
        this.match(_CypherParser.SP);
      }
      this.state = 2450;
      this.nodePattern();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipPattern() {
    let localctx = new RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, _CypherParser.RULE_relationshipPattern);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2452;
      this.relationshipPatternStart();
      this.state = 2454;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 297, this._ctx);
      if (la_ === 1) {
        this.state = 2453;
        this.match(_CypherParser.SP);
      }
      this.state = 2457;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__16) {
        this.state = 2456;
        this.relationshipDetail();
      }
      this.state = 2460;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2459;
        this.match(_CypherParser.SP);
      }
      this.state = 2462;
      this.relationshipPatternEnd();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipPatternStart() {
    let localctx = new RelationshipPatternStartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, _CypherParser.RULE_relationshipPatternStart);
    var _la = 0;
    try {
      this.state = 2471;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.T__29:
        case _CypherParser.T__34:
        case _CypherParser.T__35:
        case _CypherParser.T__36:
        case _CypherParser.T__37:
          this.enterOuterAlt(localctx, 1);
          this.state = 2464;
          this.leftArrowHead();
          this.state = 2466;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2465;
            this.match(_CypherParser.SP);
          }
          this.state = 2468;
          this.dash();
          break;
        case _CypherParser.T__2:
        case _CypherParser.T__42:
        case _CypherParser.T__43:
        case _CypherParser.T__44:
        case _CypherParser.T__45:
        case _CypherParser.T__46:
        case _CypherParser.T__47:
        case _CypherParser.T__48:
        case _CypherParser.T__49:
        case _CypherParser.T__50:
        case _CypherParser.T__51:
        case _CypherParser.T__52:
          this.enterOuterAlt(localctx, 2);
          this.state = 2470;
          this.dash();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipPatternEnd() {
    let localctx = new RelationshipPatternEndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, _CypherParser.RULE_relationshipPatternEnd);
    var _la = 0;
    try {
      this.state = 2480;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 303, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2473;
          this.dash();
          this.state = 2475;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2474;
            this.match(_CypherParser.SP);
          }
          this.state = 2477;
          this.rightArrowHead();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2479;
          this.dash();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipDetail() {
    let localctx = new RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, _CypherParser.RULE_relationshipDetail);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2482;
      this.match(_CypherParser.T__16);
      this.state = 2484;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2483;
        this.match(_CypherParser.SP);
      }
      this.state = 2490;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54 | 1 << _CypherParser.USING - 54 | 1 << _CypherParser.PERIODIC - 54 | 1 << _CypherParser.COMMIT - 54 | 1 << _CypherParser.UNION - 54 | 1 << _CypherParser.ALL - 54 | 1 << _CypherParser.CREATE - 54 | 1 << _CypherParser.DROP - 54 | 1 << _CypherParser.INDEX - 54 | 1 << _CypherParser.ON - 54 | 1 << _CypherParser.CONSTRAINT - 54 | 1 << _CypherParser.ASSERT - 54 | 1 << _CypherParser.IS - 54 | 1 << _CypherParser.UNIQUE - 54 | 1 << _CypherParser.EXISTS - 54 | 1 << _CypherParser.LOAD - 54 | 1 << _CypherParser.CSV - 54 | 1 << _CypherParser.WITH - 54 | 1 << _CypherParser.HEADERS - 54 | 1 << _CypherParser.FROM - 54 | 1 << _CypherParser.AS - 54 | 1 << _CypherParser.FIELDTERMINATOR - 54 | 1 << _CypherParser.OPTIONAL - 54 | 1 << _CypherParser.MATCH - 54 | 1 << _CypherParser.UNWIND - 54 | 1 << _CypherParser.MERGE - 54 | 1 << _CypherParser.SET - 54 | 1 << _CypherParser.DETACH - 54 | 1 << _CypherParser.DELETE - 54 | 1 << _CypherParser.REMOVE - 54)) !== 0 || (_la - 86 & ~31) == 0 && (1 << _la - 86 & (1 << _CypherParser.FOREACH - 86 | 1 << _CypherParser.IN - 86 | 1 << _CypherParser.DISTINCT - 86 | 1 << _CypherParser.RETURN - 86 | 1 << _CypherParser.ORDER - 86 | 1 << _CypherParser.BY - 86 | 1 << _CypherParser.L_SKIP - 86 | 1 << _CypherParser.LIMIT - 86 | 1 << _CypherParser.ASCENDING - 86 | 1 << _CypherParser.ASC - 86 | 1 << _CypherParser.DESCENDING - 86 | 1 << _CypherParser.DESC - 86 | 1 << _CypherParser.JOIN - 86 | 1 << _CypherParser.SCAN - 86 | 1 << _CypherParser.START - 86 | 1 << _CypherParser.NODE - 86 | 1 << _CypherParser.RELATIONSHIP - 86 | 1 << _CypherParser.REL - 86 | 1 << _CypherParser.WHERE - 86 | 1 << _CypherParser.SHORTESTPATH - 86 | 1 << _CypherParser.ALLSHORTESTPATHS - 86 | 1 << _CypherParser.OR - 86 | 1 << _CypherParser.XOR - 86 | 1 << _CypherParser.AND - 86 | 1 << _CypherParser.NOT - 86 | 1 << _CypherParser.STARTS - 86 | 1 << _CypherParser.ENDS - 86 | 1 << _CypherParser.CONTAINS - 86 | 1 << _CypherParser.NULL - 86 | 1 << _CypherParser.COUNT - 86 | 1 << _CypherParser.FILTER - 86 | 1 << _CypherParser.EXTRACT - 86)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << _CypherParser.ANY - 118 | 1 << _CypherParser.NONE - 118 | 1 << _CypherParser.SINGLE - 118 | 1 << _CypherParser.TRUE - 118 | 1 << _CypherParser.FALSE - 118 | 1 << _CypherParser.REDUCE - 118 | 1 << _CypherParser.CASE - 118 | 1 << _CypherParser.ELSE - 118 | 1 << _CypherParser.END - 118 | 1 << _CypherParser.WHEN - 118 | 1 << _CypherParser.THEN - 118 | 1 << _CypherParser.CALL - 118 | 1 << _CypherParser.YIELD - 118 | 1 << _CypherParser.KEY - 118 | 1 << _CypherParser.CATALOG - 118 | 1 << _CypherParser.SHOW - 118 | 1 << _CypherParser.DEFAULT - 118 | 1 << _CypherParser.DBMS - 118 | 1 << _CypherParser.DATABASE - 118 | 1 << _CypherParser.DATABASES - 118 | 1 << _CypherParser.GRAPH - 118 | 1 << _CypherParser.GRAPHS - 118 | 1 << _CypherParser.REPLACE - 118 | 1 << _CypherParser.IF - 118 | 1 << _CypherParser.STOP - 118 | 1 << _CypherParser.ROLE - 118 | 1 << _CypherParser.ROLES - 118 | 1 << _CypherParser.USER - 118 | 1 << _CypherParser.USERS - 118 | 1 << _CypherParser.POPULATED - 118 | 1 << _CypherParser.PASSWORD - 118 | 1 << _CypherParser.CHANGE - 118)) !== 0 || (_la - 150 & ~31) == 0 && (1 << _la - 150 & (1 << _CypherParser.REQUIRED - 150 | 1 << _CypherParser.STATUS - 150 | 1 << _CypherParser.ACTIVE - 150 | 1 << _CypherParser.SUSPENDED - 150 | 1 << _CypherParser.ALTER - 150 | 1 << _CypherParser.CURRENT - 150 | 1 << _CypherParser.TO - 150 | 1 << _CypherParser.PRIVILEGES - 150 | 1 << _CypherParser.GRANT - 150 | 1 << _CypherParser.DENY - 150 | 1 << _CypherParser.REVOKE - 150 | 1 << _CypherParser.RELATIONSHIPS - 150 | 1 << _CypherParser.NODES - 150 | 1 << _CypherParser.ELEMENT - 150 | 1 << _CypherParser.ELEMENTS - 150 | 1 << _CypherParser.COPY - 150 | 1 << _CypherParser.OF - 150 | 1 << _CypherParser.TRAVERSE - 150 | 1 << _CypherParser.READ - 150 | 1 << _CypherParser.WRITE - 150 | 1 << _CypherParser.ACCESS - 150 | 1 << _CypherParser.INDEXES - 150 | 1 << _CypherParser.MANAGEMENT - 150 | 1 << _CypherParser.NEW - 150 | 1 << _CypherParser.LABEL - 150 | 1 << _CypherParser.LABELS - 150 | 1 << _CypherParser.NAME - 150 | 1 << _CypherParser.NAMES - 150 | 1 << _CypherParser.TYPE - 150 | 1 << _CypherParser.TYPES - 150 | 1 << _CypherParser.PROPERTY - 150 | 1 << _CypherParser.CONSTRAINTS - 150)) !== 0 || (_la - 182 & ~31) == 0 && (1 << _la - 182 & (1 << _CypherParser.ASSIGN - 182 | 1 << _CypherParser.BTREE - 182 | 1 << _CypherParser.EXIST - 182 | 1 << _CypherParser.FOR - 182 | 1 << _CypherParser.OPTIONS - 182 | 1 << _CypherParser.EXECUTE - 182 | 1 << _CypherParser.DEFINED - 182 | 1 << _CypherParser.FUNCTION - 182 | 1 << _CypherParser.FUNCTIONS - 182 | 1 << _CypherParser.BOOSTED - 182 | 1 << _CypherParser.PROCEDURE - 182 | 1 << _CypherParser.PROCEDURES - 182 | 1 << _CypherParser.ADMIN - 182 | 1 << _CypherParser.ADMINISTRATOR - 182 | 1 << _CypherParser.BRIEF - 182 | 1 << _CypherParser.VERBOSE - 182 | 1 << _CypherParser.OUTPUT - 182 | 1 << _CypherParser.HexLetter - 182)) !== 0 || _la === _CypherParser.UnescapedSymbolicName || _la === _CypherParser.EscapedSymbolicName) {
        this.state = 2486;
        this.variable();
        this.state = 2488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2487;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2496;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__1) {
        this.state = 2492;
        this.relationshipTypes();
        this.state = 2494;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2493;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2499;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__18) {
        this.state = 2498;
        this.rangeLiteral();
      }
      this.state = 2505;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__13 || _la === _CypherParser.T__33) {
        this.state = 2501;
        this.properties();
        this.state = 2503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2502;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2507;
      this.match(_CypherParser.T__17);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  properties() {
    let localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, _CypherParser.RULE_properties);
    try {
      this.state = 2511;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 312, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2509;
          this.mapLiteral();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2510;
          this.parameter();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relType() {
    let localctx = new RelTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, _CypherParser.RULE_relType);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2513;
      this.match(_CypherParser.T__1);
      this.state = 2515;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2514;
        this.match(_CypherParser.SP);
      }
      this.state = 2517;
      this.relTypeName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipTypes() {
    let localctx = new RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, _CypherParser.RULE_relationshipTypes);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2519;
      this.relationshipType();
      this.state = 2527;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 315, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2521;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2520;
            this.match(_CypherParser.SP);
          }
          this.state = 2523;
          this.match(_CypherParser.T__22);
          this.state = 2524;
          this.relationshipTypeOptionalColon();
        }
        this.state = 2529;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 315, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipType() {
    let localctx = new RelationshipTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, _CypherParser.RULE_relationshipType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2530;
      this.match(_CypherParser.T__1);
      this.state = 2531;
      this.relTypeName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipTypeOptionalColon() {
    let localctx = new RelationshipTypeOptionalColonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, _CypherParser.RULE_relationshipTypeOptionalColon);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2534;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__1) {
        this.state = 2533;
        this.match(_CypherParser.T__1);
      }
      this.state = 2536;
      this.relTypeName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nodeLabels() {
    let localctx = new NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, _CypherParser.RULE_nodeLabels);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2538;
      this.nodeLabel();
      this.state = 2545;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 318, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2540;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2539;
            this.match(_CypherParser.SP);
          }
          this.state = 2542;
          this.nodeLabel();
        }
        this.state = 2547;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 318, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nodeLabel() {
    let localctx = new NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, _CypherParser.RULE_nodeLabel);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2548;
      this.match(_CypherParser.T__1);
      this.state = 2549;
      this.labelName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  rangeLiteral() {
    let localctx = new RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, _CypherParser.RULE_rangeLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2551;
      this.match(_CypherParser.T__18);
      this.state = 2553;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2552;
        this.match(_CypherParser.SP);
      }
      this.state = 2559;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 202 & ~31) == 0 && (1 << _la - 202 & (1 << _CypherParser.HexInteger - 202 | 1 << _CypherParser.DecimalInteger - 202 | 1 << _CypherParser.OctalInteger - 202)) !== 0) {
        this.state = 2555;
        this.integerLiteral();
        this.state = 2557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2556;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 2571;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__23) {
        this.state = 2561;
        this.match(_CypherParser.T__23);
        this.state = 2563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2562;
          this.match(_CypherParser.SP);
        }
        this.state = 2569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 202 & ~31) == 0 && (1 << _la - 202 & (1 << _CypherParser.HexInteger - 202 | 1 << _CypherParser.DecimalInteger - 202 | 1 << _CypherParser.OctalInteger - 202)) !== 0) {
          this.state = 2565;
          this.integerLiteral();
          this.state = 2567;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2566;
            this.match(_CypherParser.SP);
          }
        }
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  labelName() {
    let localctx = new LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, _CypherParser.RULE_labelName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2573;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relTypeName() {
    let localctx = new RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, _CypherParser.RULE_relTypeName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2575;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expression() {
    let localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, _CypherParser.RULE_expression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2577;
      this.orExpression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  orExpression() {
    let localctx = new OrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, _CypherParser.RULE_orExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2579;
      this.xorExpression();
      this.state = 2586;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 326, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2580;
          this.match(_CypherParser.SP);
          this.state = 2581;
          this.match(_CypherParser.OR);
          this.state = 2582;
          this.match(_CypherParser.SP);
          this.state = 2583;
          this.xorExpression();
        }
        this.state = 2588;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 326, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  xorExpression() {
    let localctx = new XorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, _CypherParser.RULE_xorExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2589;
      this.andExpression();
      this.state = 2596;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 327, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2590;
          this.match(_CypherParser.SP);
          this.state = 2591;
          this.match(_CypherParser.XOR);
          this.state = 2592;
          this.match(_CypherParser.SP);
          this.state = 2593;
          this.andExpression();
        }
        this.state = 2598;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 327, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  andExpression() {
    let localctx = new AndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, _CypherParser.RULE_andExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2599;
      this.notExpression();
      this.state = 2606;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 328, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2600;
          this.match(_CypherParser.SP);
          this.state = 2601;
          this.match(_CypherParser.AND);
          this.state = 2602;
          this.match(_CypherParser.SP);
          this.state = 2603;
          this.notExpression();
        }
        this.state = 2608;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 328, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  notExpression() {
    let localctx = new NotExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, _CypherParser.RULE_notExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2615;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 330, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2609;
          this.match(_CypherParser.NOT);
          this.state = 2611;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2610;
            this.match(_CypherParser.SP);
          }
        }
        this.state = 2617;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 330, this._ctx);
      }
      this.state = 2618;
      this.comparisonExpression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  comparisonExpression() {
    let localctx = new ComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, _CypherParser.RULE_comparisonExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2620;
      this.addOrSubtractExpression();
      this.state = 2627;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 332, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2622;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2621;
            this.match(_CypherParser.SP);
          }
          this.state = 2624;
          this.partialComparisonExpression();
        }
        this.state = 2629;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 332, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  addOrSubtractExpression() {
    let localctx = new AddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, _CypherParser.RULE_addOrSubtractExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2630;
      this.multiplyDivideModuloExpression();
      this.state = 2649;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 338, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2647;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 337, this._ctx);
          switch (la_) {
            case 1:
              this.state = 2632;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2631;
                this.match(_CypherParser.SP);
              }
              this.state = 2634;
              this.match(_CypherParser.T__12);
              this.state = 2636;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2635;
                this.match(_CypherParser.SP);
              }
              this.state = 2638;
              this.multiplyDivideModuloExpression();
              break;
            case 2:
              this.state = 2640;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2639;
                this.match(_CypherParser.SP);
              }
              this.state = 2642;
              this.match(_CypherParser.T__2);
              this.state = 2644;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2643;
                this.match(_CypherParser.SP);
              }
              this.state = 2646;
              this.multiplyDivideModuloExpression();
              break;
          }
        }
        this.state = 2651;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 338, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  multiplyDivideModuloExpression() {
    let localctx = new MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, _CypherParser.RULE_multiplyDivideModuloExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2652;
      this.powerOfExpression();
      this.state = 2679;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 346, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2677;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 345, this._ctx);
          switch (la_) {
            case 1:
              this.state = 2654;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2653;
                this.match(_CypherParser.SP);
              }
              this.state = 2656;
              this.match(_CypherParser.T__18);
              this.state = 2658;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2657;
                this.match(_CypherParser.SP);
              }
              this.state = 2660;
              this.powerOfExpression();
              break;
            case 2:
              this.state = 2662;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2661;
                this.match(_CypherParser.SP);
              }
              this.state = 2664;
              this.match(_CypherParser.T__5);
              this.state = 2666;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2665;
                this.match(_CypherParser.SP);
              }
              this.state = 2668;
              this.powerOfExpression();
              break;
            case 3:
              this.state = 2670;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2669;
                this.match(_CypherParser.SP);
              }
              this.state = 2672;
              this.match(_CypherParser.T__24);
              this.state = 2674;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2673;
                this.match(_CypherParser.SP);
              }
              this.state = 2676;
              this.powerOfExpression();
              break;
          }
        }
        this.state = 2681;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 346, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  powerOfExpression() {
    let localctx = new PowerOfExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, _CypherParser.RULE_powerOfExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2682;
      this.unaryAddOrSubtractExpression();
      this.state = 2693;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 349, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2684;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2683;
            this.match(_CypherParser.SP);
          }
          this.state = 2686;
          this.match(_CypherParser.T__25);
          this.state = 2688;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2687;
            this.match(_CypherParser.SP);
          }
          this.state = 2690;
          this.unaryAddOrSubtractExpression();
        }
        this.state = 2695;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 349, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  unaryAddOrSubtractExpression() {
    let localctx = new UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, _CypherParser.RULE_unaryAddOrSubtractExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2702;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === _CypherParser.T__2 || _la === _CypherParser.T__12) {
        this.state = 2696;
        _la = this._input.LA(1);
        if (!(_la === _CypherParser.T__2 || _la === _CypherParser.T__12)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 2698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2697;
          this.match(_CypherParser.SP);
        }
        this.state = 2704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2705;
      this.stringListNullOperatorExpression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  stringListNullOperatorExpression() {
    let localctx = new StringListNullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, _CypherParser.RULE_stringListNullOperatorExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2707;
      this.propertyOrLabelsExpression();
      this.state = 2761;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 360, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2759;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 359, this._ctx);
          switch (la_) {
            case 1:
              this.state = 2709;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2708;
                this.match(_CypherParser.SP);
              }
              this.state = 2711;
              this.match(_CypherParser.T__16);
              this.state = 2712;
              this.expression();
              this.state = 2713;
              this.match(_CypherParser.T__17);
              break;
            case 2:
              this.state = 2716;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2715;
                this.match(_CypherParser.SP);
              }
              this.state = 2718;
              this.match(_CypherParser.T__16);
              this.state = 2720;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << _CypherParser.T__2 | 1 << _CypherParser.T__12 | 1 << _CypherParser.T__13 | 1 << _CypherParser.T__16 | 1 << _CypherParser.T__19)) !== 0 || (_la - 34 & ~31) == 0 && (1 << _la - 34 & (1 << _CypherParser.T__33 - 34 | 1 << _CypherParser.CYPHER - 34 | 1 << _CypherParser.EXPLAIN - 34 | 1 << _CypherParser.PROFILE - 34 | 1 << _CypherParser.USING - 34 | 1 << _CypherParser.PERIODIC - 34 | 1 << _CypherParser.COMMIT - 34 | 1 << _CypherParser.UNION - 34 | 1 << _CypherParser.ALL - 34 | 1 << _CypherParser.CREATE - 34 | 1 << _CypherParser.DROP - 34 | 1 << _CypherParser.INDEX - 34 | 1 << _CypherParser.ON - 34)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << _CypherParser.CONSTRAINT - 66 | 1 << _CypherParser.ASSERT - 66 | 1 << _CypherParser.IS - 66 | 1 << _CypherParser.UNIQUE - 66 | 1 << _CypherParser.EXISTS - 66 | 1 << _CypherParser.LOAD - 66 | 1 << _CypherParser.CSV - 66 | 1 << _CypherParser.WITH - 66 | 1 << _CypherParser.HEADERS - 66 | 1 << _CypherParser.FROM - 66 | 1 << _CypherParser.AS - 66 | 1 << _CypherParser.FIELDTERMINATOR - 66 | 1 << _CypherParser.OPTIONAL - 66 | 1 << _CypherParser.MATCH - 66 | 1 << _CypherParser.UNWIND - 66 | 1 << _CypherParser.MERGE - 66 | 1 << _CypherParser.SET - 66 | 1 << _CypherParser.DETACH - 66 | 1 << _CypherParser.DELETE - 66 | 1 << _CypherParser.REMOVE - 66 | 1 << _CypherParser.FOREACH - 66 | 1 << _CypherParser.IN - 66 | 1 << _CypherParser.DISTINCT - 66 | 1 << _CypherParser.RETURN - 66 | 1 << _CypherParser.ORDER - 66 | 1 << _CypherParser.BY - 66 | 1 << _CypherParser.L_SKIP - 66 | 1 << _CypherParser.LIMIT - 66 | 1 << _CypherParser.ASCENDING - 66 | 1 << _CypherParser.ASC - 66 | 1 << _CypherParser.DESCENDING - 66 | 1 << _CypherParser.DESC - 66)) !== 0 || (_la - 98 & ~31) == 0 && (1 << _la - 98 & (1 << _CypherParser.JOIN - 98 | 1 << _CypherParser.SCAN - 98 | 1 << _CypherParser.START - 98 | 1 << _CypherParser.NODE - 98 | 1 << _CypherParser.RELATIONSHIP - 98 | 1 << _CypherParser.REL - 98 | 1 << _CypherParser.WHERE - 98 | 1 << _CypherParser.SHORTESTPATH - 98 | 1 << _CypherParser.ALLSHORTESTPATHS - 98 | 1 << _CypherParser.OR - 98 | 1 << _CypherParser.XOR - 98 | 1 << _CypherParser.AND - 98 | 1 << _CypherParser.NOT - 98 | 1 << _CypherParser.STARTS - 98 | 1 << _CypherParser.ENDS - 98 | 1 << _CypherParser.CONTAINS - 98 | 1 << _CypherParser.NULL - 98 | 1 << _CypherParser.COUNT - 98 | 1 << _CypherParser.FILTER - 98 | 1 << _CypherParser.EXTRACT - 98 | 1 << _CypherParser.ANY - 98 | 1 << _CypherParser.NONE - 98 | 1 << _CypherParser.SINGLE - 98 | 1 << _CypherParser.TRUE - 98 | 1 << _CypherParser.FALSE - 98 | 1 << _CypherParser.REDUCE - 98 | 1 << _CypherParser.CASE - 98 | 1 << _CypherParser.ELSE - 98 | 1 << _CypherParser.END - 98 | 1 << _CypherParser.WHEN - 98 | 1 << _CypherParser.THEN - 98 | 1 << _CypherParser.CALL - 98)) !== 0 || (_la - 130 & ~31) == 0 && (1 << _la - 130 & (1 << _CypherParser.YIELD - 130 | 1 << _CypherParser.KEY - 130 | 1 << _CypherParser.CATALOG - 130 | 1 << _CypherParser.SHOW - 130 | 1 << _CypherParser.DEFAULT - 130 | 1 << _CypherParser.DBMS - 130 | 1 << _CypherParser.DATABASE - 130 | 1 << _CypherParser.DATABASES - 130 | 1 << _CypherParser.GRAPH - 130 | 1 << _CypherParser.GRAPHS - 130 | 1 << _CypherParser.REPLACE - 130 | 1 << _CypherParser.IF - 130 | 1 << _CypherParser.STOP - 130 | 1 << _CypherParser.ROLE - 130 | 1 << _CypherParser.ROLES - 130 | 1 << _CypherParser.USER - 130 | 1 << _CypherParser.USERS - 130 | 1 << _CypherParser.POPULATED - 130 | 1 << _CypherParser.PASSWORD - 130 | 1 << _CypherParser.CHANGE - 130 | 1 << _CypherParser.REQUIRED - 130 | 1 << _CypherParser.STATUS - 130 | 1 << _CypherParser.ACTIVE - 130 | 1 << _CypherParser.SUSPENDED - 130 | 1 << _CypherParser.ALTER - 130 | 1 << _CypherParser.CURRENT - 130 | 1 << _CypherParser.TO - 130 | 1 << _CypherParser.PRIVILEGES - 130 | 1 << _CypherParser.GRANT - 130 | 1 << _CypherParser.DENY - 130 | 1 << _CypherParser.REVOKE - 130 | 1 << _CypherParser.RELATIONSHIPS - 130)) !== 0 || (_la - 162 & ~31) == 0 && (1 << _la - 162 & (1 << _CypherParser.NODES - 162 | 1 << _CypherParser.ELEMENT - 162 | 1 << _CypherParser.ELEMENTS - 162 | 1 << _CypherParser.COPY - 162 | 1 << _CypherParser.OF - 162 | 1 << _CypherParser.TRAVERSE - 162 | 1 << _CypherParser.READ - 162 | 1 << _CypherParser.WRITE - 162 | 1 << _CypherParser.ACCESS - 162 | 1 << _CypherParser.INDEXES - 162 | 1 << _CypherParser.MANAGEMENT - 162 | 1 << _CypherParser.NEW - 162 | 1 << _CypherParser.LABEL - 162 | 1 << _CypherParser.LABELS - 162 | 1 << _CypherParser.NAME - 162 | 1 << _CypherParser.NAMES - 162 | 1 << _CypherParser.TYPE - 162 | 1 << _CypherParser.TYPES - 162 | 1 << _CypherParser.PROPERTY - 162 | 1 << _CypherParser.CONSTRAINTS - 162 | 1 << _CypherParser.ASSIGN - 162 | 1 << _CypherParser.BTREE - 162 | 1 << _CypherParser.EXIST - 162 | 1 << _CypherParser.FOR - 162 | 1 << _CypherParser.OPTIONS - 162 | 1 << _CypherParser.EXECUTE - 162 | 1 << _CypherParser.DEFINED - 162 | 1 << _CypherParser.FUNCTION - 162 | 1 << _CypherParser.FUNCTIONS - 162 | 1 << _CypherParser.BOOSTED - 162 | 1 << _CypherParser.PROCEDURE - 162 | 1 << _CypherParser.PROCEDURES - 162)) !== 0 || (_la - 194 & ~31) == 0 && (1 << _la - 194 & (1 << _CypherParser.ADMIN - 194 | 1 << _CypherParser.ADMINISTRATOR - 194 | 1 << _CypherParser.BRIEF - 194 | 1 << _CypherParser.VERBOSE - 194 | 1 << _CypherParser.OUTPUT - 194 | 1 << _CypherParser.StringLiteral - 194 | 1 << _CypherParser.HexInteger - 194 | 1 << _CypherParser.DecimalInteger - 194 | 1 << _CypherParser.OctalInteger - 194 | 1 << _CypherParser.HexLetter - 194 | 1 << _CypherParser.ExponentDecimalReal - 194 | 1 << _CypherParser.RegularDecimalReal - 194 | 1 << _CypherParser.UnescapedSymbolicName - 194 | 1 << _CypherParser.EscapedSymbolicName - 194)) !== 0) {
                this.state = 2719;
                this.expression();
              }
              this.state = 2722;
              this.match(_CypherParser.T__23);
              this.state = 2724;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << _CypherParser.T__2 | 1 << _CypherParser.T__12 | 1 << _CypherParser.T__13 | 1 << _CypherParser.T__16 | 1 << _CypherParser.T__19)) !== 0 || (_la - 34 & ~31) == 0 && (1 << _la - 34 & (1 << _CypherParser.T__33 - 34 | 1 << _CypherParser.CYPHER - 34 | 1 << _CypherParser.EXPLAIN - 34 | 1 << _CypherParser.PROFILE - 34 | 1 << _CypherParser.USING - 34 | 1 << _CypherParser.PERIODIC - 34 | 1 << _CypherParser.COMMIT - 34 | 1 << _CypherParser.UNION - 34 | 1 << _CypherParser.ALL - 34 | 1 << _CypherParser.CREATE - 34 | 1 << _CypherParser.DROP - 34 | 1 << _CypherParser.INDEX - 34 | 1 << _CypherParser.ON - 34)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << _CypherParser.CONSTRAINT - 66 | 1 << _CypherParser.ASSERT - 66 | 1 << _CypherParser.IS - 66 | 1 << _CypherParser.UNIQUE - 66 | 1 << _CypherParser.EXISTS - 66 | 1 << _CypherParser.LOAD - 66 | 1 << _CypherParser.CSV - 66 | 1 << _CypherParser.WITH - 66 | 1 << _CypherParser.HEADERS - 66 | 1 << _CypherParser.FROM - 66 | 1 << _CypherParser.AS - 66 | 1 << _CypherParser.FIELDTERMINATOR - 66 | 1 << _CypherParser.OPTIONAL - 66 | 1 << _CypherParser.MATCH - 66 | 1 << _CypherParser.UNWIND - 66 | 1 << _CypherParser.MERGE - 66 | 1 << _CypherParser.SET - 66 | 1 << _CypherParser.DETACH - 66 | 1 << _CypherParser.DELETE - 66 | 1 << _CypherParser.REMOVE - 66 | 1 << _CypherParser.FOREACH - 66 | 1 << _CypherParser.IN - 66 | 1 << _CypherParser.DISTINCT - 66 | 1 << _CypherParser.RETURN - 66 | 1 << _CypherParser.ORDER - 66 | 1 << _CypherParser.BY - 66 | 1 << _CypherParser.L_SKIP - 66 | 1 << _CypherParser.LIMIT - 66 | 1 << _CypherParser.ASCENDING - 66 | 1 << _CypherParser.ASC - 66 | 1 << _CypherParser.DESCENDING - 66 | 1 << _CypherParser.DESC - 66)) !== 0 || (_la - 98 & ~31) == 0 && (1 << _la - 98 & (1 << _CypherParser.JOIN - 98 | 1 << _CypherParser.SCAN - 98 | 1 << _CypherParser.START - 98 | 1 << _CypherParser.NODE - 98 | 1 << _CypherParser.RELATIONSHIP - 98 | 1 << _CypherParser.REL - 98 | 1 << _CypherParser.WHERE - 98 | 1 << _CypherParser.SHORTESTPATH - 98 | 1 << _CypherParser.ALLSHORTESTPATHS - 98 | 1 << _CypherParser.OR - 98 | 1 << _CypherParser.XOR - 98 | 1 << _CypherParser.AND - 98 | 1 << _CypherParser.NOT - 98 | 1 << _CypherParser.STARTS - 98 | 1 << _CypherParser.ENDS - 98 | 1 << _CypherParser.CONTAINS - 98 | 1 << _CypherParser.NULL - 98 | 1 << _CypherParser.COUNT - 98 | 1 << _CypherParser.FILTER - 98 | 1 << _CypherParser.EXTRACT - 98 | 1 << _CypherParser.ANY - 98 | 1 << _CypherParser.NONE - 98 | 1 << _CypherParser.SINGLE - 98 | 1 << _CypherParser.TRUE - 98 | 1 << _CypherParser.FALSE - 98 | 1 << _CypherParser.REDUCE - 98 | 1 << _CypherParser.CASE - 98 | 1 << _CypherParser.ELSE - 98 | 1 << _CypherParser.END - 98 | 1 << _CypherParser.WHEN - 98 | 1 << _CypherParser.THEN - 98 | 1 << _CypherParser.CALL - 98)) !== 0 || (_la - 130 & ~31) == 0 && (1 << _la - 130 & (1 << _CypherParser.YIELD - 130 | 1 << _CypherParser.KEY - 130 | 1 << _CypherParser.CATALOG - 130 | 1 << _CypherParser.SHOW - 130 | 1 << _CypherParser.DEFAULT - 130 | 1 << _CypherParser.DBMS - 130 | 1 << _CypherParser.DATABASE - 130 | 1 << _CypherParser.DATABASES - 130 | 1 << _CypherParser.GRAPH - 130 | 1 << _CypherParser.GRAPHS - 130 | 1 << _CypherParser.REPLACE - 130 | 1 << _CypherParser.IF - 130 | 1 << _CypherParser.STOP - 130 | 1 << _CypherParser.ROLE - 130 | 1 << _CypherParser.ROLES - 130 | 1 << _CypherParser.USER - 130 | 1 << _CypherParser.USERS - 130 | 1 << _CypherParser.POPULATED - 130 | 1 << _CypherParser.PASSWORD - 130 | 1 << _CypherParser.CHANGE - 130 | 1 << _CypherParser.REQUIRED - 130 | 1 << _CypherParser.STATUS - 130 | 1 << _CypherParser.ACTIVE - 130 | 1 << _CypherParser.SUSPENDED - 130 | 1 << _CypherParser.ALTER - 130 | 1 << _CypherParser.CURRENT - 130 | 1 << _CypherParser.TO - 130 | 1 << _CypherParser.PRIVILEGES - 130 | 1 << _CypherParser.GRANT - 130 | 1 << _CypherParser.DENY - 130 | 1 << _CypherParser.REVOKE - 130 | 1 << _CypherParser.RELATIONSHIPS - 130)) !== 0 || (_la - 162 & ~31) == 0 && (1 << _la - 162 & (1 << _CypherParser.NODES - 162 | 1 << _CypherParser.ELEMENT - 162 | 1 << _CypherParser.ELEMENTS - 162 | 1 << _CypherParser.COPY - 162 | 1 << _CypherParser.OF - 162 | 1 << _CypherParser.TRAVERSE - 162 | 1 << _CypherParser.READ - 162 | 1 << _CypherParser.WRITE - 162 | 1 << _CypherParser.ACCESS - 162 | 1 << _CypherParser.INDEXES - 162 | 1 << _CypherParser.MANAGEMENT - 162 | 1 << _CypherParser.NEW - 162 | 1 << _CypherParser.LABEL - 162 | 1 << _CypherParser.LABELS - 162 | 1 << _CypherParser.NAME - 162 | 1 << _CypherParser.NAMES - 162 | 1 << _CypherParser.TYPE - 162 | 1 << _CypherParser.TYPES - 162 | 1 << _CypherParser.PROPERTY - 162 | 1 << _CypherParser.CONSTRAINTS - 162 | 1 << _CypherParser.ASSIGN - 162 | 1 << _CypherParser.BTREE - 162 | 1 << _CypherParser.EXIST - 162 | 1 << _CypherParser.FOR - 162 | 1 << _CypherParser.OPTIONS - 162 | 1 << _CypherParser.EXECUTE - 162 | 1 << _CypherParser.DEFINED - 162 | 1 << _CypherParser.FUNCTION - 162 | 1 << _CypherParser.FUNCTIONS - 162 | 1 << _CypherParser.BOOSTED - 162 | 1 << _CypherParser.PROCEDURE - 162 | 1 << _CypherParser.PROCEDURES - 162)) !== 0 || (_la - 194 & ~31) == 0 && (1 << _la - 194 & (1 << _CypherParser.ADMIN - 194 | 1 << _CypherParser.ADMINISTRATOR - 194 | 1 << _CypherParser.BRIEF - 194 | 1 << _CypherParser.VERBOSE - 194 | 1 << _CypherParser.OUTPUT - 194 | 1 << _CypherParser.StringLiteral - 194 | 1 << _CypherParser.HexInteger - 194 | 1 << _CypherParser.DecimalInteger - 194 | 1 << _CypherParser.OctalInteger - 194 | 1 << _CypherParser.HexLetter - 194 | 1 << _CypherParser.ExponentDecimalReal - 194 | 1 << _CypherParser.RegularDecimalReal - 194 | 1 << _CypherParser.UnescapedSymbolicName - 194 | 1 << _CypherParser.EscapedSymbolicName - 194)) !== 0) {
                this.state = 2723;
                this.expression();
              }
              this.state = 2726;
              this.match(_CypherParser.T__17);
              break;
            case 3:
              this.state = 2743;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 357, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 2728;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === _CypherParser.SP) {
                    this.state = 2727;
                    this.match(_CypherParser.SP);
                  }
                  this.state = 2730;
                  this.match(_CypherParser.T__26);
                  break;
                case 2:
                  this.state = 2731;
                  this.match(_CypherParser.SP);
                  this.state = 2732;
                  this.match(_CypherParser.IN);
                  break;
                case 3:
                  this.state = 2733;
                  this.match(_CypherParser.SP);
                  this.state = 2734;
                  this.match(_CypherParser.STARTS);
                  this.state = 2735;
                  this.match(_CypherParser.SP);
                  this.state = 2736;
                  this.match(_CypherParser.WITH);
                  break;
                case 4:
                  this.state = 2737;
                  this.match(_CypherParser.SP);
                  this.state = 2738;
                  this.match(_CypherParser.ENDS);
                  this.state = 2739;
                  this.match(_CypherParser.SP);
                  this.state = 2740;
                  this.match(_CypherParser.WITH);
                  break;
                case 5:
                  this.state = 2741;
                  this.match(_CypherParser.SP);
                  this.state = 2742;
                  this.match(_CypherParser.CONTAINS);
                  break;
              }
              this.state = 2746;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _CypherParser.SP) {
                this.state = 2745;
                this.match(_CypherParser.SP);
              }
              this.state = 2748;
              this.propertyOrLabelsExpression();
              break;
            case 4:
              this.state = 2749;
              this.match(_CypherParser.SP);
              this.state = 2750;
              this.match(_CypherParser.IS);
              this.state = 2751;
              this.match(_CypherParser.SP);
              this.state = 2752;
              this.match(_CypherParser.NULL);
              break;
            case 5:
              this.state = 2753;
              this.match(_CypherParser.SP);
              this.state = 2754;
              this.match(_CypherParser.IS);
              this.state = 2755;
              this.match(_CypherParser.SP);
              this.state = 2756;
              this.match(_CypherParser.NOT);
              this.state = 2757;
              this.match(_CypherParser.SP);
              this.state = 2758;
              this.match(_CypherParser.NULL);
              break;
          }
        }
        this.state = 2763;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 360, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyOrLabelsExpression() {
    let localctx = new PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, _CypherParser.RULE_propertyOrLabelsExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2764;
      this.atom();
      this.state = 2774;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 363, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2766;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2765;
            this.match(_CypherParser.SP);
          }
          this.state = 2770;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case _CypherParser.T__6:
              this.state = 2768;
              this.propertyLookup();
              break;
            case _CypherParser.T__1:
              this.state = 2769;
              this.nodeLabels();
              break;
            default:
              throw new es_default.error.NoViableAltException(this);
          }
        }
        this.state = 2776;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 363, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  filterFunction() {
    let localctx = new FilterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, _CypherParser.RULE_filterFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2777;
      this.filterFunctionName();
      this.state = 2779;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2778;
        this.match(_CypherParser.SP);
      }
      this.state = 2781;
      this.match(_CypherParser.T__19);
      this.state = 2783;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2782;
        this.match(_CypherParser.SP);
      }
      this.state = 2785;
      this.filterExpression();
      this.state = 2787;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2786;
        this.match(_CypherParser.SP);
      }
      this.state = 2789;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  filterFunctionName() {
    let localctx = new FilterFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, _CypherParser.RULE_filterFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2791;
      this.match(_CypherParser.FILTER);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  existsFunction() {
    let localctx = new ExistsFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, _CypherParser.RULE_existsFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2793;
      this.existsFunctionName();
      this.state = 2795;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2794;
        this.match(_CypherParser.SP);
      }
      this.state = 2797;
      this.match(_CypherParser.T__19);
      this.state = 2799;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2798;
        this.match(_CypherParser.SP);
      }
      this.state = 2801;
      this.expression();
      this.state = 2803;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2802;
        this.match(_CypherParser.SP);
      }
      this.state = 2805;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  existsFunctionName() {
    let localctx = new ExistsFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, _CypherParser.RULE_existsFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2807;
      this.match(_CypherParser.EXISTS);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  allFunction() {
    let localctx = new AllFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, _CypherParser.RULE_allFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2809;
      this.allFunctionName();
      this.state = 2811;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2810;
        this.match(_CypherParser.SP);
      }
      this.state = 2813;
      this.match(_CypherParser.T__19);
      this.state = 2815;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2814;
        this.match(_CypherParser.SP);
      }
      this.state = 2817;
      this.filterExpression();
      this.state = 2819;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2818;
        this.match(_CypherParser.SP);
      }
      this.state = 2821;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  allFunctionName() {
    let localctx = new AllFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, _CypherParser.RULE_allFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2823;
      this.match(_CypherParser.ALL);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  anyFunction() {
    let localctx = new AnyFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, _CypherParser.RULE_anyFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2825;
      this.anyFunctionName();
      this.state = 2827;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2826;
        this.match(_CypherParser.SP);
      }
      this.state = 2829;
      this.match(_CypherParser.T__19);
      this.state = 2831;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2830;
        this.match(_CypherParser.SP);
      }
      this.state = 2833;
      this.filterExpression();
      this.state = 2835;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2834;
        this.match(_CypherParser.SP);
      }
      this.state = 2837;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  anyFunctionName() {
    let localctx = new AnyFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, _CypherParser.RULE_anyFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2839;
      this.match(_CypherParser.ANY);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noneFunction() {
    let localctx = new NoneFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, _CypherParser.RULE_noneFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2841;
      this.noneFunctionName();
      this.state = 2843;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2842;
        this.match(_CypherParser.SP);
      }
      this.state = 2845;
      this.match(_CypherParser.T__19);
      this.state = 2847;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2846;
        this.match(_CypherParser.SP);
      }
      this.state = 2849;
      this.filterExpression();
      this.state = 2851;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2850;
        this.match(_CypherParser.SP);
      }
      this.state = 2853;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noneFunctionName() {
    let localctx = new NoneFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, _CypherParser.RULE_noneFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2855;
      this.match(_CypherParser.NONE);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  singleFunction() {
    let localctx = new SingleFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, _CypherParser.RULE_singleFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2857;
      this.singleFunctionName();
      this.state = 2859;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2858;
        this.match(_CypherParser.SP);
      }
      this.state = 2861;
      this.match(_CypherParser.T__19);
      this.state = 2863;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2862;
        this.match(_CypherParser.SP);
      }
      this.state = 2865;
      this.filterExpression();
      this.state = 2867;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2866;
        this.match(_CypherParser.SP);
      }
      this.state = 2869;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  singleFunctionName() {
    let localctx = new SingleFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, _CypherParser.RULE_singleFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2871;
      this.match(_CypherParser.SINGLE);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  extractFunction() {
    let localctx = new ExtractFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, _CypherParser.RULE_extractFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2873;
      this.extractFunctionName();
      this.state = 2875;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2874;
        this.match(_CypherParser.SP);
      }
      this.state = 2877;
      this.match(_CypherParser.T__19);
      this.state = 2879;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2878;
        this.match(_CypherParser.SP);
      }
      this.state = 2881;
      this.filterExpression();
      this.state = 2890;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 386, this._ctx);
      if (la_ === 1) {
        this.state = 2883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2882;
          this.match(_CypherParser.SP);
        }
        this.state = 2885;
        this.match(_CypherParser.T__22);
        this.state = 2887;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 2886;
          this.match(_CypherParser.SP);
        }
        this.state = 2889;
        this.expression();
      }
      this.state = 2893;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2892;
        this.match(_CypherParser.SP);
      }
      this.state = 2895;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  extractFunctionName() {
    let localctx = new ExtractFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, _CypherParser.RULE_extractFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2897;
      this.match(_CypherParser.EXTRACT);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  reduceFunction() {
    let localctx = new ReduceFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, _CypherParser.RULE_reduceFunction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2899;
      this.reduceFunctionName();
      this.state = 2901;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2900;
        this.match(_CypherParser.SP);
      }
      this.state = 2903;
      this.match(_CypherParser.T__19);
      this.state = 2905;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2904;
        this.match(_CypherParser.SP);
      }
      this.state = 2907;
      this.variable();
      this.state = 2909;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2908;
        this.match(_CypherParser.SP);
      }
      this.state = 2911;
      this.match(_CypherParser.T__11);
      this.state = 2913;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2912;
        this.match(_CypherParser.SP);
      }
      this.state = 2915;
      this.expression();
      this.state = 2917;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2916;
        this.match(_CypherParser.SP);
      }
      this.state = 2919;
      this.match(_CypherParser.T__14);
      this.state = 2921;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2920;
        this.match(_CypherParser.SP);
      }
      this.state = 2923;
      this.idInColl();
      this.state = 2925;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2924;
        this.match(_CypherParser.SP);
      }
      this.state = 2927;
      this.match(_CypherParser.T__22);
      this.state = 2929;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2928;
        this.match(_CypherParser.SP);
      }
      this.state = 2931;
      this.expression();
      this.state = 2933;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 2932;
        this.match(_CypherParser.SP);
      }
      this.state = 2935;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  reduceFunctionName() {
    let localctx = new ReduceFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, _CypherParser.RULE_reduceFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2937;
      this.match(_CypherParser.REDUCE);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  shortestPathPatternFunction() {
    let localctx = new ShortestPathPatternFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, _CypherParser.RULE_shortestPathPatternFunction);
    var _la = 0;
    try {
      this.state = 2967;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.SHORTESTPATH:
          this.enterOuterAlt(localctx, 1);
          this.state = 2939;
          this.shortestPathFunctionName();
          this.state = 2941;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2940;
            this.match(_CypherParser.SP);
          }
          this.state = 2943;
          this.match(_CypherParser.T__19);
          this.state = 2945;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2944;
            this.match(_CypherParser.SP);
          }
          this.state = 2947;
          this.patternElement();
          this.state = 2949;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2948;
            this.match(_CypherParser.SP);
          }
          this.state = 2951;
          this.match(_CypherParser.T__20);
          break;
        case _CypherParser.ALLSHORTESTPATHS:
          this.enterOuterAlt(localctx, 2);
          this.state = 2953;
          this.allShortestPathFunctionName();
          this.state = 2955;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2954;
            this.match(_CypherParser.SP);
          }
          this.state = 2957;
          this.match(_CypherParser.T__19);
          this.state = 2959;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2958;
            this.match(_CypherParser.SP);
          }
          this.state = 2961;
          this.patternElement();
          this.state = 2963;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2962;
            this.match(_CypherParser.SP);
          }
          this.state = 2965;
          this.match(_CypherParser.T__20);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  shortestPathFunctionName() {
    let localctx = new ShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, _CypherParser.RULE_shortestPathFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2969;
      this.match(_CypherParser.SHORTESTPATH);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  allShortestPathFunctionName() {
    let localctx = new AllShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, _CypherParser.RULE_allShortestPathFunctionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2971;
      this.match(_CypherParser.ALLSHORTESTPATHS);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  atom() {
    let localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, _CypherParser.RULE_atom);
    var _la = 0;
    try {
      this.state = 3004;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 407, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2973;
          this.literal();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2974;
          this.parameter();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2975;
          this.caseExpression();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2976;
          this.match(_CypherParser.COUNT);
          this.state = 2978;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2977;
            this.match(_CypherParser.SP);
          }
          this.state = 2980;
          this.match(_CypherParser.T__19);
          this.state = 2982;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2981;
            this.match(_CypherParser.SP);
          }
          this.state = 2984;
          this.match(_CypherParser.T__18);
          this.state = 2986;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 2985;
            this.match(_CypherParser.SP);
          }
          this.state = 2988;
          this.match(_CypherParser.T__20);
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2989;
          this.listComprehension();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2990;
          this.patternComprehension();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2991;
          this.filterFunction();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2992;
          this.extractFunction();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2993;
          this.reduceFunction();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 2994;
          this.allFunction();
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 2995;
          this.anyFunction();
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 2996;
          this.noneFunction();
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 2997;
          this.singleFunction();
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 2998;
          this.existsFunction();
          break;
        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 2999;
          this.shortestPathPatternFunction();
          break;
        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 3e3;
          this.relationshipsPattern();
          break;
        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 3001;
          this.parenthesizedExpression();
          break;
        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 3002;
          this.functionInvocation();
          break;
        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 3003;
          this.variable();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, _CypherParser.RULE_literal);
    try {
      this.state = 3013;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 408, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3006;
          this.numberLiteral();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3007;
          this.stringLiteral();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 3008;
          this.booleanLiteral();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 3009;
          this.match(_CypherParser.NULL);
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 3010;
          this.mapLiteral();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 3011;
          this.listLiteral();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 3012;
          this.mapProjection();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  stringLiteral() {
    let localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, _CypherParser.RULE_stringLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3015;
      this.match(_CypherParser.StringLiteral);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  booleanLiteral() {
    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, _CypherParser.RULE_booleanLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3017;
      _la = this._input.LA(1);
      if (!(_la === _CypherParser.TRUE || _la === _CypherParser.FALSE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  listLiteral() {
    let localctx = new ListLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, _CypherParser.RULE_listLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3019;
      this.match(_CypherParser.T__16);
      this.state = 3021;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3020;
        this.match(_CypherParser.SP);
      }
      this.state = 3040;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << _CypherParser.T__2 | 1 << _CypherParser.T__12 | 1 << _CypherParser.T__13 | 1 << _CypherParser.T__16 | 1 << _CypherParser.T__19)) !== 0 || (_la - 34 & ~31) == 0 && (1 << _la - 34 & (1 << _CypherParser.T__33 - 34 | 1 << _CypherParser.CYPHER - 34 | 1 << _CypherParser.EXPLAIN - 34 | 1 << _CypherParser.PROFILE - 34 | 1 << _CypherParser.USING - 34 | 1 << _CypherParser.PERIODIC - 34 | 1 << _CypherParser.COMMIT - 34 | 1 << _CypherParser.UNION - 34 | 1 << _CypherParser.ALL - 34 | 1 << _CypherParser.CREATE - 34 | 1 << _CypherParser.DROP - 34 | 1 << _CypherParser.INDEX - 34 | 1 << _CypherParser.ON - 34)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << _CypherParser.CONSTRAINT - 66 | 1 << _CypherParser.ASSERT - 66 | 1 << _CypherParser.IS - 66 | 1 << _CypherParser.UNIQUE - 66 | 1 << _CypherParser.EXISTS - 66 | 1 << _CypherParser.LOAD - 66 | 1 << _CypherParser.CSV - 66 | 1 << _CypherParser.WITH - 66 | 1 << _CypherParser.HEADERS - 66 | 1 << _CypherParser.FROM - 66 | 1 << _CypherParser.AS - 66 | 1 << _CypherParser.FIELDTERMINATOR - 66 | 1 << _CypherParser.OPTIONAL - 66 | 1 << _CypherParser.MATCH - 66 | 1 << _CypherParser.UNWIND - 66 | 1 << _CypherParser.MERGE - 66 | 1 << _CypherParser.SET - 66 | 1 << _CypherParser.DETACH - 66 | 1 << _CypherParser.DELETE - 66 | 1 << _CypherParser.REMOVE - 66 | 1 << _CypherParser.FOREACH - 66 | 1 << _CypherParser.IN - 66 | 1 << _CypherParser.DISTINCT - 66 | 1 << _CypherParser.RETURN - 66 | 1 << _CypherParser.ORDER - 66 | 1 << _CypherParser.BY - 66 | 1 << _CypherParser.L_SKIP - 66 | 1 << _CypherParser.LIMIT - 66 | 1 << _CypherParser.ASCENDING - 66 | 1 << _CypherParser.ASC - 66 | 1 << _CypherParser.DESCENDING - 66 | 1 << _CypherParser.DESC - 66)) !== 0 || (_la - 98 & ~31) == 0 && (1 << _la - 98 & (1 << _CypherParser.JOIN - 98 | 1 << _CypherParser.SCAN - 98 | 1 << _CypherParser.START - 98 | 1 << _CypherParser.NODE - 98 | 1 << _CypherParser.RELATIONSHIP - 98 | 1 << _CypherParser.REL - 98 | 1 << _CypherParser.WHERE - 98 | 1 << _CypherParser.SHORTESTPATH - 98 | 1 << _CypherParser.ALLSHORTESTPATHS - 98 | 1 << _CypherParser.OR - 98 | 1 << _CypherParser.XOR - 98 | 1 << _CypherParser.AND - 98 | 1 << _CypherParser.NOT - 98 | 1 << _CypherParser.STARTS - 98 | 1 << _CypherParser.ENDS - 98 | 1 << _CypherParser.CONTAINS - 98 | 1 << _CypherParser.NULL - 98 | 1 << _CypherParser.COUNT - 98 | 1 << _CypherParser.FILTER - 98 | 1 << _CypherParser.EXTRACT - 98 | 1 << _CypherParser.ANY - 98 | 1 << _CypherParser.NONE - 98 | 1 << _CypherParser.SINGLE - 98 | 1 << _CypherParser.TRUE - 98 | 1 << _CypherParser.FALSE - 98 | 1 << _CypherParser.REDUCE - 98 | 1 << _CypherParser.CASE - 98 | 1 << _CypherParser.ELSE - 98 | 1 << _CypherParser.END - 98 | 1 << _CypherParser.WHEN - 98 | 1 << _CypherParser.THEN - 98 | 1 << _CypherParser.CALL - 98)) !== 0 || (_la - 130 & ~31) == 0 && (1 << _la - 130 & (1 << _CypherParser.YIELD - 130 | 1 << _CypherParser.KEY - 130 | 1 << _CypherParser.CATALOG - 130 | 1 << _CypherParser.SHOW - 130 | 1 << _CypherParser.DEFAULT - 130 | 1 << _CypherParser.DBMS - 130 | 1 << _CypherParser.DATABASE - 130 | 1 << _CypherParser.DATABASES - 130 | 1 << _CypherParser.GRAPH - 130 | 1 << _CypherParser.GRAPHS - 130 | 1 << _CypherParser.REPLACE - 130 | 1 << _CypherParser.IF - 130 | 1 << _CypherParser.STOP - 130 | 1 << _CypherParser.ROLE - 130 | 1 << _CypherParser.ROLES - 130 | 1 << _CypherParser.USER - 130 | 1 << _CypherParser.USERS - 130 | 1 << _CypherParser.POPULATED - 130 | 1 << _CypherParser.PASSWORD - 130 | 1 << _CypherParser.CHANGE - 130 | 1 << _CypherParser.REQUIRED - 130 | 1 << _CypherParser.STATUS - 130 | 1 << _CypherParser.ACTIVE - 130 | 1 << _CypherParser.SUSPENDED - 130 | 1 << _CypherParser.ALTER - 130 | 1 << _CypherParser.CURRENT - 130 | 1 << _CypherParser.TO - 130 | 1 << _CypherParser.PRIVILEGES - 130 | 1 << _CypherParser.GRANT - 130 | 1 << _CypherParser.DENY - 130 | 1 << _CypherParser.REVOKE - 130 | 1 << _CypherParser.RELATIONSHIPS - 130)) !== 0 || (_la - 162 & ~31) == 0 && (1 << _la - 162 & (1 << _CypherParser.NODES - 162 | 1 << _CypherParser.ELEMENT - 162 | 1 << _CypherParser.ELEMENTS - 162 | 1 << _CypherParser.COPY - 162 | 1 << _CypherParser.OF - 162 | 1 << _CypherParser.TRAVERSE - 162 | 1 << _CypherParser.READ - 162 | 1 << _CypherParser.WRITE - 162 | 1 << _CypherParser.ACCESS - 162 | 1 << _CypherParser.INDEXES - 162 | 1 << _CypherParser.MANAGEMENT - 162 | 1 << _CypherParser.NEW - 162 | 1 << _CypherParser.LABEL - 162 | 1 << _CypherParser.LABELS - 162 | 1 << _CypherParser.NAME - 162 | 1 << _CypherParser.NAMES - 162 | 1 << _CypherParser.TYPE - 162 | 1 << _CypherParser.TYPES - 162 | 1 << _CypherParser.PROPERTY - 162 | 1 << _CypherParser.CONSTRAINTS - 162 | 1 << _CypherParser.ASSIGN - 162 | 1 << _CypherParser.BTREE - 162 | 1 << _CypherParser.EXIST - 162 | 1 << _CypherParser.FOR - 162 | 1 << _CypherParser.OPTIONS - 162 | 1 << _CypherParser.EXECUTE - 162 | 1 << _CypherParser.DEFINED - 162 | 1 << _CypherParser.FUNCTION - 162 | 1 << _CypherParser.FUNCTIONS - 162 | 1 << _CypherParser.BOOSTED - 162 | 1 << _CypherParser.PROCEDURE - 162 | 1 << _CypherParser.PROCEDURES - 162)) !== 0 || (_la - 194 & ~31) == 0 && (1 << _la - 194 & (1 << _CypherParser.ADMIN - 194 | 1 << _CypherParser.ADMINISTRATOR - 194 | 1 << _CypherParser.BRIEF - 194 | 1 << _CypherParser.VERBOSE - 194 | 1 << _CypherParser.OUTPUT - 194 | 1 << _CypherParser.StringLiteral - 194 | 1 << _CypherParser.HexInteger - 194 | 1 << _CypherParser.DecimalInteger - 194 | 1 << _CypherParser.OctalInteger - 194 | 1 << _CypherParser.HexLetter - 194 | 1 << _CypherParser.ExponentDecimalReal - 194 | 1 << _CypherParser.RegularDecimalReal - 194 | 1 << _CypherParser.UnescapedSymbolicName - 194 | 1 << _CypherParser.EscapedSymbolicName - 194)) !== 0) {
        this.state = 3023;
        this.expression();
        this.state = 3025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3024;
          this.match(_CypherParser.SP);
        }
        this.state = 3037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _CypherParser.T__14) {
          this.state = 3027;
          this.match(_CypherParser.T__14);
          this.state = 3029;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3028;
            this.match(_CypherParser.SP);
          }
          this.state = 3031;
          this.expression();
          this.state = 3033;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3032;
            this.match(_CypherParser.SP);
          }
          this.state = 3039;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
      this.state = 3042;
      this.match(_CypherParser.T__17);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  partialComparisonExpression() {
    let localctx = new PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, _CypherParser.RULE_partialComparisonExpression);
    var _la = 0;
    try {
      this.state = 3079;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.T__11:
          this.enterOuterAlt(localctx, 1);
          this.state = 3044;
          this.match(_CypherParser.T__11);
          this.state = 3046;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3045;
            this.match(_CypherParser.SP);
          }
          this.state = 3048;
          this.addOrSubtractExpression();
          break;
        case _CypherParser.T__27:
          this.enterOuterAlt(localctx, 2);
          this.state = 3049;
          this.match(_CypherParser.T__27);
          this.state = 3051;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3050;
            this.match(_CypherParser.SP);
          }
          this.state = 3053;
          this.addOrSubtractExpression();
          break;
        case _CypherParser.T__28:
          this.enterOuterAlt(localctx, 3);
          this.state = 3054;
          this.match(_CypherParser.T__28);
          this.state = 3056;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3055;
            this.match(_CypherParser.SP);
          }
          this.state = 3058;
          this.addOrSubtractExpression();
          break;
        case _CypherParser.T__29:
          this.enterOuterAlt(localctx, 4);
          this.state = 3059;
          this.match(_CypherParser.T__29);
          this.state = 3061;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3060;
            this.match(_CypherParser.SP);
          }
          this.state = 3063;
          this.addOrSubtractExpression();
          break;
        case _CypherParser.T__30:
          this.enterOuterAlt(localctx, 5);
          this.state = 3064;
          this.match(_CypherParser.T__30);
          this.state = 3066;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3065;
            this.match(_CypherParser.SP);
          }
          this.state = 3068;
          this.addOrSubtractExpression();
          break;
        case _CypherParser.T__31:
          this.enterOuterAlt(localctx, 6);
          this.state = 3069;
          this.match(_CypherParser.T__31);
          this.state = 3071;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3070;
            this.match(_CypherParser.SP);
          }
          this.state = 3073;
          this.addOrSubtractExpression();
          break;
        case _CypherParser.T__32:
          this.enterOuterAlt(localctx, 7);
          this.state = 3074;
          this.match(_CypherParser.T__32);
          this.state = 3076;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3075;
            this.match(_CypherParser.SP);
          }
          this.state = 3078;
          this.addOrSubtractExpression();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  parenthesizedExpression() {
    let localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, _CypherParser.RULE_parenthesizedExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3081;
      this.match(_CypherParser.T__19);
      this.state = 3083;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3082;
        this.match(_CypherParser.SP);
      }
      this.state = 3085;
      this.expression();
      this.state = 3087;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3086;
        this.match(_CypherParser.SP);
      }
      this.state = 3089;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationshipsPattern() {
    let localctx = new RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, _CypherParser.RULE_relationshipsPattern);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3091;
      this.nodePattern();
      this.state = 3096;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 3093;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.SP) {
              this.state = 3092;
              this.match(_CypherParser.SP);
            }
            this.state = 3095;
            this.patternElementChain();
            break;
          default:
            throw new es_default.error.NoViableAltException(this);
        }
        this.state = 3098;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 426, this._ctx);
      } while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  filterExpression() {
    let localctx = new FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, _CypherParser.RULE_filterExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3100;
      this.idInColl();
      this.state = 3105;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 428, this._ctx);
      if (la_ === 1) {
        this.state = 3102;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3101;
          this.match(_CypherParser.SP);
        }
        this.state = 3104;
        this.where();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  idInColl() {
    let localctx = new IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, _CypherParser.RULE_idInColl);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3107;
      this.variable();
      this.state = 3108;
      this.match(_CypherParser.SP);
      this.state = 3109;
      this.match(_CypherParser.IN);
      this.state = 3110;
      this.match(_CypherParser.SP);
      this.state = 3111;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionInvocation() {
    let localctx = new FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, _CypherParser.RULE_functionInvocation);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3113;
      this.functionInvocationBody();
      this.state = 3115;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3114;
        this.match(_CypherParser.SP);
      }
      this.state = 3117;
      this.match(_CypherParser.T__19);
      this.state = 3119;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3118;
        this.match(_CypherParser.SP);
      }
      this.state = 3125;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 432, this._ctx);
      if (la_ === 1) {
        this.state = 3121;
        this.match(_CypherParser.DISTINCT);
        this.state = 3123;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3122;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 3144;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << _CypherParser.T__2 | 1 << _CypherParser.T__12 | 1 << _CypherParser.T__13 | 1 << _CypherParser.T__16 | 1 << _CypherParser.T__19)) !== 0 || (_la - 34 & ~31) == 0 && (1 << _la - 34 & (1 << _CypherParser.T__33 - 34 | 1 << _CypherParser.CYPHER - 34 | 1 << _CypherParser.EXPLAIN - 34 | 1 << _CypherParser.PROFILE - 34 | 1 << _CypherParser.USING - 34 | 1 << _CypherParser.PERIODIC - 34 | 1 << _CypherParser.COMMIT - 34 | 1 << _CypherParser.UNION - 34 | 1 << _CypherParser.ALL - 34 | 1 << _CypherParser.CREATE - 34 | 1 << _CypherParser.DROP - 34 | 1 << _CypherParser.INDEX - 34 | 1 << _CypherParser.ON - 34)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << _CypherParser.CONSTRAINT - 66 | 1 << _CypherParser.ASSERT - 66 | 1 << _CypherParser.IS - 66 | 1 << _CypherParser.UNIQUE - 66 | 1 << _CypherParser.EXISTS - 66 | 1 << _CypherParser.LOAD - 66 | 1 << _CypherParser.CSV - 66 | 1 << _CypherParser.WITH - 66 | 1 << _CypherParser.HEADERS - 66 | 1 << _CypherParser.FROM - 66 | 1 << _CypherParser.AS - 66 | 1 << _CypherParser.FIELDTERMINATOR - 66 | 1 << _CypherParser.OPTIONAL - 66 | 1 << _CypherParser.MATCH - 66 | 1 << _CypherParser.UNWIND - 66 | 1 << _CypherParser.MERGE - 66 | 1 << _CypherParser.SET - 66 | 1 << _CypherParser.DETACH - 66 | 1 << _CypherParser.DELETE - 66 | 1 << _CypherParser.REMOVE - 66 | 1 << _CypherParser.FOREACH - 66 | 1 << _CypherParser.IN - 66 | 1 << _CypherParser.DISTINCT - 66 | 1 << _CypherParser.RETURN - 66 | 1 << _CypherParser.ORDER - 66 | 1 << _CypherParser.BY - 66 | 1 << _CypherParser.L_SKIP - 66 | 1 << _CypherParser.LIMIT - 66 | 1 << _CypherParser.ASCENDING - 66 | 1 << _CypherParser.ASC - 66 | 1 << _CypherParser.DESCENDING - 66 | 1 << _CypherParser.DESC - 66)) !== 0 || (_la - 98 & ~31) == 0 && (1 << _la - 98 & (1 << _CypherParser.JOIN - 98 | 1 << _CypherParser.SCAN - 98 | 1 << _CypherParser.START - 98 | 1 << _CypherParser.NODE - 98 | 1 << _CypherParser.RELATIONSHIP - 98 | 1 << _CypherParser.REL - 98 | 1 << _CypherParser.WHERE - 98 | 1 << _CypherParser.SHORTESTPATH - 98 | 1 << _CypherParser.ALLSHORTESTPATHS - 98 | 1 << _CypherParser.OR - 98 | 1 << _CypherParser.XOR - 98 | 1 << _CypherParser.AND - 98 | 1 << _CypherParser.NOT - 98 | 1 << _CypherParser.STARTS - 98 | 1 << _CypherParser.ENDS - 98 | 1 << _CypherParser.CONTAINS - 98 | 1 << _CypherParser.NULL - 98 | 1 << _CypherParser.COUNT - 98 | 1 << _CypherParser.FILTER - 98 | 1 << _CypherParser.EXTRACT - 98 | 1 << _CypherParser.ANY - 98 | 1 << _CypherParser.NONE - 98 | 1 << _CypherParser.SINGLE - 98 | 1 << _CypherParser.TRUE - 98 | 1 << _CypherParser.FALSE - 98 | 1 << _CypherParser.REDUCE - 98 | 1 << _CypherParser.CASE - 98 | 1 << _CypherParser.ELSE - 98 | 1 << _CypherParser.END - 98 | 1 << _CypherParser.WHEN - 98 | 1 << _CypherParser.THEN - 98 | 1 << _CypherParser.CALL - 98)) !== 0 || (_la - 130 & ~31) == 0 && (1 << _la - 130 & (1 << _CypherParser.YIELD - 130 | 1 << _CypherParser.KEY - 130 | 1 << _CypherParser.CATALOG - 130 | 1 << _CypherParser.SHOW - 130 | 1 << _CypherParser.DEFAULT - 130 | 1 << _CypherParser.DBMS - 130 | 1 << _CypherParser.DATABASE - 130 | 1 << _CypherParser.DATABASES - 130 | 1 << _CypherParser.GRAPH - 130 | 1 << _CypherParser.GRAPHS - 130 | 1 << _CypherParser.REPLACE - 130 | 1 << _CypherParser.IF - 130 | 1 << _CypherParser.STOP - 130 | 1 << _CypherParser.ROLE - 130 | 1 << _CypherParser.ROLES - 130 | 1 << _CypherParser.USER - 130 | 1 << _CypherParser.USERS - 130 | 1 << _CypherParser.POPULATED - 130 | 1 << _CypherParser.PASSWORD - 130 | 1 << _CypherParser.CHANGE - 130 | 1 << _CypherParser.REQUIRED - 130 | 1 << _CypherParser.STATUS - 130 | 1 << _CypherParser.ACTIVE - 130 | 1 << _CypherParser.SUSPENDED - 130 | 1 << _CypherParser.ALTER - 130 | 1 << _CypherParser.CURRENT - 130 | 1 << _CypherParser.TO - 130 | 1 << _CypherParser.PRIVILEGES - 130 | 1 << _CypherParser.GRANT - 130 | 1 << _CypherParser.DENY - 130 | 1 << _CypherParser.REVOKE - 130 | 1 << _CypherParser.RELATIONSHIPS - 130)) !== 0 || (_la - 162 & ~31) == 0 && (1 << _la - 162 & (1 << _CypherParser.NODES - 162 | 1 << _CypherParser.ELEMENT - 162 | 1 << _CypherParser.ELEMENTS - 162 | 1 << _CypherParser.COPY - 162 | 1 << _CypherParser.OF - 162 | 1 << _CypherParser.TRAVERSE - 162 | 1 << _CypherParser.READ - 162 | 1 << _CypherParser.WRITE - 162 | 1 << _CypherParser.ACCESS - 162 | 1 << _CypherParser.INDEXES - 162 | 1 << _CypherParser.MANAGEMENT - 162 | 1 << _CypherParser.NEW - 162 | 1 << _CypherParser.LABEL - 162 | 1 << _CypherParser.LABELS - 162 | 1 << _CypherParser.NAME - 162 | 1 << _CypherParser.NAMES - 162 | 1 << _CypherParser.TYPE - 162 | 1 << _CypherParser.TYPES - 162 | 1 << _CypherParser.PROPERTY - 162 | 1 << _CypherParser.CONSTRAINTS - 162 | 1 << _CypherParser.ASSIGN - 162 | 1 << _CypherParser.BTREE - 162 | 1 << _CypherParser.EXIST - 162 | 1 << _CypherParser.FOR - 162 | 1 << _CypherParser.OPTIONS - 162 | 1 << _CypherParser.EXECUTE - 162 | 1 << _CypherParser.DEFINED - 162 | 1 << _CypherParser.FUNCTION - 162 | 1 << _CypherParser.FUNCTIONS - 162 | 1 << _CypherParser.BOOSTED - 162 | 1 << _CypherParser.PROCEDURE - 162 | 1 << _CypherParser.PROCEDURES - 162)) !== 0 || (_la - 194 & ~31) == 0 && (1 << _la - 194 & (1 << _CypherParser.ADMIN - 194 | 1 << _CypherParser.ADMINISTRATOR - 194 | 1 << _CypherParser.BRIEF - 194 | 1 << _CypherParser.VERBOSE - 194 | 1 << _CypherParser.OUTPUT - 194 | 1 << _CypherParser.StringLiteral - 194 | 1 << _CypherParser.HexInteger - 194 | 1 << _CypherParser.DecimalInteger - 194 | 1 << _CypherParser.OctalInteger - 194 | 1 << _CypherParser.HexLetter - 194 | 1 << _CypherParser.ExponentDecimalReal - 194 | 1 << _CypherParser.RegularDecimalReal - 194 | 1 << _CypherParser.UnescapedSymbolicName - 194 | 1 << _CypherParser.EscapedSymbolicName - 194)) !== 0) {
        this.state = 3127;
        this.expression();
        this.state = 3129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3128;
          this.match(_CypherParser.SP);
        }
        this.state = 3141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _CypherParser.T__14) {
          this.state = 3131;
          this.match(_CypherParser.T__14);
          this.state = 3133;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3132;
            this.match(_CypherParser.SP);
          }
          this.state = 3135;
          this.expression();
          this.state = 3137;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3136;
            this.match(_CypherParser.SP);
          }
          this.state = 3143;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
      this.state = 3146;
      this.match(_CypherParser.T__20);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionInvocationBody() {
    let localctx = new FunctionInvocationBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, _CypherParser.RULE_functionInvocationBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3148;
      this.namespace();
      this.state = 3149;
      this.functionName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionName() {
    let localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, _CypherParser.RULE_functionName);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3151;
      _la = this._input.LA(1);
      if (!(_la === _CypherParser.COUNT || _la === _CypherParser.UnescapedSymbolicName || _la === _CypherParser.EscapedSymbolicName)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  procedureName() {
    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, _CypherParser.RULE_procedureName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3153;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  listComprehension() {
    let localctx = new ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, _CypherParser.RULE_listComprehension);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3155;
      this.match(_CypherParser.T__16);
      this.state = 3157;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3156;
        this.match(_CypherParser.SP);
      }
      this.state = 3159;
      this.filterExpression();
      this.state = 3168;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 441, this._ctx);
      if (la_ === 1) {
        this.state = 3161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3160;
          this.match(_CypherParser.SP);
        }
        this.state = 3163;
        this.match(_CypherParser.T__22);
        this.state = 3165;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3164;
          this.match(_CypherParser.SP);
        }
        this.state = 3167;
        this.expression();
      }
      this.state = 3171;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3170;
        this.match(_CypherParser.SP);
      }
      this.state = 3173;
      this.match(_CypherParser.T__17);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  patternComprehension() {
    let localctx = new PatternComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, _CypherParser.RULE_patternComprehension);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3175;
      this.match(_CypherParser.T__16);
      this.state = 3177;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3176;
        this.match(_CypherParser.SP);
      }
      this.state = 3187;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54 | 1 << _CypherParser.USING - 54 | 1 << _CypherParser.PERIODIC - 54 | 1 << _CypherParser.COMMIT - 54 | 1 << _CypherParser.UNION - 54 | 1 << _CypherParser.ALL - 54 | 1 << _CypherParser.CREATE - 54 | 1 << _CypherParser.DROP - 54 | 1 << _CypherParser.INDEX - 54 | 1 << _CypherParser.ON - 54 | 1 << _CypherParser.CONSTRAINT - 54 | 1 << _CypherParser.ASSERT - 54 | 1 << _CypherParser.IS - 54 | 1 << _CypherParser.UNIQUE - 54 | 1 << _CypherParser.EXISTS - 54 | 1 << _CypherParser.LOAD - 54 | 1 << _CypherParser.CSV - 54 | 1 << _CypherParser.WITH - 54 | 1 << _CypherParser.HEADERS - 54 | 1 << _CypherParser.FROM - 54 | 1 << _CypherParser.AS - 54 | 1 << _CypherParser.FIELDTERMINATOR - 54 | 1 << _CypherParser.OPTIONAL - 54 | 1 << _CypherParser.MATCH - 54 | 1 << _CypherParser.UNWIND - 54 | 1 << _CypherParser.MERGE - 54 | 1 << _CypherParser.SET - 54 | 1 << _CypherParser.DETACH - 54 | 1 << _CypherParser.DELETE - 54 | 1 << _CypherParser.REMOVE - 54)) !== 0 || (_la - 86 & ~31) == 0 && (1 << _la - 86 & (1 << _CypherParser.FOREACH - 86 | 1 << _CypherParser.IN - 86 | 1 << _CypherParser.DISTINCT - 86 | 1 << _CypherParser.RETURN - 86 | 1 << _CypherParser.ORDER - 86 | 1 << _CypherParser.BY - 86 | 1 << _CypherParser.L_SKIP - 86 | 1 << _CypherParser.LIMIT - 86 | 1 << _CypherParser.ASCENDING - 86 | 1 << _CypherParser.ASC - 86 | 1 << _CypherParser.DESCENDING - 86 | 1 << _CypherParser.DESC - 86 | 1 << _CypherParser.JOIN - 86 | 1 << _CypherParser.SCAN - 86 | 1 << _CypherParser.START - 86 | 1 << _CypherParser.NODE - 86 | 1 << _CypherParser.RELATIONSHIP - 86 | 1 << _CypherParser.REL - 86 | 1 << _CypherParser.WHERE - 86 | 1 << _CypherParser.SHORTESTPATH - 86 | 1 << _CypherParser.ALLSHORTESTPATHS - 86 | 1 << _CypherParser.OR - 86 | 1 << _CypherParser.XOR - 86 | 1 << _CypherParser.AND - 86 | 1 << _CypherParser.NOT - 86 | 1 << _CypherParser.STARTS - 86 | 1 << _CypherParser.ENDS - 86 | 1 << _CypherParser.CONTAINS - 86 | 1 << _CypherParser.NULL - 86 | 1 << _CypherParser.COUNT - 86 | 1 << _CypherParser.FILTER - 86 | 1 << _CypherParser.EXTRACT - 86)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << _CypherParser.ANY - 118 | 1 << _CypherParser.NONE - 118 | 1 << _CypherParser.SINGLE - 118 | 1 << _CypherParser.TRUE - 118 | 1 << _CypherParser.FALSE - 118 | 1 << _CypherParser.REDUCE - 118 | 1 << _CypherParser.CASE - 118 | 1 << _CypherParser.ELSE - 118 | 1 << _CypherParser.END - 118 | 1 << _CypherParser.WHEN - 118 | 1 << _CypherParser.THEN - 118 | 1 << _CypherParser.CALL - 118 | 1 << _CypherParser.YIELD - 118 | 1 << _CypherParser.KEY - 118 | 1 << _CypherParser.CATALOG - 118 | 1 << _CypherParser.SHOW - 118 | 1 << _CypherParser.DEFAULT - 118 | 1 << _CypherParser.DBMS - 118 | 1 << _CypherParser.DATABASE - 118 | 1 << _CypherParser.DATABASES - 118 | 1 << _CypherParser.GRAPH - 118 | 1 << _CypherParser.GRAPHS - 118 | 1 << _CypherParser.REPLACE - 118 | 1 << _CypherParser.IF - 118 | 1 << _CypherParser.STOP - 118 | 1 << _CypherParser.ROLE - 118 | 1 << _CypherParser.ROLES - 118 | 1 << _CypherParser.USER - 118 | 1 << _CypherParser.USERS - 118 | 1 << _CypherParser.POPULATED - 118 | 1 << _CypherParser.PASSWORD - 118 | 1 << _CypherParser.CHANGE - 118)) !== 0 || (_la - 150 & ~31) == 0 && (1 << _la - 150 & (1 << _CypherParser.REQUIRED - 150 | 1 << _CypherParser.STATUS - 150 | 1 << _CypherParser.ACTIVE - 150 | 1 << _CypherParser.SUSPENDED - 150 | 1 << _CypherParser.ALTER - 150 | 1 << _CypherParser.CURRENT - 150 | 1 << _CypherParser.TO - 150 | 1 << _CypherParser.PRIVILEGES - 150 | 1 << _CypherParser.GRANT - 150 | 1 << _CypherParser.DENY - 150 | 1 << _CypherParser.REVOKE - 150 | 1 << _CypherParser.RELATIONSHIPS - 150 | 1 << _CypherParser.NODES - 150 | 1 << _CypherParser.ELEMENT - 150 | 1 << _CypherParser.ELEMENTS - 150 | 1 << _CypherParser.COPY - 150 | 1 << _CypherParser.OF - 150 | 1 << _CypherParser.TRAVERSE - 150 | 1 << _CypherParser.READ - 150 | 1 << _CypherParser.WRITE - 150 | 1 << _CypherParser.ACCESS - 150 | 1 << _CypherParser.INDEXES - 150 | 1 << _CypherParser.MANAGEMENT - 150 | 1 << _CypherParser.NEW - 150 | 1 << _CypherParser.LABEL - 150 | 1 << _CypherParser.LABELS - 150 | 1 << _CypherParser.NAME - 150 | 1 << _CypherParser.NAMES - 150 | 1 << _CypherParser.TYPE - 150 | 1 << _CypherParser.TYPES - 150 | 1 << _CypherParser.PROPERTY - 150 | 1 << _CypherParser.CONSTRAINTS - 150)) !== 0 || (_la - 182 & ~31) == 0 && (1 << _la - 182 & (1 << _CypherParser.ASSIGN - 182 | 1 << _CypherParser.BTREE - 182 | 1 << _CypherParser.EXIST - 182 | 1 << _CypherParser.FOR - 182 | 1 << _CypherParser.OPTIONS - 182 | 1 << _CypherParser.EXECUTE - 182 | 1 << _CypherParser.DEFINED - 182 | 1 << _CypherParser.FUNCTION - 182 | 1 << _CypherParser.FUNCTIONS - 182 | 1 << _CypherParser.BOOSTED - 182 | 1 << _CypherParser.PROCEDURE - 182 | 1 << _CypherParser.PROCEDURES - 182 | 1 << _CypherParser.ADMIN - 182 | 1 << _CypherParser.ADMINISTRATOR - 182 | 1 << _CypherParser.BRIEF - 182 | 1 << _CypherParser.VERBOSE - 182 | 1 << _CypherParser.OUTPUT - 182 | 1 << _CypherParser.HexLetter - 182)) !== 0 || _la === _CypherParser.UnescapedSymbolicName || _la === _CypherParser.EscapedSymbolicName) {
        this.state = 3179;
        this.variable();
        this.state = 3181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3180;
          this.match(_CypherParser.SP);
        }
        this.state = 3183;
        this.match(_CypherParser.T__11);
        this.state = 3185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3184;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 3189;
      this.relationshipsPattern();
      this.state = 3191;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3190;
        this.match(_CypherParser.SP);
      }
      this.state = 3201;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.WHERE) {
        this.state = 3193;
        this.match(_CypherParser.WHERE);
        this.state = 3195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3194;
          this.match(_CypherParser.SP);
        }
        this.state = 3197;
        this.expression();
        this.state = 3199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3198;
          this.match(_CypherParser.SP);
        }
      }
      this.state = 3203;
      this.match(_CypherParser.T__22);
      this.state = 3205;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3204;
        this.match(_CypherParser.SP);
      }
      this.state = 3207;
      this.expression();
      this.state = 3209;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3208;
        this.match(_CypherParser.SP);
      }
      this.state = 3211;
      this.match(_CypherParser.T__17);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyLookup() {
    let localctx = new PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, _CypherParser.RULE_propertyLookup);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3213;
      this.match(_CypherParser.T__6);
      this.state = 3215;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3214;
        this.match(_CypherParser.SP);
      }
      this.state = 3217;
      this.propertyKeyName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseExpression() {
    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, _CypherParser.RULE_caseExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3241;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 459, this._ctx);
      switch (la_) {
        case 1:
          this.state = 3219;
          this.match(_CypherParser.CASE);
          this.state = 3224;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 3221;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === _CypherParser.SP) {
                  this.state = 3220;
                  this.match(_CypherParser.SP);
                }
                this.state = 3223;
                this.caseAlternatives();
                break;
              default:
                throw new es_default.error.NoViableAltException(this);
            }
            this.state = 3226;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 455, this._ctx);
          } while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER);
          break;
        case 2:
          this.state = 3228;
          this.match(_CypherParser.CASE);
          this.state = 3230;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3229;
            this.match(_CypherParser.SP);
          }
          this.state = 3232;
          this.expression();
          this.state = 3237;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 3234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === _CypherParser.SP) {
                  this.state = 3233;
                  this.match(_CypherParser.SP);
                }
                this.state = 3236;
                this.caseAlternatives();
                break;
              default:
                throw new es_default.error.NoViableAltException(this);
            }
            this.state = 3239;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 458, this._ctx);
          } while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER);
          break;
      }
      this.state = 3251;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 462, this._ctx);
      if (la_ === 1) {
        this.state = 3244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3243;
          this.match(_CypherParser.SP);
        }
        this.state = 3246;
        this.match(_CypherParser.ELSE);
        this.state = 3248;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3247;
          this.match(_CypherParser.SP);
        }
        this.state = 3250;
        this.expression();
      }
      this.state = 3254;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3253;
        this.match(_CypherParser.SP);
      }
      this.state = 3256;
      this.match(_CypherParser.END);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseAlternatives() {
    let localctx = new CaseAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, _CypherParser.RULE_caseAlternatives);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3258;
      this.match(_CypherParser.WHEN);
      this.state = 3260;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3259;
        this.match(_CypherParser.SP);
      }
      this.state = 3262;
      this.expression();
      this.state = 3264;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3263;
        this.match(_CypherParser.SP);
      }
      this.state = 3266;
      this.match(_CypherParser.THEN);
      this.state = 3268;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3267;
        this.match(_CypherParser.SP);
      }
      this.state = 3270;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variable() {
    let localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, _CypherParser.RULE_variable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3272;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  numberLiteral() {
    let localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, _CypherParser.RULE_numberLiteral);
    try {
      this.state = 3276;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.ExponentDecimalReal:
        case _CypherParser.RegularDecimalReal:
          this.enterOuterAlt(localctx, 1);
          this.state = 3274;
          this.doubleLiteral();
          break;
        case _CypherParser.HexInteger:
        case _CypherParser.DecimalInteger:
        case _CypherParser.OctalInteger:
          this.enterOuterAlt(localctx, 2);
          this.state = 3275;
          this.integerLiteral();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  mapLiteral() {
    let localctx = new MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, _CypherParser.RULE_mapLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3278;
      this.match(_CypherParser.T__13);
      this.state = 3280;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3279;
        this.match(_CypherParser.SP);
      }
      this.state = 3299;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54 | 1 << _CypherParser.USING - 54 | 1 << _CypherParser.PERIODIC - 54 | 1 << _CypherParser.COMMIT - 54 | 1 << _CypherParser.UNION - 54 | 1 << _CypherParser.ALL - 54 | 1 << _CypherParser.CREATE - 54 | 1 << _CypherParser.DROP - 54 | 1 << _CypherParser.INDEX - 54 | 1 << _CypherParser.ON - 54 | 1 << _CypherParser.CONSTRAINT - 54 | 1 << _CypherParser.ASSERT - 54 | 1 << _CypherParser.IS - 54 | 1 << _CypherParser.UNIQUE - 54 | 1 << _CypherParser.EXISTS - 54 | 1 << _CypherParser.LOAD - 54 | 1 << _CypherParser.CSV - 54 | 1 << _CypherParser.WITH - 54 | 1 << _CypherParser.HEADERS - 54 | 1 << _CypherParser.FROM - 54 | 1 << _CypherParser.AS - 54 | 1 << _CypherParser.FIELDTERMINATOR - 54 | 1 << _CypherParser.OPTIONAL - 54 | 1 << _CypherParser.MATCH - 54 | 1 << _CypherParser.UNWIND - 54 | 1 << _CypherParser.MERGE - 54 | 1 << _CypherParser.SET - 54 | 1 << _CypherParser.DETACH - 54 | 1 << _CypherParser.DELETE - 54 | 1 << _CypherParser.REMOVE - 54)) !== 0 || (_la - 86 & ~31) == 0 && (1 << _la - 86 & (1 << _CypherParser.FOREACH - 86 | 1 << _CypherParser.IN - 86 | 1 << _CypherParser.DISTINCT - 86 | 1 << _CypherParser.RETURN - 86 | 1 << _CypherParser.ORDER - 86 | 1 << _CypherParser.BY - 86 | 1 << _CypherParser.L_SKIP - 86 | 1 << _CypherParser.LIMIT - 86 | 1 << _CypherParser.ASCENDING - 86 | 1 << _CypherParser.ASC - 86 | 1 << _CypherParser.DESCENDING - 86 | 1 << _CypherParser.DESC - 86 | 1 << _CypherParser.JOIN - 86 | 1 << _CypherParser.SCAN - 86 | 1 << _CypherParser.START - 86 | 1 << _CypherParser.NODE - 86 | 1 << _CypherParser.RELATIONSHIP - 86 | 1 << _CypherParser.REL - 86 | 1 << _CypherParser.WHERE - 86 | 1 << _CypherParser.SHORTESTPATH - 86 | 1 << _CypherParser.ALLSHORTESTPATHS - 86 | 1 << _CypherParser.OR - 86 | 1 << _CypherParser.XOR - 86 | 1 << _CypherParser.AND - 86 | 1 << _CypherParser.NOT - 86 | 1 << _CypherParser.STARTS - 86 | 1 << _CypherParser.ENDS - 86 | 1 << _CypherParser.CONTAINS - 86 | 1 << _CypherParser.NULL - 86 | 1 << _CypherParser.COUNT - 86 | 1 << _CypherParser.FILTER - 86 | 1 << _CypherParser.EXTRACT - 86)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << _CypherParser.ANY - 118 | 1 << _CypherParser.NONE - 118 | 1 << _CypherParser.SINGLE - 118 | 1 << _CypherParser.TRUE - 118 | 1 << _CypherParser.FALSE - 118 | 1 << _CypherParser.REDUCE - 118 | 1 << _CypherParser.CASE - 118 | 1 << _CypherParser.ELSE - 118 | 1 << _CypherParser.END - 118 | 1 << _CypherParser.WHEN - 118 | 1 << _CypherParser.THEN - 118 | 1 << _CypherParser.CALL - 118 | 1 << _CypherParser.YIELD - 118 | 1 << _CypherParser.KEY - 118 | 1 << _CypherParser.CATALOG - 118 | 1 << _CypherParser.SHOW - 118 | 1 << _CypherParser.DEFAULT - 118 | 1 << _CypherParser.DBMS - 118 | 1 << _CypherParser.DATABASE - 118 | 1 << _CypherParser.DATABASES - 118 | 1 << _CypherParser.GRAPH - 118 | 1 << _CypherParser.GRAPHS - 118 | 1 << _CypherParser.REPLACE - 118 | 1 << _CypherParser.IF - 118 | 1 << _CypherParser.STOP - 118 | 1 << _CypherParser.ROLE - 118 | 1 << _CypherParser.ROLES - 118 | 1 << _CypherParser.USER - 118 | 1 << _CypherParser.USERS - 118 | 1 << _CypherParser.POPULATED - 118 | 1 << _CypherParser.PASSWORD - 118 | 1 << _CypherParser.CHANGE - 118)) !== 0 || (_la - 150 & ~31) == 0 && (1 << _la - 150 & (1 << _CypherParser.REQUIRED - 150 | 1 << _CypherParser.STATUS - 150 | 1 << _CypherParser.ACTIVE - 150 | 1 << _CypherParser.SUSPENDED - 150 | 1 << _CypherParser.ALTER - 150 | 1 << _CypherParser.CURRENT - 150 | 1 << _CypherParser.TO - 150 | 1 << _CypherParser.PRIVILEGES - 150 | 1 << _CypherParser.GRANT - 150 | 1 << _CypherParser.DENY - 150 | 1 << _CypherParser.REVOKE - 150 | 1 << _CypherParser.RELATIONSHIPS - 150 | 1 << _CypherParser.NODES - 150 | 1 << _CypherParser.ELEMENT - 150 | 1 << _CypherParser.ELEMENTS - 150 | 1 << _CypherParser.COPY - 150 | 1 << _CypherParser.OF - 150 | 1 << _CypherParser.TRAVERSE - 150 | 1 << _CypherParser.READ - 150 | 1 << _CypherParser.WRITE - 150 | 1 << _CypherParser.ACCESS - 150 | 1 << _CypherParser.INDEXES - 150 | 1 << _CypherParser.MANAGEMENT - 150 | 1 << _CypherParser.NEW - 150 | 1 << _CypherParser.LABEL - 150 | 1 << _CypherParser.LABELS - 150 | 1 << _CypherParser.NAME - 150 | 1 << _CypherParser.NAMES - 150 | 1 << _CypherParser.TYPE - 150 | 1 << _CypherParser.TYPES - 150 | 1 << _CypherParser.PROPERTY - 150 | 1 << _CypherParser.CONSTRAINTS - 150)) !== 0 || (_la - 182 & ~31) == 0 && (1 << _la - 182 & (1 << _CypherParser.ASSIGN - 182 | 1 << _CypherParser.BTREE - 182 | 1 << _CypherParser.EXIST - 182 | 1 << _CypherParser.FOR - 182 | 1 << _CypherParser.OPTIONS - 182 | 1 << _CypherParser.EXECUTE - 182 | 1 << _CypherParser.DEFINED - 182 | 1 << _CypherParser.FUNCTION - 182 | 1 << _CypherParser.FUNCTIONS - 182 | 1 << _CypherParser.BOOSTED - 182 | 1 << _CypherParser.PROCEDURE - 182 | 1 << _CypherParser.PROCEDURES - 182 | 1 << _CypherParser.ADMIN - 182 | 1 << _CypherParser.ADMINISTRATOR - 182 | 1 << _CypherParser.BRIEF - 182 | 1 << _CypherParser.VERBOSE - 182 | 1 << _CypherParser.OUTPUT - 182 | 1 << _CypherParser.HexLetter - 182)) !== 0 || _la === _CypherParser.UnescapedSymbolicName || _la === _CypherParser.EscapedSymbolicName) {
        this.state = 3282;
        this.literalEntry();
        this.state = 3284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _CypherParser.SP) {
          this.state = 3283;
          this.match(_CypherParser.SP);
        }
        this.state = 3296;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _CypherParser.T__14) {
          this.state = 3286;
          this.match(_CypherParser.T__14);
          this.state = 3288;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3287;
            this.match(_CypherParser.SP);
          }
          this.state = 3290;
          this.literalEntry();
          this.state = 3292;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3291;
            this.match(_CypherParser.SP);
          }
          this.state = 3298;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
      this.state = 3301;
      this.match(_CypherParser.T__15);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  mapProjection() {
    let localctx = new MapProjectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, _CypherParser.RULE_mapProjection);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3303;
      this.variable();
      this.state = 3305;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3304;
        this.match(_CypherParser.SP);
      }
      this.state = 3307;
      this.match(_CypherParser.T__13);
      this.state = 3309;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 475, this._ctx);
      if (la_ === 1) {
        this.state = 3308;
        this.match(_CypherParser.SP);
      }
      this.state = 3312;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.T__6 || (_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54 | 1 << _CypherParser.USING - 54 | 1 << _CypherParser.PERIODIC - 54 | 1 << _CypherParser.COMMIT - 54 | 1 << _CypherParser.UNION - 54 | 1 << _CypherParser.ALL - 54 | 1 << _CypherParser.CREATE - 54 | 1 << _CypherParser.DROP - 54 | 1 << _CypherParser.INDEX - 54 | 1 << _CypherParser.ON - 54 | 1 << _CypherParser.CONSTRAINT - 54 | 1 << _CypherParser.ASSERT - 54 | 1 << _CypherParser.IS - 54 | 1 << _CypherParser.UNIQUE - 54 | 1 << _CypherParser.EXISTS - 54 | 1 << _CypherParser.LOAD - 54 | 1 << _CypherParser.CSV - 54 | 1 << _CypherParser.WITH - 54 | 1 << _CypherParser.HEADERS - 54 | 1 << _CypherParser.FROM - 54 | 1 << _CypherParser.AS - 54 | 1 << _CypherParser.FIELDTERMINATOR - 54 | 1 << _CypherParser.OPTIONAL - 54 | 1 << _CypherParser.MATCH - 54 | 1 << _CypherParser.UNWIND - 54 | 1 << _CypherParser.MERGE - 54 | 1 << _CypherParser.SET - 54 | 1 << _CypherParser.DETACH - 54 | 1 << _CypherParser.DELETE - 54 | 1 << _CypherParser.REMOVE - 54)) !== 0 || (_la - 86 & ~31) == 0 && (1 << _la - 86 & (1 << _CypherParser.FOREACH - 86 | 1 << _CypherParser.IN - 86 | 1 << _CypherParser.DISTINCT - 86 | 1 << _CypherParser.RETURN - 86 | 1 << _CypherParser.ORDER - 86 | 1 << _CypherParser.BY - 86 | 1 << _CypherParser.L_SKIP - 86 | 1 << _CypherParser.LIMIT - 86 | 1 << _CypherParser.ASCENDING - 86 | 1 << _CypherParser.ASC - 86 | 1 << _CypherParser.DESCENDING - 86 | 1 << _CypherParser.DESC - 86 | 1 << _CypherParser.JOIN - 86 | 1 << _CypherParser.SCAN - 86 | 1 << _CypherParser.START - 86 | 1 << _CypherParser.NODE - 86 | 1 << _CypherParser.RELATIONSHIP - 86 | 1 << _CypherParser.REL - 86 | 1 << _CypherParser.WHERE - 86 | 1 << _CypherParser.SHORTESTPATH - 86 | 1 << _CypherParser.ALLSHORTESTPATHS - 86 | 1 << _CypherParser.OR - 86 | 1 << _CypherParser.XOR - 86 | 1 << _CypherParser.AND - 86 | 1 << _CypherParser.NOT - 86 | 1 << _CypherParser.STARTS - 86 | 1 << _CypherParser.ENDS - 86 | 1 << _CypherParser.CONTAINS - 86 | 1 << _CypherParser.NULL - 86 | 1 << _CypherParser.COUNT - 86 | 1 << _CypherParser.FILTER - 86 | 1 << _CypherParser.EXTRACT - 86)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << _CypherParser.ANY - 118 | 1 << _CypherParser.NONE - 118 | 1 << _CypherParser.SINGLE - 118 | 1 << _CypherParser.TRUE - 118 | 1 << _CypherParser.FALSE - 118 | 1 << _CypherParser.REDUCE - 118 | 1 << _CypherParser.CASE - 118 | 1 << _CypherParser.ELSE - 118 | 1 << _CypherParser.END - 118 | 1 << _CypherParser.WHEN - 118 | 1 << _CypherParser.THEN - 118 | 1 << _CypherParser.CALL - 118 | 1 << _CypherParser.YIELD - 118 | 1 << _CypherParser.KEY - 118 | 1 << _CypherParser.CATALOG - 118 | 1 << _CypherParser.SHOW - 118 | 1 << _CypherParser.DEFAULT - 118 | 1 << _CypherParser.DBMS - 118 | 1 << _CypherParser.DATABASE - 118 | 1 << _CypherParser.DATABASES - 118 | 1 << _CypherParser.GRAPH - 118 | 1 << _CypherParser.GRAPHS - 118 | 1 << _CypherParser.REPLACE - 118 | 1 << _CypherParser.IF - 118 | 1 << _CypherParser.STOP - 118 | 1 << _CypherParser.ROLE - 118 | 1 << _CypherParser.ROLES - 118 | 1 << _CypherParser.USER - 118 | 1 << _CypherParser.USERS - 118 | 1 << _CypherParser.POPULATED - 118 | 1 << _CypherParser.PASSWORD - 118 | 1 << _CypherParser.CHANGE - 118)) !== 0 || (_la - 150 & ~31) == 0 && (1 << _la - 150 & (1 << _CypherParser.REQUIRED - 150 | 1 << _CypherParser.STATUS - 150 | 1 << _CypherParser.ACTIVE - 150 | 1 << _CypherParser.SUSPENDED - 150 | 1 << _CypherParser.ALTER - 150 | 1 << _CypherParser.CURRENT - 150 | 1 << _CypherParser.TO - 150 | 1 << _CypherParser.PRIVILEGES - 150 | 1 << _CypherParser.GRANT - 150 | 1 << _CypherParser.DENY - 150 | 1 << _CypherParser.REVOKE - 150 | 1 << _CypherParser.RELATIONSHIPS - 150 | 1 << _CypherParser.NODES - 150 | 1 << _CypherParser.ELEMENT - 150 | 1 << _CypherParser.ELEMENTS - 150 | 1 << _CypherParser.COPY - 150 | 1 << _CypherParser.OF - 150 | 1 << _CypherParser.TRAVERSE - 150 | 1 << _CypherParser.READ - 150 | 1 << _CypherParser.WRITE - 150 | 1 << _CypherParser.ACCESS - 150 | 1 << _CypherParser.INDEXES - 150 | 1 << _CypherParser.MANAGEMENT - 150 | 1 << _CypherParser.NEW - 150 | 1 << _CypherParser.LABEL - 150 | 1 << _CypherParser.LABELS - 150 | 1 << _CypherParser.NAME - 150 | 1 << _CypherParser.NAMES - 150 | 1 << _CypherParser.TYPE - 150 | 1 << _CypherParser.TYPES - 150 | 1 << _CypherParser.PROPERTY - 150 | 1 << _CypherParser.CONSTRAINTS - 150)) !== 0 || (_la - 182 & ~31) == 0 && (1 << _la - 182 & (1 << _CypherParser.ASSIGN - 182 | 1 << _CypherParser.BTREE - 182 | 1 << _CypherParser.EXIST - 182 | 1 << _CypherParser.FOR - 182 | 1 << _CypherParser.OPTIONS - 182 | 1 << _CypherParser.EXECUTE - 182 | 1 << _CypherParser.DEFINED - 182 | 1 << _CypherParser.FUNCTION - 182 | 1 << _CypherParser.FUNCTIONS - 182 | 1 << _CypherParser.BOOSTED - 182 | 1 << _CypherParser.PROCEDURE - 182 | 1 << _CypherParser.PROCEDURES - 182 | 1 << _CypherParser.ADMIN - 182 | 1 << _CypherParser.ADMINISTRATOR - 182 | 1 << _CypherParser.BRIEF - 182 | 1 << _CypherParser.VERBOSE - 182 | 1 << _CypherParser.OUTPUT - 182 | 1 << _CypherParser.HexLetter - 182)) !== 0 || _la === _CypherParser.UnescapedSymbolicName || _la === _CypherParser.EscapedSymbolicName) {
        this.state = 3311;
        this.mapProjectionVariants();
      }
      this.state = 3324;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 479, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3315;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3314;
            this.match(_CypherParser.SP);
          }
          this.state = 3317;
          this.match(_CypherParser.T__14);
          this.state = 3319;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3318;
            this.match(_CypherParser.SP);
          }
          this.state = 3321;
          this.mapProjectionVariants();
        }
        this.state = 3326;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 479, this._ctx);
      }
      this.state = 3328;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3327;
        this.match(_CypherParser.SP);
      }
      this.state = 3330;
      this.match(_CypherParser.T__15);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  mapProjectionVariants() {
    let localctx = new MapProjectionVariantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, _CypherParser.RULE_mapProjectionVariants);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3336;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 481, this._ctx);
      switch (la_) {
        case 1:
          this.state = 3332;
          this.literalEntry();
          break;
        case 2:
          this.state = 3333;
          this.propertySelector();
          break;
        case 3:
          this.state = 3334;
          this.variableSelector();
          break;
        case 4:
          this.state = 3335;
          this.allPropertiesSelector();
          break;
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literalEntry() {
    let localctx = new LiteralEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, _CypherParser.RULE_literalEntry);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3338;
      this.propertyKeyName();
      this.state = 3340;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3339;
        this.match(_CypherParser.SP);
      }
      this.state = 3342;
      this.match(_CypherParser.T__1);
      this.state = 3344;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3343;
        this.match(_CypherParser.SP);
      }
      this.state = 3346;
      this.expression();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertySelector() {
    let localctx = new PropertySelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, _CypherParser.RULE_propertySelector);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3348;
      this.match(_CypherParser.T__6);
      this.state = 3349;
      this.variable();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableSelector() {
    let localctx = new VariableSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, _CypherParser.RULE_variableSelector);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3351;
      this.variable();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  allPropertiesSelector() {
    let localctx = new AllPropertiesSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, _CypherParser.RULE_allPropertiesSelector);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3353;
      this.match(_CypherParser.T__6);
      this.state = 3354;
      this.match(_CypherParser.T__18);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  parameter() {
    let localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, _CypherParser.RULE_parameter);
    try {
      this.state = 3358;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.T__13:
          this.enterOuterAlt(localctx, 1);
          this.state = 3356;
          this.legacyParameter();
          break;
        case _CypherParser.T__33:
          this.enterOuterAlt(localctx, 2);
          this.state = 3357;
          this.newParameter();
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  legacyParameter() {
    let localctx = new LegacyParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, _CypherParser.RULE_legacyParameter);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3360;
      this.match(_CypherParser.T__13);
      this.state = 3362;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3361;
        this.match(_CypherParser.SP);
      }
      this.state = 3364;
      this.parameterName();
      this.state = 3366;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === _CypherParser.SP) {
        this.state = 3365;
        this.match(_CypherParser.SP);
      }
      this.state = 3368;
      this.match(_CypherParser.T__15);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  newParameter() {
    let localctx = new NewParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, _CypherParser.RULE_newParameter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3370;
      this.match(_CypherParser.T__33);
      this.state = 3371;
      this.parameterName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  parameterName() {
    let localctx = new ParameterNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, _CypherParser.RULE_parameterName);
    try {
      this.state = 3375;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.CYPHER:
        case _CypherParser.EXPLAIN:
        case _CypherParser.PROFILE:
        case _CypherParser.USING:
        case _CypherParser.PERIODIC:
        case _CypherParser.COMMIT:
        case _CypherParser.UNION:
        case _CypherParser.ALL:
        case _CypherParser.CREATE:
        case _CypherParser.DROP:
        case _CypherParser.INDEX:
        case _CypherParser.ON:
        case _CypherParser.CONSTRAINT:
        case _CypherParser.ASSERT:
        case _CypherParser.IS:
        case _CypherParser.UNIQUE:
        case _CypherParser.EXISTS:
        case _CypherParser.LOAD:
        case _CypherParser.CSV:
        case _CypherParser.WITH:
        case _CypherParser.HEADERS:
        case _CypherParser.FROM:
        case _CypherParser.AS:
        case _CypherParser.FIELDTERMINATOR:
        case _CypherParser.OPTIONAL:
        case _CypherParser.MATCH:
        case _CypherParser.UNWIND:
        case _CypherParser.MERGE:
        case _CypherParser.SET:
        case _CypherParser.DETACH:
        case _CypherParser.DELETE:
        case _CypherParser.REMOVE:
        case _CypherParser.FOREACH:
        case _CypherParser.IN:
        case _CypherParser.DISTINCT:
        case _CypherParser.RETURN:
        case _CypherParser.ORDER:
        case _CypherParser.BY:
        case _CypherParser.L_SKIP:
        case _CypherParser.LIMIT:
        case _CypherParser.ASCENDING:
        case _CypherParser.ASC:
        case _CypherParser.DESCENDING:
        case _CypherParser.DESC:
        case _CypherParser.JOIN:
        case _CypherParser.SCAN:
        case _CypherParser.START:
        case _CypherParser.NODE:
        case _CypherParser.RELATIONSHIP:
        case _CypherParser.REL:
        case _CypherParser.WHERE:
        case _CypherParser.SHORTESTPATH:
        case _CypherParser.ALLSHORTESTPATHS:
        case _CypherParser.OR:
        case _CypherParser.XOR:
        case _CypherParser.AND:
        case _CypherParser.NOT:
        case _CypherParser.STARTS:
        case _CypherParser.ENDS:
        case _CypherParser.CONTAINS:
        case _CypherParser.NULL:
        case _CypherParser.COUNT:
        case _CypherParser.FILTER:
        case _CypherParser.EXTRACT:
        case _CypherParser.ANY:
        case _CypherParser.NONE:
        case _CypherParser.SINGLE:
        case _CypherParser.TRUE:
        case _CypherParser.FALSE:
        case _CypherParser.REDUCE:
        case _CypherParser.CASE:
        case _CypherParser.ELSE:
        case _CypherParser.END:
        case _CypherParser.WHEN:
        case _CypherParser.THEN:
        case _CypherParser.CALL:
        case _CypherParser.YIELD:
        case _CypherParser.KEY:
        case _CypherParser.CATALOG:
        case _CypherParser.SHOW:
        case _CypherParser.DEFAULT:
        case _CypherParser.DBMS:
        case _CypherParser.DATABASE:
        case _CypherParser.DATABASES:
        case _CypherParser.GRAPH:
        case _CypherParser.GRAPHS:
        case _CypherParser.REPLACE:
        case _CypherParser.IF:
        case _CypherParser.STOP:
        case _CypherParser.ROLE:
        case _CypherParser.ROLES:
        case _CypherParser.USER:
        case _CypherParser.USERS:
        case _CypherParser.POPULATED:
        case _CypherParser.PASSWORD:
        case _CypherParser.CHANGE:
        case _CypherParser.REQUIRED:
        case _CypherParser.STATUS:
        case _CypherParser.ACTIVE:
        case _CypherParser.SUSPENDED:
        case _CypherParser.ALTER:
        case _CypherParser.CURRENT:
        case _CypherParser.TO:
        case _CypherParser.PRIVILEGES:
        case _CypherParser.GRANT:
        case _CypherParser.DENY:
        case _CypherParser.REVOKE:
        case _CypherParser.RELATIONSHIPS:
        case _CypherParser.NODES:
        case _CypherParser.ELEMENT:
        case _CypherParser.ELEMENTS:
        case _CypherParser.COPY:
        case _CypherParser.OF:
        case _CypherParser.TRAVERSE:
        case _CypherParser.READ:
        case _CypherParser.WRITE:
        case _CypherParser.ACCESS:
        case _CypherParser.INDEXES:
        case _CypherParser.MANAGEMENT:
        case _CypherParser.NEW:
        case _CypherParser.LABEL:
        case _CypherParser.LABELS:
        case _CypherParser.NAME:
        case _CypherParser.NAMES:
        case _CypherParser.TYPE:
        case _CypherParser.TYPES:
        case _CypherParser.PROPERTY:
        case _CypherParser.CONSTRAINTS:
        case _CypherParser.ASSIGN:
        case _CypherParser.BTREE:
        case _CypherParser.EXIST:
        case _CypherParser.FOR:
        case _CypherParser.OPTIONS:
        case _CypherParser.EXECUTE:
        case _CypherParser.DEFINED:
        case _CypherParser.FUNCTION:
        case _CypherParser.FUNCTIONS:
        case _CypherParser.BOOSTED:
        case _CypherParser.PROCEDURE:
        case _CypherParser.PROCEDURES:
        case _CypherParser.ADMIN:
        case _CypherParser.ADMINISTRATOR:
        case _CypherParser.BRIEF:
        case _CypherParser.VERBOSE:
        case _CypherParser.OUTPUT:
        case _CypherParser.HexLetter:
        case _CypherParser.UnescapedSymbolicName:
        case _CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 1);
          this.state = 3373;
          this.symbolicName();
          break;
        case _CypherParser.DecimalInteger:
          this.enterOuterAlt(localctx, 2);
          this.state = 3374;
          this.match(_CypherParser.DecimalInteger);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyExpressions() {
    let localctx = new PropertyExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, _CypherParser.RULE_propertyExpressions);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3377;
      this.propertyExpression();
      this.state = 3388;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 490, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3379;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3378;
            this.match(_CypherParser.SP);
          }
          this.state = 3381;
          this.match(_CypherParser.T__14);
          this.state = 3383;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3382;
            this.match(_CypherParser.SP);
          }
          this.state = 3385;
          this.propertyExpression();
        }
        this.state = 3390;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 490, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyExpression() {
    let localctx = new PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, _CypherParser.RULE_propertyExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3391;
      this.atom();
      this.state = 3396;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 3393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _CypherParser.SP) {
              this.state = 3392;
              this.match(_CypherParser.SP);
            }
            this.state = 3395;
            this.propertyLookup();
            break;
          default:
            throw new es_default.error.NoViableAltException(this);
        }
        this.state = 3398;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 492, this._ctx);
      } while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyKeys() {
    let localctx = new PropertyKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, _CypherParser.RULE_propertyKeys);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3400;
      this.propertyKeyName();
      this.state = 3411;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 495, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3402;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3401;
            this.match(_CypherParser.SP);
          }
          this.state = 3404;
          this.match(_CypherParser.T__14);
          this.state = 3406;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === _CypherParser.SP) {
            this.state = 3405;
            this.match(_CypherParser.SP);
          }
          this.state = 3408;
          this.propertyKeyName();
        }
        this.state = 3413;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 495, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyKeyName() {
    let localctx = new PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, _CypherParser.RULE_propertyKeyName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3414;
      this.symbolicName();
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  integerLiteral() {
    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, _CypherParser.RULE_integerLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3416;
      _la = this._input.LA(1);
      if (!((_la - 202 & ~31) == 0 && (1 << _la - 202 & (1 << _CypherParser.HexInteger - 202 | 1 << _CypherParser.DecimalInteger - 202 | 1 << _CypherParser.OctalInteger - 202)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  doubleLiteral() {
    let localctx = new DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, _CypherParser.RULE_doubleLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3418;
      _la = this._input.LA(1);
      if (!(_la === _CypherParser.ExponentDecimalReal || _la === _CypherParser.RegularDecimalReal)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  namespace() {
    let localctx = new NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, _CypherParser.RULE_namespace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3425;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 496, this._ctx);
      while (_alt != 2 && _alt != es_default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3420;
          this.symbolicName();
          this.state = 3421;
          this.match(_CypherParser.T__6);
        }
        this.state = 3427;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 496, this._ctx);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  leftArrowHead() {
    let localctx = new LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, _CypherParser.RULE_leftArrowHead);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3428;
      _la = this._input.LA(1);
      if (!((_la - 30 & ~31) == 0 && (1 << _la - 30 & (1 << _CypherParser.T__29 - 30 | 1 << _CypherParser.T__34 - 30 | 1 << _CypherParser.T__35 - 30 | 1 << _CypherParser.T__36 - 30 | 1 << _CypherParser.T__37 - 30)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  rightArrowHead() {
    let localctx = new RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, _CypherParser.RULE_rightArrowHead);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3430;
      _la = this._input.LA(1);
      if (!((_la - 31 & ~31) == 0 && (1 << _la - 31 & (1 << _CypherParser.T__30 - 31 | 1 << _CypherParser.T__38 - 31 | 1 << _CypherParser.T__39 - 31 | 1 << _CypherParser.T__40 - 31 | 1 << _CypherParser.T__41 - 31)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dash() {
    let localctx = new DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, _CypherParser.RULE_dash);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3432;
      _la = this._input.LA(1);
      if (!(_la === _CypherParser.T__2 || (_la - 43 & ~31) == 0 && (1 << _la - 43 & (1 << _CypherParser.T__42 - 43 | 1 << _CypherParser.T__43 - 43 | 1 << _CypherParser.T__44 - 43 | 1 << _CypherParser.T__45 - 43 | 1 << _CypherParser.T__46 - 43 | 1 << _CypherParser.T__47 - 43 | 1 << _CypherParser.T__48 - 43 | 1 << _CypherParser.T__49 - 43 | 1 << _CypherParser.T__50 - 43 | 1 << _CypherParser.T__51 - 43 | 1 << _CypherParser.T__52 - 43)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  symbolicName() {
    let localctx = new SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, _CypherParser.RULE_symbolicName);
    try {
      this.state = 3438;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _CypherParser.CYPHER:
        case _CypherParser.EXPLAIN:
        case _CypherParser.PROFILE:
        case _CypherParser.USING:
        case _CypherParser.PERIODIC:
        case _CypherParser.COMMIT:
        case _CypherParser.UNION:
        case _CypherParser.ALL:
        case _CypherParser.CREATE:
        case _CypherParser.DROP:
        case _CypherParser.INDEX:
        case _CypherParser.ON:
        case _CypherParser.CONSTRAINT:
        case _CypherParser.ASSERT:
        case _CypherParser.IS:
        case _CypherParser.UNIQUE:
        case _CypherParser.EXISTS:
        case _CypherParser.LOAD:
        case _CypherParser.CSV:
        case _CypherParser.WITH:
        case _CypherParser.HEADERS:
        case _CypherParser.FROM:
        case _CypherParser.AS:
        case _CypherParser.FIELDTERMINATOR:
        case _CypherParser.OPTIONAL:
        case _CypherParser.MATCH:
        case _CypherParser.UNWIND:
        case _CypherParser.MERGE:
        case _CypherParser.SET:
        case _CypherParser.DETACH:
        case _CypherParser.DELETE:
        case _CypherParser.REMOVE:
        case _CypherParser.FOREACH:
        case _CypherParser.IN:
        case _CypherParser.DISTINCT:
        case _CypherParser.RETURN:
        case _CypherParser.ORDER:
        case _CypherParser.BY:
        case _CypherParser.L_SKIP:
        case _CypherParser.LIMIT:
        case _CypherParser.ASCENDING:
        case _CypherParser.ASC:
        case _CypherParser.DESCENDING:
        case _CypherParser.DESC:
        case _CypherParser.JOIN:
        case _CypherParser.SCAN:
        case _CypherParser.START:
        case _CypherParser.NODE:
        case _CypherParser.RELATIONSHIP:
        case _CypherParser.REL:
        case _CypherParser.WHERE:
        case _CypherParser.SHORTESTPATH:
        case _CypherParser.ALLSHORTESTPATHS:
        case _CypherParser.OR:
        case _CypherParser.XOR:
        case _CypherParser.AND:
        case _CypherParser.NOT:
        case _CypherParser.STARTS:
        case _CypherParser.ENDS:
        case _CypherParser.CONTAINS:
        case _CypherParser.NULL:
        case _CypherParser.COUNT:
        case _CypherParser.FILTER:
        case _CypherParser.EXTRACT:
        case _CypherParser.ANY:
        case _CypherParser.NONE:
        case _CypherParser.SINGLE:
        case _CypherParser.TRUE:
        case _CypherParser.FALSE:
        case _CypherParser.REDUCE:
        case _CypherParser.CASE:
        case _CypherParser.ELSE:
        case _CypherParser.END:
        case _CypherParser.WHEN:
        case _CypherParser.THEN:
        case _CypherParser.CALL:
        case _CypherParser.YIELD:
        case _CypherParser.KEY:
        case _CypherParser.CATALOG:
        case _CypherParser.SHOW:
        case _CypherParser.DEFAULT:
        case _CypherParser.DBMS:
        case _CypherParser.DATABASE:
        case _CypherParser.DATABASES:
        case _CypherParser.GRAPH:
        case _CypherParser.GRAPHS:
        case _CypherParser.REPLACE:
        case _CypherParser.IF:
        case _CypherParser.STOP:
        case _CypherParser.ROLE:
        case _CypherParser.ROLES:
        case _CypherParser.USER:
        case _CypherParser.USERS:
        case _CypherParser.POPULATED:
        case _CypherParser.PASSWORD:
        case _CypherParser.CHANGE:
        case _CypherParser.REQUIRED:
        case _CypherParser.STATUS:
        case _CypherParser.ACTIVE:
        case _CypherParser.SUSPENDED:
        case _CypherParser.ALTER:
        case _CypherParser.CURRENT:
        case _CypherParser.TO:
        case _CypherParser.PRIVILEGES:
        case _CypherParser.GRANT:
        case _CypherParser.DENY:
        case _CypherParser.REVOKE:
        case _CypherParser.RELATIONSHIPS:
        case _CypherParser.NODES:
        case _CypherParser.ELEMENT:
        case _CypherParser.ELEMENTS:
        case _CypherParser.COPY:
        case _CypherParser.OF:
        case _CypherParser.TRAVERSE:
        case _CypherParser.READ:
        case _CypherParser.WRITE:
        case _CypherParser.ACCESS:
        case _CypherParser.INDEXES:
        case _CypherParser.MANAGEMENT:
        case _CypherParser.NEW:
        case _CypherParser.LABEL:
        case _CypherParser.LABELS:
        case _CypherParser.NAME:
        case _CypherParser.NAMES:
        case _CypherParser.TYPE:
        case _CypherParser.TYPES:
        case _CypherParser.PROPERTY:
        case _CypherParser.CONSTRAINTS:
        case _CypherParser.ASSIGN:
        case _CypherParser.BTREE:
        case _CypherParser.EXIST:
        case _CypherParser.FOR:
        case _CypherParser.OPTIONS:
        case _CypherParser.EXECUTE:
        case _CypherParser.DEFINED:
        case _CypherParser.FUNCTION:
        case _CypherParser.FUNCTIONS:
        case _CypherParser.BOOSTED:
        case _CypherParser.PROCEDURE:
        case _CypherParser.PROCEDURES:
        case _CypherParser.ADMIN:
        case _CypherParser.ADMINISTRATOR:
        case _CypherParser.BRIEF:
        case _CypherParser.VERBOSE:
        case _CypherParser.OUTPUT:
          this.enterOuterAlt(localctx, 1);
          this.state = 3434;
          this.keyword();
          break;
        case _CypherParser.UnescapedSymbolicName:
          this.enterOuterAlt(localctx, 2);
          this.state = 3435;
          this.match(_CypherParser.UnescapedSymbolicName);
          break;
        case _CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 3);
          this.state = 3436;
          this.match(_CypherParser.EscapedSymbolicName);
          break;
        case _CypherParser.HexLetter:
          this.enterOuterAlt(localctx, 4);
          this.state = 3437;
          this.match(_CypherParser.HexLetter);
          break;
        default:
          throw new es_default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  keyword() {
    let localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, _CypherParser.RULE_keyword);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3440;
      _la = this._input.LA(1);
      if (!((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << _CypherParser.CYPHER - 54 | 1 << _CypherParser.EXPLAIN - 54 | 1 << _CypherParser.PROFILE - 54 | 1 << _CypherParser.USING - 54 | 1 << _CypherParser.PERIODIC - 54 | 1 << _CypherParser.COMMIT - 54 | 1 << _CypherParser.UNION - 54 | 1 << _CypherParser.ALL - 54 | 1 << _CypherParser.CREATE - 54 | 1 << _CypherParser.DROP - 54 | 1 << _CypherParser.INDEX - 54 | 1 << _CypherParser.ON - 54 | 1 << _CypherParser.CONSTRAINT - 54 | 1 << _CypherParser.ASSERT - 54 | 1 << _CypherParser.IS - 54 | 1 << _CypherParser.UNIQUE - 54 | 1 << _CypherParser.EXISTS - 54 | 1 << _CypherParser.LOAD - 54 | 1 << _CypherParser.CSV - 54 | 1 << _CypherParser.WITH - 54 | 1 << _CypherParser.HEADERS - 54 | 1 << _CypherParser.FROM - 54 | 1 << _CypherParser.AS - 54 | 1 << _CypherParser.FIELDTERMINATOR - 54 | 1 << _CypherParser.OPTIONAL - 54 | 1 << _CypherParser.MATCH - 54 | 1 << _CypherParser.UNWIND - 54 | 1 << _CypherParser.MERGE - 54 | 1 << _CypherParser.SET - 54 | 1 << _CypherParser.DETACH - 54 | 1 << _CypherParser.DELETE - 54 | 1 << _CypherParser.REMOVE - 54)) !== 0 || (_la - 86 & ~31) == 0 && (1 << _la - 86 & (1 << _CypherParser.FOREACH - 86 | 1 << _CypherParser.IN - 86 | 1 << _CypherParser.DISTINCT - 86 | 1 << _CypherParser.RETURN - 86 | 1 << _CypherParser.ORDER - 86 | 1 << _CypherParser.BY - 86 | 1 << _CypherParser.L_SKIP - 86 | 1 << _CypherParser.LIMIT - 86 | 1 << _CypherParser.ASCENDING - 86 | 1 << _CypherParser.ASC - 86 | 1 << _CypherParser.DESCENDING - 86 | 1 << _CypherParser.DESC - 86 | 1 << _CypherParser.JOIN - 86 | 1 << _CypherParser.SCAN - 86 | 1 << _CypherParser.START - 86 | 1 << _CypherParser.NODE - 86 | 1 << _CypherParser.RELATIONSHIP - 86 | 1 << _CypherParser.REL - 86 | 1 << _CypherParser.WHERE - 86 | 1 << _CypherParser.SHORTESTPATH - 86 | 1 << _CypherParser.ALLSHORTESTPATHS - 86 | 1 << _CypherParser.OR - 86 | 1 << _CypherParser.XOR - 86 | 1 << _CypherParser.AND - 86 | 1 << _CypherParser.NOT - 86 | 1 << _CypherParser.STARTS - 86 | 1 << _CypherParser.ENDS - 86 | 1 << _CypherParser.CONTAINS - 86 | 1 << _CypherParser.NULL - 86 | 1 << _CypherParser.COUNT - 86 | 1 << _CypherParser.FILTER - 86 | 1 << _CypherParser.EXTRACT - 86)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << _CypherParser.ANY - 118 | 1 << _CypherParser.NONE - 118 | 1 << _CypherParser.SINGLE - 118 | 1 << _CypherParser.TRUE - 118 | 1 << _CypherParser.FALSE - 118 | 1 << _CypherParser.REDUCE - 118 | 1 << _CypherParser.CASE - 118 | 1 << _CypherParser.ELSE - 118 | 1 << _CypherParser.END - 118 | 1 << _CypherParser.WHEN - 118 | 1 << _CypherParser.THEN - 118 | 1 << _CypherParser.CALL - 118 | 1 << _CypherParser.YIELD - 118 | 1 << _CypherParser.KEY - 118 | 1 << _CypherParser.CATALOG - 118 | 1 << _CypherParser.SHOW - 118 | 1 << _CypherParser.DEFAULT - 118 | 1 << _CypherParser.DBMS - 118 | 1 << _CypherParser.DATABASE - 118 | 1 << _CypherParser.DATABASES - 118 | 1 << _CypherParser.GRAPH - 118 | 1 << _CypherParser.GRAPHS - 118 | 1 << _CypherParser.REPLACE - 118 | 1 << _CypherParser.IF - 118 | 1 << _CypherParser.STOP - 118 | 1 << _CypherParser.ROLE - 118 | 1 << _CypherParser.ROLES - 118 | 1 << _CypherParser.USER - 118 | 1 << _CypherParser.USERS - 118 | 1 << _CypherParser.POPULATED - 118 | 1 << _CypherParser.PASSWORD - 118 | 1 << _CypherParser.CHANGE - 118)) !== 0 || (_la - 150 & ~31) == 0 && (1 << _la - 150 & (1 << _CypherParser.REQUIRED - 150 | 1 << _CypherParser.STATUS - 150 | 1 << _CypherParser.ACTIVE - 150 | 1 << _CypherParser.SUSPENDED - 150 | 1 << _CypherParser.ALTER - 150 | 1 << _CypherParser.CURRENT - 150 | 1 << _CypherParser.TO - 150 | 1 << _CypherParser.PRIVILEGES - 150 | 1 << _CypherParser.GRANT - 150 | 1 << _CypherParser.DENY - 150 | 1 << _CypherParser.REVOKE - 150 | 1 << _CypherParser.RELATIONSHIPS - 150 | 1 << _CypherParser.NODES - 150 | 1 << _CypherParser.ELEMENT - 150 | 1 << _CypherParser.ELEMENTS - 150 | 1 << _CypherParser.COPY - 150 | 1 << _CypherParser.OF - 150 | 1 << _CypherParser.TRAVERSE - 150 | 1 << _CypherParser.READ - 150 | 1 << _CypherParser.WRITE - 150 | 1 << _CypherParser.ACCESS - 150 | 1 << _CypherParser.INDEXES - 150 | 1 << _CypherParser.MANAGEMENT - 150 | 1 << _CypherParser.NEW - 150 | 1 << _CypherParser.LABEL - 150 | 1 << _CypherParser.LABELS - 150 | 1 << _CypherParser.NAME - 150 | 1 << _CypherParser.NAMES - 150 | 1 << _CypherParser.TYPE - 150 | 1 << _CypherParser.TYPES - 150 | 1 << _CypherParser.PROPERTY - 150 | 1 << _CypherParser.CONSTRAINTS - 150)) !== 0 || (_la - 182 & ~31) == 0 && (1 << _la - 182 & (1 << _CypherParser.ASSIGN - 182 | 1 << _CypherParser.BTREE - 182 | 1 << _CypherParser.EXIST - 182 | 1 << _CypherParser.FOR - 182 | 1 << _CypherParser.OPTIONS - 182 | 1 << _CypherParser.EXECUTE - 182 | 1 << _CypherParser.DEFINED - 182 | 1 << _CypherParser.FUNCTION - 182 | 1 << _CypherParser.FUNCTIONS - 182 | 1 << _CypherParser.BOOSTED - 182 | 1 << _CypherParser.PROCEDURE - 182 | 1 << _CypherParser.PROCEDURES - 182 | 1 << _CypherParser.ADMIN - 182 | 1 << _CypherParser.ADMINISTRATOR - 182 | 1 << _CypherParser.BRIEF - 182 | 1 << _CypherParser.VERBOSE - 182 | 1 << _CypherParser.OUTPUT - 182)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof es_default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
};
_defineProperty(CypherParser, "grammarFileName", "Cypher.g4");
_defineProperty(CypherParser, "literalNames", [null, "';'", "':'", "'-'", "'=>'", "'://'", "'/'", "'.'", "'@'", "'#'", "'?'", "'&'", "'='", "'+'", "'{'", "','", "'}'", "'['", "']'", "'*'", "'('", "')'", "'+='", "'|'", "'..'", "'%'", "'^'", "'=~'", "'<>'", "'!='", "'<'", "'>'", "'<='", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'0'"]);
_defineProperty(CypherParser, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "CATALOG", "SHOW", "DEFAULT", "DBMS", "DATABASE", "DATABASES", "GRAPH", "GRAPHS", "REPLACE", "IF", "STOP", "ROLE", "ROLES", "USER", "USERS", "POPULATED", "PASSWORD", "CHANGE", "REQUIRED", "STATUS", "ACTIVE", "SUSPENDED", "ALTER", "CURRENT", "TO", "PRIVILEGES", "GRANT", "DENY", "REVOKE", "RELATIONSHIPS", "NODES", "ELEMENT", "ELEMENTS", "COPY", "OF", "TRAVERSE", "READ", "WRITE", "ACCESS", "INDEXES", "MANAGEMENT", "NEW", "LABEL", "LABELS", "NAME", "NAMES", "TYPE", "TYPES", "PROPERTY", "CONSTRAINTS", "ASSIGN", "BTREE", "EXIST", "FOR", "OPTIONS", "EXECUTE", "DEFINED", "FUNCTION", "FUNCTIONS", "BOOSTED", "PROCEDURE", "PROCEDURES", "ADMIN", "ADMINISTRATOR", "BRIEF", "VERBOSE", "OUTPUT", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN"]);
_defineProperty(CypherParser, "ruleNames", ["cypher", "cypherPart", "cypherConsoleCommand", "cypherConsoleCommandName", "cypherConsoleCommandParameters", "cypherConsoleCommandParameter", "arrowExpression", "url", "uri", "scheme", "host", "hostname", "hostnumber", "port", "path", "user", "login", "password", "frag", "urlQuery", "search", "searchparameter", "string", "urlDigits", "json", "obj", "pair", "array", "value", "keyValueLiteral", "commandPath", "subCommand", "cypherQuery", "queryOptions", "anyCypherOption", "cypherOption", "versionNumber", "explain", "profile", "configurationOption", "statement", "query", "regularQuery", "bulkImportQuery", "singleQuery", "periodicCommitHint", "loadCSVQuery", "union", "clause", "command", "systemCommand", "multidatabaseCommand", "userCommand", "privilegeCommand", "showRoles", "createRole", "copyRole", "dropRole", "showUsers", "createUser", "dropUser", "alterUser", "showPrivileges", "grantPrivilege", "denyPrivilege", "revokePrivilege", "revokePart", "databaseScope", "graphScope", "roles", "grantableGraphPrivileges", "revokeableGraphPrivileges", "datasbasePrivilege", "dbmsPrivilege", "elementScope", "propertiesList", "propertyScope", "showDatabase", "createDatabase", "dropDatabase", "startDatabase", "stopDatabase", "ifNotExists", "ifExists", "orReplace", "setPassword", "passwordStatus", "setStatus", "userStatus", "createUniqueConstraint", "createNodeKeyConstraint", "createNodePropertyExistenceConstraint", "createRelationshipPropertyExistenceConstraint", "createIndex", "dropUniqueConstraint", "dropNodeKeyConstraint", "dropNodePropertyExistenceConstraint", "dropRelationshipPropertyExistenceConstraint", "dropIndex", "index", "uniqueConstraint", "nodeKeyConstraint", "nodePropertyExistenceConstraint", "relationshipPropertyExistenceConstraint", "relationshipPatternSyntax", "loadCSVClause", "matchClause", "unwindClause", "mergeClause", "mergeAction", "createClause", "createUniqueClause", "setClause", "setItem", "deleteClause", "removeClause", "removeItem", "foreachClause", "withClause", "returnClause", "returnBody", "func", "returnItems", "returnItem", "call", "procedureInvocation", "procedureInvocationBody", "procedureArguments", "procedureResults", "procedureResult", "aliasedProcedureResult", "simpleProcedureResult", "procedureOutput", "order", "skip", "limit", "sortItem", "hint", "startClause", "startPoint", "lookup", "nodeLookup", "relationshipLookup", "identifiedIndexLookup", "indexQuery", "idLookup", "literalIds", "where", "pattern", "patternPart", "anonymousPatternPart", "patternElement", "nodePattern", "patternElementChain", "relationshipPattern", "relationshipPatternStart", "relationshipPatternEnd", "relationshipDetail", "properties", "relType", "relationshipTypes", "relationshipType", "relationshipTypeOptionalColon", "nodeLabels", "nodeLabel", "rangeLiteral", "labelName", "relTypeName", "expression", "orExpression", "xorExpression", "andExpression", "notExpression", "comparisonExpression", "addOrSubtractExpression", "multiplyDivideModuloExpression", "powerOfExpression", "unaryAddOrSubtractExpression", "stringListNullOperatorExpression", "propertyOrLabelsExpression", "filterFunction", "filterFunctionName", "existsFunction", "existsFunctionName", "allFunction", "allFunctionName", "anyFunction", "anyFunctionName", "noneFunction", "noneFunctionName", "singleFunction", "singleFunctionName", "extractFunction", "extractFunctionName", "reduceFunction", "reduceFunctionName", "shortestPathPatternFunction", "shortestPathFunctionName", "allShortestPathFunctionName", "atom", "literal", "stringLiteral", "booleanLiteral", "listLiteral", "partialComparisonExpression", "parenthesizedExpression", "relationshipsPattern", "filterExpression", "idInColl", "functionInvocation", "functionInvocationBody", "functionName", "procedureName", "listComprehension", "patternComprehension", "propertyLookup", "caseExpression", "caseAlternatives", "variable", "numberLiteral", "mapLiteral", "mapProjection", "mapProjectionVariants", "literalEntry", "propertySelector", "variableSelector", "allPropertiesSelector", "parameter", "legacyParameter", "newParameter", "parameterName", "propertyExpressions", "propertyExpression", "propertyKeys", "propertyKeyName", "integerLiteral", "doubleLiteral", "namespace", "leftArrowHead", "rightArrowHead", "dash", "symbolicName", "keyword"]);
CypherParser.EOF = es_default.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.T__45 = 46;
CypherParser.T__46 = 47;
CypherParser.T__47 = 48;
CypherParser.T__48 = 49;
CypherParser.T__49 = 50;
CypherParser.T__50 = 51;
CypherParser.T__51 = 52;
CypherParser.T__52 = 53;
CypherParser.CYPHER = 54;
CypherParser.EXPLAIN = 55;
CypherParser.PROFILE = 56;
CypherParser.USING = 57;
CypherParser.PERIODIC = 58;
CypherParser.COMMIT = 59;
CypherParser.UNION = 60;
CypherParser.ALL = 61;
CypherParser.CREATE = 62;
CypherParser.DROP = 63;
CypherParser.INDEX = 64;
CypherParser.ON = 65;
CypherParser.CONSTRAINT = 66;
CypherParser.ASSERT = 67;
CypherParser.IS = 68;
CypherParser.UNIQUE = 69;
CypherParser.EXISTS = 70;
CypherParser.LOAD = 71;
CypherParser.CSV = 72;
CypherParser.WITH = 73;
CypherParser.HEADERS = 74;
CypherParser.FROM = 75;
CypherParser.AS = 76;
CypherParser.FIELDTERMINATOR = 77;
CypherParser.OPTIONAL = 78;
CypherParser.MATCH = 79;
CypherParser.UNWIND = 80;
CypherParser.MERGE = 81;
CypherParser.SET = 82;
CypherParser.DETACH = 83;
CypherParser.DELETE = 84;
CypherParser.REMOVE = 85;
CypherParser.FOREACH = 86;
CypherParser.IN = 87;
CypherParser.DISTINCT = 88;
CypherParser.RETURN = 89;
CypherParser.ORDER = 90;
CypherParser.BY = 91;
CypherParser.L_SKIP = 92;
CypherParser.LIMIT = 93;
CypherParser.ASCENDING = 94;
CypherParser.ASC = 95;
CypherParser.DESCENDING = 96;
CypherParser.DESC = 97;
CypherParser.JOIN = 98;
CypherParser.SCAN = 99;
CypherParser.START = 100;
CypherParser.NODE = 101;
CypherParser.RELATIONSHIP = 102;
CypherParser.REL = 103;
CypherParser.WHERE = 104;
CypherParser.SHORTESTPATH = 105;
CypherParser.ALLSHORTESTPATHS = 106;
CypherParser.OR = 107;
CypherParser.XOR = 108;
CypherParser.AND = 109;
CypherParser.NOT = 110;
CypherParser.STARTS = 111;
CypherParser.ENDS = 112;
CypherParser.CONTAINS = 113;
CypherParser.NULL = 114;
CypherParser.COUNT = 115;
CypherParser.FILTER = 116;
CypherParser.EXTRACT = 117;
CypherParser.ANY = 118;
CypherParser.NONE = 119;
CypherParser.SINGLE = 120;
CypherParser.TRUE = 121;
CypherParser.FALSE = 122;
CypherParser.REDUCE = 123;
CypherParser.CASE = 124;
CypherParser.ELSE = 125;
CypherParser.END = 126;
CypherParser.WHEN = 127;
CypherParser.THEN = 128;
CypherParser.CALL = 129;
CypherParser.YIELD = 130;
CypherParser.KEY = 131;
CypherParser.CATALOG = 132;
CypherParser.SHOW = 133;
CypherParser.DEFAULT = 134;
CypherParser.DBMS = 135;
CypherParser.DATABASE = 136;
CypherParser.DATABASES = 137;
CypherParser.GRAPH = 138;
CypherParser.GRAPHS = 139;
CypherParser.REPLACE = 140;
CypherParser.IF = 141;
CypherParser.STOP = 142;
CypherParser.ROLE = 143;
CypherParser.ROLES = 144;
CypherParser.USER = 145;
CypherParser.USERS = 146;
CypherParser.POPULATED = 147;
CypherParser.PASSWORD = 148;
CypherParser.CHANGE = 149;
CypherParser.REQUIRED = 150;
CypherParser.STATUS = 151;
CypherParser.ACTIVE = 152;
CypherParser.SUSPENDED = 153;
CypherParser.ALTER = 154;
CypherParser.CURRENT = 155;
CypherParser.TO = 156;
CypherParser.PRIVILEGES = 157;
CypherParser.GRANT = 158;
CypherParser.DENY = 159;
CypherParser.REVOKE = 160;
CypherParser.RELATIONSHIPS = 161;
CypherParser.NODES = 162;
CypherParser.ELEMENT = 163;
CypherParser.ELEMENTS = 164;
CypherParser.COPY = 165;
CypherParser.OF = 166;
CypherParser.TRAVERSE = 167;
CypherParser.READ = 168;
CypherParser.WRITE = 169;
CypherParser.ACCESS = 170;
CypherParser.INDEXES = 171;
CypherParser.MANAGEMENT = 172;
CypherParser.NEW = 173;
CypherParser.LABEL = 174;
CypherParser.LABELS = 175;
CypherParser.NAME = 176;
CypherParser.NAMES = 177;
CypherParser.TYPE = 178;
CypherParser.TYPES = 179;
CypherParser.PROPERTY = 180;
CypherParser.CONSTRAINTS = 181;
CypherParser.ASSIGN = 182;
CypherParser.BTREE = 183;
CypherParser.EXIST = 184;
CypherParser.FOR = 185;
CypherParser.OPTIONS = 186;
CypherParser.EXECUTE = 187;
CypherParser.DEFINED = 188;
CypherParser.FUNCTION = 189;
CypherParser.FUNCTIONS = 190;
CypherParser.BOOSTED = 191;
CypherParser.PROCEDURE = 192;
CypherParser.PROCEDURES = 193;
CypherParser.ADMIN = 194;
CypherParser.ADMINISTRATOR = 195;
CypherParser.BRIEF = 196;
CypherParser.VERBOSE = 197;
CypherParser.OUTPUT = 198;
CypherParser.StringLiteral = 199;
CypherParser.UrlHex = 200;
CypherParser.EscapedChar = 201;
CypherParser.HexInteger = 202;
CypherParser.DecimalInteger = 203;
CypherParser.OctalInteger = 204;
CypherParser.HexLetter = 205;
CypherParser.HexDigit = 206;
CypherParser.Digit = 207;
CypherParser.NonZeroDigit = 208;
CypherParser.NonZeroOctDigit = 209;
CypherParser.OctDigit = 210;
CypherParser.ZeroDigit = 211;
CypherParser.ExponentDecimalReal = 212;
CypherParser.RegularDecimalReal = 213;
CypherParser.UnescapedSymbolicName = 214;
CypherParser.IdentifierStart = 215;
CypherParser.IdentifierPart = 216;
CypherParser.EscapedSymbolicName = 217;
CypherParser.SP = 218;
CypherParser.WHITESPACE = 219;
CypherParser.Comment = 220;
CypherParser.ERROR_TOKEN = 221;
CypherParser.RULE_cypher = 0;
CypherParser.RULE_cypherPart = 1;
CypherParser.RULE_cypherConsoleCommand = 2;
CypherParser.RULE_cypherConsoleCommandName = 3;
CypherParser.RULE_cypherConsoleCommandParameters = 4;
CypherParser.RULE_cypherConsoleCommandParameter = 5;
CypherParser.RULE_arrowExpression = 6;
CypherParser.RULE_url = 7;
CypherParser.RULE_uri = 8;
CypherParser.RULE_scheme = 9;
CypherParser.RULE_host = 10;
CypherParser.RULE_hostname = 11;
CypherParser.RULE_hostnumber = 12;
CypherParser.RULE_port = 13;
CypherParser.RULE_path = 14;
CypherParser.RULE_user = 15;
CypherParser.RULE_login = 16;
CypherParser.RULE_password = 17;
CypherParser.RULE_frag = 18;
CypherParser.RULE_urlQuery = 19;
CypherParser.RULE_search = 20;
CypherParser.RULE_searchparameter = 21;
CypherParser.RULE_string = 22;
CypherParser.RULE_urlDigits = 23;
CypherParser.RULE_json = 24;
CypherParser.RULE_obj = 25;
CypherParser.RULE_pair = 26;
CypherParser.RULE_array = 27;
CypherParser.RULE_value = 28;
CypherParser.RULE_keyValueLiteral = 29;
CypherParser.RULE_commandPath = 30;
CypherParser.RULE_subCommand = 31;
CypherParser.RULE_cypherQuery = 32;
CypherParser.RULE_queryOptions = 33;
CypherParser.RULE_anyCypherOption = 34;
CypherParser.RULE_cypherOption = 35;
CypherParser.RULE_versionNumber = 36;
CypherParser.RULE_explain = 37;
CypherParser.RULE_profile = 38;
CypherParser.RULE_configurationOption = 39;
CypherParser.RULE_statement = 40;
CypherParser.RULE_query = 41;
CypherParser.RULE_regularQuery = 42;
CypherParser.RULE_bulkImportQuery = 43;
CypherParser.RULE_singleQuery = 44;
CypherParser.RULE_periodicCommitHint = 45;
CypherParser.RULE_loadCSVQuery = 46;
CypherParser.RULE_union = 47;
CypherParser.RULE_clause = 48;
CypherParser.RULE_command = 49;
CypherParser.RULE_systemCommand = 50;
CypherParser.RULE_multidatabaseCommand = 51;
CypherParser.RULE_userCommand = 52;
CypherParser.RULE_privilegeCommand = 53;
CypherParser.RULE_showRoles = 54;
CypherParser.RULE_createRole = 55;
CypherParser.RULE_copyRole = 56;
CypherParser.RULE_dropRole = 57;
CypherParser.RULE_showUsers = 58;
CypherParser.RULE_createUser = 59;
CypherParser.RULE_dropUser = 60;
CypherParser.RULE_alterUser = 61;
CypherParser.RULE_showPrivileges = 62;
CypherParser.RULE_grantPrivilege = 63;
CypherParser.RULE_denyPrivilege = 64;
CypherParser.RULE_revokePrivilege = 65;
CypherParser.RULE_revokePart = 66;
CypherParser.RULE_databaseScope = 67;
CypherParser.RULE_graphScope = 68;
CypherParser.RULE_roles = 69;
CypherParser.RULE_grantableGraphPrivileges = 70;
CypherParser.RULE_revokeableGraphPrivileges = 71;
CypherParser.RULE_datasbasePrivilege = 72;
CypherParser.RULE_dbmsPrivilege = 73;
CypherParser.RULE_elementScope = 74;
CypherParser.RULE_propertiesList = 75;
CypherParser.RULE_propertyScope = 76;
CypherParser.RULE_showDatabase = 77;
CypherParser.RULE_createDatabase = 78;
CypherParser.RULE_dropDatabase = 79;
CypherParser.RULE_startDatabase = 80;
CypherParser.RULE_stopDatabase = 81;
CypherParser.RULE_ifNotExists = 82;
CypherParser.RULE_ifExists = 83;
CypherParser.RULE_orReplace = 84;
CypherParser.RULE_setPassword = 85;
CypherParser.RULE_passwordStatus = 86;
CypherParser.RULE_setStatus = 87;
CypherParser.RULE_userStatus = 88;
CypherParser.RULE_createUniqueConstraint = 89;
CypherParser.RULE_createNodeKeyConstraint = 90;
CypherParser.RULE_createNodePropertyExistenceConstraint = 91;
CypherParser.RULE_createRelationshipPropertyExistenceConstraint = 92;
CypherParser.RULE_createIndex = 93;
CypherParser.RULE_dropUniqueConstraint = 94;
CypherParser.RULE_dropNodeKeyConstraint = 95;
CypherParser.RULE_dropNodePropertyExistenceConstraint = 96;
CypherParser.RULE_dropRelationshipPropertyExistenceConstraint = 97;
CypherParser.RULE_dropIndex = 98;
CypherParser.RULE_index = 99;
CypherParser.RULE_uniqueConstraint = 100;
CypherParser.RULE_nodeKeyConstraint = 101;
CypherParser.RULE_nodePropertyExistenceConstraint = 102;
CypherParser.RULE_relationshipPropertyExistenceConstraint = 103;
CypherParser.RULE_relationshipPatternSyntax = 104;
CypherParser.RULE_loadCSVClause = 105;
CypherParser.RULE_matchClause = 106;
CypherParser.RULE_unwindClause = 107;
CypherParser.RULE_mergeClause = 108;
CypherParser.RULE_mergeAction = 109;
CypherParser.RULE_createClause = 110;
CypherParser.RULE_createUniqueClause = 111;
CypherParser.RULE_setClause = 112;
CypherParser.RULE_setItem = 113;
CypherParser.RULE_deleteClause = 114;
CypherParser.RULE_removeClause = 115;
CypherParser.RULE_removeItem = 116;
CypherParser.RULE_foreachClause = 117;
CypherParser.RULE_withClause = 118;
CypherParser.RULE_returnClause = 119;
CypherParser.RULE_returnBody = 120;
CypherParser.RULE_func = 121;
CypherParser.RULE_returnItems = 122;
CypherParser.RULE_returnItem = 123;
CypherParser.RULE_call = 124;
CypherParser.RULE_procedureInvocation = 125;
CypherParser.RULE_procedureInvocationBody = 126;
CypherParser.RULE_procedureArguments = 127;
CypherParser.RULE_procedureResults = 128;
CypherParser.RULE_procedureResult = 129;
CypherParser.RULE_aliasedProcedureResult = 130;
CypherParser.RULE_simpleProcedureResult = 131;
CypherParser.RULE_procedureOutput = 132;
CypherParser.RULE_order = 133;
CypherParser.RULE_skip = 134;
CypherParser.RULE_limit = 135;
CypherParser.RULE_sortItem = 136;
CypherParser.RULE_hint = 137;
CypherParser.RULE_startClause = 138;
CypherParser.RULE_startPoint = 139;
CypherParser.RULE_lookup = 140;
CypherParser.RULE_nodeLookup = 141;
CypherParser.RULE_relationshipLookup = 142;
CypherParser.RULE_identifiedIndexLookup = 143;
CypherParser.RULE_indexQuery = 144;
CypherParser.RULE_idLookup = 145;
CypherParser.RULE_literalIds = 146;
CypherParser.RULE_where = 147;
CypherParser.RULE_pattern = 148;
CypherParser.RULE_patternPart = 149;
CypherParser.RULE_anonymousPatternPart = 150;
CypherParser.RULE_patternElement = 151;
CypherParser.RULE_nodePattern = 152;
CypherParser.RULE_patternElementChain = 153;
CypherParser.RULE_relationshipPattern = 154;
CypherParser.RULE_relationshipPatternStart = 155;
CypherParser.RULE_relationshipPatternEnd = 156;
CypherParser.RULE_relationshipDetail = 157;
CypherParser.RULE_properties = 158;
CypherParser.RULE_relType = 159;
CypherParser.RULE_relationshipTypes = 160;
CypherParser.RULE_relationshipType = 161;
CypherParser.RULE_relationshipTypeOptionalColon = 162;
CypherParser.RULE_nodeLabels = 163;
CypherParser.RULE_nodeLabel = 164;
CypherParser.RULE_rangeLiteral = 165;
CypherParser.RULE_labelName = 166;
CypherParser.RULE_relTypeName = 167;
CypherParser.RULE_expression = 168;
CypherParser.RULE_orExpression = 169;
CypherParser.RULE_xorExpression = 170;
CypherParser.RULE_andExpression = 171;
CypherParser.RULE_notExpression = 172;
CypherParser.RULE_comparisonExpression = 173;
CypherParser.RULE_addOrSubtractExpression = 174;
CypherParser.RULE_multiplyDivideModuloExpression = 175;
CypherParser.RULE_powerOfExpression = 176;
CypherParser.RULE_unaryAddOrSubtractExpression = 177;
CypherParser.RULE_stringListNullOperatorExpression = 178;
CypherParser.RULE_propertyOrLabelsExpression = 179;
CypherParser.RULE_filterFunction = 180;
CypherParser.RULE_filterFunctionName = 181;
CypherParser.RULE_existsFunction = 182;
CypherParser.RULE_existsFunctionName = 183;
CypherParser.RULE_allFunction = 184;
CypherParser.RULE_allFunctionName = 185;
CypherParser.RULE_anyFunction = 186;
CypherParser.RULE_anyFunctionName = 187;
CypherParser.RULE_noneFunction = 188;
CypherParser.RULE_noneFunctionName = 189;
CypherParser.RULE_singleFunction = 190;
CypherParser.RULE_singleFunctionName = 191;
CypherParser.RULE_extractFunction = 192;
CypherParser.RULE_extractFunctionName = 193;
CypherParser.RULE_reduceFunction = 194;
CypherParser.RULE_reduceFunctionName = 195;
CypherParser.RULE_shortestPathPatternFunction = 196;
CypherParser.RULE_shortestPathFunctionName = 197;
CypherParser.RULE_allShortestPathFunctionName = 198;
CypherParser.RULE_atom = 199;
CypherParser.RULE_literal = 200;
CypherParser.RULE_stringLiteral = 201;
CypherParser.RULE_booleanLiteral = 202;
CypherParser.RULE_listLiteral = 203;
CypherParser.RULE_partialComparisonExpression = 204;
CypherParser.RULE_parenthesizedExpression = 205;
CypherParser.RULE_relationshipsPattern = 206;
CypherParser.RULE_filterExpression = 207;
CypherParser.RULE_idInColl = 208;
CypherParser.RULE_functionInvocation = 209;
CypherParser.RULE_functionInvocationBody = 210;
CypherParser.RULE_functionName = 211;
CypherParser.RULE_procedureName = 212;
CypherParser.RULE_listComprehension = 213;
CypherParser.RULE_patternComprehension = 214;
CypherParser.RULE_propertyLookup = 215;
CypherParser.RULE_caseExpression = 216;
CypherParser.RULE_caseAlternatives = 217;
CypherParser.RULE_variable = 218;
CypherParser.RULE_numberLiteral = 219;
CypherParser.RULE_mapLiteral = 220;
CypherParser.RULE_mapProjection = 221;
CypherParser.RULE_mapProjectionVariants = 222;
CypherParser.RULE_literalEntry = 223;
CypherParser.RULE_propertySelector = 224;
CypherParser.RULE_variableSelector = 225;
CypherParser.RULE_allPropertiesSelector = 226;
CypherParser.RULE_parameter = 227;
CypherParser.RULE_legacyParameter = 228;
CypherParser.RULE_newParameter = 229;
CypherParser.RULE_parameterName = 230;
CypherParser.RULE_propertyExpressions = 231;
CypherParser.RULE_propertyExpression = 232;
CypherParser.RULE_propertyKeys = 233;
CypherParser.RULE_propertyKeyName = 234;
CypherParser.RULE_integerLiteral = 235;
CypherParser.RULE_doubleLiteral = 236;
CypherParser.RULE_namespace = 237;
CypherParser.RULE_leftArrowHead = 238;
CypherParser.RULE_rightArrowHead = 239;
CypherParser.RULE_dash = 240;
CypherParser.RULE_symbolicName = 241;
CypherParser.RULE_keyword = 242;
var CypherContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "cypherPart", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(CypherPartContext);
      } else {
        return this.getTypedRuleContext(CypherPartContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypher;
  }
  EOF() {
    return this.getToken(CypherParser.EOF, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypher(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypher(this);
    }
  }
};
var CypherPartContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherPart;
  }
  cypherQuery() {
    return this.getTypedRuleContext(CypherQueryContext, 0);
  }
  cypherConsoleCommand() {
    return this.getTypedRuleContext(CypherConsoleCommandContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherPart(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherPart(this);
    }
  }
};
var CypherConsoleCommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommand;
  }
  cypherConsoleCommandName() {
    return this.getTypedRuleContext(CypherConsoleCommandNameContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  cypherConsoleCommandParameters() {
    return this.getTypedRuleContext(CypherConsoleCommandParametersContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherConsoleCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherConsoleCommand(this);
    }
  }
};
var CypherConsoleCommandNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandName;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherConsoleCommandName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherConsoleCommandName(this);
    }
  }
};
var CypherConsoleCommandParametersContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "cypherConsoleCommandParameter", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(CypherConsoleCommandParameterContext);
      } else {
        return this.getTypedRuleContext(CypherConsoleCommandParameterContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameters;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherConsoleCommandParameters(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherConsoleCommandParameters(this);
    }
  }
};
var CypherConsoleCommandParameterContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameter;
  }
  url() {
    return this.getTypedRuleContext(UrlContext, 0);
  }
  json() {
    return this.getTypedRuleContext(JsonContext, 0);
  }
  arrowExpression() {
    return this.getTypedRuleContext(ArrowExpressionContext, 0);
  }
  mapLiteral() {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  }
  keyValueLiteral() {
    return this.getTypedRuleContext(KeyValueLiteralContext, 0);
  }
  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }
  numberLiteral() {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
  }
  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }
  subCommand() {
    return this.getTypedRuleContext(SubCommandContext, 0);
  }
  commandPath() {
    return this.getTypedRuleContext(CommandPathContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherConsoleCommandParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherConsoleCommandParameter(this);
    }
  }
};
var ArrowExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_arrowExpression;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterArrowExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitArrowExpression(this);
    }
  }
};
var UrlContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_url;
  }
  uri() {
    return this.getTypedRuleContext(UriContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUrl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUrl(this);
    }
  }
};
var UriContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_uri;
  }
  scheme() {
    return this.getTypedRuleContext(SchemeContext, 0);
  }
  host() {
    return this.getTypedRuleContext(HostContext, 0);
  }
  login() {
    return this.getTypedRuleContext(LoginContext, 0);
  }
  port() {
    return this.getTypedRuleContext(PortContext, 0);
  }
  path() {
    return this.getTypedRuleContext(PathContext, 0);
  }
  urlQuery() {
    return this.getTypedRuleContext(UrlQueryContext, 0);
  }
  frag() {
    return this.getTypedRuleContext(FragContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUri(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUri(this);
    }
  }
};
var SchemeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_scheme;
  }
  string() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterScheme(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitScheme(this);
    }
  }
};
var HostContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_host;
  }
  hostname() {
    return this.getTypedRuleContext(HostnameContext, 0);
  }
  hostnumber() {
    return this.getTypedRuleContext(HostnumberContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterHost(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitHost(this);
    }
  }
};
var HostnameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "string", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(StringContext);
      } else {
        return this.getTypedRuleContext(StringContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hostname;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterHostname(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitHostname(this);
    }
  }
};
var HostnumberContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "urlDigits", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(UrlDigitsContext);
      } else {
        return this.getTypedRuleContext(UrlDigitsContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hostnumber;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterHostnumber(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitHostnumber(this);
    }
  }
};
var PortContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_port;
  }
  urlDigits() {
    return this.getTypedRuleContext(UrlDigitsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPort(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPort(this);
    }
  }
};
var PathContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "string", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(StringContext);
      } else {
        return this.getTypedRuleContext(StringContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_path;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPath(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPath(this);
    }
  }
};
var UserContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_user;
  }
  string() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUser(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUser(this);
    }
  }
};
var LoginContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_login;
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  password() {
    return this.getTypedRuleContext(PasswordContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLogin(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLogin(this);
    }
  }
};
var PasswordContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_password;
  }
  string() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPassword(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPassword(this);
    }
  }
};
var FragContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_frag;
  }
  string() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFrag(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFrag(this);
    }
  }
};
var UrlQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_urlQuery;
  }
  search() {
    return this.getTypedRuleContext(SearchContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUrlQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUrlQuery(this);
    }
  }
};
var SearchContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "searchparameter", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SearchparameterContext);
      } else {
        return this.getTypedRuleContext(SearchparameterContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_search;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSearch(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSearch(this);
    }
  }
};
var SearchparameterContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "string", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(StringContext);
      } else {
        return this.getTypedRuleContext(StringContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_searchparameter;
  }
  urlDigits() {
    return this.getTypedRuleContext(UrlDigitsContext, 0);
  }
  UrlHex() {
    return this.getToken(CypherParser.UrlHex, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSearchparameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSearchparameter(this);
    }
  }
};
var StringContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_string;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterString(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitString(this);
    }
  }
};
var UrlDigitsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "integerLiteral", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
      } else {
        return this.getTypedRuleContext(IntegerLiteralContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_urlDigits;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUrlDigits(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUrlDigits(this);
    }
  }
};
var JsonContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_json;
  }
  value() {
    return this.getTypedRuleContext(ValueContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterJson(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitJson(this);
    }
  }
};
var ObjContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "pair", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PairContext);
      } else {
        return this.getTypedRuleContext(PairContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_obj;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterObj(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitObj(this);
    }
  }
};
var PairContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pair;
  }
  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }
  value() {
    return this.getTypedRuleContext(ValueContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPair(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPair(this);
    }
  }
};
var ArrayContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "value", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ValueContext);
      } else {
        return this.getTypedRuleContext(ValueContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_array;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterArray(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitArray(this);
    }
  }
};
var ValueContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_value;
  }
  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }
  numberLiteral() {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
  }
  obj() {
    return this.getTypedRuleContext(ObjContext, 0);
  }
  array() {
    return this.getTypedRuleContext(ArrayContext, 0);
  }
  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }
  NULL() {
    return this.getToken(CypherParser.NULL, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterValue(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitValue(this);
    }
  }
};
var KeyValueLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_keyValueLiteral;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  StringLiteral() {
    return this.getToken(CypherParser.StringLiteral, 0);
  }
  numberLiteral() {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
  }
  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterKeyValueLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitKeyValueLiteral(this);
    }
  }
};
var CommandPathContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    _defineProperty(this, "numberLiteral", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(NumberLiteralContext);
      } else {
        return this.getTypedRuleContext(NumberLiteralContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_commandPath;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCommandPath(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCommandPath(this);
    }
  }
};
var SubCommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_subCommand;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSubCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSubCommand(this);
    }
  }
};
var CypherQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherQuery;
  }
  queryOptions() {
    return this.getTypedRuleContext(QueryOptionsContext, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherQuery(this);
    }
  }
};
var QueryOptionsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "anyCypherOption", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(AnyCypherOptionContext);
      } else {
        return this.getTypedRuleContext(AnyCypherOptionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_queryOptions;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterQueryOptions(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitQueryOptions(this);
    }
  }
};
var AnyCypherOptionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyCypherOption;
  }
  cypherOption() {
    return this.getTypedRuleContext(CypherOptionContext, 0);
  }
  explain() {
    return this.getTypedRuleContext(ExplainContext, 0);
  }
  profile() {
    return this.getTypedRuleContext(ProfileContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAnyCypherOption(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAnyCypherOption(this);
    }
  }
};
var CypherOptionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "configurationOption", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ConfigurationOptionContext);
      } else {
        return this.getTypedRuleContext(ConfigurationOptionContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherOption;
  }
  CYPHER() {
    return this.getToken(CypherParser.CYPHER, 0);
  }
  versionNumber() {
    return this.getTypedRuleContext(VersionNumberContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypherOption(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypherOption(this);
    }
  }
};
var VersionNumberContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_versionNumber;
  }
  RegularDecimalReal() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterVersionNumber(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitVersionNumber(this);
    }
  }
};
var ExplainContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_explain;
  }
  EXPLAIN() {
    return this.getToken(CypherParser.EXPLAIN, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterExplain(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitExplain(this);
    }
  }
};
var ProfileContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_profile;
  }
  PROFILE() {
    return this.getToken(CypherParser.PROFILE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProfile(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProfile(this);
    }
  }
};
var ConfigurationOptionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_configurationOption;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterConfigurationOption(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitConfigurationOption(this);
    }
  }
};
var StatementContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_statement;
  }
  command() {
    return this.getTypedRuleContext(CommandContext, 0);
  }
  query() {
    return this.getTypedRuleContext(QueryContext, 0);
  }
  systemCommand() {
    return this.getTypedRuleContext(SystemCommandContext, 0);
  }
  CATALOG() {
    return this.getToken(CypherParser.CATALOG, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStatement(this);
    }
  }
};
var QueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_query;
  }
  regularQuery() {
    return this.getTypedRuleContext(RegularQueryContext, 0);
  }
  bulkImportQuery() {
    return this.getTypedRuleContext(BulkImportQueryContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitQuery(this);
    }
  }
};
var RegularQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "union", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(UnionContext);
      } else {
        return this.getTypedRuleContext(UnionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularQuery;
  }
  singleQuery() {
    return this.getTypedRuleContext(SingleQueryContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRegularQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRegularQuery(this);
    }
  }
};
var BulkImportQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_bulkImportQuery;
  }
  periodicCommitHint() {
    return this.getTypedRuleContext(PeriodicCommitHintContext, 0);
  }
  loadCSVQuery() {
    return this.getTypedRuleContext(LoadCSVQueryContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterBulkImportQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitBulkImportQuery(this);
    }
  }
};
var SingleQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "clause", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ClauseContext);
      } else {
        return this.getTypedRuleContext(ClauseContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleQuery;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSingleQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSingleQuery(this);
    }
  }
};
var PeriodicCommitHintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_periodicCommitHint;
  }
  USING() {
    return this.getToken(CypherParser.USING, 0);
  }
  PERIODIC() {
    return this.getToken(CypherParser.PERIODIC, 0);
  }
  COMMIT() {
    return this.getToken(CypherParser.COMMIT, 0);
  }
  integerLiteral() {
    return this.getTypedRuleContext(IntegerLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPeriodicCommitHint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPeriodicCommitHint(this);
    }
  }
};
var LoadCSVQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "clause", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ClauseContext);
      } else {
        return this.getTypedRuleContext(ClauseContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_loadCSVQuery;
  }
  loadCSVClause() {
    return this.getTypedRuleContext(LoadCSVClauseContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLoadCSVQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLoadCSVQuery(this);
    }
  }
};
var UnionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_union;
  }
  UNION() {
    return this.getToken(CypherParser.UNION, 0);
  }
  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }
  singleQuery() {
    return this.getTypedRuleContext(SingleQueryContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnion(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnion(this);
    }
  }
};
var ClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_clause;
  }
  loadCSVClause() {
    return this.getTypedRuleContext(LoadCSVClauseContext, 0);
  }
  startClause() {
    return this.getTypedRuleContext(StartClauseContext, 0);
  }
  matchClause() {
    return this.getTypedRuleContext(MatchClauseContext, 0);
  }
  unwindClause() {
    return this.getTypedRuleContext(UnwindClauseContext, 0);
  }
  mergeClause() {
    return this.getTypedRuleContext(MergeClauseContext, 0);
  }
  createClause() {
    return this.getTypedRuleContext(CreateClauseContext, 0);
  }
  createUniqueClause() {
    return this.getTypedRuleContext(CreateUniqueClauseContext, 0);
  }
  setClause() {
    return this.getTypedRuleContext(SetClauseContext, 0);
  }
  deleteClause() {
    return this.getTypedRuleContext(DeleteClauseContext, 0);
  }
  removeClause() {
    return this.getTypedRuleContext(RemoveClauseContext, 0);
  }
  foreachClause() {
    return this.getTypedRuleContext(ForeachClauseContext, 0);
  }
  withClause() {
    return this.getTypedRuleContext(WithClauseContext, 0);
  }
  returnClause() {
    return this.getTypedRuleContext(ReturnClauseContext, 0);
  }
  call() {
    return this.getTypedRuleContext(CallContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitClause(this);
    }
  }
};
var CommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_command;
  }
  createIndex() {
    return this.getTypedRuleContext(CreateIndexContext, 0);
  }
  dropIndex() {
    return this.getTypedRuleContext(DropIndexContext, 0);
  }
  createUniqueConstraint() {
    return this.getTypedRuleContext(CreateUniqueConstraintContext, 0);
  }
  dropUniqueConstraint() {
    return this.getTypedRuleContext(DropUniqueConstraintContext, 0);
  }
  createNodeKeyConstraint() {
    return this.getTypedRuleContext(CreateNodeKeyConstraintContext, 0);
  }
  dropNodeKeyConstraint() {
    return this.getTypedRuleContext(DropNodeKeyConstraintContext, 0);
  }
  createNodePropertyExistenceConstraint() {
    return this.getTypedRuleContext(CreateNodePropertyExistenceConstraintContext, 0);
  }
  dropNodePropertyExistenceConstraint() {
    return this.getTypedRuleContext(DropNodePropertyExistenceConstraintContext, 0);
  }
  createRelationshipPropertyExistenceConstraint() {
    return this.getTypedRuleContext(CreateRelationshipPropertyExistenceConstraintContext, 0);
  }
  dropRelationshipPropertyExistenceConstraint() {
    return this.getTypedRuleContext(DropRelationshipPropertyExistenceConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCommand(this);
    }
  }
};
var SystemCommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_systemCommand;
  }
  multidatabaseCommand() {
    return this.getTypedRuleContext(MultidatabaseCommandContext, 0);
  }
  userCommand() {
    return this.getTypedRuleContext(UserCommandContext, 0);
  }
  privilegeCommand() {
    return this.getTypedRuleContext(PrivilegeCommandContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSystemCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSystemCommand(this);
    }
  }
};
var MultidatabaseCommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_multidatabaseCommand;
  }
  showDatabase() {
    return this.getTypedRuleContext(ShowDatabaseContext, 0);
  }
  createDatabase() {
    return this.getTypedRuleContext(CreateDatabaseContext, 0);
  }
  dropDatabase() {
    return this.getTypedRuleContext(DropDatabaseContext, 0);
  }
  startDatabase() {
    return this.getTypedRuleContext(StartDatabaseContext, 0);
  }
  stopDatabase() {
    return this.getTypedRuleContext(StopDatabaseContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMultidatabaseCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMultidatabaseCommand(this);
    }
  }
};
var UserCommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_userCommand;
  }
  showRoles() {
    return this.getTypedRuleContext(ShowRolesContext, 0);
  }
  createRole() {
    return this.getTypedRuleContext(CreateRoleContext, 0);
  }
  dropRole() {
    return this.getTypedRuleContext(DropRoleContext, 0);
  }
  showUsers() {
    return this.getTypedRuleContext(ShowUsersContext, 0);
  }
  createUser() {
    return this.getTypedRuleContext(CreateUserContext, 0);
  }
  dropUser() {
    return this.getTypedRuleContext(DropUserContext, 0);
  }
  alterUser() {
    return this.getTypedRuleContext(AlterUserContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUserCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUserCommand(this);
    }
  }
};
var PrivilegeCommandContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_privilegeCommand;
  }
  showPrivileges() {
    return this.getTypedRuleContext(ShowPrivilegesContext, 0);
  }
  grantPrivilege() {
    return this.getTypedRuleContext(GrantPrivilegeContext, 0);
  }
  denyPrivilege() {
    return this.getTypedRuleContext(DenyPrivilegeContext, 0);
  }
  revokePrivilege() {
    return this.getTypedRuleContext(RevokePrivilegeContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPrivilegeCommand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPrivilegeCommand(this);
    }
  }
};
var ShowRolesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showRoles;
  }
  SHOW() {
    return this.getToken(CypherParser.SHOW, 0);
  }
  ROLES() {
    return this.getToken(CypherParser.ROLES, 0);
  }
  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }
  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }
  USERS() {
    return this.getToken(CypherParser.USERS, 0);
  }
  POPULATED() {
    return this.getToken(CypherParser.POPULATED, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterShowRoles(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitShowRoles(this);
    }
  }
};
var CreateRoleContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createRole;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }
  copyRole() {
    return this.getTypedRuleContext(CopyRoleContext, 0);
  }
  orReplace() {
    return this.getTypedRuleContext(OrReplaceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateRole(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateRole(this);
    }
  }
};
var CopyRoleContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_copyRole;
  }
  AS() {
    return this.getToken(CypherParser.AS, 0);
  }
  COPY() {
    return this.getToken(CypherParser.COPY, 0);
  }
  OF() {
    return this.getToken(CypherParser.OF, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCopyRole(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCopyRole(this);
    }
  }
};
var DropRoleContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropRole;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  IF() {
    return this.getToken(CypherParser.IF, 0);
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropRole(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropRole(this);
    }
  }
};
var ShowUsersContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showUsers;
  }
  SHOW() {
    return this.getToken(CypherParser.SHOW, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  USERS() {
    return this.getToken(CypherParser.USERS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterShowUsers(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitShowUsers(this);
    }
  }
};
var CreateUserContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUser;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  USER() {
    return this.getToken(CypherParser.USER, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  setPassword() {
    return this.getTypedRuleContext(SetPasswordContext, 0);
  }
  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }
  setStatus() {
    return this.getTypedRuleContext(SetStatusContext, 0);
  }
  orReplace() {
    return this.getTypedRuleContext(OrReplaceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateUser(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateUser(this);
    }
  }
};
var DropUserContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropUser;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  USER() {
    return this.getToken(CypherParser.USER, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropUser(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropUser(this);
    }
  }
};
var AlterUserContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "password", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PasswordContext);
      } else {
        return this.getTypedRuleContext(PasswordContext, i);
      }
    });
    _defineProperty(this, "parameter", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ParameterContext);
      } else {
        return this.getTypedRuleContext(ParameterContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_alterUser;
  }
  ALTER() {
    return this.getToken(CypherParser.ALTER, 0);
  }
  CURRENT() {
    return this.getToken(CypherParser.CURRENT, 0);
  }
  USER() {
    return this.getToken(CypherParser.USER, 0);
  }
  SET() {
    return this.getToken(CypherParser.SET, 0);
  }
  PASSWORD() {
    return this.getToken(CypherParser.PASSWORD, 0);
  }
  FROM() {
    return this.getToken(CypherParser.FROM, 0);
  }
  TO() {
    return this.getToken(CypherParser.TO, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  setPassword() {
    return this.getTypedRuleContext(SetPasswordContext, 0);
  }
  setStatus() {
    return this.getTypedRuleContext(SetStatusContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAlterUser(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAlterUser(this);
    }
  }
};
var ShowPrivilegesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showPrivileges;
  }
  SHOW() {
    return this.getToken(CypherParser.SHOW, 0);
  }
  PRIVILEGES() {
    return this.getToken(CypherParser.PRIVILEGES, 0);
  }
  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  USER() {
    return this.getToken(CypherParser.USER, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterShowPrivileges(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitShowPrivileges(this);
    }
  }
};
var GrantPrivilegeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_grantPrivilege;
  }
  GRANT() {
    return this.getToken(CypherParser.GRANT, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  roles() {
    return this.getTypedRuleContext(RolesContext, 0);
  }
  TO() {
    return this.getToken(CypherParser.TO, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  datasbasePrivilege() {
    return this.getTypedRuleContext(DatasbasePrivilegeContext, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  databaseScope() {
    return this.getTypedRuleContext(DatabaseScopeContext, 0);
  }
  grantableGraphPrivileges() {
    return this.getTypedRuleContext(GrantableGraphPrivilegesContext, 0);
  }
  graphScope() {
    return this.getTypedRuleContext(GraphScopeContext, 0);
  }
  elementScope() {
    return this.getTypedRuleContext(ElementScopeContext, 0);
  }
  dbmsPrivilege() {
    return this.getTypedRuleContext(DbmsPrivilegeContext, 0);
  }
  DBMS() {
    return this.getToken(CypherParser.DBMS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterGrantPrivilege(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitGrantPrivilege(this);
    }
  }
};
var DenyPrivilegeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_denyPrivilege;
  }
  DENY() {
    return this.getToken(CypherParser.DENY, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  roles() {
    return this.getTypedRuleContext(RolesContext, 0);
  }
  TO() {
    return this.getToken(CypherParser.TO, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  datasbasePrivilege() {
    return this.getTypedRuleContext(DatasbasePrivilegeContext, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  databaseScope() {
    return this.getTypedRuleContext(DatabaseScopeContext, 0);
  }
  grantableGraphPrivileges() {
    return this.getTypedRuleContext(GrantableGraphPrivilegesContext, 0);
  }
  graphScope() {
    return this.getTypedRuleContext(GraphScopeContext, 0);
  }
  elementScope() {
    return this.getTypedRuleContext(ElementScopeContext, 0);
  }
  dbmsPrivilege() {
    return this.getTypedRuleContext(DbmsPrivilegeContext, 0);
  }
  DBMS() {
    return this.getToken(CypherParser.DBMS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDenyPrivilege(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDenyPrivilege(this);
    }
  }
};
var RevokePrivilegeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_revokePrivilege;
  }
  REVOKE() {
    return this.getToken(CypherParser.REVOKE, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  roles() {
    return this.getTypedRuleContext(RolesContext, 0);
  }
  FROM() {
    return this.getToken(CypherParser.FROM, 0);
  }
  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }
  revokePart() {
    return this.getTypedRuleContext(RevokePartContext, 0);
  }
  GRANT() {
    return this.getToken(CypherParser.GRANT, 0);
  }
  DENY() {
    return this.getToken(CypherParser.DENY, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRevokePrivilege(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRevokePrivilege(this);
    }
  }
};
var RevokePartContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_revokePart;
  }
  datasbasePrivilege() {
    return this.getTypedRuleContext(DatasbasePrivilegeContext, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  databaseScope() {
    return this.getTypedRuleContext(DatabaseScopeContext, 0);
  }
  revokeableGraphPrivileges() {
    return this.getTypedRuleContext(RevokeableGraphPrivilegesContext, 0);
  }
  graphScope() {
    return this.getTypedRuleContext(GraphScopeContext, 0);
  }
  dbmsPrivilege() {
    return this.getTypedRuleContext(DbmsPrivilegeContext, 0);
  }
  DBMS() {
    return this.getToken(CypherParser.DBMS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRevokePart(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRevokePart(this);
    }
  }
};
var DatabaseScopeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_databaseScope;
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  DATABASES() {
    return this.getToken(CypherParser.DATABASES, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDatabaseScope(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDatabaseScope(this);
    }
  }
};
var GraphScopeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_graphScope;
  }
  GRAPH() {
    return this.getToken(CypherParser.GRAPH, 0);
  }
  GRAPHS() {
    return this.getToken(CypherParser.GRAPHS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterGraphScope(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitGraphScope(this);
    }
  }
};
var RolesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_roles;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRoles(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRoles(this);
    }
  }
};
var GrantableGraphPrivilegesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_grantableGraphPrivileges;
  }
  revokeableGraphPrivileges() {
    return this.getTypedRuleContext(RevokeableGraphPrivilegesContext, 0);
  }
  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }
  propertiesList() {
    return this.getTypedRuleContext(PropertiesListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterGrantableGraphPrivileges(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitGrantableGraphPrivileges(this);
    }
  }
};
var RevokeableGraphPrivilegesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_revokeableGraphPrivileges;
  }
  TRAVERSE() {
    return this.getToken(CypherParser.TRAVERSE, 0);
  }
  READ() {
    return this.getToken(CypherParser.READ, 0);
  }
  propertiesList() {
    return this.getTypedRuleContext(PropertiesListContext, 0);
  }
  WRITE() {
    return this.getToken(CypherParser.WRITE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRevokeableGraphPrivileges(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRevokeableGraphPrivileges(this);
    }
  }
};
var DatasbasePrivilegeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_datasbasePrivilege;
  }
  ACCESS() {
    return this.getToken(CypherParser.ACCESS, 0);
  }
  START() {
    return this.getToken(CypherParser.START, 0);
  }
  STOP() {
    return this.getToken(CypherParser.STOP, 0);
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  INDEX() {
    return this.getToken(CypherParser.INDEX, 0);
  }
  INDEXES() {
    return this.getToken(CypherParser.INDEXES, 0);
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  MANAGEMENT() {
    return this.getToken(CypherParser.MANAGEMENT, 0);
  }
  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }
  CONSTRAINTS() {
    return this.getToken(CypherParser.CONSTRAINTS, 0);
  }
  NEW() {
    return this.getToken(CypherParser.NEW, 0);
  }
  LABEL() {
    return this.getToken(CypherParser.LABEL, 0);
  }
  LABELS() {
    return this.getToken(CypherParser.LABELS, 0);
  }
  NODE() {
    return this.getToken(CypherParser.NODE, 0);
  }
  TYPE() {
    return this.getToken(CypherParser.TYPE, 0);
  }
  TYPES() {
    return this.getToken(CypherParser.TYPES, 0);
  }
  RELATIONSHIP() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
  }
  NAME() {
    return this.getToken(CypherParser.NAME, 0);
  }
  NAMES() {
    return this.getToken(CypherParser.NAMES, 0);
  }
  PROPERTY() {
    return this.getToken(CypherParser.PROPERTY, 0);
  }
  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }
  PRIVILEGES() {
    return this.getToken(CypherParser.PRIVILEGES, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDatasbasePrivilege(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDatasbasePrivilege(this);
    }
  }
};
var DbmsPrivilegeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dbmsPrivilege;
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  MANAGEMENT() {
    return this.getToken(CypherParser.MANAGEMENT, 0);
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  ASSIGN() {
    return this.getToken(CypherParser.ASSIGN, 0);
  }
  REMOVE() {
    return this.getToken(CypherParser.REMOVE, 0);
  }
  SHOW() {
    return this.getToken(CypherParser.SHOW, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDbmsPrivilege(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDbmsPrivilege(this);
    }
  }
};
var ElementScopeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_elementScope;
  }
  propertiesList() {
    return this.getTypedRuleContext(PropertiesListContext, 0);
  }
  RELATIONSHIP() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
  }
  RELATIONSHIPS() {
    return this.getToken(CypherParser.RELATIONSHIPS, 0);
  }
  propertyScope() {
    return this.getTypedRuleContext(PropertyScopeContext, 0);
  }
  NODE() {
    return this.getToken(CypherParser.NODE, 0);
  }
  NODES() {
    return this.getToken(CypherParser.NODES, 0);
  }
  ELEMENT() {
    return this.getToken(CypherParser.ELEMENT, 0);
  }
  ELEMENTS() {
    return this.getToken(CypherParser.ELEMENTS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterElementScope(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitElementScope(this);
    }
  }
};
var PropertiesListContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertiesList;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertiesList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertiesList(this);
    }
  }
};
var PropertyScopeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyScope;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyScope(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyScope(this);
    }
  }
};
var ShowDatabaseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showDatabase;
  }
  SHOW() {
    return this.getToken(CypherParser.SHOW, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  DEFAULT() {
    return this.getToken(CypherParser.DEFAULT, 0);
  }
  DATABASES() {
    return this.getToken(CypherParser.DATABASES, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterShowDatabase(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitShowDatabase(this);
    }
  }
};
var CreateDatabaseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createDatabase;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }
  orReplace() {
    return this.getTypedRuleContext(OrReplaceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateDatabase(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateDatabase(this);
    }
  }
};
var DropDatabaseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropDatabase;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropDatabase(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropDatabase(this);
    }
  }
};
var StartDatabaseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startDatabase;
  }
  START() {
    return this.getToken(CypherParser.START, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStartDatabase(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStartDatabase(this);
    }
  }
};
var StopDatabaseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stopDatabase;
  }
  STOP() {
    return this.getToken(CypherParser.STOP, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStopDatabase(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStopDatabase(this);
    }
  }
};
var IfNotExistsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_ifNotExists;
  }
  IF() {
    return this.getToken(CypherParser.IF, 0);
  }
  NOT() {
    return this.getToken(CypherParser.NOT, 0);
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIfNotExists(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIfNotExists(this);
    }
  }
};
var IfExistsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_ifExists;
  }
  IF() {
    return this.getToken(CypherParser.IF, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIfExists(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIfExists(this);
    }
  }
};
var OrReplaceContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_orReplace;
  }
  OR() {
    return this.getToken(CypherParser.OR, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  REPLACE() {
    return this.getToken(CypherParser.REPLACE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterOrReplace(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitOrReplace(this);
    }
  }
};
var SetPasswordContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setPassword;
  }
  SET() {
    return this.getToken(CypherParser.SET, 0);
  }
  PASSWORD() {
    return this.getToken(CypherParser.PASSWORD, 0);
  }
  password() {
    return this.getTypedRuleContext(PasswordContext, 0);
  }
  parameter() {
    return this.getTypedRuleContext(ParameterContext, 0);
  }
  passwordStatus() {
    return this.getTypedRuleContext(PasswordStatusContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSetPassword(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSetPassword(this);
    }
  }
};
var PasswordStatusContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_passwordStatus;
  }
  CHANGE() {
    return this.getToken(CypherParser.CHANGE, 0);
  }
  REQUIRED() {
    return this.getToken(CypherParser.REQUIRED, 0);
  }
  NOT() {
    return this.getToken(CypherParser.NOT, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPasswordStatus(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPasswordStatus(this);
    }
  }
};
var SetStatusContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setStatus;
  }
  SET() {
    return this.getToken(CypherParser.SET, 0);
  }
  STATUS() {
    return this.getToken(CypherParser.STATUS, 0);
  }
  userStatus() {
    return this.getTypedRuleContext(UserStatusContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSetStatus(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSetStatus(this);
    }
  }
};
var UserStatusContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_userStatus;
  }
  ACTIVE() {
    return this.getToken(CypherParser.ACTIVE, 0);
  }
  SUSPENDED() {
    return this.getToken(CypherParser.SUSPENDED, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUserStatus(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUserStatus(this);
    }
  }
};
var CreateUniqueConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUniqueConstraint;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  uniqueConstraint() {
    return this.getTypedRuleContext(UniqueConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateUniqueConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateUniqueConstraint(this);
    }
  }
};
var CreateNodeKeyConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createNodeKeyConstraint;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  nodeKeyConstraint() {
    return this.getTypedRuleContext(NodeKeyConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateNodeKeyConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateNodeKeyConstraint(this);
    }
  }
};
var CreateNodePropertyExistenceConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createNodePropertyExistenceConstraint;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  nodePropertyExistenceConstraint() {
    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateNodePropertyExistenceConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateNodePropertyExistenceConstraint(this);
    }
  }
};
var CreateRelationshipPropertyExistenceConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createRelationshipPropertyExistenceConstraint;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  relationshipPropertyExistenceConstraint() {
    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateRelationshipPropertyExistenceConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateRelationshipPropertyExistenceConstraint(this);
    }
  }
};
var CreateIndexContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createIndex;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  index() {
    return this.getTypedRuleContext(IndexContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateIndex(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateIndex(this);
    }
  }
};
var DropUniqueConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropUniqueConstraint;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  uniqueConstraint() {
    return this.getTypedRuleContext(UniqueConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropUniqueConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropUniqueConstraint(this);
    }
  }
};
var DropNodeKeyConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropNodeKeyConstraint;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  nodeKeyConstraint() {
    return this.getTypedRuleContext(NodeKeyConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropNodeKeyConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropNodeKeyConstraint(this);
    }
  }
};
var DropNodePropertyExistenceConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropNodePropertyExistenceConstraint;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  nodePropertyExistenceConstraint() {
    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropNodePropertyExistenceConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropNodePropertyExistenceConstraint(this);
    }
  }
};
var DropRelationshipPropertyExistenceConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropRelationshipPropertyExistenceConstraint;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  relationshipPropertyExistenceConstraint() {
    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropRelationshipPropertyExistenceConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropRelationshipPropertyExistenceConstraint(this);
    }
  }
};
var DropIndexContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropIndex;
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  index() {
    return this.getTypedRuleContext(IndexContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDropIndex(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDropIndex(this);
    }
  }
};
var IndexContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_index;
  }
  INDEX() {
    return this.getToken(CypherParser.INDEX, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  nodeLabel() {
    return this.getTypedRuleContext(NodeLabelContext, 0);
  }
  propertyKeys() {
    return this.getTypedRuleContext(PropertyKeysContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIndex(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIndex(this);
    }
  }
};
var UniqueConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_uniqueConstraint;
  }
  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  nodeLabel() {
    return this.getTypedRuleContext(NodeLabelContext, 0);
  }
  ASSERT() {
    return this.getToken(CypherParser.ASSERT, 0);
  }
  propertyExpression() {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  }
  IS() {
    return this.getToken(CypherParser.IS, 0);
  }
  UNIQUE() {
    return this.getToken(CypherParser.UNIQUE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUniqueConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUniqueConstraint(this);
    }
  }
};
var NodeKeyConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeKeyConstraint;
  }
  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  nodeLabel() {
    return this.getTypedRuleContext(NodeLabelContext, 0);
  }
  ASSERT() {
    return this.getToken(CypherParser.ASSERT, 0);
  }
  propertyExpressions() {
    return this.getTypedRuleContext(PropertyExpressionsContext, 0);
  }
  IS() {
    return this.getToken(CypherParser.IS, 0);
  }
  NODE() {
    return this.getToken(CypherParser.NODE, 0);
  }
  KEY() {
    return this.getToken(CypherParser.KEY, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeKeyConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeKeyConstraint(this);
    }
  }
};
var NodePropertyExistenceConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePropertyExistenceConstraint;
  }
  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  nodeLabel() {
    return this.getTypedRuleContext(NodeLabelContext, 0);
  }
  ASSERT() {
    return this.getToken(CypherParser.ASSERT, 0);
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  propertyExpression() {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodePropertyExistenceConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodePropertyExistenceConstraint(this);
    }
  }
};
var RelationshipPropertyExistenceConstraintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPropertyExistenceConstraint;
  }
  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  relationshipPatternSyntax() {
    return this.getTypedRuleContext(RelationshipPatternSyntaxContext, 0);
  }
  ASSERT() {
    return this.getToken(CypherParser.ASSERT, 0);
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  propertyExpression() {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPropertyExistenceConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPropertyExistenceConstraint(this);
    }
  }
};
var RelationshipPatternSyntaxContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "dash", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(DashContext);
      } else {
        return this.getTypedRuleContext(DashContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternSyntax;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  relType() {
    return this.getTypedRuleContext(RelTypeContext, 0);
  }
  rightArrowHead() {
    return this.getTypedRuleContext(RightArrowHeadContext, 0);
  }
  leftArrowHead() {
    return this.getTypedRuleContext(LeftArrowHeadContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPatternSyntax(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPatternSyntax(this);
    }
  }
};
var LoadCSVClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_loadCSVClause;
  }
  LOAD() {
    return this.getToken(CypherParser.LOAD, 0);
  }
  CSV() {
    return this.getToken(CypherParser.CSV, 0);
  }
  FROM() {
    return this.getToken(CypherParser.FROM, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  AS() {
    return this.getToken(CypherParser.AS, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }
  HEADERS() {
    return this.getToken(CypherParser.HEADERS, 0);
  }
  FIELDTERMINATOR() {
    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
  }
  StringLiteral() {
    return this.getToken(CypherParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLoadCSVClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLoadCSVClause(this);
    }
  }
};
var MatchClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "hint", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(HintContext);
      } else {
        return this.getTypedRuleContext(HintContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_matchClause;
  }
  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }
  pattern() {
    return this.getTypedRuleContext(PatternContext, 0);
  }
  OPTIONAL() {
    return this.getToken(CypherParser.OPTIONAL, 0);
  }
  where() {
    return this.getTypedRuleContext(WhereContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMatchClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMatchClause(this);
    }
  }
};
var UnwindClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unwindClause;
  }
  UNWIND() {
    return this.getToken(CypherParser.UNWIND, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  AS() {
    return this.getToken(CypherParser.AS, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnwindClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnwindClause(this);
    }
  }
};
var MergeClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "mergeAction", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(MergeActionContext);
      } else {
        return this.getTypedRuleContext(MergeActionContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mergeClause;
  }
  MERGE() {
    return this.getToken(CypherParser.MERGE, 0);
  }
  patternPart() {
    return this.getTypedRuleContext(PatternPartContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMergeClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMergeClause(this);
    }
  }
};
var MergeActionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mergeAction;
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }
  setClause() {
    return this.getTypedRuleContext(SetClauseContext, 0);
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMergeAction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMergeAction(this);
    }
  }
};
var CreateClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createClause;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  pattern() {
    return this.getTypedRuleContext(PatternContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateClause(this);
    }
  }
};
var CreateUniqueClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUniqueClause;
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  UNIQUE() {
    return this.getToken(CypherParser.UNIQUE, 0);
  }
  pattern() {
    return this.getTypedRuleContext(PatternContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreateUniqueClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreateUniqueClause(this);
    }
  }
};
var SetClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "setItem", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SetItemContext);
      } else {
        return this.getTypedRuleContext(SetItemContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setClause;
  }
  SET() {
    return this.getToken(CypherParser.SET, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSetClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSetClause(this);
    }
  }
};
var SetItemContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setItem;
  }
  propertyExpression() {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  nodeLabels() {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSetItem(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSetItem(this);
    }
  }
};
var DeleteClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_deleteClause;
  }
  DELETE() {
    return this.getToken(CypherParser.DELETE, 0);
  }
  DETACH() {
    return this.getToken(CypherParser.DETACH, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDeleteClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDeleteClause(this);
    }
  }
};
var RemoveClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "removeItem", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(RemoveItemContext);
      } else {
        return this.getTypedRuleContext(RemoveItemContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeClause;
  }
  REMOVE() {
    return this.getToken(CypherParser.REMOVE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRemoveClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRemoveClause(this);
    }
  }
};
var RemoveItemContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeItem;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  nodeLabels() {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  }
  propertyExpression() {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRemoveItem(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRemoveItem(this);
    }
  }
};
var ForeachClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "clause", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ClauseContext);
      } else {
        return this.getTypedRuleContext(ClauseContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_foreachClause;
  }
  FOREACH() {
    return this.getToken(CypherParser.FOREACH, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  IN() {
    return this.getToken(CypherParser.IN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterForeachClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitForeachClause(this);
    }
  }
};
var WithClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_withClause;
  }
  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }
  returnBody() {
    return this.getTypedRuleContext(ReturnBodyContext, 0);
  }
  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }
  where() {
    return this.getTypedRuleContext(WhereContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterWithClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitWithClause(this);
    }
  }
};
var ReturnClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnClause;
  }
  RETURN() {
    return this.getToken(CypherParser.RETURN, 0);
  }
  returnBody() {
    return this.getTypedRuleContext(ReturnBodyContext, 0);
  }
  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterReturnClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitReturnClause(this);
    }
  }
};
var ReturnBodyContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnBody;
  }
  returnItems() {
    return this.getTypedRuleContext(ReturnItemsContext, 0);
  }
  order() {
    return this.getTypedRuleContext(OrderContext, 0);
  }
  skip() {
    return this.getTypedRuleContext(SkipContext, 0);
  }
  limit() {
    return this.getTypedRuleContext(LimitContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterReturnBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitReturnBody(this);
    }
  }
};
var FuncContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_func;
  }
  procedureInvocation() {
    return this.getTypedRuleContext(ProcedureInvocationContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  procedureResults() {
    return this.getTypedRuleContext(ProcedureResultsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunc(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunc(this);
    }
  }
};
var ReturnItemsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "returnItem", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ReturnItemContext);
      } else {
        return this.getTypedRuleContext(ReturnItemContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnItems;
  }
  func() {
    return this.getTypedRuleContext(FuncContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterReturnItems(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitReturnItems(this);
    }
  }
};
var ReturnItemContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnItem;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  AS() {
    return this.getToken(CypherParser.AS, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterReturnItem(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitReturnItem(this);
    }
  }
};
var CallContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_call;
  }
  CALL() {
    return this.getToken(CypherParser.CALL, 0);
  }
  procedureInvocation() {
    return this.getTypedRuleContext(ProcedureInvocationContext, 0);
  }
  procedureResults() {
    return this.getTypedRuleContext(ProcedureResultsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCall(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCall(this);
    }
  }
};
var ProcedureInvocationContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureInvocation;
  }
  procedureInvocationBody() {
    return this.getTypedRuleContext(ProcedureInvocationBodyContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  procedureArguments() {
    return this.getTypedRuleContext(ProcedureArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureInvocation(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureInvocation(this);
    }
  }
};
var ProcedureInvocationBodyContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureInvocationBody;
  }
  namespace() {
    return this.getTypedRuleContext(NamespaceContext, 0);
  }
  procedureName() {
    return this.getTypedRuleContext(ProcedureNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureInvocationBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureInvocationBody(this);
    }
  }
};
var ProcedureArgumentsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureArguments;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureArguments(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureArguments(this);
    }
  }
};
var ProcedureResultsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "procedureResult", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ProcedureResultContext);
      } else {
        return this.getTypedRuleContext(ProcedureResultContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureResults;
  }
  YIELD() {
    return this.getToken(CypherParser.YIELD, 0);
  }
  where() {
    return this.getTypedRuleContext(WhereContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureResults(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureResults(this);
    }
  }
};
var ProcedureResultContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureResult;
  }
  aliasedProcedureResult() {
    return this.getTypedRuleContext(AliasedProcedureResultContext, 0);
  }
  simpleProcedureResult() {
    return this.getTypedRuleContext(SimpleProcedureResultContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureResult(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureResult(this);
    }
  }
};
var AliasedProcedureResultContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_aliasedProcedureResult;
  }
  procedureOutput() {
    return this.getTypedRuleContext(ProcedureOutputContext, 0);
  }
  AS() {
    return this.getToken(CypherParser.AS, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAliasedProcedureResult(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAliasedProcedureResult(this);
    }
  }
};
var SimpleProcedureResultContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_simpleProcedureResult;
  }
  procedureOutput() {
    return this.getTypedRuleContext(ProcedureOutputContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSimpleProcedureResult(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSimpleProcedureResult(this);
    }
  }
};
var ProcedureOutputContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureOutput;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureOutput(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureOutput(this);
    }
  }
};
var OrderContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "sortItem", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SortItemContext);
      } else {
        return this.getTypedRuleContext(SortItemContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_order;
  }
  ORDER() {
    return this.getToken(CypherParser.ORDER, 0);
  }
  BY() {
    return this.getToken(CypherParser.BY, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterOrder(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitOrder(this);
    }
  }
};
var SkipContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_skip;
  }
  L_SKIP() {
    return this.getToken(CypherParser.L_SKIP, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSkip(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSkip(this);
    }
  }
};
var LimitContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_limit;
  }
  LIMIT() {
    return this.getToken(CypherParser.LIMIT, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLimit(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLimit(this);
    }
  }
};
var SortItemContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sortItem;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  ASCENDING() {
    return this.getToken(CypherParser.ASCENDING, 0);
  }
  ASC() {
    return this.getToken(CypherParser.ASC, 0);
  }
  DESCENDING() {
    return this.getToken(CypherParser.DESCENDING, 0);
  }
  DESC() {
    return this.getToken(CypherParser.DESC, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSortItem(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSortItem(this);
    }
  }
};
var HintContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "variable", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(VariableContext);
      } else {
        return this.getTypedRuleContext(VariableContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hint;
  }
  USING() {
    return this.getToken(CypherParser.USING, 0);
  }
  INDEX() {
    return this.getToken(CypherParser.INDEX, 0);
  }
  nodeLabel() {
    return this.getTypedRuleContext(NodeLabelContext, 0);
  }
  propertyKeys() {
    return this.getTypedRuleContext(PropertyKeysContext, 0);
  }
  JOIN() {
    return this.getToken(CypherParser.JOIN, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  SCAN() {
    return this.getToken(CypherParser.SCAN, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterHint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitHint(this);
    }
  }
};
var StartClauseContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "startPoint", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(StartPointContext);
      } else {
        return this.getTypedRuleContext(StartPointContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startClause;
  }
  START() {
    return this.getToken(CypherParser.START, 0);
  }
  where() {
    return this.getTypedRuleContext(WhereContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStartClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStartClause(this);
    }
  }
};
var StartPointContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startPoint;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  lookup() {
    return this.getTypedRuleContext(LookupContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStartPoint(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStartPoint(this);
    }
  }
};
var LookupContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_lookup;
  }
  nodeLookup() {
    return this.getTypedRuleContext(NodeLookupContext, 0);
  }
  relationshipLookup() {
    return this.getTypedRuleContext(RelationshipLookupContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLookup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLookup(this);
    }
  }
};
var NodeLookupContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLookup;
  }
  NODE() {
    return this.getToken(CypherParser.NODE, 0);
  }
  identifiedIndexLookup() {
    return this.getTypedRuleContext(IdentifiedIndexLookupContext, 0);
  }
  indexQuery() {
    return this.getTypedRuleContext(IndexQueryContext, 0);
  }
  idLookup() {
    return this.getTypedRuleContext(IdLookupContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLookup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLookup(this);
    }
  }
};
var RelationshipLookupContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipLookup;
  }
  RELATIONSHIP() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
  }
  REL() {
    return this.getToken(CypherParser.REL, 0);
  }
  identifiedIndexLookup() {
    return this.getTypedRuleContext(IdentifiedIndexLookupContext, 0);
  }
  indexQuery() {
    return this.getTypedRuleContext(IndexQueryContext, 0);
  }
  idLookup() {
    return this.getTypedRuleContext(IdLookupContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipLookup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipLookup(this);
    }
  }
};
var IdentifiedIndexLookupContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_identifiedIndexLookup;
  }
  StringLiteral() {
    return this.getToken(CypherParser.StringLiteral, 0);
  }
  parameter() {
    return this.getTypedRuleContext(ParameterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIdentifiedIndexLookup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIdentifiedIndexLookup(this);
    }
  }
};
var IndexQueryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_indexQuery;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  StringLiteral() {
    return this.getToken(CypherParser.StringLiteral, 0);
  }
  parameter() {
    return this.getTypedRuleContext(ParameterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIndexQuery(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIndexQuery(this);
    }
  }
};
var IdLookupContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idLookup;
  }
  literalIds() {
    return this.getTypedRuleContext(LiteralIdsContext, 0);
  }
  parameter() {
    return this.getTypedRuleContext(ParameterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIdLookup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIdLookup(this);
    }
  }
};
var LiteralIdsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "integerLiteral", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
      } else {
        return this.getTypedRuleContext(IntegerLiteralContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literalIds;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLiteralIds(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLiteralIds(this);
    }
  }
};
var WhereContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_where;
  }
  WHERE() {
    return this.getToken(CypherParser.WHERE, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterWhere(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitWhere(this);
    }
  }
};
var PatternContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "patternPart", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PatternPartContext);
      } else {
        return this.getTypedRuleContext(PatternPartContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pattern;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPattern(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPattern(this);
    }
  }
};
var PatternPartContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternPart;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  anonymousPatternPart() {
    return this.getTypedRuleContext(AnonymousPatternPartContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternPart(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternPart(this);
    }
  }
};
var AnonymousPatternPartContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anonymousPatternPart;
  }
  shortestPathPatternFunction() {
    return this.getTypedRuleContext(ShortestPathPatternFunctionContext, 0);
  }
  patternElement() {
    return this.getTypedRuleContext(PatternElementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAnonymousPatternPart(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAnonymousPatternPart(this);
    }
  }
};
var PatternElementContext = class _PatternElementContext extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "patternElementChain", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PatternElementChainContext);
      } else {
        return this.getTypedRuleContext(PatternElementChainContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElement;
  }
  nodePattern() {
    return this.getTypedRuleContext(NodePatternContext, 0);
  }
  patternElement() {
    return this.getTypedRuleContext(_PatternElementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternElement(this);
    }
  }
};
var NodePatternContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePattern;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  nodeLabels() {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  }
  properties() {
    return this.getTypedRuleContext(PropertiesContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodePattern(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodePattern(this);
    }
  }
};
var PatternElementChainContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElementChain;
  }
  relationshipPattern() {
    return this.getTypedRuleContext(RelationshipPatternContext, 0);
  }
  nodePattern() {
    return this.getTypedRuleContext(NodePatternContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternElementChain(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternElementChain(this);
    }
  }
};
var RelationshipPatternContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPattern;
  }
  relationshipPatternStart() {
    return this.getTypedRuleContext(RelationshipPatternStartContext, 0);
  }
  relationshipPatternEnd() {
    return this.getTypedRuleContext(RelationshipPatternEndContext, 0);
  }
  relationshipDetail() {
    return this.getTypedRuleContext(RelationshipDetailContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPattern(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPattern(this);
    }
  }
};
var RelationshipPatternStartContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternStart;
  }
  leftArrowHead() {
    return this.getTypedRuleContext(LeftArrowHeadContext, 0);
  }
  dash() {
    return this.getTypedRuleContext(DashContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPatternStart(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPatternStart(this);
    }
  }
};
var RelationshipPatternEndContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternEnd;
  }
  dash() {
    return this.getTypedRuleContext(DashContext, 0);
  }
  rightArrowHead() {
    return this.getTypedRuleContext(RightArrowHeadContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPatternEnd(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPatternEnd(this);
    }
  }
};
var RelationshipDetailContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipDetail;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  relationshipTypes() {
    return this.getTypedRuleContext(RelationshipTypesContext, 0);
  }
  rangeLiteral() {
    return this.getTypedRuleContext(RangeLiteralContext, 0);
  }
  properties() {
    return this.getTypedRuleContext(PropertiesContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipDetail(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipDetail(this);
    }
  }
};
var PropertiesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_properties;
  }
  mapLiteral() {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  }
  parameter() {
    return this.getTypedRuleContext(ParameterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProperties(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProperties(this);
    }
  }
};
var RelTypeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relType;
  }
  relTypeName() {
    return this.getTypedRuleContext(RelTypeNameContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelType(this);
    }
  }
};
var RelationshipTypesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "relationshipTypeOptionalColon", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(RelationshipTypeOptionalColonContext);
      } else {
        return this.getTypedRuleContext(RelationshipTypeOptionalColonContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypes;
  }
  relationshipType() {
    return this.getTypedRuleContext(RelationshipTypeContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipTypes(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipTypes(this);
    }
  }
};
var RelationshipTypeContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipType;
  }
  relTypeName() {
    return this.getTypedRuleContext(RelTypeNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipType(this);
    }
  }
};
var RelationshipTypeOptionalColonContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypeOptionalColon;
  }
  relTypeName() {
    return this.getTypedRuleContext(RelTypeNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipTypeOptionalColon(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipTypeOptionalColon(this);
    }
  }
};
var NodeLabelsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "nodeLabel", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(NodeLabelContext);
      } else {
        return this.getTypedRuleContext(NodeLabelContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabels;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLabels(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLabels(this);
    }
  }
};
var NodeLabelContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabel;
  }
  labelName() {
    return this.getTypedRuleContext(LabelNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLabel(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLabel(this);
    }
  }
};
var RangeLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "integerLiteral", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
      } else {
        return this.getTypedRuleContext(IntegerLiteralContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rangeLiteral;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRangeLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRangeLiteral(this);
    }
  }
};
var LabelNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_labelName;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLabelName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLabelName(this);
    }
  }
};
var RelTypeNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relTypeName;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelTypeName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelTypeName(this);
    }
  }
};
var ExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression;
  }
  orExpression() {
    return this.getTypedRuleContext(OrExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression(this);
    }
  }
};
var OrExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "xorExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(XorExpressionContext);
      } else {
        return this.getTypedRuleContext(XorExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "OR", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.OR);
      } else {
        return this.getToken(CypherParser.OR, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_orExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitOrExpression(this);
    }
  }
};
var XorExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "andExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(AndExpressionContext);
      } else {
        return this.getTypedRuleContext(AndExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "XOR", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.XOR);
      } else {
        return this.getToken(CypherParser.XOR, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_xorExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterXorExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitXorExpression(this);
    }
  }
};
var AndExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "notExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(NotExpressionContext);
      } else {
        return this.getTypedRuleContext(NotExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "AND", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.AND);
      } else {
        return this.getToken(CypherParser.AND, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_andExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAndExpression(this);
    }
  }
};
var NotExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "NOT", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.NOT);
      } else {
        return this.getToken(CypherParser.NOT, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_notExpression;
  }
  comparisonExpression() {
    return this.getTypedRuleContext(ComparisonExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNotExpression(this);
    }
  }
};
var ComparisonExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "partialComparisonExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PartialComparisonExpressionContext);
      } else {
        return this.getTypedRuleContext(PartialComparisonExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_comparisonExpression;
  }
  addOrSubtractExpression() {
    return this.getTypedRuleContext(AddOrSubtractExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterComparisonExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitComparisonExpression(this);
    }
  }
};
var AddOrSubtractExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "multiplyDivideModuloExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(MultiplyDivideModuloExpressionContext);
      } else {
        return this.getTypedRuleContext(MultiplyDivideModuloExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_addOrSubtractExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAddOrSubtractExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAddOrSubtractExpression(this);
    }
  }
};
var MultiplyDivideModuloExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "powerOfExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PowerOfExpressionContext);
      } else {
        return this.getTypedRuleContext(PowerOfExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_multiplyDivideModuloExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMultiplyDivideModuloExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMultiplyDivideModuloExpression(this);
    }
  }
};
var PowerOfExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "unaryAddOrSubtractExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(UnaryAddOrSubtractExpressionContext);
      } else {
        return this.getTypedRuleContext(UnaryAddOrSubtractExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_powerOfExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPowerOfExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPowerOfExpression(this);
    }
  }
};
var UnaryAddOrSubtractExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unaryAddOrSubtractExpression;
  }
  stringListNullOperatorExpression() {
    return this.getTypedRuleContext(StringListNullOperatorExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnaryAddOrSubtractExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnaryAddOrSubtractExpression(this);
    }
  }
};
var StringListNullOperatorExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "propertyOrLabelsExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PropertyOrLabelsExpressionContext);
      } else {
        return this.getTypedRuleContext(PropertyOrLabelsExpressionContext, i);
      }
    });
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "IS", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.IS);
      } else {
        return this.getToken(CypherParser.IS, i);
      }
    });
    _defineProperty(this, "NULL", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.NULL);
      } else {
        return this.getToken(CypherParser.NULL, i);
      }
    });
    _defineProperty(this, "NOT", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.NOT);
      } else {
        return this.getToken(CypherParser.NOT, i);
      }
    });
    _defineProperty(this, "IN", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.IN);
      } else {
        return this.getToken(CypherParser.IN, i);
      }
    });
    _defineProperty(this, "STARTS", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.STARTS);
      } else {
        return this.getToken(CypherParser.STARTS, i);
      }
    });
    _defineProperty(this, "WITH", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.WITH);
      } else {
        return this.getToken(CypherParser.WITH, i);
      }
    });
    _defineProperty(this, "ENDS", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.ENDS);
      } else {
        return this.getToken(CypherParser.ENDS, i);
      }
    });
    _defineProperty(this, "CONTAINS", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.CONTAINS);
      } else {
        return this.getToken(CypherParser.CONTAINS, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stringListNullOperatorExpression;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStringListNullOperatorExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStringListNullOperatorExpression(this);
    }
  }
};
var PropertyOrLabelsExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "propertyLookup", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PropertyLookupContext);
      } else {
        return this.getTypedRuleContext(PropertyLookupContext, i);
      }
    });
    _defineProperty(this, "nodeLabels", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(NodeLabelsContext);
      } else {
        return this.getTypedRuleContext(NodeLabelsContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyOrLabelsExpression;
  }
  atom() {
    return this.getTypedRuleContext(AtomContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyOrLabelsExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyOrLabelsExpression(this);
    }
  }
};
var FilterFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterFunction;
  }
  filterFunctionName() {
    return this.getTypedRuleContext(FilterFunctionNameContext, 0);
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFilterFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFilterFunction(this);
    }
  }
};
var FilterFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterFunctionName;
  }
  FILTER() {
    return this.getToken(CypherParser.FILTER, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFilterFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFilterFunctionName(this);
    }
  }
};
var ExistsFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_existsFunction;
  }
  existsFunctionName() {
    return this.getTypedRuleContext(ExistsFunctionNameContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterExistsFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitExistsFunction(this);
    }
  }
};
var ExistsFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_existsFunctionName;
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterExistsFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitExistsFunctionName(this);
    }
  }
};
var AllFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allFunction;
  }
  allFunctionName() {
    return this.getTypedRuleContext(AllFunctionNameContext, 0);
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAllFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAllFunction(this);
    }
  }
};
var AllFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allFunctionName;
  }
  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAllFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAllFunctionName(this);
    }
  }
};
var AnyFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyFunction;
  }
  anyFunctionName() {
    return this.getTypedRuleContext(AnyFunctionNameContext, 0);
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAnyFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAnyFunction(this);
    }
  }
};
var AnyFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyFunctionName;
  }
  ANY() {
    return this.getToken(CypherParser.ANY, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAnyFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAnyFunctionName(this);
    }
  }
};
var NoneFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_noneFunction;
  }
  noneFunctionName() {
    return this.getTypedRuleContext(NoneFunctionNameContext, 0);
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNoneFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNoneFunction(this);
    }
  }
};
var NoneFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_noneFunctionName;
  }
  NONE() {
    return this.getToken(CypherParser.NONE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNoneFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNoneFunctionName(this);
    }
  }
};
var SingleFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleFunction;
  }
  singleFunctionName() {
    return this.getTypedRuleContext(SingleFunctionNameContext, 0);
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSingleFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSingleFunction(this);
    }
  }
};
var SingleFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleFunctionName;
  }
  SINGLE() {
    return this.getToken(CypherParser.SINGLE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSingleFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSingleFunctionName(this);
    }
  }
};
var ExtractFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_extractFunction;
  }
  extractFunctionName() {
    return this.getTypedRuleContext(ExtractFunctionNameContext, 0);
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterExtractFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitExtractFunction(this);
    }
  }
};
var ExtractFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_extractFunctionName;
  }
  EXTRACT() {
    return this.getToken(CypherParser.EXTRACT, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterExtractFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitExtractFunctionName(this);
    }
  }
};
var ReduceFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_reduceFunction;
  }
  reduceFunctionName() {
    return this.getTypedRuleContext(ReduceFunctionNameContext, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  idInColl() {
    return this.getTypedRuleContext(IdInCollContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterReduceFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitReduceFunction(this);
    }
  }
};
var ReduceFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_reduceFunctionName;
  }
  REDUCE() {
    return this.getToken(CypherParser.REDUCE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterReduceFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitReduceFunctionName(this);
    }
  }
};
var ShortestPathPatternFunctionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_shortestPathPatternFunction;
  }
  shortestPathFunctionName() {
    return this.getTypedRuleContext(ShortestPathFunctionNameContext, 0);
  }
  patternElement() {
    return this.getTypedRuleContext(PatternElementContext, 0);
  }
  allShortestPathFunctionName() {
    return this.getTypedRuleContext(AllShortestPathFunctionNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterShortestPathPatternFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitShortestPathPatternFunction(this);
    }
  }
};
var ShortestPathFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_shortestPathFunctionName;
  }
  SHORTESTPATH() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterShortestPathFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitShortestPathFunctionName(this);
    }
  }
};
var AllShortestPathFunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allShortestPathFunctionName;
  }
  ALLSHORTESTPATHS() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAllShortestPathFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAllShortestPathFunctionName(this);
    }
  }
};
var AtomContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_atom;
  }
  literal() {
    return this.getTypedRuleContext(LiteralContext, 0);
  }
  parameter() {
    return this.getTypedRuleContext(ParameterContext, 0);
  }
  caseExpression() {
    return this.getTypedRuleContext(CaseExpressionContext, 0);
  }
  COUNT() {
    return this.getToken(CypherParser.COUNT, 0);
  }
  listComprehension() {
    return this.getTypedRuleContext(ListComprehensionContext, 0);
  }
  patternComprehension() {
    return this.getTypedRuleContext(PatternComprehensionContext, 0);
  }
  filterFunction() {
    return this.getTypedRuleContext(FilterFunctionContext, 0);
  }
  extractFunction() {
    return this.getTypedRuleContext(ExtractFunctionContext, 0);
  }
  reduceFunction() {
    return this.getTypedRuleContext(ReduceFunctionContext, 0);
  }
  allFunction() {
    return this.getTypedRuleContext(AllFunctionContext, 0);
  }
  anyFunction() {
    return this.getTypedRuleContext(AnyFunctionContext, 0);
  }
  noneFunction() {
    return this.getTypedRuleContext(NoneFunctionContext, 0);
  }
  singleFunction() {
    return this.getTypedRuleContext(SingleFunctionContext, 0);
  }
  existsFunction() {
    return this.getTypedRuleContext(ExistsFunctionContext, 0);
  }
  shortestPathPatternFunction() {
    return this.getTypedRuleContext(ShortestPathPatternFunctionContext, 0);
  }
  relationshipsPattern() {
    return this.getTypedRuleContext(RelationshipsPatternContext, 0);
  }
  parenthesizedExpression() {
    return this.getTypedRuleContext(ParenthesizedExpressionContext, 0);
  }
  functionInvocation() {
    return this.getTypedRuleContext(FunctionInvocationContext, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAtom(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAtom(this);
    }
  }
};
var LiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literal;
  }
  numberLiteral() {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
  }
  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }
  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }
  NULL() {
    return this.getToken(CypherParser.NULL, 0);
  }
  mapLiteral() {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  }
  listLiteral() {
    return this.getTypedRuleContext(ListLiteralContext, 0);
  }
  mapProjection() {
    return this.getTypedRuleContext(MapProjectionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLiteral(this);
    }
  }
};
var StringLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stringLiteral;
  }
  StringLiteral() {
    return this.getToken(CypherParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterStringLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitStringLiteral(this);
    }
  }
};
var BooleanLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_booleanLiteral;
  }
  TRUE() {
    return this.getToken(CypherParser.TRUE, 0);
  }
  FALSE() {
    return this.getToken(CypherParser.FALSE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterBooleanLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitBooleanLiteral(this);
    }
  }
};
var ListLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listLiteral;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterListLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitListLiteral(this);
    }
  }
};
var PartialComparisonExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_partialComparisonExpression;
  }
  addOrSubtractExpression() {
    return this.getTypedRuleContext(AddOrSubtractExpressionContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPartialComparisonExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPartialComparisonExpression(this);
    }
  }
};
var ParenthesizedExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterParenthesizedExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitParenthesizedExpression(this);
    }
  }
};
var RelationshipsPatternContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "patternElementChain", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PatternElementChainContext);
      } else {
        return this.getTypedRuleContext(PatternElementChainContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipsPattern;
  }
  nodePattern() {
    return this.getTypedRuleContext(NodePatternContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipsPattern(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipsPattern(this);
    }
  }
};
var FilterExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterExpression;
  }
  idInColl() {
    return this.getTypedRuleContext(IdInCollContext, 0);
  }
  where() {
    return this.getTypedRuleContext(WhereContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFilterExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFilterExpression(this);
    }
  }
};
var IdInCollContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idInColl;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  IN() {
    return this.getToken(CypherParser.IN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIdInColl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIdInColl(this);
    }
  }
};
var FunctionInvocationContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocation;
  }
  functionInvocationBody() {
    return this.getTypedRuleContext(FunctionInvocationBodyContext, 0);
  }
  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionInvocation(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionInvocation(this);
    }
  }
};
var FunctionInvocationBodyContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocationBody;
  }
  namespace() {
    return this.getTypedRuleContext(NamespaceContext, 0);
  }
  functionName() {
    return this.getTypedRuleContext(FunctionNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionInvocationBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionInvocationBody(this);
    }
  }
};
var FunctionNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionName;
  }
  UnescapedSymbolicName() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
  }
  EscapedSymbolicName() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
  }
  COUNT() {
    return this.getToken(CypherParser.COUNT, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionName(this);
    }
  }
};
var ProcedureNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureName;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterProcedureName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitProcedureName(this);
    }
  }
};
var ListComprehensionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listComprehension;
  }
  filterExpression() {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterListComprehension(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitListComprehension(this);
    }
  }
};
var PatternComprehensionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternComprehension;
  }
  relationshipsPattern() {
    return this.getTypedRuleContext(RelationshipsPatternContext, 0);
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  WHERE() {
    return this.getToken(CypherParser.WHERE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternComprehension(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternComprehension(this);
    }
  }
};
var PropertyLookupContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyLookup;
  }
  propertyKeyName() {
    return this.getTypedRuleContext(PropertyKeyNameContext, 0);
  }
  SP() {
    return this.getToken(CypherParser.SP, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyLookup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyLookup(this);
    }
  }
};
var CaseExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "caseAlternatives", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(CaseAlternativesContext);
      } else {
        return this.getTypedRuleContext(CaseAlternativesContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_caseExpression;
  }
  END() {
    return this.getToken(CypherParser.END, 0);
  }
  ELSE() {
    return this.getToken(CypherParser.ELSE, 0);
  }
  CASE() {
    return this.getToken(CypherParser.CASE, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCaseExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCaseExpression(this);
    }
  }
};
var CaseAlternativesContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "expression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_caseAlternatives;
  }
  WHEN() {
    return this.getToken(CypherParser.WHEN, 0);
  }
  THEN() {
    return this.getToken(CypherParser.THEN, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterCaseAlternatives(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitCaseAlternatives(this);
    }
  }
};
var VariableContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variable;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterVariable(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitVariable(this);
    }
  }
};
var NumberLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_numberLiteral;
  }
  doubleLiteral() {
    return this.getTypedRuleContext(DoubleLiteralContext, 0);
  }
  integerLiteral() {
    return this.getTypedRuleContext(IntegerLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNumberLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNumberLiteral(this);
    }
  }
};
var MapLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "literalEntry", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(LiteralEntryContext);
      } else {
        return this.getTypedRuleContext(LiteralEntryContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapLiteral;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMapLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMapLiteral(this);
    }
  }
};
var MapProjectionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    _defineProperty(this, "mapProjectionVariants", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(MapProjectionVariantsContext);
      } else {
        return this.getTypedRuleContext(MapProjectionVariantsContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapProjection;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMapProjection(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMapProjection(this);
    }
  }
};
var MapProjectionVariantsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapProjectionVariants;
  }
  literalEntry() {
    return this.getTypedRuleContext(LiteralEntryContext, 0);
  }
  propertySelector() {
    return this.getTypedRuleContext(PropertySelectorContext, 0);
  }
  variableSelector() {
    return this.getTypedRuleContext(VariableSelectorContext, 0);
  }
  allPropertiesSelector() {
    return this.getTypedRuleContext(AllPropertiesSelectorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterMapProjectionVariants(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitMapProjectionVariants(this);
    }
  }
};
var LiteralEntryContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literalEntry;
  }
  propertyKeyName() {
    return this.getTypedRuleContext(PropertyKeyNameContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLiteralEntry(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLiteralEntry(this);
    }
  }
};
var PropertySelectorContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertySelector;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertySelector(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertySelector(this);
    }
  }
};
var VariableSelectorContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variableSelector;
  }
  variable() {
    return this.getTypedRuleContext(VariableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterVariableSelector(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitVariableSelector(this);
    }
  }
};
var AllPropertiesSelectorContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allPropertiesSelector;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterAllPropertiesSelector(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitAllPropertiesSelector(this);
    }
  }
};
var ParameterContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameter;
  }
  legacyParameter() {
    return this.getTypedRuleContext(LegacyParameterContext, 0);
  }
  newParameter() {
    return this.getTypedRuleContext(NewParameterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitParameter(this);
    }
  }
};
var LegacyParameterContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_legacyParameter;
  }
  parameterName() {
    return this.getTypedRuleContext(ParameterNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLegacyParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLegacyParameter(this);
    }
  }
};
var NewParameterContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_newParameter;
  }
  parameterName() {
    return this.getTypedRuleContext(ParameterNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNewParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNewParameter(this);
    }
  }
};
var ParameterNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameterName;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  DecimalInteger() {
    return this.getToken(CypherParser.DecimalInteger, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterParameterName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitParameterName(this);
    }
  }
};
var PropertyExpressionsContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "propertyExpression", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PropertyExpressionContext);
      } else {
        return this.getTypedRuleContext(PropertyExpressionContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpressions;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyExpressions(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyExpressions(this);
    }
  }
};
var PropertyExpressionContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "propertyLookup", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PropertyLookupContext);
      } else {
        return this.getTypedRuleContext(PropertyLookupContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpression;
  }
  atom() {
    return this.getTypedRuleContext(AtomContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyExpression(this);
    }
  }
};
var PropertyKeysContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "propertyKeyName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(PropertyKeyNameContext);
      } else {
        return this.getTypedRuleContext(PropertyKeyNameContext, i);
      }
    });
    _defineProperty(this, "SP", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeys;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyKeys(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyKeys(this);
    }
  }
};
var PropertyKeyNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeyName;
  }
  symbolicName() {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyKeyName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyKeyName(this);
    }
  }
};
var IntegerLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_integerLiteral;
  }
  HexInteger() {
    return this.getToken(CypherParser.HexInteger, 0);
  }
  OctalInteger() {
    return this.getToken(CypherParser.OctalInteger, 0);
  }
  DecimalInteger() {
    return this.getToken(CypherParser.DecimalInteger, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterIntegerLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitIntegerLiteral(this);
    }
  }
};
var DoubleLiteralContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_doubleLiteral;
  }
  ExponentDecimalReal() {
    return this.getToken(CypherParser.ExponentDecimalReal, 0);
  }
  RegularDecimalReal() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDoubleLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDoubleLiteral(this);
    }
  }
};
var NamespaceContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    _defineProperty(this, "symbolicName", function(i) {
      if (i === void 0) {
        i = null;
      }
      if (i === null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(SymbolicNameContext, i);
      }
    });
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_namespace;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterNamespace(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitNamespace(this);
    }
  }
};
var LeftArrowHeadContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_leftArrowHead;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterLeftArrowHead(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitLeftArrowHead(this);
    }
  }
};
var RightArrowHeadContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rightArrowHead;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterRightArrowHead(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitRightArrowHead(this);
    }
  }
};
var DashContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dash;
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterDash(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitDash(this);
    }
  }
};
var SymbolicNameContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_symbolicName;
  }
  keyword() {
    return this.getTypedRuleContext(KeywordContext, 0);
  }
  UnescapedSymbolicName() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
  }
  EscapedSymbolicName() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
  }
  HexLetter() {
    return this.getToken(CypherParser.HexLetter, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterSymbolicName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitSymbolicName(this);
    }
  }
};
var KeywordContext = class extends es_default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_keyword;
  }
  CYPHER() {
    return this.getToken(CypherParser.CYPHER, 0);
  }
  EXPLAIN() {
    return this.getToken(CypherParser.EXPLAIN, 0);
  }
  PROFILE() {
    return this.getToken(CypherParser.PROFILE, 0);
  }
  USING() {
    return this.getToken(CypherParser.USING, 0);
  }
  PERIODIC() {
    return this.getToken(CypherParser.PERIODIC, 0);
  }
  COMMIT() {
    return this.getToken(CypherParser.COMMIT, 0);
  }
  UNION() {
    return this.getToken(CypherParser.UNION, 0);
  }
  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }
  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }
  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }
  INDEX() {
    return this.getToken(CypherParser.INDEX, 0);
  }
  ON() {
    return this.getToken(CypherParser.ON, 0);
  }
  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }
  ASSERT() {
    return this.getToken(CypherParser.ASSERT, 0);
  }
  IS() {
    return this.getToken(CypherParser.IS, 0);
  }
  UNIQUE() {
    return this.getToken(CypherParser.UNIQUE, 0);
  }
  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }
  LOAD() {
    return this.getToken(CypherParser.LOAD, 0);
  }
  CSV() {
    return this.getToken(CypherParser.CSV, 0);
  }
  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }
  HEADERS() {
    return this.getToken(CypherParser.HEADERS, 0);
  }
  FROM() {
    return this.getToken(CypherParser.FROM, 0);
  }
  AS() {
    return this.getToken(CypherParser.AS, 0);
  }
  FIELDTERMINATOR() {
    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
  }
  OPTIONAL() {
    return this.getToken(CypherParser.OPTIONAL, 0);
  }
  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }
  UNWIND() {
    return this.getToken(CypherParser.UNWIND, 0);
  }
  MERGE() {
    return this.getToken(CypherParser.MERGE, 0);
  }
  SET() {
    return this.getToken(CypherParser.SET, 0);
  }
  DETACH() {
    return this.getToken(CypherParser.DETACH, 0);
  }
  DELETE() {
    return this.getToken(CypherParser.DELETE, 0);
  }
  REMOVE() {
    return this.getToken(CypherParser.REMOVE, 0);
  }
  FOREACH() {
    return this.getToken(CypherParser.FOREACH, 0);
  }
  IN() {
    return this.getToken(CypherParser.IN, 0);
  }
  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }
  RETURN() {
    return this.getToken(CypherParser.RETURN, 0);
  }
  ORDER() {
    return this.getToken(CypherParser.ORDER, 0);
  }
  BY() {
    return this.getToken(CypherParser.BY, 0);
  }
  L_SKIP() {
    return this.getToken(CypherParser.L_SKIP, 0);
  }
  LIMIT() {
    return this.getToken(CypherParser.LIMIT, 0);
  }
  ASCENDING() {
    return this.getToken(CypherParser.ASCENDING, 0);
  }
  ASC() {
    return this.getToken(CypherParser.ASC, 0);
  }
  DESCENDING() {
    return this.getToken(CypherParser.DESCENDING, 0);
  }
  DESC() {
    return this.getToken(CypherParser.DESC, 0);
  }
  JOIN() {
    return this.getToken(CypherParser.JOIN, 0);
  }
  SCAN() {
    return this.getToken(CypherParser.SCAN, 0);
  }
  START() {
    return this.getToken(CypherParser.START, 0);
  }
  NODE() {
    return this.getToken(CypherParser.NODE, 0);
  }
  RELATIONSHIP() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
  }
  REL() {
    return this.getToken(CypherParser.REL, 0);
  }
  WHERE() {
    return this.getToken(CypherParser.WHERE, 0);
  }
  SHORTESTPATH() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
  }
  ALLSHORTESTPATHS() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
  }
  OR() {
    return this.getToken(CypherParser.OR, 0);
  }
  XOR() {
    return this.getToken(CypherParser.XOR, 0);
  }
  AND() {
    return this.getToken(CypherParser.AND, 0);
  }
  NOT() {
    return this.getToken(CypherParser.NOT, 0);
  }
  STARTS() {
    return this.getToken(CypherParser.STARTS, 0);
  }
  ENDS() {
    return this.getToken(CypherParser.ENDS, 0);
  }
  CONTAINS() {
    return this.getToken(CypherParser.CONTAINS, 0);
  }
  NULL() {
    return this.getToken(CypherParser.NULL, 0);
  }
  COUNT() {
    return this.getToken(CypherParser.COUNT, 0);
  }
  FILTER() {
    return this.getToken(CypherParser.FILTER, 0);
  }
  EXTRACT() {
    return this.getToken(CypherParser.EXTRACT, 0);
  }
  ANY() {
    return this.getToken(CypherParser.ANY, 0);
  }
  NONE() {
    return this.getToken(CypherParser.NONE, 0);
  }
  SINGLE() {
    return this.getToken(CypherParser.SINGLE, 0);
  }
  TRUE() {
    return this.getToken(CypherParser.TRUE, 0);
  }
  FALSE() {
    return this.getToken(CypherParser.FALSE, 0);
  }
  REDUCE() {
    return this.getToken(CypherParser.REDUCE, 0);
  }
  CASE() {
    return this.getToken(CypherParser.CASE, 0);
  }
  ELSE() {
    return this.getToken(CypherParser.ELSE, 0);
  }
  END() {
    return this.getToken(CypherParser.END, 0);
  }
  WHEN() {
    return this.getToken(CypherParser.WHEN, 0);
  }
  THEN() {
    return this.getToken(CypherParser.THEN, 0);
  }
  CALL() {
    return this.getToken(CypherParser.CALL, 0);
  }
  YIELD() {
    return this.getToken(CypherParser.YIELD, 0);
  }
  KEY() {
    return this.getToken(CypherParser.KEY, 0);
  }
  CATALOG() {
    return this.getToken(CypherParser.CATALOG, 0);
  }
  SHOW() {
    return this.getToken(CypherParser.SHOW, 0);
  }
  DEFAULT() {
    return this.getToken(CypherParser.DEFAULT, 0);
  }
  DBMS() {
    return this.getToken(CypherParser.DBMS, 0);
  }
  DATABASE() {
    return this.getToken(CypherParser.DATABASE, 0);
  }
  DATABASES() {
    return this.getToken(CypherParser.DATABASES, 0);
  }
  GRAPH() {
    return this.getToken(CypherParser.GRAPH, 0);
  }
  GRAPHS() {
    return this.getToken(CypherParser.GRAPHS, 0);
  }
  REPLACE() {
    return this.getToken(CypherParser.REPLACE, 0);
  }
  IF() {
    return this.getToken(CypherParser.IF, 0);
  }
  STOP() {
    return this.getToken(CypherParser.STOP, 0);
  }
  ROLE() {
    return this.getToken(CypherParser.ROLE, 0);
  }
  ROLES() {
    return this.getToken(CypherParser.ROLES, 0);
  }
  USER() {
    return this.getToken(CypherParser.USER, 0);
  }
  USERS() {
    return this.getToken(CypherParser.USERS, 0);
  }
  POPULATED() {
    return this.getToken(CypherParser.POPULATED, 0);
  }
  PASSWORD() {
    return this.getToken(CypherParser.PASSWORD, 0);
  }
  CHANGE() {
    return this.getToken(CypherParser.CHANGE, 0);
  }
  REQUIRED() {
    return this.getToken(CypherParser.REQUIRED, 0);
  }
  STATUS() {
    return this.getToken(CypherParser.STATUS, 0);
  }
  ACTIVE() {
    return this.getToken(CypherParser.ACTIVE, 0);
  }
  SUSPENDED() {
    return this.getToken(CypherParser.SUSPENDED, 0);
  }
  ALTER() {
    return this.getToken(CypherParser.ALTER, 0);
  }
  CURRENT() {
    return this.getToken(CypherParser.CURRENT, 0);
  }
  TO() {
    return this.getToken(CypherParser.TO, 0);
  }
  PRIVILEGES() {
    return this.getToken(CypherParser.PRIVILEGES, 0);
  }
  GRANT() {
    return this.getToken(CypherParser.GRANT, 0);
  }
  DENY() {
    return this.getToken(CypherParser.DENY, 0);
  }
  REVOKE() {
    return this.getToken(CypherParser.REVOKE, 0);
  }
  RELATIONSHIPS() {
    return this.getToken(CypherParser.RELATIONSHIPS, 0);
  }
  NODES() {
    return this.getToken(CypherParser.NODES, 0);
  }
  ELEMENT() {
    return this.getToken(CypherParser.ELEMENT, 0);
  }
  ELEMENTS() {
    return this.getToken(CypherParser.ELEMENTS, 0);
  }
  COPY() {
    return this.getToken(CypherParser.COPY, 0);
  }
  OF() {
    return this.getToken(CypherParser.OF, 0);
  }
  TRAVERSE() {
    return this.getToken(CypherParser.TRAVERSE, 0);
  }
  READ() {
    return this.getToken(CypherParser.READ, 0);
  }
  WRITE() {
    return this.getToken(CypherParser.WRITE, 0);
  }
  ACCESS() {
    return this.getToken(CypherParser.ACCESS, 0);
  }
  INDEXES() {
    return this.getToken(CypherParser.INDEXES, 0);
  }
  MANAGEMENT() {
    return this.getToken(CypherParser.MANAGEMENT, 0);
  }
  NEW() {
    return this.getToken(CypherParser.NEW, 0);
  }
  LABEL() {
    return this.getToken(CypherParser.LABEL, 0);
  }
  LABELS() {
    return this.getToken(CypherParser.LABELS, 0);
  }
  NAME() {
    return this.getToken(CypherParser.NAME, 0);
  }
  NAMES() {
    return this.getToken(CypherParser.NAMES, 0);
  }
  TYPE() {
    return this.getToken(CypherParser.TYPE, 0);
  }
  TYPES() {
    return this.getToken(CypherParser.TYPES, 0);
  }
  PROPERTY() {
    return this.getToken(CypherParser.PROPERTY, 0);
  }
  CONSTRAINTS() {
    return this.getToken(CypherParser.CONSTRAINTS, 0);
  }
  ASSIGN() {
    return this.getToken(CypherParser.ASSIGN, 0);
  }
  BTREE() {
    return this.getToken(CypherParser.BTREE, 0);
  }
  EXIST() {
    return this.getToken(CypherParser.EXIST, 0);
  }
  FOR() {
    return this.getToken(CypherParser.FOR, 0);
  }
  OPTIONS() {
    return this.getToken(CypherParser.OPTIONS, 0);
  }
  EXECUTE() {
    return this.getToken(CypherParser.EXECUTE, 0);
  }
  DEFINED() {
    return this.getToken(CypherParser.DEFINED, 0);
  }
  FUNCTION() {
    return this.getToken(CypherParser.FUNCTION, 0);
  }
  FUNCTIONS() {
    return this.getToken(CypherParser.FUNCTIONS, 0);
  }
  BOOSTED() {
    return this.getToken(CypherParser.BOOSTED, 0);
  }
  PROCEDURE() {
    return this.getToken(CypherParser.PROCEDURE, 0);
  }
  PROCEDURES() {
    return this.getToken(CypherParser.PROCEDURES, 0);
  }
  ADMIN() {
    return this.getToken(CypherParser.ADMIN, 0);
  }
  ADMINISTRATOR() {
    return this.getToken(CypherParser.ADMINISTRATOR, 0);
  }
  BRIEF() {
    return this.getToken(CypherParser.BRIEF, 0);
  }
  VERBOSE() {
    return this.getToken(CypherParser.VERBOSE, 0);
  }
  OUTPUT() {
    return this.getToken(CypherParser.OUTPUT, 0);
  }
  enterRule(listener) {
    if (listener instanceof CypherListener) {
      listener.enterKeyword(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof CypherListener) {
      listener.exitKeyword(this);
    }
  }
};
CypherParser.CypherContext = CypherContext;
CypherParser.CypherPartContext = CypherPartContext;
CypherParser.CypherConsoleCommandContext = CypherConsoleCommandContext;
CypherParser.CypherConsoleCommandNameContext = CypherConsoleCommandNameContext;
CypherParser.CypherConsoleCommandParametersContext = CypherConsoleCommandParametersContext;
CypherParser.CypherConsoleCommandParameterContext = CypherConsoleCommandParameterContext;
CypherParser.ArrowExpressionContext = ArrowExpressionContext;
CypherParser.UrlContext = UrlContext;
CypherParser.UriContext = UriContext;
CypherParser.SchemeContext = SchemeContext;
CypherParser.HostContext = HostContext;
CypherParser.HostnameContext = HostnameContext;
CypherParser.HostnumberContext = HostnumberContext;
CypherParser.PortContext = PortContext;
CypherParser.PathContext = PathContext;
CypherParser.UserContext = UserContext;
CypherParser.LoginContext = LoginContext;
CypherParser.PasswordContext = PasswordContext;
CypherParser.FragContext = FragContext;
CypherParser.UrlQueryContext = UrlQueryContext;
CypherParser.SearchContext = SearchContext;
CypherParser.SearchparameterContext = SearchparameterContext;
CypherParser.StringContext = StringContext;
CypherParser.UrlDigitsContext = UrlDigitsContext;
CypherParser.JsonContext = JsonContext;
CypherParser.ObjContext = ObjContext;
CypherParser.PairContext = PairContext;
CypherParser.ArrayContext = ArrayContext;
CypherParser.ValueContext = ValueContext;
CypherParser.KeyValueLiteralContext = KeyValueLiteralContext;
CypherParser.CommandPathContext = CommandPathContext;
CypherParser.SubCommandContext = SubCommandContext;
CypherParser.CypherQueryContext = CypherQueryContext;
CypherParser.QueryOptionsContext = QueryOptionsContext;
CypherParser.AnyCypherOptionContext = AnyCypherOptionContext;
CypherParser.CypherOptionContext = CypherOptionContext;
CypherParser.VersionNumberContext = VersionNumberContext;
CypherParser.ExplainContext = ExplainContext;
CypherParser.ProfileContext = ProfileContext;
CypherParser.ConfigurationOptionContext = ConfigurationOptionContext;
CypherParser.StatementContext = StatementContext;
CypherParser.QueryContext = QueryContext;
CypherParser.RegularQueryContext = RegularQueryContext;
CypherParser.BulkImportQueryContext = BulkImportQueryContext;
CypherParser.SingleQueryContext = SingleQueryContext;
CypherParser.PeriodicCommitHintContext = PeriodicCommitHintContext;
CypherParser.LoadCSVQueryContext = LoadCSVQueryContext;
CypherParser.UnionContext = UnionContext;
CypherParser.ClauseContext = ClauseContext;
CypherParser.CommandContext = CommandContext;
CypherParser.SystemCommandContext = SystemCommandContext;
CypherParser.MultidatabaseCommandContext = MultidatabaseCommandContext;
CypherParser.UserCommandContext = UserCommandContext;
CypherParser.PrivilegeCommandContext = PrivilegeCommandContext;
CypherParser.ShowRolesContext = ShowRolesContext;
CypherParser.CreateRoleContext = CreateRoleContext;
CypherParser.CopyRoleContext = CopyRoleContext;
CypherParser.DropRoleContext = DropRoleContext;
CypherParser.ShowUsersContext = ShowUsersContext;
CypherParser.CreateUserContext = CreateUserContext;
CypherParser.DropUserContext = DropUserContext;
CypherParser.AlterUserContext = AlterUserContext;
CypherParser.ShowPrivilegesContext = ShowPrivilegesContext;
CypherParser.GrantPrivilegeContext = GrantPrivilegeContext;
CypherParser.DenyPrivilegeContext = DenyPrivilegeContext;
CypherParser.RevokePrivilegeContext = RevokePrivilegeContext;
CypherParser.RevokePartContext = RevokePartContext;
CypherParser.DatabaseScopeContext = DatabaseScopeContext;
CypherParser.GraphScopeContext = GraphScopeContext;
CypherParser.RolesContext = RolesContext;
CypherParser.GrantableGraphPrivilegesContext = GrantableGraphPrivilegesContext;
CypherParser.RevokeableGraphPrivilegesContext = RevokeableGraphPrivilegesContext;
CypherParser.DatasbasePrivilegeContext = DatasbasePrivilegeContext;
CypherParser.DbmsPrivilegeContext = DbmsPrivilegeContext;
CypherParser.ElementScopeContext = ElementScopeContext;
CypherParser.PropertiesListContext = PropertiesListContext;
CypherParser.PropertyScopeContext = PropertyScopeContext;
CypherParser.ShowDatabaseContext = ShowDatabaseContext;
CypherParser.CreateDatabaseContext = CreateDatabaseContext;
CypherParser.DropDatabaseContext = DropDatabaseContext;
CypherParser.StartDatabaseContext = StartDatabaseContext;
CypherParser.StopDatabaseContext = StopDatabaseContext;
CypherParser.IfNotExistsContext = IfNotExistsContext;
CypherParser.IfExistsContext = IfExistsContext;
CypherParser.OrReplaceContext = OrReplaceContext;
CypherParser.SetPasswordContext = SetPasswordContext;
CypherParser.PasswordStatusContext = PasswordStatusContext;
CypherParser.SetStatusContext = SetStatusContext;
CypherParser.UserStatusContext = UserStatusContext;
CypherParser.CreateUniqueConstraintContext = CreateUniqueConstraintContext;
CypherParser.CreateNodeKeyConstraintContext = CreateNodeKeyConstraintContext;
CypherParser.CreateNodePropertyExistenceConstraintContext = CreateNodePropertyExistenceConstraintContext;
CypherParser.CreateRelationshipPropertyExistenceConstraintContext = CreateRelationshipPropertyExistenceConstraintContext;
CypherParser.CreateIndexContext = CreateIndexContext;
CypherParser.DropUniqueConstraintContext = DropUniqueConstraintContext;
CypherParser.DropNodeKeyConstraintContext = DropNodeKeyConstraintContext;
CypherParser.DropNodePropertyExistenceConstraintContext = DropNodePropertyExistenceConstraintContext;
CypherParser.DropRelationshipPropertyExistenceConstraintContext = DropRelationshipPropertyExistenceConstraintContext;
CypherParser.DropIndexContext = DropIndexContext;
CypherParser.IndexContext = IndexContext;
CypherParser.UniqueConstraintContext = UniqueConstraintContext;
CypherParser.NodeKeyConstraintContext = NodeKeyConstraintContext;
CypherParser.NodePropertyExistenceConstraintContext = NodePropertyExistenceConstraintContext;
CypherParser.RelationshipPropertyExistenceConstraintContext = RelationshipPropertyExistenceConstraintContext;
CypherParser.RelationshipPatternSyntaxContext = RelationshipPatternSyntaxContext;
CypherParser.LoadCSVClauseContext = LoadCSVClauseContext;
CypherParser.MatchClauseContext = MatchClauseContext;
CypherParser.UnwindClauseContext = UnwindClauseContext;
CypherParser.MergeClauseContext = MergeClauseContext;
CypherParser.MergeActionContext = MergeActionContext;
CypherParser.CreateClauseContext = CreateClauseContext;
CypherParser.CreateUniqueClauseContext = CreateUniqueClauseContext;
CypherParser.SetClauseContext = SetClauseContext;
CypherParser.SetItemContext = SetItemContext;
CypherParser.DeleteClauseContext = DeleteClauseContext;
CypherParser.RemoveClauseContext = RemoveClauseContext;
CypherParser.RemoveItemContext = RemoveItemContext;
CypherParser.ForeachClauseContext = ForeachClauseContext;
CypherParser.WithClauseContext = WithClauseContext;
CypherParser.ReturnClauseContext = ReturnClauseContext;
CypherParser.ReturnBodyContext = ReturnBodyContext;
CypherParser.FuncContext = FuncContext;
CypherParser.ReturnItemsContext = ReturnItemsContext;
CypherParser.ReturnItemContext = ReturnItemContext;
CypherParser.CallContext = CallContext;
CypherParser.ProcedureInvocationContext = ProcedureInvocationContext;
CypherParser.ProcedureInvocationBodyContext = ProcedureInvocationBodyContext;
CypherParser.ProcedureArgumentsContext = ProcedureArgumentsContext;
CypherParser.ProcedureResultsContext = ProcedureResultsContext;
CypherParser.ProcedureResultContext = ProcedureResultContext;
CypherParser.AliasedProcedureResultContext = AliasedProcedureResultContext;
CypherParser.SimpleProcedureResultContext = SimpleProcedureResultContext;
CypherParser.ProcedureOutputContext = ProcedureOutputContext;
CypherParser.OrderContext = OrderContext;
CypherParser.SkipContext = SkipContext;
CypherParser.LimitContext = LimitContext;
CypherParser.SortItemContext = SortItemContext;
CypherParser.HintContext = HintContext;
CypherParser.StartClauseContext = StartClauseContext;
CypherParser.StartPointContext = StartPointContext;
CypherParser.LookupContext = LookupContext;
CypherParser.NodeLookupContext = NodeLookupContext;
CypherParser.RelationshipLookupContext = RelationshipLookupContext;
CypherParser.IdentifiedIndexLookupContext = IdentifiedIndexLookupContext;
CypherParser.IndexQueryContext = IndexQueryContext;
CypherParser.IdLookupContext = IdLookupContext;
CypherParser.LiteralIdsContext = LiteralIdsContext;
CypherParser.WhereContext = WhereContext;
CypherParser.PatternContext = PatternContext;
CypherParser.PatternPartContext = PatternPartContext;
CypherParser.AnonymousPatternPartContext = AnonymousPatternPartContext;
CypherParser.PatternElementContext = PatternElementContext;
CypherParser.NodePatternContext = NodePatternContext;
CypherParser.PatternElementChainContext = PatternElementChainContext;
CypherParser.RelationshipPatternContext = RelationshipPatternContext;
CypherParser.RelationshipPatternStartContext = RelationshipPatternStartContext;
CypherParser.RelationshipPatternEndContext = RelationshipPatternEndContext;
CypherParser.RelationshipDetailContext = RelationshipDetailContext;
CypherParser.PropertiesContext = PropertiesContext;
CypherParser.RelTypeContext = RelTypeContext;
CypherParser.RelationshipTypesContext = RelationshipTypesContext;
CypherParser.RelationshipTypeContext = RelationshipTypeContext;
CypherParser.RelationshipTypeOptionalColonContext = RelationshipTypeOptionalColonContext;
CypherParser.NodeLabelsContext = NodeLabelsContext;
CypherParser.NodeLabelContext = NodeLabelContext;
CypherParser.RangeLiteralContext = RangeLiteralContext;
CypherParser.LabelNameContext = LabelNameContext;
CypherParser.RelTypeNameContext = RelTypeNameContext;
CypherParser.ExpressionContext = ExpressionContext;
CypherParser.OrExpressionContext = OrExpressionContext;
CypherParser.XorExpressionContext = XorExpressionContext;
CypherParser.AndExpressionContext = AndExpressionContext;
CypherParser.NotExpressionContext = NotExpressionContext;
CypherParser.ComparisonExpressionContext = ComparisonExpressionContext;
CypherParser.AddOrSubtractExpressionContext = AddOrSubtractExpressionContext;
CypherParser.MultiplyDivideModuloExpressionContext = MultiplyDivideModuloExpressionContext;
CypherParser.PowerOfExpressionContext = PowerOfExpressionContext;
CypherParser.UnaryAddOrSubtractExpressionContext = UnaryAddOrSubtractExpressionContext;
CypherParser.StringListNullOperatorExpressionContext = StringListNullOperatorExpressionContext;
CypherParser.PropertyOrLabelsExpressionContext = PropertyOrLabelsExpressionContext;
CypherParser.FilterFunctionContext = FilterFunctionContext;
CypherParser.FilterFunctionNameContext = FilterFunctionNameContext;
CypherParser.ExistsFunctionContext = ExistsFunctionContext;
CypherParser.ExistsFunctionNameContext = ExistsFunctionNameContext;
CypherParser.AllFunctionContext = AllFunctionContext;
CypherParser.AllFunctionNameContext = AllFunctionNameContext;
CypherParser.AnyFunctionContext = AnyFunctionContext;
CypherParser.AnyFunctionNameContext = AnyFunctionNameContext;
CypherParser.NoneFunctionContext = NoneFunctionContext;
CypherParser.NoneFunctionNameContext = NoneFunctionNameContext;
CypherParser.SingleFunctionContext = SingleFunctionContext;
CypherParser.SingleFunctionNameContext = SingleFunctionNameContext;
CypherParser.ExtractFunctionContext = ExtractFunctionContext;
CypherParser.ExtractFunctionNameContext = ExtractFunctionNameContext;
CypherParser.ReduceFunctionContext = ReduceFunctionContext;
CypherParser.ReduceFunctionNameContext = ReduceFunctionNameContext;
CypherParser.ShortestPathPatternFunctionContext = ShortestPathPatternFunctionContext;
CypherParser.ShortestPathFunctionNameContext = ShortestPathFunctionNameContext;
CypherParser.AllShortestPathFunctionNameContext = AllShortestPathFunctionNameContext;
CypherParser.AtomContext = AtomContext;
CypherParser.LiteralContext = LiteralContext;
CypherParser.StringLiteralContext = StringLiteralContext;
CypherParser.BooleanLiteralContext = BooleanLiteralContext;
CypherParser.ListLiteralContext = ListLiteralContext;
CypherParser.PartialComparisonExpressionContext = PartialComparisonExpressionContext;
CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
CypherParser.RelationshipsPatternContext = RelationshipsPatternContext;
CypherParser.FilterExpressionContext = FilterExpressionContext;
CypherParser.IdInCollContext = IdInCollContext;
CypherParser.FunctionInvocationContext = FunctionInvocationContext;
CypherParser.FunctionInvocationBodyContext = FunctionInvocationBodyContext;
CypherParser.FunctionNameContext = FunctionNameContext;
CypherParser.ProcedureNameContext = ProcedureNameContext;
CypherParser.ListComprehensionContext = ListComprehensionContext;
CypherParser.PatternComprehensionContext = PatternComprehensionContext;
CypherParser.PropertyLookupContext = PropertyLookupContext;
CypherParser.CaseExpressionContext = CaseExpressionContext;
CypherParser.CaseAlternativesContext = CaseAlternativesContext;
CypherParser.VariableContext = VariableContext;
CypherParser.NumberLiteralContext = NumberLiteralContext;
CypherParser.MapLiteralContext = MapLiteralContext;
CypherParser.MapProjectionContext = MapProjectionContext;
CypherParser.MapProjectionVariantsContext = MapProjectionVariantsContext;
CypherParser.LiteralEntryContext = LiteralEntryContext;
CypherParser.PropertySelectorContext = PropertySelectorContext;
CypherParser.VariableSelectorContext = VariableSelectorContext;
CypherParser.AllPropertiesSelectorContext = AllPropertiesSelectorContext;
CypherParser.ParameterContext = ParameterContext;
CypherParser.LegacyParameterContext = LegacyParameterContext;
CypherParser.NewParameterContext = NewParameterContext;
CypherParser.ParameterNameContext = ParameterNameContext;
CypherParser.PropertyExpressionsContext = PropertyExpressionsContext;
CypherParser.PropertyExpressionContext = PropertyExpressionContext;
CypherParser.PropertyKeysContext = PropertyKeysContext;
CypherParser.PropertyKeyNameContext = PropertyKeyNameContext;
CypherParser.IntegerLiteralContext = IntegerLiteralContext;
CypherParser.DoubleLiteralContext = DoubleLiteralContext;
CypherParser.NamespaceContext = NamespaceContext;
CypherParser.LeftArrowHeadContext = LeftArrowHeadContext;
CypherParser.RightArrowHeadContext = RightArrowHeadContext;
CypherParser.DashContext = DashContext;
CypherParser.SymbolicNameContext = SymbolicNameContext;
CypherParser.KeywordContext = KeywordContext;

// node_modules/@neo4j-cypher/editor-support/es/lang/CypherTypes.js
var VARIABLE_CONTEXT = CypherParser.VariableContext;
var LABEL_NAME_CONTEXT = CypherParser.LabelNameContext;
var RELATIONSHIP_TYPE_NAME_CONTEXT = CypherParser.RelTypeNameContext;
var PROPERTY_KEY_NAME_CONTEXT = CypherParser.PropertyKeyNameContext;
var PARAMETER_NAME_CONTEXT = CypherParser.ParameterNameContext;
var PARAMETER_CONTEXT = CypherParser.ParameterContext;
var FUNCTION_NAME_CONTEXT = CypherParser.FunctionInvocationBodyContext;
var PROCEDURE_NAME_CONTEXT = CypherParser.ProcedureInvocationBodyContext;
var CONSOLE_COMMAND_NAME_CONTEXT = CypherParser.CypherConsoleCommandNameContext;
var CONSOLE_COMMAND_CONTEXT = CypherParser.CypherConsoleCommandContext;
var CONSOLE_COMMAND_PARAMETERS_CONTEXT = CypherParser.CypherConsoleCommandParametersContext;
var CONSOLE_COMMAND_PARAMETER_CONTEXT = CypherParser.CypherConsoleCommandParameterContext;
var CONSOLE_COMMAND_SUBCOMMAND_CONTEXT = CypherParser.SubCommandContext;
var CONSOLE_COMMAND_PATH_CONTEXT = CypherParser.CommandPathContext;
var PROCEDURE_OUTPUT_CONTEXT = CypherParser.ProcedureOutputContext;
var PROCEDURE_RESULTS_CONTEXT = CypherParser.ProcedureResultsContext;
var ALL_FUNCTION_NAME_CONTEXT = CypherParser.AllFunctionNameContext;
var ANY_FUNCTION_NAME_CONTEXT = CypherParser.AnyFunctionNameContext;
var SINGLE_FUNCTION_NAME_CONTEXT = CypherParser.SingleFunctionNameContext;
var NONE_FUNCTION_NAME_CONTEXT = CypherParser.NoneFunctionNameContext;
var EXTRACT_FUNCTION_NAME_CONTEXT = CypherParser.ExtractFunctionNameContext;
var REDUCE_FUNCTION_NAME_CONTEXT = CypherParser.ReduceFunctionNameContext;
var SHORTEST_PATH_FUNCTION_NAME_CONTEXT = CypherParser.ShortestPathFunctionNameContext;
var ALL_SHORTEST_PATH_FUNCTION_NAME_CONTEXT = CypherParser.AllShortestPathFunctionNameContext;
var FILTER_FUNCTION_NAME_CONTEXT = CypherParser.FilterFunctionNameContext;
var EXISTS_FUNCTION_NAME_CONTEXT = CypherParser.ExistsFunctionNameContext;
var CALL_CONTEXT = CypherParser.CallContext;
var EXPRESSION_CONTEXT = CypherParser.ExpressionContext;
var PATTERN_ELEMENT_CONTEXT = CypherParser.PatternElementContext;
var NODE_PATTERN_CONTEXT = CypherParser.NodePatternContext;
var NODE_LABEL_CONTEXT = CypherParser.NodeLabelContext;
var NODE_LABELS_CONTEXT = CypherParser.NodeLabelsContext;
var RELATIONSHIP_TYPE_CONTEXT = CypherParser.RelationshipTypeContext;
var RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT = CypherParser.RelationshipTypeOptionalColonContext;
var RELATIONSHIP_TYPES_CONTEXT = CypherParser.RelationshipTypesContext;
var RELATIONSHIP_PATTERN_CONTEXT = CypherParser.RelationshipPatternContext;
var PROPERTY_LOOKUP_CONTEXT = CypherParser.PropertyLookupContext;
var MAP_LITERAL_CONTEXT = CypherParser.MapLiteralContext;
var PROPERTIES_CONTEXT = CypherParser.PropertiesContext;
var MAP_LITERAL_ENTRY = CypherParser.LiteralEntryContext;
var STRING_LITERAL_CONTEXT = CypherParser.StringLiteralContext;
var ATOM_CONTEXT = CypherParser.AtomContext;
var QUERY_CONTEXT = CypherParser.CypherQueryContext;
var SYMBOLIC_NAME_CONTEXT = CypherParser.SymbolicNameContext;
var COMPLETION_CANDIDATES = [STRING_LITERAL_CONTEXT, VARIABLE_CONTEXT, PROCEDURE_NAME_CONTEXT, FUNCTION_NAME_CONTEXT, CONSOLE_COMMAND_NAME_CONTEXT, NODE_LABEL_CONTEXT, RELATIONSHIP_TYPE_CONTEXT, RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT];
var SYMBOLIC_CONTEXTS = [VARIABLE_CONTEXT, LABEL_NAME_CONTEXT, RELATIONSHIP_TYPE_NAME_CONTEXT, PROPERTY_KEY_NAME_CONTEXT, PARAMETER_NAME_CONTEXT];

// node_modules/@neo4j-cypher/editor-support/es/util/TreeUtils.js
var TreeUtils = class _TreeUtils {
  static findParent(pt, type) {
    let el = pt;
    while (true) {
      if (el == null) {
        return null;
      }
      if (el instanceof type) {
        return el;
      }
      el = el.parentCtx;
    }
  }
  static findAnyParent(pt, types2 = []) {
    let el = pt;
    while (true) {
      if (el == null) {
        return null;
      }
      for (let type of types2) {
        if (el instanceof type) {
          return el;
        }
      }
      el = el.parentCtx;
    }
  }
  static findChild(element, type) {
    if (element == null) {
      return null;
    }
    if (element instanceof type) {
      return element;
    }
    if (element.children != null) {
      for (let i = 0; i < element.children.length; i += 1) {
        const e = element.children[i];
        const result = _TreeUtils.findChild(e, type);
        if (result != null) {
          return result;
        }
      }
    }
    return null;
  }
  static getPosition(el) {
    if (el != null) {
      const {
        start,
        stop,
        symbol
      } = el;
      if (symbol != null) {
        return {
          start: symbol.start,
          stop: symbol.stop
        };
      } else if (start != null && stop != null) {
        return {
          start: start.start,
          stop: stop.stop
        };
      }
    }
    return null;
  }
  static hasErrorNode(element) {
    if (element == null) {
      return false;
    }
    if (element.isErrorNode && element.isErrorNode()) {
      return true;
    }
    if (element.children != null) {
      for (let i = 0; i < element.children.length; i += 1) {
        const e = element.children[i];
        const childHasErrorNode = _TreeUtils.hasErrorNode(e);
        if (childHasErrorNode) {
          return true;
        }
      }
    }
    return false;
  }
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleCheckParent.js
var childToParentTypeMapping = /* @__PURE__ */ new Map();
childToParentTypeMapping.set(VARIABLE_CONTEXT, [{
  type: VARIABLE
}]);
childToParentTypeMapping.set(PARAMETER_NAME_CONTEXT, [{
  type: PARAMETER
}]);
childToParentTypeMapping.set(PROPERTY_KEY_NAME_CONTEXT, [{
  type: PROPERTY_KEY
}]);
childToParentTypeMapping.set(FUNCTION_NAME_CONTEXT, [{
  type: FUNCTION_NAME
}]);
childToParentTypeMapping.set(PROCEDURE_NAME_CONTEXT, [{
  type: PROCEDURE_NAME
}]);
childToParentTypeMapping.set(NODE_LABEL_CONTEXT, [{
  type: LABEL
}]);
childToParentTypeMapping.set(RELATIONSHIP_TYPE_CONTEXT, [{
  type: RELATIONSHIP_TYPE
}]);
childToParentTypeMapping.set(RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT, [{
  type: RELATIONSHIP_TYPE
}]);
childToParentTypeMapping.set(CONSOLE_COMMAND_NAME_CONTEXT, [{
  type: CONSOLE_COMMAND_NAME
}]);
childToParentTypeMapping.set(NODE_LABELS_CONTEXT, [{
  type: LABEL
}]);
childToParentTypeMapping.set(RELATIONSHIP_TYPES_CONTEXT, [{
  type: RELATIONSHIP_TYPE
}]);
var ruleCheckParent_default = (element) => {
  const parent = TreeUtils.findAnyParent(element, Array.from(childToParentTypeMapping.keys()));
  return parent != null ? childToParentTypeMapping.get(parent.constructor) : [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleVariableInExpressionPossibleFunction.js
var ruleVariableInExpressionPossibleFunction_default = (element) => {
  const variable = TreeUtils.findAnyParent(element, [VARIABLE_CONTEXT]);
  const expression = TreeUtils.findAnyParent(variable, [EXPRESSION_CONTEXT]);
  return variable != null && expression != null ? [{
    type: VARIABLE
  }, {
    type: FUNCTION_NAME
  }] : [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleProcedureOutputsInCallClause.js
var ruleProcedureOutputsInCallClause_default = (element) => {
  const call = TreeUtils.findAnyParent(element, [CALL_CONTEXT]);
  if (call != null) {
    const procedure = TreeUtils.findChild(call, PROCEDURE_NAME_CONTEXT);
    const resultOutput = TreeUtils.findAnyParent(element, [PROCEDURE_RESULTS_CONTEXT]);
    if (procedure == null || resultOutput == null) {
      return [];
    }
    return [{
      type: PROCEDURE_OUTPUT,
      name: procedure.getText()
    }];
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleCallClauseBeginning.js
var ruleCallClauseBeginning_default = (element) => {
  const parent = element.parentCtx;
  if (!parent) {
    return [];
  }
  if (parent instanceof CALL_CONTEXT) {
    const secondChild = parent.getChild(1);
    if (secondChild === element) {
      return [{
        type: PROCEDURE_NAME
      }];
    }
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/rulePossibleKeyword.js
var import_lodash = __toESM(require_lodash());

// node_modules/@neo4j-cypher/editor-support/es/lang/CypherKeywords.js
var CypherKeywords_default = ["CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "STARTS", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "CATALOG", "SHOW", "DEFAULT", "DBMS", "DATABASES", "DATABASE", "GRAPHS", "GRAPH", "REPLACE", "IF", "STOP", "ROLES", "ROLE", "USERS", "USER", "POPULATED", "PASSWORD", "CHANGE", "REQUIRED", "STATUS", "ACTIVE", "SUSPENDED", "ALTER", "CURRENT", "TO", "PRIVILEGES", "GRANT", "DENY", "REVOKE", "RELATIONSHIPS", "NODES", "ELEMENTS", "ELEMENT", "COPY", "OF", "TRAVERSE", "READ", "WRITE", "ACCESS", "INDEXES", "MANAGEMENT", "NEW", "LABELS", "LABEL", "NAMES", "NAME", "TYPES", "TYPE", "PROPERTY", "CONSTRAINTS", "ASSIGN", "BTREE", "EXIST", "FOR", "OPTIONS", "EXECUTE", "DEFINED", "FUNCTION", "FUNCTIONS", "BOOSTED", "PROCEDURE", "PROCEDURES", "ADMIN", "ADMINISTRATOR", "BRIEF", "VERBOSE", "OUTPUT"];

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/rulePossibleKeyword.js
var rulePossibleKeyword_default = (element) => {
  const text = element.getText().toLowerCase();
  if (CypherKeywords_default.find((keyword2) => (0, import_lodash.default)(keyword2.toLowerCase(), text))) {
    return ALL;
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleRelationshipPattern.js
var ruleRelationshipPattern_default = (element) => {
  const parent = TreeUtils.findParent(element, RELATIONSHIP_PATTERN_CONTEXT);
  if (parent) {
    if (element.getText() === "[") {
      return [{
        type: VARIABLE
      }, {
        type: RELATIONSHIP_TYPE
      }];
    }
    if (element.getText() === "]") {
      return [];
    }
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleNodePattern.js
var ruleNodePattern_default = (element) => {
  const parent = element.getParent ? element.getParent() : null;
  const text = element.getText();
  if (parent) {
    if (parent instanceof PATTERN_ELEMENT_CONTEXT && text === "(") {
      return [{
        type: VARIABLE
      }, {
        type: LABEL
      }];
    }
    if (parent instanceof NODE_PATTERN_CONTEXT) {
      if (text === "(") {
        return [{
          type: VARIABLE
        }, {
          type: LABEL
        }];
      }
      if (text === ":") {
        return [{
          type: LABEL
        }];
      }
    }
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/rulePropertyLookup.js
var rulePropertyLookup_default = (element) => {
  const lookupContext = element.getParent();
  const text = element.getText();
  if (lookupContext) {
    if (lookupContext instanceof PROPERTY_LOOKUP_CONTEXT && text === ".") {
      return [{
        type: PROPERTY_KEY
      }];
    }
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/rulePropInMapLiteral.js
var rulePropInMapLiteral_default = (element) => {
  const mapLiteralContext = TreeUtils.findParent(element, MAP_LITERAL_CONTEXT);
  const propertiesContext = TreeUtils.findParent(element, PROPERTIES_CONTEXT);
  if (mapLiteralContext) {
    const text = element.getText();
    if (text === "}") {
      return [];
    }
    return [{
      type: PROPERTY_KEY
    }];
  }
  if (propertiesContext) {
    const text = element.getText();
    if (text === "}") {
      return [];
    }
    if (/\s+/.test(text)) {
      return [];
    }
    return [{
      type: PROPERTY_KEY
    }, {
      type: PARAMETER
    }];
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleLiteralEntry.js
var ruleLiteralEntry_default = (element) => {
  const literalEntry = TreeUtils.findParent(element, MAP_LITERAL_ENTRY);
  if (!literalEntry) {
    return [];
  }
  const doubleDots = literalEntry.getChild(1);
  const space = literalEntry.getChild(2);
  if (doubleDots === element || space === element) {
    return ALL;
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleConsoleCommandSubcommands.js
var ruleConsoleCommandSubcommands_default = (element) => {
  let consoleCommand = TreeUtils.findParent(element.parentCtx, CONSOLE_COMMAND_CONTEXT);
  let isAtTheEndOfConsoleCommand = false;
  if (!consoleCommand) {
    const parent = element.parentCtx;
    const child1 = TreeUtils.findChild(parent.children[0], CONSOLE_COMMAND_CONTEXT);
    const child2 = parent.children[1];
    if (child1 && child2 && child2 === element) {
      consoleCommand = child1;
      isAtTheEndOfConsoleCommand = true;
    } else {
      return [];
    }
  }
  const currentElement = TreeUtils.findParent(element, CONSOLE_COMMAND_PARAMETER_CONTEXT) || element;
  const path = [];
  let currentElementInParameter = false;
  for (let i = 0; i < consoleCommand.children.length; i += 1) {
    const child = consoleCommand.children[i];
    if (child instanceof CONSOLE_COMMAND_NAME_CONTEXT) {
      path.push(child.getText());
    }
    if (child instanceof CONSOLE_COMMAND_PARAMETERS_CONTEXT) {
      for (let j = 0; j < child.children.length; j += 1) {
        const parameterChild = child.children[j];
        if (parameterChild instanceof CONSOLE_COMMAND_PARAMETER_CONTEXT) {
          path.push(parameterChild.getText());
          currentElementInParameter = true;
        } else {
          currentElementInParameter = false;
        }
        if (parameterChild === currentElement) {
          break;
        }
      }
    }
  }
  let filterLastElement;
  if (isAtTheEndOfConsoleCommand) {
    filterLastElement = false;
  } else {
    filterLastElement = currentElementInParameter;
  }
  return [{
    type: CONSOLE_COMMAND_SUBCOMMAND,
    path,
    filterLastElement
  }];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleNoop.js
var ruleNoop_default = (element) => {
  if (element instanceof STRING_LITERAL_CONTEXT) {
    return [{
      type: NOOP
    }];
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/rules/ruleParamStartsWithDollar.js
var ruleParamStartsWithDollar_default = (element) => {
  const text = element.getText();
  if (text === "$") {
    return [{
      type: PARAMETER
    }];
  }
  return [];
};

// node_modules/@neo4j-cypher/editor-support/es/completion/CompletionTypeResolver.js
var orderedCompletionRules = [ruleNoop_default, ruleVariableInExpressionPossibleFunction_default, ruleLiteralEntry_default, rulePropInMapLiteral_default, ruleParamStartsWithDollar_default, ruleCheckParent_default, ruleNodePattern_default, ruleRelationshipPattern_default, ruleProcedureOutputsInCallClause_default, ruleCallClauseBeginning_default, ruleConsoleCommandSubcommands_default, rulePropertyLookup_default, rulePossibleKeyword_default];
function evaluateRules(element) {
  for (let i = 0; i < orderedCompletionRules.length; i += 1) {
    const rule = orderedCompletionRules[i];
    const types2 = rule(element);
    if (types2.length > 0) {
      return types2;
    }
  }
  return [];
}
var CompletionTypeResolver = class {
  static getTypes(element) {
    if (element == null) {
      return {
        found: false,
        types: ALL
      };
    }
    const types2 = evaluateRules(element);
    if (types2.length > 0) {
      return {
        found: true,
        types: types2
      };
    }
    return {
      found: false,
      types: ALL
    };
  }
};

// node_modules/fuse.js/dist/fuse.esm.js
function isArray(value) {
  return !Array.isArray ? getTag(value) === "[object Array]" : Array.isArray(value);
}
var INFINITY = 1 / 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  let result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function toString(value) {
  return value == null ? "" : baseToString(value);
}
function isString(value) {
  return typeof value === "string";
}
function isNumber2(value) {
  return typeof value === "number";
}
function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && getTag(value) == "[object Boolean]";
}
function isObject2(value) {
  return typeof value === "object";
}
function isObjectLike(value) {
  return isObject2(value) && value !== null;
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isBlank(value) {
  return !value.trim().length;
}
function getTag(value) {
  return value == null ? value === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(value);
}
var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) => `Invalid value for key ${key}`;
var PATTERN_LENGTH_TOO_LARGE = (max) => `Pattern length exceeds max of ${max}.`;
var MISSING_KEY_PROPERTY = (name2) => `Missing ${name2} property in key`;
var INVALID_KEY_WEIGHT_VALUE = (key) => `Property 'weight' in key '${key}' must be a positive integer`;
var hasOwn = Object.prototype.hasOwnProperty;
var KeyStore = class {
  constructor(keys2) {
    this._keys = [];
    this._keyMap = {};
    let totalWeight = 0;
    keys2.forEach((key) => {
      let obj = createKey(key);
      totalWeight += obj.weight;
      this._keys.push(obj);
      this._keyMap[obj.id] = obj;
      totalWeight += obj.weight;
    });
    this._keys.forEach((key) => {
      key.weight /= totalWeight;
    });
  }
  get(keyId) {
    return this._keyMap[keyId];
  }
  keys() {
    return this._keys;
  }
  toJSON() {
    return JSON.stringify(this._keys);
  }
};
function createKey(key) {
  let path = null;
  let id = null;
  let src = null;
  let weight = 1;
  let getFn = null;
  if (isString(key) || isArray(key)) {
    src = key;
    path = createKeyPath(key);
    id = createKeyId(key);
  } else {
    if (!hasOwn.call(key, "name")) {
      throw new Error(MISSING_KEY_PROPERTY("name"));
    }
    const name2 = key.name;
    src = name2;
    if (hasOwn.call(key, "weight")) {
      weight = key.weight;
      if (weight <= 0) {
        throw new Error(INVALID_KEY_WEIGHT_VALUE(name2));
      }
    }
    path = createKeyPath(name2);
    id = createKeyId(name2);
    getFn = key.getFn;
  }
  return { path, id, weight, src, getFn };
}
function createKeyPath(key) {
  return isArray(key) ? key : key.split(".");
}
function createKeyId(key) {
  return isArray(key) ? key.join(".") : key;
}
function get(obj, path) {
  let list = [];
  let arr = false;
  const deepGet = (obj2, path2, index) => {
    if (!isDefined(obj2)) {
      return;
    }
    if (!path2[index]) {
      list.push(obj2);
    } else {
      let key = path2[index];
      const value = obj2[key];
      if (!isDefined(value)) {
        return;
      }
      if (index === path2.length - 1 && (isString(value) || isNumber2(value) || isBoolean(value))) {
        list.push(toString(value));
      } else if (isArray(value)) {
        arr = true;
        for (let i = 0, len = value.length; i < len; i += 1) {
          deepGet(value[i], path2, index + 1);
        }
      } else if (path2.length) {
        deepGet(value, path2, index + 1);
      }
    }
  };
  deepGet(obj, isString(path) ? path.split(".") : path, 0);
  return arr ? list : list[0];
}
var MatchOptions = {
  // Whether the matches should be included in the result set. When `true`, each record in the result
  // set will include the indices of the matched characters.
  // These can consequently be used for highlighting purposes.
  includeMatches: false,
  // When `true`, the matching function will continue to the end of a search pattern even if
  // a perfect match has already been located in the string.
  findAllMatches: false,
  // Minimum number of characters that must be matched before a result is considered a match
  minMatchCharLength: 1
};
var BasicOptions = {
  // When `true`, the algorithm continues searching to the end of the input even if a perfect
  // match is found before the end of the same input.
  isCaseSensitive: false,
  // When true, the matching function will continue to the end of a search pattern even if
  includeScore: false,
  // List of properties that will be searched. This also supports nested properties.
  keys: [],
  // Whether to sort the result list, by score
  shouldSort: true,
  // Default sort function: sort by ascending score, ascending index
  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
};
var FuzzyOptions = {
  // Approximately where in the text is the pattern expected to be found?
  location: 0,
  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
  // (of both letters and location), a threshold of '1.0' would match anything.
  threshold: 0.6,
  // Determines how close the match must be to the fuzzy location (specified above).
  // An exact letter match which is 'distance' characters away from the fuzzy location
  // would score as a complete mismatch. A distance of '0' requires the match be at
  // the exact location specified, a threshold of '1000' would require a perfect match
  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
  distance: 100
};
var AdvancedOptions = {
  // When `true`, it enables the use of unix-like search commands
  useExtendedSearch: false,
  // The get function to use when fetching an object's properties.
  // The default will search nested paths *ie foo.bar.baz*
  getFn: get,
  // When `true`, search will ignore `location` and `distance`, so it won't matter
  // where in the string the pattern appears.
  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
  ignoreLocation: false,
  // When `true`, the calculation for the relevance score (used for sorting) will
  // ignore the field-length norm.
  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
  ignoreFieldNorm: false,
  // The weight to determine how much field length norm effects scoring.
  fieldNormWeight: 1
};
var Config = {
  ...BasicOptions,
  ...MatchOptions,
  ...FuzzyOptions,
  ...AdvancedOptions
};
var SPACE = /[^ ]+/g;
function norm(weight = 1, mantissa = 3) {
  const cache = /* @__PURE__ */ new Map();
  const m = Math.pow(10, mantissa);
  return {
    get(value) {
      const numTokens = value.match(SPACE).length;
      if (cache.has(numTokens)) {
        return cache.get(numTokens);
      }
      const norm2 = 1 / Math.pow(numTokens, 0.5 * weight);
      const n = parseFloat(Math.round(norm2 * m) / m);
      cache.set(numTokens, n);
      return n;
    },
    clear() {
      cache.clear();
    }
  };
}
var FuseIndex = class {
  constructor({
    getFn = Config.getFn,
    fieldNormWeight = Config.fieldNormWeight
  } = {}) {
    this.norm = norm(fieldNormWeight, 3);
    this.getFn = getFn;
    this.isCreated = false;
    this.setIndexRecords();
  }
  setSources(docs = []) {
    this.docs = docs;
  }
  setIndexRecords(records = []) {
    this.records = records;
  }
  setKeys(keys2 = []) {
    this.keys = keys2;
    this._keysMap = {};
    keys2.forEach((key, idx) => {
      this._keysMap[key.id] = idx;
    });
  }
  create() {
    if (this.isCreated || !this.docs.length) {
      return;
    }
    this.isCreated = true;
    if (isString(this.docs[0])) {
      this.docs.forEach((doc2, docIndex) => {
        this._addString(doc2, docIndex);
      });
    } else {
      this.docs.forEach((doc2, docIndex) => {
        this._addObject(doc2, docIndex);
      });
    }
    this.norm.clear();
  }
  // Adds a doc to the end of the index
  add(doc2) {
    const idx = this.size();
    if (isString(doc2)) {
      this._addString(doc2, idx);
    } else {
      this._addObject(doc2, idx);
    }
  }
  // Removes the doc at the specified index of the index
  removeAt(idx) {
    this.records.splice(idx, 1);
    for (let i = idx, len = this.size(); i < len; i += 1) {
      this.records[i].i -= 1;
    }
  }
  getValueForItemAtKeyId(item, keyId) {
    return item[this._keysMap[keyId]];
  }
  size() {
    return this.records.length;
  }
  _addString(doc2, docIndex) {
    if (!isDefined(doc2) || isBlank(doc2)) {
      return;
    }
    let record = {
      v: doc2,
      i: docIndex,
      n: this.norm.get(doc2)
    };
    this.records.push(record);
  }
  _addObject(doc2, docIndex) {
    let record = { i: docIndex, $: {} };
    this.keys.forEach((key, keyIndex) => {
      let value = key.getFn ? key.getFn(doc2) : this.getFn(doc2, key.path);
      if (!isDefined(value)) {
        return;
      }
      if (isArray(value)) {
        let subRecords = [];
        const stack = [{ nestedArrIndex: -1, value }];
        while (stack.length) {
          const { nestedArrIndex, value: value2 } = stack.pop();
          if (!isDefined(value2)) {
            continue;
          }
          if (isString(value2) && !isBlank(value2)) {
            let subRecord = {
              v: value2,
              i: nestedArrIndex,
              n: this.norm.get(value2)
            };
            subRecords.push(subRecord);
          } else if (isArray(value2)) {
            value2.forEach((item, k) => {
              stack.push({
                nestedArrIndex: k,
                value: item
              });
            });
          } else
            ;
        }
        record.$[keyIndex] = subRecords;
      } else if (isString(value) && !isBlank(value)) {
        let subRecord = {
          v: value,
          n: this.norm.get(value)
        };
        record.$[keyIndex] = subRecord;
      }
    });
    this.records.push(record);
  }
  toJSON() {
    return {
      keys: this.keys,
      records: this.records
    };
  }
};
function createIndex(keys2, docs, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys2.map(createKey));
  myIndex.setSources(docs);
  myIndex.create();
  return myIndex;
}
function parseIndex(data, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const { keys: keys2, records } = data;
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys2);
  myIndex.setIndexRecords(records);
  return myIndex;
}
function computeScore$1(pattern, {
  errors = 0,
  currentLocation = 0,
  expectedLocation = 0,
  distance = Config.distance,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  const accuracy = errors / pattern.length;
  if (ignoreLocation) {
    return accuracy;
  }
  const proximity = Math.abs(expectedLocation - currentLocation);
  if (!distance) {
    return proximity ? 1 : accuracy;
  }
  return accuracy + proximity / distance;
}
function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
  let indices = [];
  let start = -1;
  let end = -1;
  let i = 0;
  for (let len = matchmask.length; i < len; i += 1) {
    let match = matchmask[i];
    if (match && start === -1) {
      start = i;
    } else if (!match && start !== -1) {
      end = i - 1;
      if (end - start + 1 >= minMatchCharLength) {
        indices.push([start, end]);
      }
      start = -1;
    }
  }
  if (matchmask[i - 1] && i - start >= minMatchCharLength) {
    indices.push([start, i - 1]);
  }
  return indices;
}
var MAX_BITS = 32;
function search2(text, pattern, patternAlphabet, {
  location = Config.location,
  distance = Config.distance,
  threshold = Config.threshold,
  findAllMatches = Config.findAllMatches,
  minMatchCharLength = Config.minMatchCharLength,
  includeMatches = Config.includeMatches,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  if (pattern.length > MAX_BITS) {
    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
  }
  const patternLen = pattern.length;
  const textLen = text.length;
  const expectedLocation = Math.max(0, Math.min(location, textLen));
  let currentThreshold = threshold;
  let bestLocation = expectedLocation;
  const computeMatches = minMatchCharLength > 1 || includeMatches;
  const matchMask = computeMatches ? Array(textLen) : [];
  let index;
  while ((index = text.indexOf(pattern, bestLocation)) > -1) {
    let score2 = computeScore$1(pattern, {
      currentLocation: index,
      expectedLocation,
      distance,
      ignoreLocation
    });
    currentThreshold = Math.min(score2, currentThreshold);
    bestLocation = index + patternLen;
    if (computeMatches) {
      let i = 0;
      while (i < patternLen) {
        matchMask[index + i] = 1;
        i += 1;
      }
    }
  }
  bestLocation = -1;
  let lastBitArr = [];
  let finalScore = 1;
  let binMax = patternLen + textLen;
  const mask = 1 << patternLen - 1;
  for (let i = 0; i < patternLen; i += 1) {
    let binMin = 0;
    let binMid = binMax;
    while (binMin < binMid) {
      const score3 = computeScore$1(pattern, {
        errors: i,
        currentLocation: expectedLocation + binMid,
        expectedLocation,
        distance,
        ignoreLocation
      });
      if (score3 <= currentThreshold) {
        binMin = binMid;
      } else {
        binMax = binMid;
      }
      binMid = Math.floor((binMax - binMin) / 2 + binMin);
    }
    binMax = binMid;
    let start = Math.max(1, expectedLocation - binMid + 1);
    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;
    let bitArr = Array(finish + 2);
    bitArr[finish + 1] = (1 << i) - 1;
    for (let j = finish; j >= start; j -= 1) {
      let currentLocation = j - 1;
      let charMatch = patternAlphabet[text.charAt(currentLocation)];
      if (computeMatches) {
        matchMask[currentLocation] = +!!charMatch;
      }
      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;
      if (i) {
        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
      }
      if (bitArr[j] & mask) {
        finalScore = computeScore$1(pattern, {
          errors: i,
          currentLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });
        if (finalScore <= currentThreshold) {
          currentThreshold = finalScore;
          bestLocation = currentLocation;
          if (bestLocation <= expectedLocation) {
            break;
          }
          start = Math.max(1, 2 * expectedLocation - bestLocation);
        }
      }
    }
    const score2 = computeScore$1(pattern, {
      errors: i + 1,
      currentLocation: expectedLocation,
      expectedLocation,
      distance,
      ignoreLocation
    });
    if (score2 > currentThreshold) {
      break;
    }
    lastBitArr = bitArr;
  }
  const result = {
    isMatch: bestLocation >= 0,
    // Count exact matches (those with a score of 0) to be "almost" exact
    score: Math.max(1e-3, finalScore)
  };
  if (computeMatches) {
    const indices = convertMaskToIndices(matchMask, minMatchCharLength);
    if (!indices.length) {
      result.isMatch = false;
    } else if (includeMatches) {
      result.indices = indices;
    }
  }
  return result;
}
function createPatternAlphabet(pattern) {
  let mask = {};
  for (let i = 0, len = pattern.length; i < len; i += 1) {
    const char = pattern.charAt(i);
    mask[char] = (mask[char] || 0) | 1 << len - i - 1;
  }
  return mask;
}
var BitapSearch = class {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    this.options = {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.chunks = [];
    if (!this.pattern.length) {
      return;
    }
    const addChunk = (pattern2, startIndex) => {
      this.chunks.push({
        pattern: pattern2,
        alphabet: createPatternAlphabet(pattern2),
        startIndex
      });
    };
    const len = this.pattern.length;
    if (len > MAX_BITS) {
      let i = 0;
      const remainder = len % MAX_BITS;
      const end = len - remainder;
      while (i < end) {
        addChunk(this.pattern.substr(i, MAX_BITS), i);
        i += MAX_BITS;
      }
      if (remainder) {
        const startIndex = len - MAX_BITS;
        addChunk(this.pattern.substr(startIndex), startIndex);
      }
    } else {
      addChunk(this.pattern, 0);
    }
  }
  searchIn(text) {
    const { isCaseSensitive, includeMatches } = this.options;
    if (!isCaseSensitive) {
      text = text.toLowerCase();
    }
    if (this.pattern === text) {
      let result2 = {
        isMatch: true,
        score: 0
      };
      if (includeMatches) {
        result2.indices = [[0, text.length - 1]];
      }
      return result2;
    }
    const {
      location,
      distance,
      threshold,
      findAllMatches,
      minMatchCharLength,
      ignoreLocation
    } = this.options;
    let allIndices = [];
    let totalScore = 0;
    let hasMatches = false;
    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {
      const { isMatch, score: score2, indices } = search2(text, pattern, alphabet, {
        location: location + startIndex,
        distance,
        threshold,
        findAllMatches,
        minMatchCharLength,
        includeMatches,
        ignoreLocation
      });
      if (isMatch) {
        hasMatches = true;
      }
      totalScore += score2;
      if (isMatch && indices) {
        allIndices = [...allIndices, ...indices];
      }
    });
    let result = {
      isMatch: hasMatches,
      score: hasMatches ? totalScore / this.chunks.length : 1
    };
    if (hasMatches && includeMatches) {
      result.indices = allIndices;
    }
    return result;
  }
};
var BaseMatch = class {
  constructor(pattern) {
    this.pattern = pattern;
  }
  static isMultiMatch(pattern) {
    return getMatch(pattern, this.multiRegex);
  }
  static isSingleMatch(pattern) {
    return getMatch(pattern, this.singleRegex);
  }
  search() {
  }
};
function getMatch(pattern, exp) {
  const matches = pattern.match(exp);
  return matches ? matches[1] : null;
}
var ExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "exact";
  }
  static get multiRegex() {
    return /^="(.*)"$/;
  }
  static get singleRegex() {
    return /^=(.*)$/;
  }
  search(text) {
    const isMatch = text === this.pattern;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
};
var InverseExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"$/;
  }
  static get singleRegex() {
    return /^!(.*)$/;
  }
  search(text) {
    const index = text.indexOf(this.pattern);
    const isMatch = index === -1;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
};
var PrefixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "prefix-exact";
  }
  static get multiRegex() {
    return /^\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^\^(.*)$/;
  }
  search(text) {
    const isMatch = text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
};
var InversePrefixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-prefix-exact";
  }
  static get multiRegex() {
    return /^!\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^!\^(.*)$/;
  }
  search(text) {
    const isMatch = !text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
};
var SuffixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "suffix-exact";
  }
  static get multiRegex() {
    return /^"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^(.*)\$$/;
  }
  search(text) {
    const isMatch = text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [text.length - this.pattern.length, text.length - 1]
    };
  }
};
var InverseSuffixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-suffix-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^!(.*)\$$/;
  }
  search(text) {
    const isMatch = !text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
};
var FuzzyMatch = class extends BaseMatch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    super(pattern);
    this._bitapSearch = new BitapSearch(pattern, {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    });
  }
  static get type() {
    return "fuzzy";
  }
  static get multiRegex() {
    return /^"(.*)"$/;
  }
  static get singleRegex() {
    return /^(.*)$/;
  }
  search(text) {
    return this._bitapSearch.searchIn(text);
  }
};
var IncludeMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "include";
  }
  static get multiRegex() {
    return /^'"(.*)"$/;
  }
  static get singleRegex() {
    return /^'(.*)$/;
  }
  search(text) {
    let location = 0;
    let index;
    const indices = [];
    const patternLen = this.pattern.length;
    while ((index = text.indexOf(this.pattern, location)) > -1) {
      location = index + patternLen;
      indices.push([index, location - 1]);
    }
    const isMatch = !!indices.length;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices
    };
  }
};
var searchers = [
  ExactMatch,
  IncludeMatch,
  PrefixExactMatch,
  InversePrefixExactMatch,
  InverseSuffixExactMatch,
  SuffixExactMatch,
  InverseExactMatch,
  FuzzyMatch
];
var searchersLen = searchers.length;
var SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
var OR_TOKEN = "|";
function parseQuery(pattern, options = {}) {
  return pattern.split(OR_TOKEN).map((item) => {
    let query = item.trim().split(SPACE_RE).filter((item2) => item2 && !!item2.trim());
    let results = [];
    for (let i = 0, len = query.length; i < len; i += 1) {
      const queryItem = query[i];
      let found = false;
      let idx = -1;
      while (!found && ++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isMultiMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          found = true;
        }
      }
      if (found) {
        continue;
      }
      idx = -1;
      while (++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isSingleMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          break;
        }
      }
    }
    return results;
  });
}
var MultiMatchSet = /* @__PURE__ */ new Set([FuzzyMatch.type, IncludeMatch.type]);
var ExtendedSearch = class {
  constructor(pattern, {
    isCaseSensitive = Config.isCaseSensitive,
    includeMatches = Config.includeMatches,
    minMatchCharLength = Config.minMatchCharLength,
    ignoreLocation = Config.ignoreLocation,
    findAllMatches = Config.findAllMatches,
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance
  } = {}) {
    this.query = null;
    this.options = {
      isCaseSensitive,
      includeMatches,
      minMatchCharLength,
      findAllMatches,
      ignoreLocation,
      location,
      threshold,
      distance
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.query = parseQuery(this.pattern, this.options);
  }
  static condition(_, options) {
    return options.useExtendedSearch;
  }
  searchIn(text) {
    const query = this.query;
    if (!query) {
      return {
        isMatch: false,
        score: 1
      };
    }
    const { includeMatches, isCaseSensitive } = this.options;
    text = isCaseSensitive ? text : text.toLowerCase();
    let numMatches = 0;
    let allIndices = [];
    let totalScore = 0;
    for (let i = 0, qLen = query.length; i < qLen; i += 1) {
      const searchers2 = query[i];
      allIndices.length = 0;
      numMatches = 0;
      for (let j = 0, pLen = searchers2.length; j < pLen; j += 1) {
        const searcher = searchers2[j];
        const { isMatch, indices, score: score2 } = searcher.search(text);
        if (isMatch) {
          numMatches += 1;
          totalScore += score2;
          if (includeMatches) {
            const type = searcher.constructor.type;
            if (MultiMatchSet.has(type)) {
              allIndices = [...allIndices, ...indices];
            } else {
              allIndices.push(indices);
            }
          }
        } else {
          totalScore = 0;
          numMatches = 0;
          allIndices.length = 0;
          break;
        }
      }
      if (numMatches) {
        let result = {
          isMatch: true,
          score: totalScore / numMatches
        };
        if (includeMatches) {
          result.indices = allIndices;
        }
        return result;
      }
    }
    return {
      isMatch: false,
      score: 1
    };
  }
};
var registeredSearchers = [];
function register(...args) {
  registeredSearchers.push(...args);
}
function createSearcher(pattern, options) {
  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
    let searcherClass = registeredSearchers[i];
    if (searcherClass.condition(pattern, options)) {
      return new searcherClass(pattern, options);
    }
  }
  return new BitapSearch(pattern, options);
}
var LogicalOperator = {
  AND: "$and",
  OR: "$or"
};
var KeyType = {
  PATH: "$path",
  PATTERN: "$val"
};
var isExpression = (query) => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
var isPath = (query) => !!query[KeyType.PATH];
var isLeaf = (query) => !isArray(query) && isObject2(query) && !isExpression(query);
var convertToExplicit = (query) => ({
  [LogicalOperator.AND]: Object.keys(query).map((key) => ({
    [key]: query[key]
  }))
});
function parse(query, options, { auto = true } = {}) {
  const next = (query2) => {
    let keys2 = Object.keys(query2);
    const isQueryPath = isPath(query2);
    if (!isQueryPath && keys2.length > 1 && !isExpression(query2)) {
      return next(convertToExplicit(query2));
    }
    if (isLeaf(query2)) {
      const key = isQueryPath ? query2[KeyType.PATH] : keys2[0];
      const pattern = isQueryPath ? query2[KeyType.PATTERN] : query2[key];
      if (!isString(pattern)) {
        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
      }
      const obj = {
        keyId: createKeyId(key),
        pattern
      };
      if (auto) {
        obj.searcher = createSearcher(pattern, options);
      }
      return obj;
    }
    let node = {
      children: [],
      operator: keys2[0]
    };
    keys2.forEach((key) => {
      const value = query2[key];
      if (isArray(value)) {
        value.forEach((item) => {
          node.children.push(next(item));
        });
      }
    });
    return node;
  };
  if (!isExpression(query)) {
    query = convertToExplicit(query);
  }
  return next(query);
}
function computeScore(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {
  results.forEach((result) => {
    let totalScore = 1;
    result.matches.forEach(({ key, norm: norm2, score: score2 }) => {
      const weight = key ? key.weight : null;
      totalScore *= Math.pow(
        score2 === 0 && weight ? Number.EPSILON : score2,
        (weight || 1) * (ignoreFieldNorm ? 1 : norm2)
      );
    });
    result.score = totalScore;
  });
}
function transformMatches(result, data) {
  const matches = result.matches;
  data.matches = [];
  if (!isDefined(matches)) {
    return;
  }
  matches.forEach((match) => {
    if (!isDefined(match.indices) || !match.indices.length) {
      return;
    }
    const { indices, value } = match;
    let obj = {
      indices,
      value
    };
    if (match.key) {
      obj.key = match.key.src;
    }
    if (match.idx > -1) {
      obj.refIndex = match.idx;
    }
    data.matches.push(obj);
  });
}
function transformScore(result, data) {
  data.score = result.score;
}
function format(results, docs, {
  includeMatches = Config.includeMatches,
  includeScore = Config.includeScore
} = {}) {
  const transformers = [];
  if (includeMatches)
    transformers.push(transformMatches);
  if (includeScore)
    transformers.push(transformScore);
  return results.map((result) => {
    const { idx } = result;
    const data = {
      item: docs[idx],
      refIndex: idx
    };
    if (transformers.length) {
      transformers.forEach((transformer) => {
        transformer(result, data);
      });
    }
    return data;
  });
}
var Fuse = class {
  constructor(docs, options = {}, index) {
    this.options = { ...Config, ...options };
    if (this.options.useExtendedSearch && false) {
      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
    }
    this._keyStore = new KeyStore(this.options.keys);
    this.setCollection(docs, index);
  }
  setCollection(docs, index) {
    this._docs = docs;
    if (index && !(index instanceof FuseIndex)) {
      throw new Error(INCORRECT_INDEX_TYPE);
    }
    this._myIndex = index || createIndex(this.options.keys, this._docs, {
      getFn: this.options.getFn,
      fieldNormWeight: this.options.fieldNormWeight
    });
  }
  add(doc2) {
    if (!isDefined(doc2)) {
      return;
    }
    this._docs.push(doc2);
    this._myIndex.add(doc2);
  }
  remove(predicate = () => false) {
    const results = [];
    for (let i = 0, len = this._docs.length; i < len; i += 1) {
      const doc2 = this._docs[i];
      if (predicate(doc2, i)) {
        this.removeAt(i);
        i -= 1;
        len -= 1;
        results.push(doc2);
      }
    }
    return results;
  }
  removeAt(idx) {
    this._docs.splice(idx, 1);
    this._myIndex.removeAt(idx);
  }
  getIndex() {
    return this._myIndex;
  }
  search(query, { limit = -1 } = {}) {
    const {
      includeMatches,
      includeScore,
      shouldSort,
      sortFn,
      ignoreFieldNorm
    } = this.options;
    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
    computeScore(results, { ignoreFieldNorm });
    if (shouldSort) {
      results.sort(sortFn);
    }
    if (isNumber2(limit) && limit > -1) {
      results = results.slice(0, limit);
    }
    return format(results, this._docs, {
      includeMatches,
      includeScore
    });
  }
  _searchStringList(query) {
    const searcher = createSearcher(query, this.options);
    const { records } = this._myIndex;
    const results = [];
    records.forEach(({ v: text, i: idx, n: norm2 }) => {
      if (!isDefined(text)) {
        return;
      }
      const { isMatch, score: score2, indices } = searcher.searchIn(text);
      if (isMatch) {
        results.push({
          item: text,
          idx,
          matches: [{ score: score2, value: text, norm: norm2, indices }]
        });
      }
    });
    return results;
  }
  _searchLogical(query) {
    const expression = parse(query, this.options);
    const evaluate = (node, item, idx) => {
      if (!node.children) {
        const { keyId, searcher } = node;
        const matches = this._findMatches({
          key: this._keyStore.get(keyId),
          value: this._myIndex.getValueForItemAtKeyId(item, keyId),
          searcher
        });
        if (matches && matches.length) {
          return [
            {
              idx,
              item,
              matches
            }
          ];
        }
        return [];
      }
      const res = [];
      for (let i = 0, len = node.children.length; i < len; i += 1) {
        const child = node.children[i];
        const result = evaluate(child, item, idx);
        if (result.length) {
          res.push(...result);
        } else if (node.operator === LogicalOperator.AND) {
          return [];
        }
      }
      return res;
    };
    const records = this._myIndex.records;
    const resultMap = {};
    const results = [];
    records.forEach(({ $: item, i: idx }) => {
      if (isDefined(item)) {
        let expResults = evaluate(expression, item, idx);
        if (expResults.length) {
          if (!resultMap[idx]) {
            resultMap[idx] = { idx, item, matches: [] };
            results.push(resultMap[idx]);
          }
          expResults.forEach(({ matches }) => {
            resultMap[idx].matches.push(...matches);
          });
        }
      }
    });
    return results;
  }
  _searchObjectList(query) {
    const searcher = createSearcher(query, this.options);
    const { keys: keys2, records } = this._myIndex;
    const results = [];
    records.forEach(({ $: item, i: idx }) => {
      if (!isDefined(item)) {
        return;
      }
      let matches = [];
      keys2.forEach((key, keyIndex) => {
        matches.push(
          ...this._findMatches({
            key,
            value: item[keyIndex],
            searcher
          })
        );
      });
      if (matches.length) {
        results.push({
          idx,
          item,
          matches
        });
      }
    });
    return results;
  }
  _findMatches({ key, value, searcher }) {
    if (!isDefined(value)) {
      return [];
    }
    let matches = [];
    if (isArray(value)) {
      value.forEach(({ v: text, i: idx, n: norm2 }) => {
        if (!isDefined(text)) {
          return;
        }
        const { isMatch, score: score2, indices } = searcher.searchIn(text);
        if (isMatch) {
          matches.push({
            score: score2,
            key,
            value: text,
            idx,
            norm: norm2,
            indices
          });
        }
      });
    } else {
      const { v: text, n: norm2 } = value;
      const { isMatch, score: score2, indices } = searcher.searchIn(text);
      if (isMatch) {
        matches.push({ score: score2, key, value: text, norm: norm2, indices });
      }
    }
    return matches;
  }
};
Fuse.version = "6.6.2";
Fuse.createIndex = createIndex;
Fuse.parseIndex = parseIndex;
Fuse.config = Config;
{
  Fuse.parseQuery = parse;
}
{
  register(ExtendedSearch);
}

// node_modules/@neo4j-cypher/editor-support/es/completion/AutoCompletion.js
var import_lodash2 = __toESM(require_lodash2());

// node_modules/@neo4j-cypher/editor-support/es/util/ecsapeCypher.js
var ecsapeCypher = (str) => {
  const prefix = str.startsWith(":") ? ":" : "";
  let content2 = str;
  if (prefix.length > 0) {
    content2 = str.substring(1);
  }
  return /^[A-Za-z][A-Za-z0-9_]*$/.test(content2) ? prefix + content2 : `${prefix}\`${content2.replace(/`/g, "``")}\``;
};

// node_modules/@neo4j-cypher/editor-support/es/completion/AutoCompletion.js
var KEYWORD_ITEMS = CypherKeywords_default.map((keyword2) => ({
  type: KEYWORD,
  view: keyword2,
  content: keyword2,
  postfix: null
}));
var fuzzySearch = (list, text, key) => {
  const fuse = new Fuse(list, {
    keys: [key]
  });
  return fuse.search(text).map(({
    item
  }) => item);
};
var AbstractCachingCompletion = class {
  constructor(cache = {}) {
    _defineProperty(this, "cache", {});
    this.cache = cache;
  }
  // eslint-disable-next-line class-methods-use-this, no-unused-vars
  calculateItems(type, query = null) {
    return [];
  }
  complete(types2, query) {
    return types2.map((typeData) => {
      const cached = this.cache[typeData.type];
      if (cached != null) {
        return cached;
      }
      return this.calculateItems(typeData, query);
    }).reduce((acc, items) => [...acc, ...items], []);
  }
};
var SchemaBasedCompletion = class _SchemaBasedCompletion extends AbstractCachingCompletion {
  constructor(schema = {}) {
    super({
      [KEYWORD]: KEYWORD_ITEMS,
      [LABEL]: (schema.labels || []).map((label) => ({
        type: LABEL,
        view: label,
        content: ecsapeCypher(label),
        postfix: null
      })),
      [RELATIONSHIP_TYPE]: (schema.relationshipTypes || []).map((relType) => ({
        type: RELATIONSHIP_TYPE,
        view: relType,
        content: ecsapeCypher(relType),
        postfix: null
      })),
      [PROPERTY_KEY]: (schema.propertyKeys || []).map((propKey) => ({
        type: PROPERTY_KEY,
        view: propKey,
        content: ecsapeCypher(propKey),
        postfix: null
      })),
      [FUNCTION_NAME]: (schema.functions || []).map(({
        name: name2,
        signature
      }) => ({
        type: FUNCTION_NAME,
        view: name2,
        content: ecsapeCypher(name2),
        postfix: signature
      })),
      [PROCEDURE_NAME]: (schema.procedures || []).map(({
        name: name2,
        signature
      }) => ({
        type: PROCEDURE_NAME,
        view: name2,
        content: name2,
        postfix: signature
      })),
      [CONSOLE_COMMAND_NAME]: (schema.consoleCommands || []).map((consoleCommandName) => ({
        type: CONSOLE_COMMAND_NAME,
        view: consoleCommandName.name,
        content: consoleCommandName.name,
        postfix: consoleCommandName.description || null
      })),
      [PARAMETER]: (schema.parameters || []).map((parameter) => ({
        type: PARAMETER,
        view: parameter,
        content: parameter,
        postfix: null
      }))
    });
    _defineProperty(this, "schema", {});
    this.schema = schema;
  }
  calculateItems(typeData) {
    return (_SchemaBasedCompletion.providers[typeData.type] || (() => []))(this.schema, typeData);
  }
};
_defineProperty(SchemaBasedCompletion, "providers", {
  [PROCEDURE_OUTPUT]: (schema, typeData) => {
    const findByName = (e) => e.name === typeData.name && e.returnItems !== [];
    const procedure = (0, import_lodash2.default)(schema.procedures, findByName);
    if (procedure) {
      return procedure.returnItems.map(({
        name: name2,
        signature
      }) => ({
        type: PROCEDURE_OUTPUT,
        view: name2,
        content: name2,
        postfix: ` :: ${signature}`
      }));
    }
    return [];
  },
  [CONSOLE_COMMAND_SUBCOMMAND]: (schema, typeData) => {
    const {
      filterLastElement,
      path
    } = typeData;
    const length = filterLastElement ? path.length - 1 : path.length;
    let currentLevel = schema.consoleCommands;
    for (let i = 0; i < length; i += 1) {
      const foundCommand = (0, import_lodash2.default)(currentLevel, ["name", path[i]]);
      if (foundCommand) {
        currentLevel = foundCommand.commands || [];
      } else {
        return [];
      }
    }
    return currentLevel.map(({
      name: name2,
      description
    }) => ({
      type: CONSOLE_COMMAND_SUBCOMMAND,
      view: name2,
      content: name2,
      postfix: description || null
    }));
  }
});
var QueryBasedCompletion = class extends AbstractCachingCompletion {
  constructor(referenceProviders = {}) {
    super();
    _defineProperty(this, "providers", {});
    _defineProperty(this, "emptyProvider", {
      getNames: () => []
    });
    this.providers = {
      [VARIABLE]: (query) => (referenceProviders.get(VARIABLE_CONTEXT) || this.emptyProvider).getNames(query).map((name2) => ({
        type: VARIABLE,
        view: name2,
        content: name2,
        postfix: null
      }))
    };
  }
  calculateItems(typeData, query) {
    return (this.providers[typeData.type] || (() => []))(query);
  }
};
var AutoCompletion = class _AutoCompletion {
  constructor() {
    _defineProperty(this, "queryBased", null);
    _defineProperty(this, "schemaBased", null);
    this.updateSchema({});
  }
  getItems(types2, {
    query = null,
    filter = ""
  }) {
    const text = filter.toLowerCase();
    const filteredText = _AutoCompletion.filterText(text);
    const completionItemFilter = () => true;
    const list = [this.queryBased, this.schemaBased].filter((s) => s != null).map((t2) => t2.complete(types2, query)).reduce((acc, items) => [...acc, ...items], []).filter(completionItemFilter);
    if (filteredText) {
      return fuzzySearch(list, filteredText, "view");
    }
    if (text) {
      return fuzzySearch(list, text, "view");
    }
    return list;
  }
  updateSchema(schema) {
    this.schemaBased = new SchemaBasedCompletion(schema);
  }
  updateReferenceProviders(referenceProviders) {
    this.queryBased = new QueryBasedCompletion(referenceProviders);
  }
  /**
   * Define whether element should be replaced or not.
   */
  static shouldBeReplaced(element) {
    if (element == null) {
      return false;
    }
    const text = element.getText();
    const parent = element.parentCtx;
    if (/^\s+$/.test(text)) {
      return false;
    }
    if (text === "[") {
      return false;
    }
    if (text === "(") {
      return false;
    }
    if (text === ".") {
      return false;
    }
    if (text === "{") {
      return false;
    }
    if (text === "$") {
      return false;
    }
    if (text === ":" && parent != null && parent instanceof MAP_LITERAL_ENTRY) {
      return false;
    }
    return true;
  }
  static filterText(text) {
    if (text.startsWith("$")) {
      return text.slice(1);
    }
    return text;
  }
  // eslint-disable-next-line no-unused-vars
  static calculateSmartReplaceRange(element, start, stop) {
    if (element instanceof RELATIONSHIP_TYPE_CONTEXT || element instanceof NODE_LABEL_CONTEXT) {
      if (TreeUtils.hasErrorNode(element)) {
        return {
          filterText: ":",
          start,
          stop: start
        };
      }
    }
    return null;
  }
};

// node_modules/@neo4j-cypher/editor-support/es/highlight/CypherSyntaxHighlight.js
function traverse(element, callback) {
  if (callback(element)) {
    return;
  }
  const c = element.getChildCount();
  if (c === 0) {
    return;
  }
  for (let i = 0; i < c; i += 1) {
    traverse(element.getChild(i), callback);
  }
}
var CypherSyntaxHighlight = class {
  static process(parseTree, callback) {
    traverse(parseTree, (e) => {
      const {
        start,
        stop
      } = TreeUtils.getPosition(e) || {
        start: 0,
        stop: 0
      };
      if (start > stop) {
        return false;
      }
      if (e instanceof VARIABLE_CONTEXT) {
        callback(e, "variable");
        return true;
      }
      if (e instanceof NODE_LABEL_CONTEXT) {
        callback(e, "label");
        return true;
      }
      if (e instanceof RELATIONSHIP_TYPE_CONTEXT || e instanceof RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT) {
        callback(e, "relationshipType");
        return true;
      }
      if (e instanceof PROPERTY_KEY_NAME_CONTEXT) {
        callback(e, "property");
        return true;
      }
      if (e instanceof PROCEDURE_NAME_CONTEXT) {
        callback(e, "procedure");
        return true;
      }
      if (e instanceof PROCEDURE_OUTPUT_CONTEXT) {
        callback(e, "procedureOutput");
        return true;
      }
      if (e instanceof FUNCTION_NAME_CONTEXT) {
        callback(e, "function");
        return true;
      }
      if (e instanceof ALL_FUNCTION_NAME_CONTEXT || e instanceof REDUCE_FUNCTION_NAME_CONTEXT || e instanceof FILTER_FUNCTION_NAME_CONTEXT || e instanceof NONE_FUNCTION_NAME_CONTEXT || e instanceof EXTRACT_FUNCTION_NAME_CONTEXT || e instanceof SHORTEST_PATH_FUNCTION_NAME_CONTEXT || e instanceof ALL_SHORTEST_PATH_FUNCTION_NAME_CONTEXT || e instanceof SINGLE_FUNCTION_NAME_CONTEXT || e instanceof EXISTS_FUNCTION_NAME_CONTEXT || e instanceof ANY_FUNCTION_NAME_CONTEXT) {
        callback(e, "function");
        return true;
      }
      if (e instanceof PARAMETER_CONTEXT) {
        callback(e, "parameter");
        return true;
      }
      if (e instanceof CONSOLE_COMMAND_NAME_CONTEXT) {
        callback(e, "consoleCommand");
        return true;
      }
      if (e instanceof CONSOLE_COMMAND_SUBCOMMAND_CONTEXT || e instanceof CONSOLE_COMMAND_PATH_CONTEXT) {
        callback(e, "property");
        return true;
      }
      return false;
    });
  }
};

// node_modules/@neo4j-cypher/editor-support/es/util/PositionConverter.js
var PositionConverter = class {
  constructor(input) {
    _defineProperty(this, "newLines", []);
    for (let i = 0; i < input.length; i += 1) {
      if (input[i] === "\n") {
        this.newLines.push(i);
      }
    }
  }
  toAbsolute(line, column) {
    return (this.newLines[line - 2] || -1) + column + 1;
  }
  toRelative(abs) {
    for (let i = this.newLines.length - 1; i >= 0; i -= 1) {
      const column = abs - this.newLines[i];
      if (column >= 1) {
        return {
          line: i + 2,
          column: column - 1
        };
      }
    }
    return {
      line: 1,
      column: abs
    };
  }
};

// node_modules/@neo4j-cypher/editor-support/es/util/retryOperation.js
var wait = (ms) => new Promise((r) => setTimeout(r, ms));
var retryOperation = (operation, delay, times) => new Promise((resolve, reject) => operation().then(resolve).catch((reason) => {
  if (times - 1 > 0) {
    return wait(delay).then(retryOperation.bind(null, operation, delay, times - 1)).then(resolve).catch(reject);
  }
  return reject(reason);
}));

// node_modules/@neo4j-cypher/editor-support/es/references/ReferencesProvider.js
var ReferencesProvider = class {
  constructor(queries, index) {
    _defineProperty(this, "queries", []);
    _defineProperty(this, "index", {});
    const {
      names,
      namesByQuery,
      referencesByName,
      referencesByQueryAndName
    } = index;
    this.queries = queries;
    this.index = {
      names: Object.keys(names),
      namesByQuery: namesByQuery.map((q) => Object.keys(q)),
      referencesByName,
      referencesByQueryAndName
    };
  }
  getReferences(name2, query = null) {
    if (query == null) {
      return this.index.referencesByName[name2];
    }
    const pos = this.queries.indexOf(query);
    return (this.index.referencesByQueryAndName[pos] || {})[name2];
  }
  getNames(query = null) {
    if (query == null) {
      return this.index.names;
    }
    const pos = this.queries.indexOf(query);
    return this.index.namesByQuery[pos] || [];
  }
};

// node_modules/@neo4j-cypher/editor-support/es/errors/ErrorListener.js
var ErrorListener2 = class extends es_default.error.ErrorListener {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "errors", []);
  }
  // eslint-disable-next-line no-unused-vars
  syntaxError(rec, sym, line, col, msg, e) {
    const {
      start,
      stop
    } = sym || {};
    if (msg === "mismatched input '<EOF>' expecting {';', SP}") {
      return;
    }
    if (msg === "missing ';' at '<EOF>'") {
      return;
    }
    if (msg === "mismatched input '<EOF>' expecting {':', CYPHER, EXPLAIN, PROFILE, USING, CREATE, DROP, LOAD, WITH, OPTIONAL, MATCH, UNWIND, MERGE, SET, DETACH, DELETE, REMOVE, FOREACH, RETURN, START, CALL}") {
      return;
    }
    this.errors.push({
      line,
      col,
      msg,
      start,
      stop
    });
  }
};

// node_modules/@neo4j-cypher/editor-support/es/references/ReferencesListener.js
var Index = class {
  constructor() {
    _defineProperty(this, "names", {});
    _defineProperty(this, "namesByQuery", []);
    _defineProperty(this, "referencesByName", {});
    _defineProperty(this, "referencesByQueryAndName", []);
  }
  addQuery() {
    this.namesByQuery.push([]);
    this.referencesByQueryAndName.push({});
  }
  add(ctx, addName = true) {
    const queryIndex = this.namesByQuery.length - 1;
    const text = ctx.getText();
    if (addName) {
      this.names[text] = true;
      this.namesByQuery[queryIndex][text] = true;
    }
    this.referencesByName[text] = [...this.referencesByName[text] || [], ctx];
    const index = this.referencesByQueryAndName[queryIndex];
    index[text] = [...index[text] || [], ctx];
  }
  /**
   * Variables have specific rules, because they participate in autocompletion.
   * We should not add to the names list variables that are in expression.
   */
  addVariable(ctx) {
    let addName = true;
    const parent = ctx.parentCtx;
    if (parent && parent instanceof ATOM_CONTEXT) {
      addName = false;
    }
    this.add(ctx, addName);
  }
};
var ReferencesListener = class extends CypherListener {
  constructor() {
    super();
    _defineProperty(this, "queries", []);
    _defineProperty(this, "queriesAndCommands", []);
    _defineProperty(this, "statements", []);
    _defineProperty(this, "raw", []);
    _defineProperty(this, "indexes", /* @__PURE__ */ new Map());
    _defineProperty(this, "inConsoleCommand", false);
    SYMBOLIC_CONTEXTS.forEach((sc) => {
      this.indexes.set(sc, new Index(sc));
    });
  }
  enterRaw(ctx) {
    this.raw.push(ctx);
  }
  exitRaw(ctx) {
    if (this.raw.length === 0) {
      this.raw.push(ctx);
    }
  }
  enterCypherPart(ctx) {
    this.statements.push(ctx);
  }
  exitCypher(ctx) {
    if (this.statements.length === 0) {
      this.statements.push(ctx);
    }
  }
  enterCypherConsoleCommand(ctx) {
    this.queriesAndCommands.push(ctx);
    this.indexes.forEach((index) => index.addQuery());
    this.inConsoleCommand = true;
  }
  exitCypherConsoleCommand() {
    this.inConsoleCommand = false;
  }
  enterCypherQuery(ctx) {
    this.queries.push(ctx);
    this.queriesAndCommands.push(ctx);
    this.indexes.forEach((index) => index.addQuery());
  }
  exitVariable(ctx) {
    if (this.inConsoleCommand) {
      return;
    }
    this.indexes.get(VARIABLE_CONTEXT).addVariable(ctx);
  }
  exitLabelName(ctx) {
    if (this.inConsoleCommand) {
      return;
    }
    this.indexes.get(LABEL_NAME_CONTEXT).add(ctx);
  }
  exitRelTypeName(ctx) {
    if (this.inConsoleCommand) {
      return;
    }
    this.indexes.get(RELATIONSHIP_TYPE_NAME_CONTEXT).add(ctx);
  }
  exitPropertyKeyName(ctx) {
    if (this.inConsoleCommand) {
      return;
    }
    this.indexes.get(PROPERTY_KEY_NAME_CONTEXT).add(ctx);
  }
  exitParameterName(ctx) {
    if (this.inConsoleCommand) {
      return;
    }
    this.indexes.get(PARAMETER_NAME_CONTEXT).add(ctx);
  }
};

// node_modules/@neo4j-cypher/editor-support/es/util/parse.js
var parse2 = (input) => {
  const referencesListener = new ReferencesListener();
  const errorListener = new ErrorListener2();
  const chars = new es_default.InputStream(input);
  const lexer = new CypherLexer(chars);
  lexer.removeErrorListeners();
  lexer.addErrorListener(errorListener);
  const tokens = new es_default.CommonTokenStream(lexer);
  const parser = new CypherParser(tokens);
  parser.buildParseTrees = true;
  parser.removeErrorListeners();
  parser.addErrorListener(errorListener);
  parser.addParseListener(referencesListener);
  const parseTree = parser.cypher();
  const {
    queries,
    indexes
  } = referencesListener;
  const referencesProviders = /* @__PURE__ */ new Map();
  SYMBOLIC_CONTEXTS.forEach((sc) => {
    referencesProviders.set(sc, new ReferencesProvider(queries, indexes.get(sc)));
  });
  return {
    parseTree,
    referencesListener,
    errorListener,
    referencesProviders
  };
};

// node_modules/@neo4j-cypher/editor-support/es/CypherEditorSupport.js
function ownKeys2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var CypherEditorSupport = class {
  constructor(input = "") {
    _defineProperty(this, "schema", {});
    _defineProperty(this, "input", null);
    _defineProperty(this, "positionConverter", new PositionConverter(""));
    _defineProperty(this, "parseTree", null);
    _defineProperty(this, "parseErrors", []);
    _defineProperty(this, "referencesProviders", /* @__PURE__ */ new Map());
    _defineProperty(this, "completion", new AutoCompletion());
    _defineProperty(this, "queriesAndCommands", []);
    _defineProperty(this, "statements", []);
    _defineProperty(this, "listeners", []);
    _defineProperty(this, "version", 0);
    _defineProperty(this, "ensureVersion", (version, delay = 30, times = 5) => retryOperation(() => new Promise((resolve, reject) => {
      if (version === this.version) {
        return resolve();
      }
      return reject();
    }), delay, times));
    this.update(input);
  }
  on(eventName, cb) {
    this.listeners[eventName] = Array.isArray(this.listeners[eventName]) ? this.listeners[eventName].concat([cb]) : this.listeners[eventName] = [cb];
  }
  off(eventName, cb) {
    if (!this.listeners[eventName])
      return;
    const index = this.listeners[eventName].indexOf(cb);
    if (index > -1) {
      this.listeners[eventName].splice(index, 1);
    }
  }
  trigger(eventName, args = []) {
    if (!this.listeners[eventName])
      return;
    this.listeners[eventName].forEach((cb) => cb(...args));
  }
  update(input = "", version) {
    this.trigger("update");
    if (input === this.input) {
      this.version = version || this.version;
      this.trigger("updated", [{
        queriesAndCommands: this.queriesAndCommands,
        referencesProviders: this.referencesProviders
      }]);
      return;
    }
    this.positionConverter = new PositionConverter(input);
    this.input = input;
    const {
      parseTree,
      referencesListener,
      errorListener,
      referencesProviders
    } = parse2(input);
    this.parseTree = parseTree;
    this.parseErrors = errorListener.errors;
    const {
      queriesAndCommands,
      statements
    } = referencesListener;
    this.statements = statements;
    this.queriesAndCommands = queriesAndCommands;
    this.referencesProviders = referencesProviders;
    this.completion.updateReferenceProviders(this.referencesProviders);
    this.version = version || this.version;
    this.trigger("updated", [{
      queriesAndCommands: this.queriesAndCommands,
      referencesProviders: this.referencesProviders
    }]);
  }
  setSchema(schema) {
    this.schema = schema;
    this.completion.updateSchema(this.schema);
  }
  getElement(line, column) {
    const abs = this.positionConverter.toAbsolute(line, column);
    function getElement(pt) {
      const pos = TreeUtils.getPosition(pt);
      if (pos != null && (abs < pos.start || abs > pos.stop)) {
        return null;
      }
      const c = pt.getChildCount();
      if (c === 0 && pos != null) {
        return pt;
      }
      for (let i = 0; i < c; i += 1) {
        const e = getElement(pt.getChild(i));
        if (e != null) {
          return e;
        }
      }
      return pos != null ? pt : null;
    }
    return getElement(this.parseTree);
  }
  getReferences(line, column) {
    const e = TreeUtils.findAnyParent(this.getElement(line, column), SYMBOLIC_CONTEXTS);
    if (e == null) {
      return [];
    }
    const query = e instanceof VARIABLE_CONTEXT ? TreeUtils.findAnyParent(e, [QUERY_CONTEXT]) : null;
    return this.referencesProviders.get(e).getReferences(e.getText(), query);
  }
  getCompletionInfo(line, column) {
    const element = this.getElementForCompletion(line, column);
    const query = TreeUtils.findAnyParent(element, [QUERY_CONTEXT]);
    const {
      found,
      types: types2
    } = CompletionTypeResolver.getTypes(element);
    return {
      element,
      query,
      found,
      types: types2
    };
  }
  getElementForCompletion(line, column) {
    const e = this.getElement(line, column);
    return TreeUtils.findAnyParent(e, COMPLETION_CANDIDATES) || e;
  }
  getCompletion(line, column, doFilter = true) {
    let info = this.getCompletionInfo(line, column);
    if (!info.found && column > 0) {
      const prevInfo = this.getCompletionInfo(line, column - 1);
      if (prevInfo.found) {
        info = prevInfo;
      }
    }
    const {
      element,
      query,
      found,
      types: types2
    } = info;
    const replaceRange2 = {
      from: {
        line,
        column
      },
      to: {
        line,
        column
      }
    };
    let filter = null;
    const shouldBeReplaced = AutoCompletion.shouldBeReplaced(element);
    if (found && shouldBeReplaced) {
      const {
        start,
        stop
      } = TreeUtils.getPosition(element);
      const smartReplaceRange = AutoCompletion.calculateSmartReplaceRange(element, start, stop);
      if (smartReplaceRange) {
        replaceRange2.from = this.positionConverter.toRelative(smartReplaceRange.start);
        replaceRange2.to = this.positionConverter.toRelative(smartReplaceRange.stop + 1);
        if (smartReplaceRange.filterText) {
          filter = smartReplaceRange.filterText;
        }
      } else {
        replaceRange2.from = this.positionConverter.toRelative(start);
        replaceRange2.to = this.positionConverter.toRelative(stop + 1);
      }
    }
    if (filter === null) {
      filter = doFilter && found && shouldBeReplaced ? element.getText() : "";
    }
    return _objectSpread2({
      items: this.completion.getItems(types2, {
        filter,
        query
      })
    }, replaceRange2);
  }
  applyHighlighthing(callback) {
    CypherSyntaxHighlight.process(this.parseTree, callback);
  }
};

// node_modules/@neo4j-cypher/codemirror/es/cypher-state-definitions.js
var editorSupportField = StateField.define({
  create() {
    return new CypherEditorSupport();
  },
  update(editorSupport, tr) {
    return editorSupport;
  }
});
var addTypeMarkerEffect = StateEffect.define();
var clearTypeMarkersEffect = StateEffect.define();
var typeMarkerField = StateField.define({
  create() {
    return Decoration.none;
  },
  update(typeMarkers, tr) {
    typeMarkers = typeMarkers.map(tr.changes);
    for (let e of tr.effects) {
      if (e.is(clearTypeMarkersEffect)) {
        typeMarkers = Decoration.none;
      } else if (e.is(addTypeMarkerEffect)) {
        if (e.value.from !== e.value.to) {
          typeMarkers = typeMarkers.update({
            add: [Decoration.mark({
              class: "cm-p-" + e.value.type
            }).range(e.value.from, e.value.to)]
          });
        }
      }
    }
    return typeMarkers;
  },
  provide: (f) => EditorView.decorations.from(f)
});

// node_modules/@neo4j-cypher/codemirror/es/cypher-state-selectors.js
function ownKeys3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var getStateField = (mainExtension, label) => {
  const extensions = mainExtension();
  if (Array.isArray(extensions)) {
    const stateField = extensions.find((ex) => ex instanceof StateField);
    if (stateField) {
      return stateField;
    }
  }
  const length = Array.isArray(extensions) ? extensions.length : "no";
  throw new Error("getStateField for " + label + " failed (" + length + " extensions found)");
};
var searchStateField = getStateField(search, "search");
var autocompletionStateField = getStateField(autocompletion, "autocompletion");
var getStatePositionAbsolute = (state) => state.selection.main.head;
var getStateEditorSupport = (state) => state.field(editorSupportField, false);
var getStateLineCount = (state) => state.doc.lines;
var getStateValue = (state) => state.doc.toString();
var getStateLength = (state) => state.doc.length;
var getStateLineObjectForLine = (state, line) => state.doc.line(line);
var getStateLineObjectForAbsolute = (state, position) => state.doc.lineAt(position);
var getStatePositionAbsoluteForLineColumn = (state, {
  line,
  column
}) => state.doc.line(line).from + column;
var getStatePositionForAbsolute = (state, position) => {
  const {
    number: line,
    from: lineStart
  } = getStateLineObjectForAbsolute(state, position);
  const column = position - lineStart;
  return {
    line,
    column,
    position
  };
};
var getStatePosition = (state) => getStatePositionForAbsolute(state, getStatePositionAbsolute(state));
var getStatePositionForAny = (state, positionValue) => {
  let position = null;
  if (isAbsolutePosition(positionValue)) {
    position = positionValue;
  } else if (isLineColumnAbsolutePosition(positionValue)) {
    position = positionValue.position;
  } else if (isLineColumnPosition(positionValue)) {
    const {
      line,
      column
    } = positionValue;
    const lineCount = getStateLineCount(state);
    if (line <= lineCount) {
      const lineObject = getStateLineObjectForLine(state, line);
      if (lineObject) {
        const {
          from,
          to
        } = lineObject;
        if (isInteger(from) && isInteger(to) && column <= to - from) {
          position = from + column;
        }
      }
    }
  }
  if (position !== null) {
    if (position <= getStateLength(state)) {
      const lineObject = getStateLineObjectForAbsolute(state, position);
      if (lineObject) {
        const {
          number: line,
          from: lineStart,
          to: lineEnd
        } = lineObject;
        const column = position - lineStart;
        if (lineStart + column <= lineEnd) {
          position = {
            line,
            column,
            position
          };
        } else {
          position = null;
        }
      } else {
        position = null;
      }
    } else {
      position = null;
    }
  }
  return position;
};
var getStateSelection = (state) => state.selection;
var getStateHasSelection = (state) => state.selection.ranges.some((r) => !r.empty);
var getSearchState = (state) => state.field(searchStateField, false);
var getStateSearchOpen = (state) => (getSearchState(state) || {
  panel: null
}).panel !== null;
var getStateSearchMatches = (state, maxCount = 1e3) => {
  const matches = (getSearchState(state) || {
    query: {
      matchAll: () => null
    }
  }).query.matchAll(state, 1e3);
  return matches ? matches.slice(0, maxCount) : matches;
};
var getStateSearchSpec = (state) => (getSearchState(state) || {
  query: {
    spec: null
  }
}).query.spec;
var getStateSearchText = (state) => (getSearchState(state) || {
  query: {
    spec: {
      search: null
    }
  }
}).query.spec.search;
var getAutocompleteState = (state) => state.field(autocompletionStateField, false);
var getStateAutocompleteOpen = (state) => (getAutocompleteState(state) || {
  open: null
}).open !== null;
var getFormattedAutocompleteOption = (option) => _objectSpread3({
  from: option.source.from
}, option.completion);
var getStateAutocompleteOptions = (state, format2 = false) => {
  const {
    open
  } = getAutocompleteState(state) || {
    open: null
  };
  if (open !== null) {
    const {
      options
    } = open;
    if (options) {
      return format2 ? options.map(getFormattedAutocompleteOption) : options;
    }
    return [];
  }
  return null;
};
var areViewUpdateAutocompleteOptionsEqual = (v) => {
  const {
    startState: oldState,
    state: newState
  } = v;
  const {
    open: oldOpen
  } = getAutocompleteState(oldState) || {
    open: null
  };
  const {
    open: newOpen
  } = getAutocompleteState(newState) || {
    open: null
  };
  if (oldOpen === null || newOpen === null) {
    return oldOpen === newOpen;
  } else {
    const {
      options: oldOptions
    } = oldOpen;
    const {
      options: newOptions
    } = newOpen;
    if (!oldOptions || !newOptions) {
      return oldOptions === newOptions;
    } else {
      const {
        length: oldLength
      } = oldOptions;
      const {
        length: newLength
      } = newOptions;
      if (!oldLength || !newLength || oldLength !== newLength) {
        return oldLength === newLength;
      }
      for (let i = 0; i < newLength; i++) {
        const oldOption = oldOptions[i];
        const newOption = oldOptions[i];
        if (oldOption.source.from !== newOption.source.from || oldOption.completion !== newOption.completion) {
          return false;
        }
      }
      return true;
    }
  }
};
var getViewUpdateAnnotationValueForType = (v, type) => {
  for (let transaction of v.transactions) {
    const {
      annotations
    } = transaction;
    const foundAnnotation = annotations.find((a) => a.type === type);
    if (foundAnnotation && foundAnnotation.value) {
      return foundAnnotation.value;
    }
  }
  return null;
};
var getViewUpdatePickedAutocompleteOption = (v, format2 = false) => {
  const pickedAutocompletion = getViewUpdateAnnotationValueForType(v, pickedCompletion);
  if (pickedAutocompletion) {
    const pickedAutocompleteOption = getStateAutocompleteOptions(v.startState, false).find(({
      completion
    }) => completion == pickedAutocompletion);
    if (pickedAutocompleteOption) {
      return format2 ? getFormattedAutocompleteOption(pickedAutocompleteOption) : pickedAutocompleteOption;
    }
  }
  return null;
};

// node_modules/@codemirror/commands/dist/index.js
var toggleComment = (target) => {
  let { state } = target, line = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line.from);
  return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
};
function command(f, option) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let tr = f(option, state);
    if (!tr)
      return false;
    dispatch(state.update(tr));
    return true;
  };
}
var toggleLineComment = command(
  changeLineComment,
  0
  /* CommentOption.Toggle */
);
var lineComment = command(
  changeLineComment,
  1
  /* CommentOption.Comment */
);
var lineUncomment = command(
  changeLineComment,
  2
  /* CommentOption.Uncomment */
);
var toggleBlockComment = command(
  changeBlockComment,
  0
  /* CommentOption.Toggle */
);
var blockComment = command(
  changeBlockComment,
  1
  /* CommentOption.Comment */
);
var blockUncomment = command(
  changeBlockComment,
  2
  /* CommentOption.Uncomment */
);
var toggleBlockCommentByLine = command(
  (o, s) => changeBlockComment(o, s, selectedLineRanges(s)),
  0
  /* CommentOption.Toggle */
);
function getConfig(state, pos) {
  let data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}
var SearchMargin = 50;
function findBlockComment(state, { open, close }, from, to) {
  let textBefore = state.sliceDoc(from - SearchMargin, from);
  let textAfter = state.sliceDoc(to, to + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
    };
  }
  let startText, endText;
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  let ranges = [];
  for (let r of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r.from);
    let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last].to > fromLine.from)
      ranges[last].to = toLine.to;
    else
      ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
  }
  return ranges;
}
function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens = ranges.map((r) => getConfig(state, r.from).block);
  if (!tokens.every((c) => c))
    return null;
  let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
  if (option != 2 && !comments.every((c) => c)) {
    return { changes: state.changes(ranges.map((range, i) => {
      if (comments[i])
        return [];
      return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
    })) };
  } else if (option != 1 && comments.some((c) => c)) {
    let changes = [];
    for (let i = 0, comment2; i < comments.length; i++)
      if (comment2 = comments[i]) {
        let token = tokens[i], { open, close } = comment2;
        changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
      }
    return { changes };
  }
  return null;
}
function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;
  for (let { from, to } of ranges) {
    let startI = lines.length, minIndent = 1e9;
    let token = getConfig(state, from).line;
    if (!token)
      continue;
    for (let pos = from; pos <= to; ) {
      let line = state.doc.lineAt(pos);
      if (line.from > prevLine && (from == to || to > line.from)) {
        prevLine = line.from;
        let indent = /^\s*/.exec(line.text)[0].length;
        let empty2 = indent == line.length;
        let comment2 = line.text.slice(indent, indent + token.length) == token ? indent : -1;
        if (indent < line.text.length && indent < minIndent)
          minIndent = indent;
        lines.push({ line, comment: comment2, token, indent, empty: empty2, single: false });
      }
      pos = line.to + 1;
    }
    if (minIndent < 1e9) {
      for (let i = startI; i < lines.length; i++)
        if (lines[i].indent < lines[i].line.text.length)
          lines[i].indent = minIndent;
    }
    if (lines.length == startI + 1)
      lines[startI].single = true;
  }
  if (option != 2 && lines.some((l) => l.comment < 0 && (!l.empty || l.single))) {
    let changes = [];
    for (let { line, token, indent, empty: empty2, single } of lines)
      if (single || !empty2)
        changes.push({ from: line.from + indent, insert: token + " " });
    let changeSet = state.changes(changes);
    return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
  } else if (option != 1 && lines.some((l) => l.comment >= 0)) {
    let changes = [];
    for (let { line, comment: comment2, token } of lines)
      if (comment2 >= 0) {
        let from = line.from + comment2, to = from + token.length;
        if (line.text[to - line.from] == " ")
          to++;
        changes.push({ from, to });
      }
    return { changes };
  }
  return null;
}
var fromHistory = Annotation.define();
var isolateHistory = Annotation.define();
var invertedEffects = Facet.define();
var historyConfig = Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (_t, isAdjacent2) => isAdjacent2
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
    });
  }
});
var historyField_ = StateField.define({
  create() {
    return HistoryState.empty;
  },
  update(state, tr) {
    let config2 = tr.state.facet(historyConfig);
    let fromHist = tr.annotation(fromHistory);
    if (fromHist) {
      let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
      let other = from == 0 ? state.undone : state.done;
      if (item)
        other = updateBranch(other, other.length, config2.minDepth, item);
      else
        other = addSelection(other, tr.startState.selection);
      return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
    }
    let isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before")
      state = state.isolate();
    if (tr.annotation(Transaction.addToHistory) === false)
      return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    let event = HistEvent.fromTransaction(tr);
    let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
    if (event)
      state = state.addChanges(event, time, userEvent, config2, tr);
    else if (tr.selection)
      state = state.addSelection(tr.startState.selection, time, userEvent, config2.newGroupDelay);
    if (isolate == "full" || isolate == "after")
      state = state.isolate();
    return state;
  },
  toJSON(value) {
    return { done: value.done.map((e) => e.toJSON()), undone: value.undone.map((e) => e.toJSON()) };
  },
  fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
function history(config2 = {}) {
  return [
    historyField_,
    historyConfig.of(config2),
    EditorView.domEventHandlers({
      beforeinput(e, view) {
        let command2 = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
        if (!command2)
          return false;
        e.preventDefault();
        return command2(view);
      }
    })
  ];
}
function cmd(side, selection) {
  return function({ state, dispatch }) {
    if (!selection && state.readOnly)
      return false;
    let historyState = state.field(historyField_, false);
    if (!historyState)
      return false;
    let tr = historyState.pop(side, state, selection);
    if (!tr)
      return false;
    dispatch(tr);
    return true;
  };
}
var undo = cmd(0, false);
var redo = cmd(1, false);
var undoSelection = cmd(0, true);
var redoSelection = cmd(1, true);
function depth(side) {
  return function(state) {
    let histState = state.field(historyField_, false);
    if (!histState)
      return 0;
    let branch = side == 0 ? histState.done : histState.undone;
    return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
  };
}
var undoDepth = depth(
  0
  /* BranchName.Done */
);
var redoDepth = depth(
  1
  /* BranchName.Undone */
);
var HistEvent = class _HistEvent {
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  setSelAfter(after) {
    return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }
  toJSON() {
    var _a2, _b, _c;
    return {
      changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
      mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
      startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
    };
  }
  static fromJSON(json) {
    return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr, selection) {
    let effects = none3;
    for (let invert of tr.startState.facet(invertedEffects)) {
      let result = invert(tr);
      if (result.length)
        effects = effects.concat(result);
    }
    if (!effects.length && tr.changes.empty)
      return null;
    return new _HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection || tr.startState.selection, none3);
  }
  static selection(selections) {
    return new _HistEvent(void 0, none3, void 0, void 0, selections);
  }
};
function updateBranch(branch, to, maxLen, newEvent) {
  let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  let newBranch = branch.slice(start, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a, b) {
  let ranges = [], isAdjacent2 = false;
  a.iterChangedRanges((f, t2) => ranges.push(f, t2));
  b.iterChangedRanges((_f, _t, f, t2) => {
    for (let i = 0; i < ranges.length; ) {
      let from = ranges[i++], to = ranges[i++];
      if (t2 >= from && f <= to)
        isAdjacent2 = true;
    }
  });
  return isAdjacent2;
}
function eqSelectionShape(a, b) {
  return a.ranges.length == b.ranges.length && a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
}
function conc(a, b) {
  return !a.length ? b : !b.length ? a : a.concat(b);
}
var none3 = [];
var MaxSelectionsPerEvent = 200;
function addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection))
      return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
function popSelection(branch) {
  let last = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length)
    return branch;
  let length = branch.length, selections = none3;
  while (length) {
    let event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      let result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none3;
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s) => s.map(mapping)) : none3, extraSelections);
  if (!event.changes)
    return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = class _HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  isolate() {
    return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
  }
  addChanges(event, time, userEvent, config2, tr) {
    let done = this.done, lastEvent = done[done.length - 1];
    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none3));
    } else {
      done = updateBranch(done, done.length, config2.minDepth, event);
    }
    return new _HistoryState(done, none3, time, userEvent);
  }
  addSelection(selection, time, userEvent, newGroupDelay) {
    let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none3;
    if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
      return this;
    return new _HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
  }
  addMapping(mapping) {
    return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }
  pop(side, state, onlySelection) {
    let branch = side == 0 ? this.done : this.undone;
    if (branch.length == 0)
      return null;
    let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
    if (onlySelection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
        userEvent: side == 0 ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest = branch.length == 1 ? none3 : branch.slice(0, branch.length - 1);
      if (event.mapped)
        rest = addMappingToBranch(rest, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest, selection }),
        filter: false,
        userEvent: side == 0 ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }
};
HistoryState.empty = new HistoryState(none3, none3);
var historyKeymap = [
  { key: "Mod-z", run: undo, preventDefault: true },
  { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
  { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
  { key: "Mod-u", run: undoSelection, preventDefault: true },
  { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
];
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({ selection, scrollIntoView: true, userEvent: "select" });
}
function moveSel({ state, dispatch }, how) {
  let selection = updateSel(state.selection, how);
  if (selection.eq(state.selection, true))
    return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range, forward) {
  return EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
}
var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
function cursorByGroup(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
}
var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? new Intl.Segmenter(void 0, { granularity: "word" }) : null;
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp))
    return true;
  let len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start, forward) {
  let pos = syntaxTree(state).resolveInner(start.head);
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  for (let at = start.head; ; ) {
    let next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next)
      break;
    if (interestingNode(state, next, bracketProp))
      pos = next;
    else
      at = forward ? next.to : next.from;
  }
  let bracket2 = pos.type.prop(bracketProp), match, newPos;
  if (bracket2 && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
    newPos = forward ? match.end.to : match.end.from;
  else
    newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
var cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function cursorByLine(view, forward) {
  return moveSel(view, (range) => {
    if (!range.empty)
      return rangeEnd(range, forward);
    let moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
var cursorLineUp = (view) => cursorByLine(view, false);
var cursorLineDown = (view) => cursorByLine(view, true);
function pageInfo(view) {
  let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  let marginTop = 0, marginBottom = 0, height;
  if (selfScroll) {
    for (let source of view.state.facet(EditorView.scrollMargins)) {
      let margins = source(view);
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  let page = pageInfo(view);
  let { state } = view, selection = updateSel(state.selection, (range) => {
    return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
  });
  if (selection.eq(state.selection))
    return false;
  let effect;
  if (page.selfScroll) {
    let startPos = view.coordsAtPos(state.selection.main.head);
    let scrollRect = view.scrollDOM.getBoundingClientRect();
    let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
  }
  view.dispatch(setSel(state, selection), { effects: effect });
  return true;
}
var cursorPageUp = (view) => cursorByPage(view, false);
var cursorPageDown = (view) => cursorByPage(view, true);
function moveByLineBoundary(view, start, forward) {
  let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
    moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space && start.head != line.from + space)
      moved = EditorSelection.cursor(line.from + space);
  }
  return moved;
}
var cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
var cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
var cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
var cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
function toMatchingBracket(state, dispatch, extend2) {
  let found = false, selection = updateSel(state.selection, (range) => {
    let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
    if (!matching || !matching.end)
      return range;
    found = true;
    let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
    return extend2 ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
  });
  if (!found)
    return false;
  dispatch(setSel(state, selection));
  return true;
}
var cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
function extendSel(view, how) {
  let selection = updateSel(view.state.selection, (range) => {
    let head = how(range);
    return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
  });
  if (selection.eq(view.state.selection))
    return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, (range) => view.moveByChar(range, forward));
}
var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
function selectByGroup(view, forward) {
  return extendSel(view, (range) => view.moveByGroup(range, forward));
}
var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
var selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function selectByLine(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward));
}
var selectLineUp = (view) => selectByLine(view, false);
var selectLineDown = (view) => selectByLine(view, true);
function selectByPage(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
}
var selectPageUp = (view) => selectByPage(view, false);
var selectPageDown = (view) => selectByPage(view, true);
var selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
var selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
var selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
var selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
var cursorDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: 0 }));
  return true;
};
var cursorDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.doc.length }));
  return true;
};
var selectDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
  return true;
};
var selectDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
  return true;
};
var selectAll = ({ state, dispatch }) => {
  dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
  return true;
};
var selectLine = ({ state, dispatch }) => {
  let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
  dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
  return true;
};
var selectParentSyntax = ({ state, dispatch }) => {
  let selection = updateSel(state.selection, (range) => {
    var _a2;
    let stack = syntaxTree(state).resolveStack(range.from, 1);
    for (let cur2 = stack; cur2; cur2 = cur2.next) {
      let { node } = cur2;
      if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && ((_a2 = node.parent) === null || _a2 === void 0 ? void 0 : _a2.parent))
        return EditorSelection.range(node.to, node.from);
    }
    return range;
  });
  dispatch(setSel(state, selection));
  return true;
};
var simplifySelection = ({ state, dispatch }) => {
  let cur2 = state.selection, selection = null;
  if (cur2.ranges.length > 1)
    selection = EditorSelection.create([cur2.main]);
  else if (!cur2.main.empty)
    selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
  if (!selection)
    return false;
  dispatch(setSel(state, selection));
  return true;
};
function deleteBy(target, by) {
  if (target.state.readOnly)
    return false;
  let event = "delete.selection", { state } = target;
  let changes = state.changeByRange((range) => {
    let { from, to } = range;
    if (from == to) {
      let towards = by(range);
      if (towards < from) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    } else {
      from = skipAtomic(target, from, false);
      to = skipAtomic(target, to, true);
    }
    return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
  });
  if (changes.changes.empty)
    return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state.facet(EditorView.atomicRanges).map((f) => f(target)))
      ranges.between(pos, pos, (from, to) => {
        if (from < pos && to > pos)
          pos = forward ? to : from;
      });
  return pos;
}
var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
  let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
  if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
    if (before[before.length - 1] == "	")
      return pos - 1;
    let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
    for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
      pos--;
    targetPos = pos;
  } else {
    targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
    if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
      targetPos += forward ? 1 : -1;
    else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
      targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
  }
  return targetPos;
});
var deleteCharBackward = (view) => deleteByChar(view, false, true);
var deleteCharForward = (view) => deleteByChar(view, true, false);
var deleteByGroup = (target, forward) => deleteBy(target, (range) => {
  let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);
  for (let cat = null; ; ) {
    if (pos == (forward ? line.to : line.from)) {
      if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
        pos += forward ? 1 : -1;
      break;
    }
    let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
    let nextChar2 = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
    let nextCat = categorize(nextChar2);
    if (cat != null && nextCat != cat)
      break;
    if (nextChar2 != " " || pos != range.head)
      cat = nextCat;
    pos = next;
  }
  return pos;
});
var deleteGroupBackward = (target) => deleteByGroup(target, false);
var deleteGroupForward = (target) => deleteByGroup(target, true);
var deleteToLineEnd = (view) => deleteBy(view, (range) => {
  let lineEnd = view.lineBlockAt(range.head).to;
  return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
});
var deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, false).head;
  return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
});
var deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, true).head;
  return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
});
var splitLine = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    return {
      changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
      range: EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
var transposeChars = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    if (!range.empty || range.from == 0 || range.from == state.doc.length)
      return { range };
    let pos = range.from, line = state.doc.lineAt(pos);
    let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
    let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
    return {
      changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
      range: EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
  return true;
};
function selectedLineBlocks(state) {
  let blocks = [], upto = -1;
  for (let range of state.selection.ranges) {
    let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
    if (!range.empty && range.to == endLine.from)
      endLine = state.doc.lineAt(range.to - 1);
    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1];
      prev.to = endLine.to;
      prev.ranges.push(range);
    } else {
      blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
    }
    upto = endLine.number + 1;
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [], ranges = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward ? block.to == state.doc.length : block.from == 0)
      continue;
    let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
    let size = nextLine.length + 1;
    if (forward) {
      changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
      for (let r of block.ranges)
        ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
    } else {
      changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
      for (let r of block.ranges)
        ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
    }
  }
  if (!changes.length)
    return false;
  dispatch(state.update({
    changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
function copyLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward)
      changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
    else
      changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
  }
  dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
  return true;
}
var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
var deleteLine = (view) => {
  if (view.state.readOnly)
    return false;
  let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
    if (from > 0)
      from--;
    else if (to < state.doc.length)
      to++;
    return { from, to };
  }));
  let selection = updateSel(state.selection, (range) => {
    let dist2 = void 0;
    if (view.lineWrapping) {
      let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (pos)
        dist2 = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
    }
    return view.moveVertically(range, true, dist2);
  }).map(changes);
  view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos };
  let context = syntaxTree(state).resolveInner(pos);
  let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
    return { from: before.to, to: after.from };
  return null;
}
var insertNewlineAndIndent = newlineAndIndent(false);
var insertBlankLine = newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      let { from, to } = range, line = state.doc.lineAt(from);
      let explode = !atEof && from == to && isBetweenBrackets(state, from);
      if (atEof)
        from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
      let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
      let indent = getIndentation(cx, from);
      if (indent == null)
        indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
      while (to < line.to && /\s/.test(line.text[to - line.from]))
        to++;
      if (explode)
        ({ from, to } = explode);
      else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
        from = line.from;
      let insert2 = ["", indentString(state, indent)];
      if (explode)
        insert2.push(indentString(state, cx.lineIndent(line.from, -1)));
      return {
        changes: { from, to, insert: Text.of(insert2) },
        range: EditorSelection.cursor(from + 1 + insert2[1].length)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
}
function changeBySelectedLine(state, f) {
  let atLine = -1;
  return state.changeByRange((range) => {
    let changes = [];
    for (let pos = range.from; pos <= range.to; ) {
      let line = state.doc.lineAt(pos);
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f(line, changes, range);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    let changeSet = state.changes(changes);
    return {
      changes,
      range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
var indentSelection = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let updated = /* @__PURE__ */ Object.create(null);
  let context = new IndentContext(state, { overrideIndentation: (start) => {
    let found = updated[start];
    return found == null ? -1 : found;
  } });
  let changes = changeBySelectedLine(state, (line, changes2, range) => {
    let indent = getIndentation(context, line.from);
    if (indent == null)
      return;
    if (!/\S/.test(line.text))
      indent = 0;
    let cur2 = /^\s*/.exec(line.text)[0];
    let norm2 = indentString(state, indent);
    if (cur2 != norm2 || range.from < line.from + cur2.length) {
      updated[line.from] = indent;
      changes2.push({ from: line.from, to: line.from + cur2.length, insert: norm2 });
    }
  });
  if (!changes.changes.empty)
    dispatch(state.update(changes, { userEvent: "indent" }));
  return true;
};
var indentMore = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    changes.push({ from: line.from, insert: state.facet(indentUnit) });
  }), { userEvent: "input.indent" }));
  return true;
};
var indentLess = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    let space = /^\s*/.exec(line.text)[0];
    if (!space)
      return;
    let col = countColumn(space, state.tabSize), keep = 0;
    let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space.length && keep < insert2.length && space.charCodeAt(keep) == insert2.charCodeAt(keep))
      keep++;
    changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert2.slice(keep) });
  }), { userEvent: "delete.dedent" }));
  return true;
};
var emacsStyleKeymap = [
  { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
  { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
  { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
  { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
  { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
  { key: "Ctrl-d", run: deleteCharForward },
  { key: "Ctrl-h", run: deleteCharBackward },
  { key: "Ctrl-k", run: deleteToLineEnd },
  { key: "Ctrl-Alt-h", run: deleteGroupBackward },
  { key: "Ctrl-o", run: splitLine },
  { key: "Ctrl-t", run: transposeChars },
  { key: "Ctrl-v", run: cursorPageDown }
];
var standardKeymap = [
  { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
  { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
  { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
  { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
  { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
  { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
  { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
  { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
  { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
  { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
  { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
  { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
  { key: "Enter", run: insertNewlineAndIndent },
  { key: "Mod-a", run: selectAll },
  { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
  { key: "Delete", run: deleteCharForward },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
  { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
  { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
  { mac: "Mod-Delete", run: deleteLineBoundaryForward }
].concat(emacsStyleKeymap.map((b) => ({ mac: b.key, run: b.run, shift: b.shift })));
var defaultKeymap = [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
  { key: "Alt-ArrowUp", run: moveLineUp },
  { key: "Shift-Alt-ArrowUp", run: copyLineUp },
  { key: "Alt-ArrowDown", run: moveLineDown },
  { key: "Shift-Alt-ArrowDown", run: copyLineDown },
  { key: "Escape", run: simplifySelection },
  { key: "Mod-Enter", run: insertBlankLine },
  { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
  { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
  { key: "Mod-[", run: indentLess },
  { key: "Mod-]", run: indentMore },
  { key: "Mod-Alt-\\", run: indentSelection },
  { key: "Shift-Mod-k", run: deleteLine },
  { key: "Shift-Mod-\\", run: cursorMatchingBracket },
  { key: "Mod-/", run: toggleComment },
  { key: "Alt-A", run: toggleBlockComment }
].concat(standardKeymap);

// node_modules/@codemirror/lint/dist/index.js
var SelectedDiagnostic = class {
  constructor(from, to, diagnostic) {
    this.from = from;
    this.to = to;
    this.diagnostic = diagnostic;
  }
};
var LintState = class _LintState {
  constructor(diagnostics, panel, selected) {
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  static init(diagnostics, panel, state) {
    let markedDiagnostics = diagnostics;
    let diagnosticFilter = state.facet(lintConfig).markerFilter;
    if (diagnosticFilter)
      markedDiagnostics = diagnosticFilter(markedDiagnostics, state);
    let ranges = Decoration.set(markedDiagnostics.map((d) => {
      return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? Decoration.widget({
        widget: new DiagnosticWidget(d),
        diagnostic: d
      }).range(d.from) : Decoration.mark({
        attributes: { class: "cm-lintRange cm-lintRange-" + d.severity + (d.markClass ? " " + d.markClass : "") },
        diagnostic: d,
        inclusive: true
      }).range(d.from, d.to);
    }), true);
    return new _LintState(ranges, panel, findDiagnostic(ranges));
  }
};
function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
  let found = null;
  diagnostics.between(after, 1e9, (from, to, { spec }) => {
    if (diagnostic && spec.diagnostic != diagnostic)
      return;
    found = new SelectedDiagnostic(from, to, spec.diagnostic);
    return false;
  });
  return found;
}
function hideTooltip(tr, tooltip) {
  let from = tooltip.pos, to = tooltip.end || from;
  let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
  if (result != null)
    return result;
  let line = tr.startState.doc.lineAt(tooltip.pos);
  return !!(tr.effects.some((e) => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
}
function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
}
function setDiagnostics(state, diagnostics) {
  return {
    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
  };
}
var setDiagnosticsEffect = StateEffect.define();
var togglePanel2 = StateEffect.define();
var movePanelSelection = StateEffect.define();
var lintState = StateField.define({
  create() {
    return new LintState(Decoration.none, null, null);
  },
  update(value, tr) {
    if (tr.docChanged) {
      let mapped = value.diagnostics.map(tr.changes), selected = null;
      if (value.selected) {
        let selPos = tr.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      value = new LintState(mapped, value.panel, selected);
    }
    for (let effect of tr.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        value = LintState.init(effect.value, value.panel, tr.state);
      } else if (effect.is(togglePanel2)) {
        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
      } else if (effect.is(movePanelSelection)) {
        value = new LintState(value.diagnostics, value.panel, effect.value);
      }
    }
    return value;
  },
  provide: (f) => [
    showPanel.from(f, (val) => val.panel),
    EditorView.decorations.from(f, (s) => s.diagnostics)
  ]
});
var activeMark = Decoration.mark({ class: "cm-lintRange cm-lintRange-active", inclusive: true });
function lintTooltip(view, pos, side) {
  let { diagnostics } = view.state.field(lintState);
  let found = [], stackStart = 2e8, stackEnd = 0;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
      found.push(spec.diagnostic);
      stackStart = Math.min(from, stackStart);
      stackEnd = Math.max(to, stackEnd);
    }
  });
  let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (diagnosticFilter)
    found = diagnosticFilter(found, view.state);
  if (!found.length)
    return null;
  return {
    pos: stackStart,
    end: stackEnd,
    above: view.state.doc.lineAt(stackStart).to < stackEnd,
    create() {
      return { dom: diagnosticsTooltip(view, found) };
    }
  };
}
function diagnosticsTooltip(view, diagnostics) {
  return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d) => renderDiagnostic(view, d, false)));
}
var openLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel2.of(true)]) });
  let panel = getPanel(view, LintPanel.open);
  if (panel)
    panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
var closeLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    return false;
  view.dispatch({ effects: togglePanel2.of(false) });
  return true;
};
var nextDiagnostic = (view) => {
  let field = view.state.field(lintState, false);
  if (!field)
    return false;
  let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
  if (!next.value) {
    next = field.diagnostics.iter(0);
    if (!next.value || next.from == sel.from && next.to == sel.to)
      return false;
  }
  view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
  return true;
};
var lintKeymap = [
  { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
  { key: "F8", run: nextDiagnostic }
];
var lintPlugin = ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.timeout = -1;
    this.set = true;
    let { delay } = view.state.facet(lintConfig);
    this.lintTime = Date.now() + delay;
    this.run = this.run.bind(this);
    this.timeout = setTimeout(this.run, delay);
  }
  run() {
    let now = Date.now();
    if (now < this.lintTime - 10) {
      this.timeout = setTimeout(this.run, this.lintTime - now);
    } else {
      this.set = false;
      let { state } = this.view, { sources } = state.facet(lintConfig);
      if (sources.length)
        Promise.all(sources.map((source) => Promise.resolve(source(this.view)))).then((annotations) => {
          let all = annotations.reduce((a, b) => a.concat(b));
          if (this.view.state.doc == state.doc)
            this.view.dispatch(setDiagnostics(this.view.state, all));
        }, (error) => {
          logException(this.view.state, error);
        });
    }
  }
  update(update) {
    let config2 = update.state.facet(lintConfig);
    if (update.docChanged || config2 != update.startState.facet(lintConfig) || config2.needsRefresh && config2.needsRefresh(update)) {
      this.lintTime = Date.now() + config2.delay;
      if (!this.set) {
        this.set = true;
        this.timeout = setTimeout(this.run, config2.delay);
      }
    }
  }
  force() {
    if (this.set) {
      this.lintTime = Date.now();
      this.run();
    }
  }
  destroy() {
    clearTimeout(this.timeout);
  }
});
var lintConfig = Facet.define({
  combine(input) {
    return Object.assign({ sources: input.map((i) => i.source).filter((x) => x != null) }, combineConfig(input.map((i) => i.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (a, b) => !a ? b : !b ? a : (u) => a(u) || b(u)
    }));
  }
});
function linter(source, config2 = {}) {
  return [
    lintConfig.of({ source, config: config2 }),
    lintPlugin,
    lintExtensions
  ];
}
function assignKeys(actions) {
  let assigned = [];
  if (actions)
    actions:
      for (let { name: name2 } of actions) {
        for (let i = 0; i < name2.length; i++) {
          let ch = name2[i];
          if (/[a-zA-Z]/.test(ch) && !assigned.some((c) => c.toLowerCase() == ch.toLowerCase())) {
            assigned.push(ch);
            continue actions;
          }
        }
        assigned.push("");
      }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a2;
  let keys2 = inPanel ? assignKeys(diagnostic.actions) : [];
  return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i) => {
    let fired = false, click = (e) => {
      e.preventDefault();
      if (fired)
        return;
      fired = true;
      let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
      if (found)
        action.apply(view, found.from, found.to);
    };
    let { name: name2 } = action, keyIndex = keys2[i] ? name2.indexOf(keys2[i]) : -1;
    let nameElt = keyIndex < 0 ? name2 : [
      name2.slice(0, keyIndex),
      crelt("u", name2.slice(keyIndex, keyIndex + 1)),
      name2.slice(keyIndex + 1)
    ];
    return crelt("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys2[i]})"`}.`
    }, nameElt);
  }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
}
var DiagnosticWidget = class extends WidgetType {
  constructor(diagnostic) {
    super();
    this.diagnostic = diagnostic;
  }
  eq(other) {
    return other.diagnostic == this.diagnostic;
  }
  toDOM() {
    return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
};
var PanelItem = class {
  constructor(view, diagnostic) {
    this.diagnostic = diagnostic;
    this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
    this.dom = renderDiagnostic(view, diagnostic, true);
    this.dom.id = this.id;
    this.dom.setAttribute("role", "option");
  }
};
var LintPanel = class _LintPanel {
  constructor(view) {
    this.view = view;
    this.items = [];
    let onkeydown = (event) => {
      if (event.keyCode == 27) {
        closeLintPanel(this.view);
        this.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      } else if (event.keyCode == 36) {
        this.moveSelection(0);
      } else if (event.keyCode == 35) {
        this.moveSelection(this.items.length - 1);
      } else if (event.keyCode == 13) {
        this.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic } = this.items[this.selectedIndex], keys2 = assignKeys(diagnostic.actions);
        for (let i = 0; i < keys2.length; i++)
          if (keys2[i].toUpperCase().charCodeAt(0) == event.keyCode) {
            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
            if (found)
              diagnostic.actions[i].apply(view, found.from, found.to);
          }
      } else {
        return;
      }
      event.preventDefault();
    };
    let onclick = (event) => {
      for (let i = 0; i < this.items.length; i++) {
        if (this.items[i].dom.contains(event.target))
          this.moveSelection(i);
      }
    };
    this.list = crelt("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown,
      onclick
    });
    this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => closeLintPanel(this.view)
    }, "×"));
    this.update();
  }
  get selectedIndex() {
    let selected = this.view.state.field(lintState).selected;
    if (!selected)
      return -1;
    for (let i = 0; i < this.items.length; i++)
      if (this.items[i].diagnostic == selected.diagnostic)
        return i;
    return -1;
  }
  update() {
    let { diagnostics, selected } = this.view.state.field(lintState);
    let i = 0, needsSync = false, newSelectedItem = null;
    diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
      let found = -1, item;
      for (let j = i; j < this.items.length; j++)
        if (this.items[j].diagnostic == spec.diagnostic) {
          found = j;
          break;
        }
      if (found < 0) {
        item = new PanelItem(this.view, spec.diagnostic);
        this.items.splice(i, 0, item);
        needsSync = true;
      } else {
        item = this.items[found];
        if (found > i) {
          this.items.splice(i, found - i);
          needsSync = true;
        }
      }
      if (selected && item.diagnostic == selected.diagnostic) {
        if (!item.dom.hasAttribute("aria-selected")) {
          item.dom.setAttribute("aria-selected", "true");
          newSelectedItem = item;
        }
      } else if (item.dom.hasAttribute("aria-selected")) {
        item.dom.removeAttribute("aria-selected");
      }
      i++;
    });
    while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
      needsSync = true;
      this.items.pop();
    }
    if (this.items.length == 0) {
      this.items.push(new PanelItem(this.view, {
        from: -1,
        to: -1,
        severity: "info",
        message: this.view.state.phrase("No diagnostics")
      }));
      needsSync = true;
    }
    if (newSelectedItem) {
      this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
      this.view.requestMeasure({
        key: this,
        read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
        write: ({ sel, panel }) => {
          let scaleY = panel.height / this.list.offsetHeight;
          if (sel.top < panel.top)
            this.list.scrollTop -= (panel.top - sel.top) / scaleY;
          else if (sel.bottom > panel.bottom)
            this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
        }
      });
    } else if (this.selectedIndex < 0) {
      this.list.removeAttribute("aria-activedescendant");
    }
    if (needsSync)
      this.sync();
  }
  sync() {
    let domPos = this.list.firstChild;
    function rm2() {
      let prev = domPos;
      domPos = prev.nextSibling;
      prev.remove();
    }
    for (let item of this.items) {
      if (item.dom.parentNode == this.list) {
        while (domPos != item.dom)
          rm2();
        domPos = item.dom.nextSibling;
      } else {
        this.list.insertBefore(item.dom, domPos);
      }
    }
    while (domPos)
      rm2();
  }
  moveSelection(selectedIndex) {
    if (this.selectedIndex < 0)
      return;
    let field = this.view.state.field(lintState);
    let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
    if (!selection)
      return;
    this.view.dispatch({
      selection: { anchor: selection.from, head: selection.to },
      scrollIntoView: true,
      effects: movePanelSelection.of(selection)
    });
  }
  static open(view) {
    return new _LintPanel(view);
  }
};
function svg(content2, attrs = `viewBox="0 0 40 40"`) {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content2)}</svg>')`;
}
function underline(color) {
  return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
}
var baseTheme5 = EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: underline("#d11") },
  ".cm-lintRange-warning": { backgroundImage: underline("orange") },
  ".cm-lintRange-info": { backgroundImage: underline("#999") },
  ".cm-lintRange-hint": { backgroundImage: underline("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function severityWeight(sev) {
  return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
}
var LintGutterMarker = class extends GutterMarker {
  constructor(diagnostics) {
    super();
    this.diagnostics = diagnostics;
    this.severity = diagnostics.reduce((max, d) => severityWeight(max) < severityWeight(d.severity) ? d.severity : max, "hint");
  }
  toDOM(view) {
    let elt = document.createElement("div");
    elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
    let diagnostics = this.diagnostics;
    let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
    if (diagnosticsFilter)
      diagnostics = diagnosticsFilter(diagnostics, view.state);
    if (diagnostics.length)
      elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);
    return elt;
  }
};
function trackHoverOn(view, marker) {
  let mousemove = (event) => {
    let rect = marker.getBoundingClientRect();
    if (event.clientX > rect.left - 10 && event.clientX < rect.right + 10 && event.clientY > rect.top - 10 && event.clientY < rect.bottom + 10)
      return;
    for (let target = event.target; target; target = target.parentNode) {
      if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint"))
        return;
    }
    window.removeEventListener("mousemove", mousemove);
    if (view.state.field(lintGutterTooltip))
      view.dispatch({ effects: setLintGutterTooltip.of(null) });
  };
  window.addEventListener("mousemove", mousemove);
}
function gutterMarkerMouseOver(view, marker, diagnostics) {
  function hovered() {
    let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
    const linePos = view.coordsAtPos(line.from);
    if (linePos) {
      view.dispatch({ effects: setLintGutterTooltip.of({
        pos: line.from,
        above: false,
        create() {
          return {
            dom: diagnosticsTooltip(view, diagnostics),
            getCoords: () => marker.getBoundingClientRect()
          };
        }
      }) });
    }
    marker.onmouseout = marker.onmousemove = null;
    trackHoverOn(view, marker);
  }
  let { hoverTime } = view.state.facet(lintGutterConfig);
  let hoverTimeout = setTimeout(hovered, hoverTime);
  marker.onmouseout = () => {
    clearTimeout(hoverTimeout);
    marker.onmouseout = marker.onmousemove = null;
  };
  marker.onmousemove = () => {
    clearTimeout(hoverTimeout);
    hoverTimeout = setTimeout(hovered, hoverTime);
  };
}
function markersForDiagnostics(doc2, diagnostics) {
  let byLine = /* @__PURE__ */ Object.create(null);
  for (let diagnostic of diagnostics) {
    let line = doc2.lineAt(diagnostic.from);
    (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
  }
  let markers = [];
  for (let line in byLine) {
    markers.push(new LintGutterMarker(byLine[line]).range(+line));
  }
  return RangeSet.of(markers, true);
}
var lintGutterExtension = gutter({
  class: "cm-gutter-lint",
  markers: (view) => view.state.field(lintGutterMarkers)
});
var lintGutterMarkers = StateField.define({
  create() {
    return RangeSet.empty;
  },
  update(markers, tr) {
    markers = markers.map(tr.changes);
    let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;
    for (let effect of tr.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        let diagnostics = effect.value;
        if (diagnosticFilter)
          diagnostics = diagnosticFilter(diagnostics || [], tr.state);
        markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
      }
    }
    return markers;
  }
});
var setLintGutterTooltip = StateEffect.define();
var lintGutterTooltip = StateField.define({
  create() {
    return null;
  },
  update(tooltip, tr) {
    if (tooltip && tr.docChanged)
      tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });
    return tr.effects.reduce((t2, e) => e.is(setLintGutterTooltip) ? e.value : t2, tooltip);
  },
  provide: (field) => showTooltip.from(field)
});
var lintGutterTheme = EditorView.baseTheme({
  ".cm-gutter-lint": {
    width: "1.4em",
    "& .cm-gutterElement": {
      padding: ".2em"
    }
  },
  ".cm-lint-marker": {
    width: "1em",
    height: "1em"
  },
  ".cm-lint-marker-info": {
    content: svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
  },
  ".cm-lint-marker-warning": {
    content: svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`)
  },
  ".cm-lint-marker-error": {
    content: svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
  }
});
var lintExtensions = [
  lintState,
  EditorView.decorations.compute([lintState], (state) => {
    let { selected, panel } = state.field(lintState);
    return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
      activeMark.range(selected.from, selected.to)
    ]);
  }),
  hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
  baseTheme5
];
var lintGutterConfig = Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      hoverTime: 300,
      markerFilter: null,
      tooltipFilter: null
    });
  }
});

// node_modules/@neo4j-cypher/codemirror/es/cypher.js
var operators = [";", "(", ")", "{", "}", "[", "]", "$", ":", ".", "=", "<", ">", "+", "-", "*", "`", ",", "?", "|", "..", "+=", "<>", "!=", "<=", ">=", "/", "%", "^", "=~"];
var curPunc;
var keywordRegexes = CypherKeywords_default.map((w) => new RegExp(w, "i"));
var lineCommentRegex = /\/\/[^\r\n]*/;
var blockCommentRegex = /\/\*([\S\s]*?)\*\//;
var stringRegex = /('([^'\\]|\\.)*'|"([^"\\]|\\.)*")/;
var stringStartRegex = /('([^'\\]|\\.)*|"([^"\\]|\\.)*)/;
var integerRegex = /[+-]?(([1-9][0-9]+)|([0-9]))/;
var decimalRegex = /[+-]?(([1-9][0-9]+)|([0-9]))\.[0-9]+/;
var tokenBase = (stream) => {
  if (stream.match(lineCommentRegex) || stream.match(blockCommentRegex)) {
    return "comment";
  } else if (stream.match(stringRegex)) {
    return "string";
  } else if (stream.match(integerRegex)) {
    return "number";
  } else if (stream.match(decimalRegex)) {
    return "number";
  } else if (operators.find((o) => stream.match(o))) {
    return "operator";
  } else if (keywordRegexes.find((k) => stream.match(k))) {
    return "keyword";
  } else if (stream.match(stringStartRegex)) {
    return "string";
  }
  stream.next();
  stream.eatWhile(/[#\*0-9A-Z_a-z\xA9\xAA\xAE\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203C\u2049\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2122\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3030-\u3035\u303B-\u303D\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3297\u3299\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{1031F}\u{1032D}-\u{10340}\u{10342}-\u{10349}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{10400}-\u{1049D}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10570}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE4}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F45}\u{10F70}-\u{10F81}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11003}-\u{11037}\u{11071}\u{11072}\u{11075}\u{11083}-\u{110AF}\u{110D0}-\u{110E8}\u{11103}-\u{11126}\u{11144}\u{11147}\u{11150}-\u{11172}\u{11176}\u{11183}-\u{111B2}\u{111C1}-\u{111C4}\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{1122B}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112DE}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}\u{11350}\u{1135D}-\u{11361}\u{11400}-\u{11434}\u{11447}-\u{1144A}\u{1145F}-\u{11461}\u{11480}-\u{114AF}\u{114C4}\u{114C5}\u{114C7}\u{11580}-\u{115AE}\u{115D8}-\u{115DB}\u{11600}-\u{1162F}\u{11644}\u{11680}-\u{116AA}\u{116B8}\u{11700}-\u{1171A}\u{11740}-\u{11746}\u{11800}-\u{1182B}\u{118A0}-\u{118DF}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{1192F}\u{1193F}\u{11941}\u{119A0}-\u{119A7}\u{119AA}-\u{119D0}\u{119E1}\u{119E3}\u{11A00}\u{11A0B}-\u{11A32}\u{11A3A}\u{11A50}\u{11A5C}-\u{11A89}\u{11A9D}\u{11AB0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2E}\u{11C40}\u{11C72}-\u{11C8F}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D89}\u{11D98}\u{11EE0}-\u{11EF2}\u{11F02}\u{11F04}-\u{11F10}\u{11F12}-\u{11F33}\u{11FB0}\u{12000}-\u{12399}\u{12480}-\u{12543}\u{12F90}-\u{12FF0}\u{13000}-\u{1342F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A70}-\u{16ABE}\u{16AD0}-\u{16AED}\u{16B00}-\u{16B2F}\u{16B40}-\u{16B43}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F50}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E14E}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E4D0}-\u{1E4EB}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1E800}-\u{1E8C4}\u{1E900}-\u{1E943}\u{1E94B}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1F004}\u{1F0CF}\u{1F170}\u{1F171}\u{1F17E}\u{1F17F}\u{1F18E}\u{1F191}-\u{1F19A}\u{1F1E6}-\u{1F1FF}\u{1F201}\u{1F202}\u{1F21A}\u{1F22F}\u{1F232}-\u{1F23A}\u{1F250}\u{1F251}\u{1F300}-\u{1F321}\u{1F324}-\u{1F393}\u{1F396}\u{1F397}\u{1F399}-\u{1F39B}\u{1F39E}-\u{1F3F0}\u{1F3F3}-\u{1F3F5}\u{1F3F7}-\u{1F4FD}\u{1F4FF}-\u{1F53D}\u{1F549}-\u{1F54E}\u{1F550}-\u{1F567}\u{1F56F}\u{1F570}\u{1F573}-\u{1F57A}\u{1F587}\u{1F58A}-\u{1F58D}\u{1F590}\u{1F595}\u{1F596}\u{1F5A4}\u{1F5A5}\u{1F5A8}\u{1F5B1}\u{1F5B2}\u{1F5BC}\u{1F5C2}-\u{1F5C4}\u{1F5D1}-\u{1F5D3}\u{1F5DC}-\u{1F5DE}\u{1F5E1}\u{1F5E3}\u{1F5E8}\u{1F5EF}\u{1F5F3}\u{1F5FA}-\u{1F64F}\u{1F680}-\u{1F6C5}\u{1F6CB}-\u{1F6D2}\u{1F6D5}-\u{1F6D7}\u{1F6DC}-\u{1F6E5}\u{1F6E9}\u{1F6EB}\u{1F6EC}\u{1F6F0}\u{1F6F3}-\u{1F6FC}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F90C}-\u{1F93A}\u{1F93C}-\u{1F945}\u{1F947}-\u{1F9FF}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}]/u);
  return "variable";
};
var pushContext = (state, type, col) => {
  state.context = {
    prev: state.context,
    indent: state.indent,
    col,
    type
  };
  return state.context;
};
var popContext = (state) => {
  state.indent = state.context.indent;
  state.context = state.context.prev;
  return state.context;
};
var cypher = {
  startState() {
    return {
      tokenize: tokenBase,
      context: null,
      indent: 0,
      col: 0
    };
  },
  token(stream, state) {
    if (stream.sol()) {
      if (state.context && state.context.align == null) {
        state.context.align = false;
      }
      state.indent = stream.indentation();
    }
    if (stream.eatSpace()) {
      return null;
    }
    const style = state.tokenize(stream, state);
    if (style !== "comment" && state.context && state.context.align == null && state.context.type !== "pattern") {
      state.context.align = true;
    }
    if (curPunc === "(") {
      pushContext(state, ")", stream.column());
    } else if (curPunc === "[") {
      pushContext(state, "]", stream.column());
    } else if (curPunc === "{") {
      pushContext(state, "}", stream.column());
    } else if (/[\]})]/.test(curPunc)) {
      while (state.context && state.context.type === "pattern") {
        popContext(state);
      }
      if (state.context && curPunc === state.context.type) {
        popContext(state);
      }
    } else if (curPunc === "." && state.context && state.context.type === "pattern") {
      popContext(state);
    } else if (/atom|string|variable/.test(style) && state.context) {
      if (/[}\]]/.test(state.context.type)) {
        pushContext(state, "pattern", stream.column());
      } else if (state.context.type === "pattern" && !state.context.align) {
        state.context.align = true;
        state.context.col = stream.column();
      }
    }
    return style;
  },
  indent: (state, textAfter, cx) => {
    const firstChar = textAfter && textAfter.charAt(0);
    let context = state.context;
    if (/[\]}]/.test(firstChar)) {
      while (context && context.type === "pattern") {
        context = context.prev;
      }
    }
    const closing2 = context && firstChar === context.type;
    if (!context)
      return 0;
    if (context.type === "keywords")
      return null;
    if (context.align)
      return context.col + (closing2 ? 0 : 1);
    return context.indent + (closing2 ? 0 : cx.unit);
  },
  languageData: {
    commentTokens: {
      line: "//",
      block: {
        open: "/*",
        close: "*/"
      }
    }
  }
};

// node_modules/@neo4j-cypher/codemirror/es/cypher-extensions.js
var _excluded3 = ["delay", "showErrors"];
function ownKeys4(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var typeMarkerTheme = EditorView.baseTheme({
  // ".cm-underline": { textDecoration: "underline 3px red" }
});
var typeMarkerFromTo = (view, options = {}) => {
  const effects = [addTypeMarkerEffect.of(options)];
  view.dispatch({
    effects
  });
  return true;
};
var resetColors = (view, editorSupport) => {
  const effects = [clearTypeMarkersEffect.of()];
  view.dispatch({
    effects
  });
};
var fixColors = (view, editorSupport) => {
  resetColors(view, editorSupport);
  if (!editorSupport.parseTree || !editorSupport.input) {
    return;
  }
  editorSupport.applyHighlighthing((element, type) => {
    const {
      start: from,
      stop: to
    } = TreeUtils.getPosition(element) || {
      start: 0,
      stop: 0
    };
    typeMarkerFromTo(view, {
      from,
      to: to + 1,
      type
    });
  });
};
var domListener = ({
  onFocusChanged = () => {
  },
  onScrollChanged = () => {
  },
  onKeyDown = () => {
  },
  onKeyUp = () => {
  }
}) => [EditorView.domEventHandlers({
  focus: () => {
    onFocusChanged(true);
  },
  blur: () => {
    onFocusChanged(false);
  },
  scroll: (event, view) => {
    if (event.target === view.scrollDOM) {
      const {
        scrollTop,
        clientHeight,
        scrollHeight,
        scrollLeft,
        clientWidth,
        scrollWidth
      } = event.target;
      onScrollChanged({
        scrollTop,
        clientHeight,
        scrollHeight,
        scrollLeft,
        clientWidth,
        scrollWidth
      });
    }
  },
  keydown: (event) => {
    onKeyDown(event);
  },
  keyup: (event) => {
    onKeyUp(event);
  }
})];
var cypherLinter = (_ref = {}) => {
  let {
    delay = 750,
    showErrors = true
  } = _ref, otherOptions = _objectWithoutProperties(_ref, _excluded3);
  return [linter((view) => {
    if (!getStateValue(view.state).length)
      return [];
    const editorSupport = getStateEditorSupport(view.state);
    if (!editorSupport)
      return [];
    const version = view.newContentVersion();
    editorSupport.update(getStateValue(view.state), version);
    fixColors(view, editorSupport);
    return (showErrors && editorSupport.parseErrors || []).map(({
      msg,
      start,
      stop
    }) => {
      return {
        severity: "error",
        from: start,
        to: stop + 1,
        message: msg
      };
    });
  }, _objectSpread4(_objectSpread4({}, otherOptions), {}, {
    delay
  }))];
};
var cypherLanguage = () => [StreamLanguage.define(cypher)];
var cypherCompletions = (context) => {
  const editorSupport = getStateEditorSupport(context.state);
  editorSupport.update(getStateValue(context.state));
  const {
    line,
    column
  } = editorSupport.positionConverter.toRelative(context.pos);
  const completion = editorSupport.getCompletion(line, column, true);
  const {
    items,
    from,
    to
  } = completion;
  const completions = items.map(({
    type,
    view,
    content: content2,
    postfix
  }) => ({
    type,
    label: view,
    apply: content2,
    detail: postfix
  }));
  let word = context.matchBefore(/\w*/);
  let cypherCompletions2 = null;
  if (!(word.from == word.to && !context.explicit)) {
    cypherCompletions2 = {
      //from: word.from,
      // TODO - line is 1 based, column is 0 based
      from: getStatePositionAbsoluteForLineColumn(context.state, from),
      options: completions,
      filter: false,
      getMatch: () => []
    };
  }
  return cypherCompletions2;
};
var cypherCompletion = ({
  activateOnTyping = false,
  closeOnBlur = true
} = {}) => [autocompletion({
  activateOnTyping,
  closeOnBlur,
  override: [cypherCompletions]
})];
var syntaxStyles = [{
  tag: tags.comment,
  class: "cm-comment"
}, {
  tag: tags.variableName,
  class: "cm-variable"
}, {
  tag: [tags.string, tags.special(tags.brace)],
  class: "cm-string"
}, {
  tag: tags.number,
  class: "cm-number"
}, {
  tag: tags.keyword,
  class: "cm-keyword"
}, {
  tag: tags.operator,
  class: "cm-operator"
}];
var syntaxStyle = HighlightStyle.define(syntaxStyles);
var syntaxCSS = [syntaxHighlighting(syntaxStyle)];
var cypherLineNumbers = ({
  lineNumberFormatter,
  onLineNumberClick = () => {
  }
}) => [lineNumbers({
  formatNumber: (number2, state) => lineNumberFormatter(number2, getStateLineCount(state), state),
  domEventHandlers: {
    click(view, lineObject, event) {
      const {
        line
      } = getStatePositionForAbsolute(view.state, lineObject.from) || {};
      onLineNumberClick(line, event);
      return true;
    }
  }
})];
var themeOverrides = {
  "&.cm-editor": {
    "&.cm-focused": {
      outline: "none"
    }
  },
  ".cm-content": {
    fontFamily: "Fira Code, Menlo, Monaco, Lucida Console, monospace"
  },
  ".cm-cursor .cm-cursor-wide": {
    borderLeft: "0.67em solid rgba(147, 161, 161, 0.37)"
  }
};
var USE_DARK_FLAG = true;
var themeDarkExtensions = [EditorView.theme(themeOverrides, USE_DARK_FLAG ? {
  dark: true
} : {}), EditorView.editorAttributes.of({
  class: "cm-dark"
})];
var themeLightExtensions = [EditorView.theme(themeOverrides, USE_DARK_FLAG ? {
  dark: false
} : {}), EditorView.editorAttributes.of({
  class: "cm-light"
})];
var themeAutoExtensions = [EditorView.theme(themeOverrides, {}), EditorView.editorAttributes.of({
  class: "cm-auto"
})];
var cursorWideExtensions = [EditorView.editorAttributes.of({
  class: "cm-cursor-wide"
})];
var cursorNormalExtensions = [EditorView.editorAttributes.of({
  class: "cm-cursor-normal"
})];
var runTab = (view) => {
  const {
    state,
    dispatch
  } = view;
  const status = completionStatus(state);
  if (status === null) {
    if (getStateHasSelection(state)) {
      return indentMore(view);
    } else {
      dispatch(state.update(state.replaceSelection(state.facet(indentUnit)), {
        scrollIntoView: true,
        userEvent: "input"
      }));
      return true;
    }
  } else if (status === "active") {
    return acceptCompletion(view);
  }
  return false;
};
var shiftTab = (view) => {
  const {
    state
  } = view;
  const status = completionStatus(state);
  if (status === null && getStateHasSelection(state)) {
    return indentLess(view);
  }
  return false;
};
var tabKeyExtensions = [keymap.of([{
  key: "Tab",
  run: runTab,
  shift: shiftTab
}])];
var historyExtensions = [history(), keymap.of(historyKeymap)];
var searchTopExtensions = [search({
  top: true
}), keymap.of(searchKeymap)];
var searchBottomExtensions = [search({
  top: false
}), keymap.of(searchKeymap)];
var readableExtensions = [drawSelection(), EditorState.allowMultipleSelections.of(true), indentOnInput(), rectangularSelection(), crosshairCursor(), keymap.of([...defaultKeymap, ...foldKeymap])];
var readOnlyExtensions = [EditorState.readOnly.of(true)];
var readOnlyNoCursorExtensions = [EditorState.readOnly.of(true), EditorView.editable.of(false)];
var lineWrappingExtensions = [EditorView.lineWrapping];
var useLintExtensions = [cypherLinter(), keymap.of(lintKeymap)];
var useNoLintExtensions = [cypherLinter({
  showErrors: false
})];
var useAutocompleteExtensions = [cypherCompletion(), keymap.of(completionKeymap)];
var useStickyAutocompleteExtensions = [cypherCompletion({
  closeOnBlur: false
}), keymap.of(completionKeymap)];
var getCypherLanguageExtensions = ({
  cypherLanguage: cypher2
}) => cypher2 ? [cypherLanguage(), typeMarkerField, typeMarkerTheme, editorSupportField, syntaxCSS, EditorView.editorAttributes.of({
  class: "cm-cypher"
})] : [];
var getAutocompleteExtensions = ({
  cypherLanguage: cypherLanguage2,
  readOnly: readOnly2,
  autocomplete,
  autocompleteCloseOnBlur
}) => cypherLanguage2 && readOnly2 === false && autocomplete ? !autocompleteCloseOnBlur ? useStickyAutocompleteExtensions : useAutocompleteExtensions : [];
var getCursorWideExtensions = ({
  cursorWide
}) => cursorWide ? cursorWideExtensions : cursorNormalExtensions;
var getHistoryExtensions = ({
  history: history2
}) => history2 ? historyExtensions : [];
var getLineNumbersExtensions = ({
  lineNumbers: lineNumbers2,
  lineNumberFormatter,
  onLineNumberClick
}) => lineNumbers2 ? [cypherLineNumbers({
  lineNumberFormatter,
  onLineNumberClick
})] : [];
var getLineWrappingExtensions = ({
  lineWrapping
}) => lineWrapping ? lineWrappingExtensions : [];
var getLintExtensions = ({
  cypherLanguage: cypherLanguage2,
  readOnly: readOnly2,
  lint
}) => cypherLanguage2 && readOnly2 === false && lint ? useLintExtensions : useNoLintExtensions;
var getPlaceholderExtensions = ({
  placeholder: placeholder2
}) => placeholder2 !== void 0 ? [placeholder(placeholder2)] : [];
var getReadableExtensions = ({
  readOnly: readOnly2,
  readOnlyCursor
}) => !readOnly2 || readOnlyCursor ? readableExtensions : [];
var getReadOnlyExtensions = ({
  readOnly: readOnly2,
  readOnlyCursor
}) => readOnly2 ? readOnlyCursor ? readOnlyExtensions : readOnlyNoCursorExtensions : [];
var getTabKeyExtensions = ({
  tabKey,
  indentUnit: indentUnit2
}) => tabKey ? tabKeyExtensions.concat(indentUnit.of(indentUnit2)) : [];
var getThemeExtensions = ({
  theme: theme2
}) => theme2 === THEME_DARK ? themeDarkExtensions : theme2 === THEME_AUTO ? themeAutoExtensions : themeLightExtensions;
var getSearchExtensions = ({
  readOnly: readOnly2,
  search: search3,
  searchTop
}) => search3 ? searchTop ? searchTopExtensions : searchBottomExtensions : [];
var getTooltipAbsoluteExtensions = ({
  tooltipAbsolute
}) => tooltipAbsolute ? [tooltips({
  position: "absolute"
})] : [tooltips({
  position: "fixed"
})];
var getCloseBracketsExtensions = ({
  closeBrackets: closeBrackets2
}) => closeBrackets2 ? [closeBrackets(), keymap.of(closeBracketsKeymap)] : [];
var getBracketMatchingExtensions = ({
  bracketMatching: bracketMatching2
}) => bracketMatching2 ? [bracketMatching()] : [];

// node_modules/@neo4j-cypher/codemirror/es/codemirror.js
function ownKeys5(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys5(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var withDefaultOptions = (options) => {
  const combinedOptions = _objectSpread5({}, defaultOptions);
  for (let key of Object.keys(options)) {
    if (options[key] !== void 0) {
      combinedOptions[key] = options[key];
    }
  }
  return combinedOptions;
};
var isTruthyObject = (obj) => obj && typeof obj === "object";
var areSchemasDifferent = (oldSchema, newSchema) => {
  const oldIsObject = isTruthyObject(oldSchema);
  const newIsObject = isTruthyObject(newSchema);
  if (oldIsObject !== newIsObject) {
    return true;
  } else if (oldIsObject) {
    const oldKeys = Object.keys(oldSchema);
    const newKeys = Object.keys(newSchema);
    if (oldKeys.length !== newKeys.length) {
      return true;
    } else {
      return oldKeys.some((key) => oldSchema[key] !== newSchema[key]);
    }
  } else {
    return false;
  }
};
var getExtensions = (options = {}, {
  lintConf = new Compartment(),
  autocompleteConf = new Compartment(),
  bracketMatchingConf = new Compartment(),
  closeBracketsConf = new Compartment(),
  cursorWideConf = new Compartment(),
  cypherLanguageConf = new Compartment(),
  readableConf = new Compartment(),
  readOnlyConf = new Compartment(),
  showLinesConf = new Compartment(),
  lineWrappingConf = new Compartment(),
  historyConf = new Compartment(),
  placeholderConf = new Compartment(),
  searchConf = new Compartment(),
  tabKeyConf = new Compartment(),
  themeConf = new Compartment(),
  tooltipAbsoluteConf = new Compartment(),
  onLineNumberClick = () => {
  },
  onFocusChanged = () => {
  },
  onScrollChanged = () => {
  },
  onKeyDown = () => {
  },
  onKeyUp = () => {
  }
} = {}) => {
  const combinedOptions = withDefaultOptions(options);
  const {
    autocomplete,
    autocompleteCloseOnBlur,
    bracketMatching: bracketMatching2,
    closeBrackets: closeBrackets2,
    cursorWide,
    cypherLanguage: cypherLanguage2,
    history: history2,
    tabKey,
    indentUnit: indentUnit2,
    lineNumberFormatter,
    lineNumbers: lineNumbers2,
    lineWrapping,
    lint,
    placeholder: placeholder2,
    readOnly: readOnly2,
    readOnlyCursor,
    search: search3,
    searchTop,
    theme: theme2,
    tooltipAbsolute
  } = combinedOptions;
  return [domListener({
    onFocusChanged,
    onScrollChanged,
    onKeyDown,
    onKeyUp
  }), cypherLanguageConf.of(getCypherLanguageExtensions({
    cypherLanguage: cypherLanguage2
  })), lintConf.of(getLintExtensions({
    cypherLanguage: cypherLanguage2,
    readOnly: readOnly2,
    lint
  })), autocompleteConf.of(getAutocompleteExtensions({
    cypherLanguage: cypherLanguage2,
    readOnly: readOnly2,
    autocomplete,
    autocompleteCloseOnBlur
  })), showLinesConf.of(getLineNumbersExtensions({
    lineNumbers: lineNumbers2,
    lineNumberFormatter,
    onLineNumberClick
  })), lineWrappingConf.of(getLineWrappingExtensions({
    lineWrapping
  })), historyConf.of(getHistoryExtensions({
    history: history2
  })), tabKeyConf.of(getTabKeyExtensions({
    tabKey,
    indentUnit: indentUnit2
  })), readableConf.of(getReadableExtensions({
    readOnly: readOnly2,
    readOnlyCursor
  })), placeholderConf.of(getPlaceholderExtensions({
    placeholder: placeholder2
  })), themeConf.of(getThemeExtensions({
    theme: theme2
  })), cursorWideConf.of(getCursorWideExtensions({
    cursorWide
  })), searchConf.of(getSearchExtensions({
    readOnly: readOnly2,
    search: search3,
    searchTop
  })), tooltipAbsoluteConf.of(getTooltipAbsoluteExtensions({
    tooltipAbsolute
  })), readOnlyConf.of(getReadOnlyExtensions({
    readOnly: readOnly2,
    readOnlyCursor
  })), bracketMatchingConf.of(getBracketMatchingExtensions({
    bracketMatching: bracketMatching2
  })), closeBracketsConf.of(getCloseBracketsExtensions({
    closeBrackets: closeBrackets2
  }))];
};
var isActiveSearchMatches = (searchMatches) => searchMatches > 0 && searchMatches <= 1e3;
var detectThemeDark = () => window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
var addDetectThemeDarkListener = (isThemeDarkCallback) => {
  const listener = (event) => {
    isThemeDarkCallback(event.matches);
  };
  window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", listener);
  return listener;
};
var removeDetectThemeDarkListener = (listener) => {
  window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", listener);
};
function createCypherEditor(parentDOMElement, options = {}) {
  const combinedOptions = withDefaultOptions(options);
  const {
    autofocus,
    position,
    selection,
    parseOnSetValue,
    value,
    preExtensions,
    postExtensions
  } = combinedOptions;
  let {
    autocomplete,
    autocompleteOpen,
    autocompleteCloseOnBlur,
    autocompleteTriggerStrings,
    cypherLanguage: cypherLanguage2,
    history: history2,
    indentUnit: indentUnit2,
    lineNumberFormatter,
    lineNumbers: lineNumbers2,
    lineWrapping,
    lint,
    placeholder: placeholder2,
    readOnly: readOnly2,
    readOnlyCursor,
    search: search3,
    searchMatches,
    searchOpen,
    searchText,
    searchTop,
    schema,
    tabKey,
    theme: theme2,
    tooltipAbsolute
  } = combinedOptions;
  let editorSupport = null;
  let lastPosition = null;
  let lastSelection = null;
  let searchInitializing = false;
  let detectedThemeDark = theme2 === "auto" ? detectThemeDark() : null;
  let pressedKey = null;
  let deferredAutocomplete = false;
  const setDetectedThemeDark = (dark) => {
    detectedThemeDark = dark;
    updateTheme();
  };
  let detectedThemeDarkListener = theme2 === "auto" ? addDetectThemeDarkListener(setDetectedThemeDark) : null;
  const {
    on: onValueChanged,
    off: offValueChanged,
    fire: fireValueChanged
  } = createEventHandlers();
  const {
    on: onFocusChanged,
    off: offFocusChanged,
    fire: fireFocusChanged
  } = createEventHandlers();
  const {
    on: onScrollChanged,
    off: offScrollChanged,
    fire: fireScrollChanged
  } = createEventHandlers();
  const {
    on: onPositionChanged,
    off: offPositionChanged,
    fire: firePositionChanged
  } = createEventHandlers();
  const {
    on: onSelectionChanged,
    off: offSelectionChanged,
    fire: fireSelectionChanged
  } = createEventHandlers();
  const {
    on: onAutocompleteChanged,
    off: offAutocompleteChanged,
    fire: fireAutocompleteChanged
  } = createEventHandlers();
  const {
    on: onSearchChanged,
    off: offSearchChanged,
    fire: fireSearchChanged
  } = createEventHandlers();
  const {
    on: onLineNumberClick,
    off: offLineNumberClick,
    fire: fireLineNumberClick
  } = createEventHandlers();
  const {
    on: onKeyDown,
    off: offKeyDown,
    fire: fireKeyDown
  } = createEventHandlers();
  const {
    on: onKeyUp,
    off: offKeyUp,
    fire: fireKeyUp
  } = createEventHandlers();
  const lineNumberClick = (line, event) => {
    fireLineNumberClick(line, event);
  };
  const keyDown = (event) => {
    pressedKey = !event.metaKey && !event.ctrlKey && !event.altKey && event.key && event.key.length === 1 ? event.key : null;
    fireKeyDown(event);
  };
  const keyUp = (event) => {
    if (deferredAutocomplete) {
      showAutocomplete();
      deferredAutocomplete = false;
    }
    pressedKey = null;
    fireKeyUp(event);
  };
  const deferAutocompleteForChanges = (changes) => {
    const {
      length = 0,
      newLength = 0
    } = changes;
    const isSmallInsert = newLength > length && newLength - length <= 2;
    if (pressedKey && cypherLanguage2 && autocomplete && Array.isArray(autocompleteTriggerStrings) && isSmallInsert) {
      let changedText = null;
      changes.iterChanges((fromA, toA, fromB, toB, inserted) => {
        if (!changedText && inserted && typeof inserted === "object" && Array.isArray(inserted.text) && inserted.text.length == 1) {
          changedText = inserted.text[0];
        }
      });
      if (changedText && autocompleteTriggerStrings.includes(changedText)) {
        deferredAutocomplete = true;
      }
    }
  };
  const handleValueChanged = (value2, changes) => {
    deferAutocompleteForChanges(changes);
    fireValueChanged(value2, changes);
  };
  const handlePositionChanged = (positionObject) => {
    lastPosition = (positionObject || {
      position: null
    }).position;
    firePositionChanged(positionOldToNew(positionObject));
  };
  const handleSelectionChanged = (selection2) => {
    lastSelection = selection2;
    fireSelectionChanged(selection2);
  };
  const handleAutocompleteChanged = (newAutocompleteOpen, options2, option) => {
    autocompleteOpen = newAutocompleteOpen;
    fireAutocompleteChanged(autocompleteOpen, options2, option);
  };
  const handleSearchChanged = (newSearchOpen, text, matches) => {
    if (!searchInitializing) {
      searchOpen = newSearchOpen;
      fireSearchChanged(searchOpen, text, matches);
    }
  };
  const handleFocusChanged = (focused) => {
    fireFocusChanged(focused);
  };
  const handleScrollChanged = (scrollInfo) => {
    fireScrollChanged(scrollInfo);
  };
  const updateListener2 = EditorView.updateListener.of((v) => {
    const {
      docChanged: valueChanged,
      selectionSet: selectionChanged
    } = v;
    const oldPosition = selectionChanged ? valueChanged ? null : getStatePositionAbsolute(v.startState) : null;
    const newPosition = selectionChanged ? getStatePositionAbsolute(v.state) : null;
    const positionChanged = valueChanged || oldPosition !== newPosition;
    const oldAutocompleteOpen = getStateAutocompleteOpen(v.startState);
    const newAutocompleteOpen = getStateAutocompleteOpen(v.state);
    const pickedAutocompleteOption = getViewUpdatePickedAutocompleteOption(v, true);
    const autocompleteChanged = cypherLanguage2 && autocomplete && (oldAutocompleteOpen !== newAutocompleteOpen || !areViewUpdateAutocompleteOptionsEqual(v) || pickedAutocompleteOption);
    const oldSearchOpen = getStateSearchOpen(v.startState);
    const newSearchOpen = getStateSearchOpen(v.state);
    const oldSearchText = getStateSearchText(v.startState);
    const newSearchText = getStateSearchText(v.state);
    const oldSearchSpec = getStateSearchSpec(v.startState);
    const newSearchSpec = getStateSearchSpec(v.state);
    const activeSearchMatches = isActiveSearchMatches(searchMatches);
    const searchChanged = search3 && (oldSearchOpen !== newSearchOpen || (activeSearchMatches ? oldSearchSpec !== newSearchSpec : oldSearchText !== newSearchText));
    if (valueChanged) {
      handleValueChanged(getStateValue(v.state), v.changes);
    }
    if (positionChanged) {
      handlePositionChanged(getStatePosition(v.state));
    }
    if (selectionChanged) {
      handleSelectionChanged(getStateSelection(v.state));
    }
    if (autocompleteChanged) {
      const newAutocompleteOptions = newAutocompleteOpen ? getStateAutocompleteOptions(v.state, true) : void 0;
      const newAutocompleteOption = pickedAutocompleteOption;
      handleAutocompleteChanged(newAutocompleteOpen, newAutocompleteOptions, newAutocompleteOption);
    }
    if (searchChanged) {
      if (oldSearchOpen || newSearchOpen) {
        const newSearchMatches = activeSearchMatches && newSearchOpen ? getStateSearchMatches(v.state, searchMatches) : void 0;
        handleSearchChanged(newSearchOpen, newSearchText, newSearchMatches);
      }
    } else if (valueChanged && activeSearchMatches && newSearchOpen) {
      handleSearchChanged(newSearchOpen, newSearchText, getStateSearchMatches(v.state, searchMatches));
    }
  });
  const preConf = new Compartment();
  const lintConf = new Compartment();
  const autocompleteConf = new Compartment();
  const bracketMatchingConf = new Compartment();
  const closeBracketsConf = new Compartment();
  const readableConf = new Compartment();
  const readOnlyConf = new Compartment();
  const showLinesConf = new Compartment();
  const lineWrappingConf = new Compartment();
  const historyConf = new Compartment();
  const placeholderConf = new Compartment();
  const searchConf = new Compartment();
  const tabKeyConf = new Compartment();
  const themeConf = new Compartment();
  const cursorWideConf = new Compartment();
  const cypherLanguageConf = new Compartment();
  const tooltipAbsoluteConf = new Compartment();
  const postConf = new Compartment();
  const createOptions = theme2 === "auto" ? _objectSpread5(_objectSpread5({}, combinedOptions), {}, {
    theme: detectedThemeDark ? "dark" : "light"
  }) : combinedOptions;
  const initialState = EditorState.create({
    doc: value,
    extensions: [preConf.of(preExtensions), ...getExtensions(createOptions, {
      lintConf,
      autocompleteConf,
      bracketMatchingConf,
      closeBracketsConf,
      cursorWideConf,
      cypherLanguageConf,
      tabKeyConf,
      readableConf,
      readOnlyConf,
      showLinesConf,
      lineWrappingConf,
      historyConf,
      placeholderConf,
      searchConf,
      themeConf,
      tooltipAbsoluteConf,
      postConf,
      onLineNumberClick: lineNumberClick,
      onFocusChanged: handleFocusChanged,
      onScrollChanged: handleScrollChanged,
      onKeyDown: keyDown,
      onKeyUp: keyUp
    }), updateListener2, postConf.of(postExtensions)]
  });
  let editor = new EditorView({
    parent: parentDOMElement,
    state: initialState
  });
  editor.version = 1;
  editor.newContentVersion = function newContentVersion() {
    this.version += 1;
    return this.version;
  };
  editor.newContentVersion.bind(editor);
  if (cypherLanguage2) {
    editorSupport = getStateEditorSupport(editor.state);
    editorSupport.update(value);
  }
  const getPositionForValue = (positionValue) => getStatePositionForAny(editor.state, positionNewToOld(positionValue));
  const setPosition = (positionParam, scrollIntoView3 = true) => {
    const positionObject = getPositionForValue(positionParam);
    if (positionObject) {
      const {
        position: position2
      } = positionObject;
      if (position2 !== lastPosition) {
        lastPosition = position2;
        editor.dispatch(editor.state.update({
          scrollIntoView: scrollIntoView3,
          selection: {
            anchor: position2
          }
        }));
      }
    }
  };
  const setSelection = (selection2, scrollIntoView3 = true) => {
    const ranges = [SelectionRange.fromJSON({
      from: 0,
      to: 2,
      anchor: 0,
      head: 2
    }), SelectionRange.fromJSON({
      from: 3,
      to: 4,
      anchor: 3,
      head: 4
    }), SelectionRange.fromJSON({
      from: 6,
      to: 8,
      anchor: 6,
      head: 8
    })];
    let newSelection = EditorSelection.create(ranges, 2);
    if (selection2 && selection2 !== lastSelection) {
      lastSelection = selection2;
      editor.dispatch(editor.state.update({
        scrollIntoView: scrollIntoView3,
        selection: selection2
      }));
    }
  };
  const showAutocomplete = () => {
    if (cypherLanguage2 && autocomplete) {
      startCompletion(editor);
    }
  };
  const hideAutocomplete = () => {
    if (cypherLanguage2 && autocomplete) {
      closeCompletion(editor);
    }
  };
  const showSearch = () => {
    if (search3) {
      openSearchPanel(editor);
    }
  };
  const hideSearch = () => {
    if (search3) {
      closeSearchPanel(editor);
    }
  };
  if (position !== void 0) {
    setPosition(position);
  } else if (selection !== void 0) {
    setSelection(selection);
  }
  lastPosition = (getStatePosition(editor.state) || {
    position: null
  }).position;
  lastSelection = getStateSelection(editor.state) || null;
  if (cypherLanguage2 && schema !== void 0) {
    editorSupport.setSchema(schema);
  }
  if (cypherLanguage2 && autocomplete && autocompleteOpen === true) {
    showAutocomplete();
  }
  if (cypherLanguage2 && search3 && searchOpen === true) {
    showSearch();
  }
  if (autofocus) {
    editor.contentDOM.focus();
  }
  const setPreExtensions = (preExtensions2 = defaultOptions.preExtensions) => {
    editor.dispatch({
      effects: preConf.reconfigure(preExtensions2)
    });
  };
  const setPostExtensions = (postExtensions2 = defaultOptions.postExtensions) => {
    editor.dispatch({
      effects: postConf.reconfigure(postExtensions2)
    });
  };
  const setValue = (value2 = defaultOptions.value, parseOnSetValueParam = parseOnSetValue) => {
    const update = editor.state.update({
      changes: {
        from: 0,
        to: getStateLength(editor.state),
        insert: value2
      }
    });
    editor.update([update]);
    if (cypherLanguage2 && parseOnSetValueParam !== false) {
      const version = editor.newContentVersion();
      const editorSupport2 = getStateEditorSupport(editor.state);
      editorSupport2.update(value2, version);
      fixColors(editor, editorSupport2);
    }
  };
  const selectAutocompleteOption = (index) => {
    if (cypherLanguage2 && autocomplete) {
      editor.dispatch({
        effects: setSelectedCompletion(index)
      });
      acceptCompletion(editor);
    }
  };
  const setHistory = (newHistory = defaultOptions.history) => {
    history2 = newHistory;
    editor.dispatch({
      effects: historyConf.reconfigure(getHistoryExtensions({
        history: history2
      }))
    });
  };
  const clearHistory = () => {
    if (history2) {
      editor.dispatch({
        effects: historyConf.reconfigure([])
      });
      editor.dispatch({
        effects: historyConf.reconfigure(getHistoryExtensions({
          history: history2
        }))
      });
    }
  };
  const setLineNumbers = (newLineNumbers = defaultOptions.lineNumbers) => {
    lineNumbers2 = newLineNumbers;
    editor.dispatch({
      effects: showLinesConf.reconfigure(getLineNumbersExtensions({
        lineNumbers: lineNumbers2,
        lineNumberFormatter,
        onLineNumberClick: lineNumberClick
      }))
    });
  };
  const setLineNumberFormatter = (newLineNumberFormatter = defaultOptions.lineNumberFormatter) => {
    lineNumberFormatter = newLineNumberFormatter;
    if (lineNumbers2) {
      editor.dispatch({
        effects: showLinesConf.reconfigure(getLineNumbersExtensions({
          lineNumbers: lineNumbers2,
          lineNumberFormatter,
          onLineNumberClick: lineNumberClick
        }))
      });
    }
  };
  const setReadOnly = (newReadOnly = defaultOptions.readOnly) => {
    readOnly2 = newReadOnly;
    editor.dispatch({
      effects: [readableConf.reconfigure(getReadableExtensions({
        readOnly: readOnly2,
        readOnlyCursor
      })), readOnlyConf.reconfigure(getReadOnlyExtensions({
        readOnly: readOnly2,
        readOnlyCursor
      })), autocompleteConf.reconfigure(getAutocompleteExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        autocomplete,
        autocompleteCloseOnBlur
      })), lintConf.reconfigure(getLintExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        lint
      }))]
    });
  };
  const setReadOnlyCursor = (newReadOnlyCursor = defaultOptions.readOnlyCursor) => {
    readOnlyCursor = newReadOnlyCursor;
    editor.dispatch({
      effects: [readableConf.reconfigure(getReadableExtensions({
        readOnly: readOnly2,
        readOnlyCursor
      })), readOnlyConf.reconfigure(getReadOnlyExtensions({
        readOnly: readOnly2,
        readOnlyCursor
      }))]
    });
  };
  const setPlaceholder = (newPlaceholder = defaultOptions.placeholder) => {
    placeholder2 = newPlaceholder;
    editor.dispatch({
      effects: [placeholderConf.reconfigure(getPlaceholderExtensions({
        placeholder: placeholder2
      }))]
    });
  };
  const setLineWrapping = (newLineWrapping = defaultOptions.lineWrapping) => {
    lineWrapping = newLineWrapping;
    editor.dispatch({
      effects: [lineWrappingConf.reconfigure(getLineWrappingExtensions({
        lineWrapping
      }))]
    });
  };
  const setAutocomplete = (newAutocomplete = defaultOptions.autocomplete) => {
    const autocompleteActivated = cypherLanguage2 && newAutocomplete && !(cypherLanguage2 && autocomplete);
    autocomplete = newAutocomplete;
    editor.dispatch({
      effects: autocompleteConf.reconfigure(getAutocompleteExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        autocomplete,
        autocompleteCloseOnBlur
      }))
    });
    if (autocompleteActivated) {
      if (autocompleteOpen) {
        showAutocomplete();
      }
    }
  };
  const setAutocompleteCloseOnBlur = (newAutocompleteCloseOnBlur = defaultOptions.autocompleteCloseOnBlur) => {
    autocompleteCloseOnBlur = newAutocompleteCloseOnBlur;
    editor.dispatch({
      effects: autocompleteConf.reconfigure(getAutocompleteExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        autocomplete,
        autocompleteCloseOnBlur
      }))
    });
  };
  const setAutocompleteOpen = (newAutocompleteOpen = defaultOptions.autocompleteOpen) => {
    autocompleteOpen = newAutocompleteOpen;
    if (autocompleteOpen) {
      showAutocomplete();
    } else {
      hideAutocomplete();
    }
  };
  const setAutocompleteTriggerStrings = (newAutocompleteTriggerStrings = defaultOptions.autocompleteTriggerStrings) => {
    autocompleteTriggerStrings = newAutocompleteTriggerStrings;
  };
  const setLint = (newLint = defaultOptions.lint) => {
    lint = newLint;
    editor.dispatch({
      effects: lintConf.reconfigure(getLintExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        lint
      }))
    });
  };
  const getPosition = () => {
    return positionOldToNew(getStatePosition(editor.state));
  };
  const getSelection2 = () => {
    return getStateSelection(editor.state);
  };
  const getLineCount = () => {
    return editor ? getStateLineCount(editor.state) : 0;
  };
  const setSchema = (newSchema = defaultOptions.schema) => {
    const schemaChanged = areSchemasDifferent(schema, newSchema);
    schema = newSchema;
    if (cypherLanguage2) {
      editorSupport.setSchema(schema);
      if (schemaChanged && autocomplete && autocompleteOpen) {
        showAutocomplete();
      }
    }
  };
  const setTheme = (newTheme = defaultOptions.theme) => {
    const oldTheme = theme2;
    theme2 = newTheme;
    if (oldTheme === "auto" && newTheme !== "auto") {
      detectedThemeDark = null;
      detectedThemeDarkListener && removeDetectThemeDarkListener(detectedThemeDarkListener);
      detectedThemeDarkListener = null;
    }
    if (oldTheme !== "auto" && newTheme === "auto") {
      detectedThemeDark = detectThemeDark();
      detectedThemeDarkListener = addDetectThemeDarkListener(setDetectedThemeDark);
    }
    const derivedTheme = theme2 === "auto" ? detectedThemeDark ? "dark" : "light" : theme2;
    editor.dispatch({
      effects: themeConf.reconfigure(getThemeExtensions({
        theme: derivedTheme
      }))
    });
  };
  const updateTheme = () => {
    setTheme(theme2);
  };
  const setCursorWide = (cursorWide = defaultOptions.cursorWide) => {
    editor.dispatch({
      effects: cursorWideConf.reconfigure(getCursorWideExtensions({
        cursorWide
      }))
    });
  };
  const setCypherLanguage = (newCypherLanguage = defaultOptions.cypherLanguage) => {
    const cypherLanguageChanged = cypherLanguage2 !== newCypherLanguage;
    const autocompleteActivated = newCypherLanguage && autocomplete && !(cypherLanguage2 && autocomplete);
    cypherLanguage2 = newCypherLanguage;
    if (cypherLanguageChanged && !cypherLanguage2) {
      editorSupport = null;
    }
    editor.dispatch({
      effects: cypherLanguageConf.reconfigure(getCypherLanguageExtensions({
        cypherLanguage: cypherLanguage2
      }))
    });
    editor.dispatch({
      effects: autocompleteConf.reconfigure(getAutocompleteExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        autocomplete,
        autocompleteCloseOnBlur
      }))
    });
    editor.dispatch({
      effects: lintConf.reconfigure(getLintExtensions({
        cypherLanguage: cypherLanguage2,
        readOnly: readOnly2,
        lint
      }))
    });
    if (cypherLanguageChanged && cypherLanguage2) {
      editor.version = 1;
      const version = editor.newContentVersion();
      editorSupport = getStateEditorSupport(editor.state);
      editorSupport.setSchema(schema);
      editorSupport.update(value, version);
      fixColors(editor, editorSupport);
    }
    if (autocompleteActivated) {
      if (autocompleteOpen) {
        showAutocomplete();
      }
    }
    if (!cypherLanguage2) {
      editor && resetColors(editor);
    }
  };
  const setTooltipAbsolute = (newTooltipAbsolute = defaultOptions.tooltipAbsolute) => {
    tooltipAbsolute = newTooltipAbsolute;
    editor.dispatch({
      effects: tooltipAbsoluteConf.reconfigure(getTooltipAbsoluteExtensions({
        tooltipAbsolute
      }))
    });
  };
  const focus = () => {
    editor && editor.focus();
  };
  const destroy = () => {
    editor && editor.destroy();
    detectedThemeDarkListener && removeDetectThemeDarkListener(detectedThemeDarkListener);
  };
  const setTabKey = (newTabKey = defaultOptions.tabKey) => {
    tabKey = newTabKey;
    editor.dispatch({
      effects: tabKeyConf.reconfigure(getTabKeyExtensions({
        tabKey,
        indentUnit: indentUnit2
      }))
    });
  };
  const setIndentUnit = (newIndentUnit = defaultOptions.indentUnit) => {
    indentUnit2 = newIndentUnit;
    editor.dispatch({
      effects: tabKeyConf.reconfigure(getTabKeyExtensions({
        tabKey,
        indentUnit: indentUnit2
      }))
    });
  };
  const setSearch = (newSearch = defaultOptions.search) => {
    const searchActivated = newSearch && !search3;
    search3 = newSearch;
    if (searchActivated) {
      searchInitializing = true;
    }
    editor.dispatch({
      effects: searchConf.reconfigure(getSearchExtensions({
        readOnly: readOnly2,
        search: search3,
        searchTop
      }))
    });
    if (searchActivated) {
      setSearchText(searchText);
      if (searchOpen) {
        showSearch();
      }
      searchInitializing = false;
      handleSearchChanged(searchOpen, searchText, searchOpen ? getStateSearchMatches(editor.state, searchMatches) : void 0);
    }
  };
  const setSearchMatches = (newSearchMatches = defaultOptions.searchMatches) => {
    const searchMatchesChanged = newSearchMatches !== searchMatches;
    searchMatches = newSearchMatches;
    if (searchMatchesChanged && searchMatches > 0) {
    }
  };
  const setSearchOpen = (newSearchOpen = defaultOptions.searchOpen) => {
    searchOpen = newSearchOpen;
    if (searchOpen) {
      showSearch();
    } else {
      hideSearch();
    }
  };
  const setSearchText = (newSearchText = defaultOptions.searchText) => {
    searchText = newSearchText;
    if (search3) {
      const searchQuery = getSearchQuery(editor.state);
      const {
        caseSensitive,
        literal: literal2,
        regexp,
        replace,
        wholeWord
      } = searchQuery;
      const newSearchQuery = new SearchQuery({
        search: searchText,
        caseSensitive,
        literal: literal2,
        regexp,
        replace,
        wholeWord
      });
      editor.dispatch({
        effects: setSearchQuery.of(newSearchQuery)
      });
    }
  };
  const setSearchTop = (newSearchTop = defaultOptions.searchTop) => {
    searchTop = newSearchTop;
    editor.dispatch({
      effects: searchConf.reconfigure(getSearchExtensions({
        readOnly: readOnly2,
        search: search3,
        searchTop
      }))
    });
  };
  const setBracketMatching = (bracketMatching2 = defaultOptions.bracketMatching) => {
    editor.dispatch({
      effects: bracketMatchingConf.reconfigure(getBracketMatchingExtensions({
        bracketMatching: bracketMatching2
      }))
    });
  };
  const setCloseBrackets = (closeBrackets2 = defaultOptions.closeBrackets) => {
    editor.dispatch({
      effects: closeBracketsConf.reconfigure(getCloseBracketsExtensions({
        closeBrackets: closeBrackets2
      }))
    });
  };
  const editorAPI = {
    clearHistory,
    destroy,
    focus,
    getLineCount,
    getPosition,
    getPositionForValue,
    getSelection: getSelection2,
    selectAutocompleteOption,
    setAutocomplete,
    setAutocompleteCloseOnBlur,
    setAutocompleteOpen,
    setAutocompleteTriggerStrings,
    setBracketMatching,
    setCloseBrackets,
    setCursorWide,
    setCypherLanguage,
    setHistory,
    setIndentUnit,
    setLineNumberFormatter,
    setLineNumbers,
    setLineWrapping,
    setLint,
    setPlaceholder,
    setPosition,
    setReadOnly,
    setReadOnlyCursor,
    setSchema,
    setSearch,
    setSearchMatches,
    setSearchOpen,
    setSearchText,
    setSearchTop,
    setSelection,
    setTabKey,
    setTheme,
    setTooltipAbsolute,
    setValue,
    onAutocompleteChanged,
    offAutocompleteChanged,
    onFocusChanged,
    offFocusChanged,
    onKeyDown,
    offKeyDown,
    onKeyUp,
    offKeyUp,
    onLineNumberClick,
    offLineNumberClick,
    onPositionChanged,
    offPositionChanged,
    onScrollChanged,
    offScrollChanged,
    onSearchChanged,
    offSearchChanged,
    onSelectionChanged,
    offSelectionChanged,
    onValueChanged,
    offValueChanged,
    setPreExtensions,
    setPostExtensions,
    codemirror: editor,
    editorSupport
  };
  if (cypherLanguage2 && parseOnSetValue !== false) {
    const version = editor.newContentVersion();
    editorSupport.update(value, version);
    fixColors(editor, editorSupport);
  }
  return {
    editor: editorAPI
  };
}

// node_modules/@neo4j-cypher/react-codemirror/es/CypherEditor.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var CypherEditor = class extends import_react.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "setEditorRef", (ref) => {
      this.editorRef = ref;
    });
    _defineProperty(this, "valueChanged", (value, changes) => {
      this.lastValue = value;
      const {
        onValueChanged
      } = this.props;
      onValueChanged && onValueChanged(value, changes);
    });
    _defineProperty(this, "focusChanged", (focused) => {
      const {
        onFocusChanged
      } = this.props;
      this.setState({
        focused
      });
      onFocusChanged && onFocusChanged(focused);
    });
    _defineProperty(this, "scrollChanged", (scrollInfo) => {
      const {
        onScrollChanged
      } = this.props;
      onScrollChanged && onScrollChanged(scrollInfo);
    });
    _defineProperty(this, "positionChanged", (positionObject) => {
      this.lastPosition = (positionObject || {
        position: null
      }).position;
      const {
        onPositionChanged
      } = this.props;
      onPositionChanged && onPositionChanged(positionObject);
    });
    _defineProperty(this, "selectionChanged", (selection) => {
      this.lastSelection = selection;
      const {
        onSelectionChanged
      } = this.props;
      onSelectionChanged && onSelectionChanged(selection);
    });
    _defineProperty(this, "autocompleteChanged", (autocompleteOpen, options, option) => {
      const {
        onAutocompleteChanged
      } = this.props;
      onAutocompleteChanged && onAutocompleteChanged(autocompleteOpen, options, option);
    });
    _defineProperty(this, "searchChanged", (searchOpen, text, matches) => {
      const {
        onSearchChanged
      } = this.props;
      onSearchChanged && onSearchChanged(searchOpen, text, matches);
    });
    _defineProperty(this, "lineNumberClick", (line, event) => {
      const {
        onLineNumberClick
      } = this.props;
      onLineNumberClick && onLineNumberClick(line, event);
    });
    _defineProperty(this, "keyDown", (event) => {
      const {
        onKeyDown
      } = this.props;
      onKeyDown && onKeyDown(event);
    });
    _defineProperty(this, "keyUp", (event) => {
      const {
        onKeyUp
      } = this.props;
      onKeyUp && onKeyUp(event);
    });
    this.state = {
      focused: false
    };
    this.lastValue = null;
    this.lastPosition = null;
    this.lastSelection = null;
  }
  componentDidMount() {
    const {
      autocomplete,
      autocompleteCloseOnBlur,
      autocompleteOpen,
      autocompleteTriggerStrings,
      autofocus,
      bracketMatching: bracketMatching2,
      closeBrackets: closeBrackets2,
      cursorWide,
      cypherLanguage: cypherLanguage2,
      history: history2,
      indentUnit: indentUnit2,
      lineNumberFormatter,
      lineNumbers: lineNumbers2,
      lineWrapping,
      lint,
      placeholder: placeholder2,
      position,
      readOnly: readOnly2,
      readOnlyCursor,
      schema,
      search: search3,
      searchMatches,
      searchOpen,
      searchText,
      searchTop,
      selection,
      tabKey,
      theme: theme2,
      tooltipAbsolute,
      parseOnSetValue,
      value,
      onEditorCreated,
      preExtensions,
      postExtensions
    } = this.props;
    this.value = value;
    const {
      editor
    } = createCypherEditor(this.editorRef, {
      autocomplete,
      autocompleteCloseOnBlur,
      autocompleteOpen,
      autocompleteTriggerStrings,
      autofocus,
      bracketMatching: bracketMatching2,
      closeBrackets: closeBrackets2,
      cursorWide,
      cypherLanguage: cypherLanguage2,
      history: history2,
      indentUnit: indentUnit2,
      lineNumberFormatter,
      lineNumbers: lineNumbers2,
      lineWrapping,
      lint,
      placeholder: placeholder2,
      position,
      readOnly: readOnly2,
      readOnlyCursor,
      schema,
      search: search3,
      searchMatches,
      searchOpen,
      searchText,
      searchTop,
      selection,
      tabKey,
      theme: theme2,
      tooltipAbsolute,
      parseOnSetValue,
      value,
      preExtensions,
      postExtensions
    });
    this.cypherEditor = editor;
    this.cypherEditor.onValueChanged(this.valueChanged);
    this.cypherEditor.onFocusChanged(this.focusChanged);
    this.cypherEditor.onScrollChanged(this.scrollChanged);
    this.cypherEditor.onPositionChanged(this.positionChanged);
    this.cypherEditor.onSelectionChanged(this.selectionChanged);
    this.cypherEditor.onAutocompleteChanged(this.autocompleteChanged);
    this.cypherEditor.onSearchChanged(this.searchChanged);
    this.cypherEditor.onLineNumberClick(this.lineNumberClick);
    this.cypherEditor.onKeyDown(this.keyDown);
    this.cypherEditor.onKeyUp(this.keyUp);
    onEditorCreated && onEditorCreated(this.cypherEditor);
  }
  componentWillUnmount() {
    if (this.cypherEditor) {
      this.cypherEditor.offValueChanged(this.valueChanged);
      this.cypherEditor.offFocusChanged(this.focusChanged);
      this.cypherEditor.offScrollChanged(this.scrollChanged);
      this.cypherEditor.offPositionChanged(this.positionChanged);
      this.cypherEditor.offSelectionChanged(this.selectionChanged);
      this.cypherEditor.offAutocompleteChanged(this.autocompleteChanged);
      this.cypherEditor.offSearchChanged(this.searchChanged);
      this.cypherEditor.offLineNumberClick(this.lineNumberClick);
      this.cypherEditor.offKeyDown(this.keyDown);
      this.cypherEditor.offKeyUp(this.keyUp);
      this.cypherEditor.destroy();
    }
  }
  componentDidUpdate(prevProps) {
    if (prevProps.value !== this.props.value) {
      this.value = this.props.value;
    }
    for (let key of reactiveOptionKeys) {
      if (prevProps[key] !== this.props[key]) {
        this.updateOption({
          [key]: this.props[key]
        });
      }
    }
  }
  updateOption(prop) {
    if (!this.cypherEditor) {
      return;
    }
    const key = Object.keys(prop).pop();
    if (key === "value") {
      if (prop[key] === this.lastValue) {
        return;
      } else {
        this.lastValue = prop[key];
      }
    }
    if (key === "position") {
      const {
        position
      } = this.cypherEditor.getPositionForValue(prop[key]) || {
        position: null
      };
      if (position === this.lastPosition) {
        return;
      } else {
        this.lastPosition = position;
      }
    }
    if (key === "selection") {
      if (prop[key] === this.lastSelection) {
        return;
      } else {
        this.lastSelection = prop[key];
      }
    }
    const methodName = "set" + key[0].toUpperCase() + key.slice(1);
    if (this.cypherEditor[methodName]) {
      this.cypherEditor[methodName](prop[key]);
    }
    const autofocusProps = this.props.autofocusProps !== void 0 ? this.props.autofocusProps : defaultOptions.autofocusProps;
    if (autofocusProps.includes(key)) {
      this.cypherEditor.focus();
    }
    const clearHistoryProps = this.props.clearHistoryProps !== void 0 ? this.props.clearHistoryProps : defaultOptions.clearHistoryProps;
    if (clearHistoryProps.includes(key)) {
      this.cypherEditor.clearHistory();
    }
  }
  render() {
    const {
      className,
      focusedClassName,
      style
    } = this.props;
    const {
      focused
    } = this.state;
    const editorClassName = (className ? className + " " : "") + (focused && focusedClassName ? focusedClassName : "");
    return (0, import_jsx_runtime.jsx)("div", {
      className: editorClassName,
      style,
      ref: this.setEditorRef
    });
  }
};
var CypherEditor_default = CypherEditor;
export {
  CypherEditor_default as CypherEditor
};
/*! Bundled license information:

antlr4/src/antlr4/polyfills/codepointat.js:
  (*! https://mths.be/codepointat v0.2.0 by @mathias *)

antlr4/src/antlr4/polyfills/fromcodepoint.js:
  (*! https://mths.be/fromcodepoint v0.2.1 by @mathias *)
*/
//# sourceMappingURL=@neo4j-cypher_react-codemirror.js.map
