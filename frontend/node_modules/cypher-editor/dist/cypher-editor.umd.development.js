(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('codemirror'), require('codemirror/lib/codemirror.css'), require('codemirror/theme/base16-dark.css'), require('codemirror/theme/xq-dark.css'), require('codemirror/theme/erlang-dark.css'), require('codemirror/theme/eclipse.css'), require('codemirror/theme/elegant.css'), require('codemirror/theme/blackboard.css'), require('codemirror/mode/cypher/cypher'), require('codemirror/mode/sql/sql'), require('codemirror/addon/dialog/dialog.css'), require('codemirror/addon/search/searchcursor.js'), require('codemirror/addon/dialog/dialog.js'), require('codemirror/addon/fold/foldgutter.css'), require('codemirror/addon/fold/foldcode.js'), require('codemirror/addon/fold/foldgutter.js'), require('codemirror/addon/fold/brace-fold.js'), require('codemirror/addon/fold/comment-fold.js'), require('codemirror/addon/display/fullscreen.css'), require('codemirror/addon/display/fullscreen.js'), require('codemirror/addon/scroll/simplescrollbars.css'), require('codemirror/addon/scroll/simplescrollbars.js'), require('codemirror/addon/hint/show-hint.css'), require('codemirror/addon/hint/show-hint.js'), require('codemirror/addon/hint/anyword-hint.js'), require('codemirror/addon/edit/matchbrackets.js'), require('codemirror/addon/edit/closebrackets.js'), require('codemirror/addon/display/placeholder.js')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'codemirror', 'codemirror/lib/codemirror.css', 'codemirror/theme/base16-dark.css', 'codemirror/theme/xq-dark.css', 'codemirror/theme/erlang-dark.css', 'codemirror/theme/eclipse.css', 'codemirror/theme/elegant.css', 'codemirror/theme/blackboard.css', 'codemirror/mode/cypher/cypher', 'codemirror/mode/sql/sql', 'codemirror/addon/dialog/dialog.css', 'codemirror/addon/search/searchcursor.js', 'codemirror/addon/dialog/dialog.js', 'codemirror/addon/fold/foldgutter.css', 'codemirror/addon/fold/foldcode.js', 'codemirror/addon/fold/foldgutter.js', 'codemirror/addon/fold/brace-fold.js', 'codemirror/addon/fold/comment-fold.js', 'codemirror/addon/display/fullscreen.css', 'codemirror/addon/display/fullscreen.js', 'codemirror/addon/scroll/simplescrollbars.css', 'codemirror/addon/scroll/simplescrollbars.js', 'codemirror/addon/hint/show-hint.css', 'codemirror/addon/hint/show-hint.js', 'codemirror/addon/hint/anyword-hint.js', 'codemirror/addon/edit/matchbrackets.js', 'codemirror/addon/edit/closebrackets.js', 'codemirror/addon/display/placeholder.js'], factory) :
  (global = global || self, factory(global['cypher-editor'] = {}, global.React, global.CodeMirror));
}(this, (function (exports, React, CodeMirror) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;

    _setPrototypeOf(subClass, superClass);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  var ModeMap = {
    'sql': 'text/x-mysql',
    'cypher': 'cypher'
  }; // 支持的主题

  var ThemeMap = {
    'base16-dark': 'base16-dark',
    'xq-dark': 'xq-dark',
    'erlang-dark': 'erlang-dark',
    'eclipse': 'eclipse',
    'blackboard': 'blackboard'
  };
  var DEFAULT_LINENUMBERS = true;
  var DEFAULT_THEME = 'base16-dark';
  var DEFAULT_MODE = 'cypher';
  var DEFAULT_UNDODEPTH = 20;
  var DEFAULT_AUTOFOCUS = true;
  var DEFAULT_WIDTH = 'auto';
  var DEFAULT_HEIGHT = '200';
  var DEFAULT_TABINDEX = 4;

  var CodeEditor = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(CodeEditor, _React$Component);

    function CodeEditor(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;
      _this.state = {
        codeMioorInstance: {},
        editorValue: ''
      };
      return _this;
    }

    var _proto = CodeEditor.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.initCodeMioor();
    };

    _proto.initCodeMioor = function initCodeMioor() {
      var _this2 = this;

      // 获取初始化配置参数
      var _this$props$editorCon = this.props.editorConfig,
          _this$props$editorCon2 = _this$props$editorCon.lineNumbers,
          lineNumbers = _this$props$editorCon2 === void 0 ? DEFAULT_LINENUMBERS : _this$props$editorCon2,
          _this$props$editorCon3 = _this$props$editorCon.theme,
          theme = _this$props$editorCon3 === void 0 ? DEFAULT_THEME : _this$props$editorCon3,
          _this$props$editorCon4 = _this$props$editorCon.undoDepth,
          undoDepth = _this$props$editorCon4 === void 0 ? DEFAULT_UNDODEPTH : _this$props$editorCon4,
          _this$props$editorCon5 = _this$props$editorCon.tabindex,
          tabindex = _this$props$editorCon5 === void 0 ? DEFAULT_TABINDEX : _this$props$editorCon5,
          _this$props$editorCon6 = _this$props$editorCon.mode,
          mode = _this$props$editorCon6 === void 0 ? DEFAULT_MODE : _this$props$editorCon6,
          _this$props$editorCon7 = _this$props$editorCon.autofocus,
          autofocus = _this$props$editorCon7 === void 0 ? DEFAULT_AUTOFOCUS : _this$props$editorCon7,
          _this$props$editorCon8 = _this$props$editorCon.width,
          width = _this$props$editorCon8 === void 0 ? DEFAULT_WIDTH : _this$props$editorCon8,
          _this$props$editorCon9 = _this$props$editorCon.height,
          height = _this$props$editorCon9 === void 0 ? DEFAULT_HEIGHT : _this$props$editorCon9;
      var id = document.getElementById('transwarp-code-editor'); // 创建编辑器实例

      var instance = CodeMirror.fromTextArea(id, {
        lineNumbers: lineNumbers,
        undoDepth: undoDepth,
        tabindex: tabindex,
        autofocus: autofocus,
        theme: ThemeMap[theme],
        mode: ModeMap[mode],
        // extraKeys: {
        //   "Ctrl+": function(cm) {
        //     cm.setOption("fullScreen", !cm.getOption("fullScreen"));
        //   },
        //   "Esc+": function(cm) {
        //     if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
        //   },
        //   "Ctrl-Q": function(cm){ cm.foldCode(cm.getCursor()); }
        // },
        showCursorWhenSelecting: true,
        lineWiseCopyCut: true,
        // autocorrect: true,
        // spellcheck: true,
        // fullScreen:true, // 全屏
        matchBrackets: true,
        autoCloseBrackets: true,
        hintOptions: {
          completeSingle: false // 自动补全

        },
        scrollbarStyle: "simple",
        viewportMargin: Infinity,
        foldGutter: true,
        gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
      });
      instance.setSize(width, height);
      instance.on('keypress', function () {
        //编译器内容更改事件
        instance.showHint();
      });
      var initValue = this.props.initValue; // 设置初始值

      instance.setValue(this.formatQuery(initValue)); // 监听改变事件

      instance.on('change', function () {
        // 将值传出去
        var value = instance.getValue();

        if (value) {
          // 回车换行用空格代替
          value = value.replace(/(\r\n\t|\n|\r\t)/gm, " ").trim();
        }

        _this2.props.getEditorValue(value);
      });
      instance.on('dblclick', function () {
        _this2.updateEditorValue();
      }); // 失去焦点时自动格式化代码

      instance.on('blur', function () {
        _this2.updateEditorValue();
      });
      this.setState({
        codeMioorInstance: instance
      });
    };

    _proto.updateEditorValue = function updateEditorValue() {
      var codeMioorInstance = this.state.codeMioorInstance;
      var formatWalue = this.formatQuery(codeMioorInstance.getValue());
      codeMioorInstance.setValue(formatWalue);
    } // 格式化cypher代码
    ;

    _proto.formatQuery = function formatQuery(query) {
      // a primitive regex approach, based loosely on the Cypher style guide at: https://neo4j.com/developer/cypher-style-guide/
      // "Keywords, similar to clauses, should be styled in all capital letters and are not case-sensitive, but do not need to be placed on a separate line."
      query = query.replace(/\b(WHEN|CASE|AND|OR|XOR|DISTINCT|AS|IN|STARTS WITH|ENDS WITH|CONTAINS|NOT|SET|ORDER BY)\b/gi, function (match) {
        return ' ' + match.toUpperCase().trim() + ' ';
      }); // "The null value and boolean literals should be written in lower case in a query."

      query = query.replace(/\b(NULL|TRUE|FALSE)\b/gi, function (match) {
        return ' ' + match.toLowerCase().trim() + ' ';
      }); // Now ensure that all 'main' Cypher keywords are on a new line

      query = query.replace(/\b(CASE|DETACH DELETE|DELETE|MATCH|MERGE|LIMIT|OPTIONAL MATCH|RETURN|UNWIND|UNION|WHERE|WITH|GROUP BY)\b/gi, function (match) {
        // ".replace(/^\s+/,"")" removes whitespace from the start of the line (safer than using "trimStart()" right now)
        return '\n' + match.toUpperCase().replace(/^\s+/, "") + ' ';
      }); // some whitespace clean-up

      query = query.replace(/^\s+/gm, ''); // remove whitespace from start of lines

      query = query.replace(/\s+$/gm, ''); // remove whitespace from end of lines
      // "One space after each comma in lists and enumerations."

      query = query.replace(/,([^\s])/g, function (match) {
        return ', ' + match.replace(/,/g, '');
      });
      query = query.replace(/ +/g, ' '); // replace multiple spaces with single space
      // "We can also make queries a bit easier to read by indenting ON CREATE or ON MATCH and any subqueries. Each of these blocks is indented with 2 spaces on a new line."

      query = query.replace(/\b(ON CREATE|ON MATCH)\b/gi, function (match) {
        return '\n  ' + match.toUpperCase().replace(/^\s+/, "") + ' ';
      });
      query = query.replace(/ {([\S\s]*?)}/g, function (match) {
        var block = match.trim().substring(1, match.trim().length - 1).trim();
        return ' {\n  ' + block.replace(/(\r\n|\n|\r)/gm, '\n  ') + '\n}';
      });
      query = query.replace(/\n\s*\n/g, '\n'); // remove multiple empty newlines

      return query.trim();
    };

    _proto.render = function render() {
      return React.createElement("div", {
        className: 'container'
      }, React.createElement("textarea", {
        id: "transwarp-code-editor",
        defaultValue: 'match (n) return n limit 10',
        placeholder: "\u8BF7\u8F93\u5165\u4EE3\u7801"
      }));
    };

    return CodeEditor;
  }(React.Component);

  exports.default = CodeEditor;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cypher-editor.umd.development.js.map
