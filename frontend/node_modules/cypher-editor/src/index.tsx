import * as React from 'react';
// 基本
import * as CodeMirror from 'codemirror';
import 'codemirror/lib/codemirror.css';

// 主题
import 'codemirror/theme/base16-dark.css';
import 'codemirror/theme/xq-dark.css';
import 'codemirror/theme/erlang-dark.css';
import 'codemirror/theme/eclipse.css';
import 'codemirror/theme/elegant.css';
import 'codemirror/theme/blackboard.css';

// 语言
// 引入cypher
import 'codemirror/mode/cypher/cypher';
import 'codemirror/mode/sql/sql';

import 'codemirror/addon/dialog/dialog.css';
import 'codemirror/addon/search/searchcursor.js';
import 'codemirror/addon/dialog/dialog.js';
// 代码折叠
import 'codemirror/addon/fold/foldgutter.css';
import 'codemirror/addon/fold/foldcode.js';
import 'codemirror/addon/fold/foldgutter.js';

import 'codemirror/addon/fold/brace-fold.js';
import 'codemirror/addon/fold/comment-fold.js';

// 全屏模式
import 'codemirror/addon/display/fullscreen.css';
import 'codemirror/addon/display/fullscreen.js';

// 简单滚动条
import 'codemirror/addon/scroll/simplescrollbars.css';
import 'codemirror/addon/scroll/simplescrollbars.js';


import 'codemirror/addon/hint/show-hint.css';
import 'codemirror/addon/hint/show-hint.js';
import 'codemirror/addon/hint/anyword-hint.js';

// 自动匹配括号
import 'codemirror/addon/edit/matchbrackets.js';
import 'codemirror/addon/edit/closebrackets.js';

// placeholder
import 'codemirror/addon/display/placeholder.js';



import { EditorConfig } from './type';
import './index.less';

// 支持的语言类型
const ModeMap: {[key: string]: string} = {
  'sql': 'text/x-mysql',
  'cypher': 'cypher',
};
// 支持的主题
const ThemeMap: {[key: string]: string} = {
  'base16-dark': 'base16-dark',
  'xq-dark': 'xq-dark',
  'erlang-dark': 'erlang-dark',
  'eclipse': 'eclipse',
  'blackboard': 'blackboard',
};

const DEFAULT_LINENUMBERS = true;
const DEFAULT_THEME = 'base16-dark';
const DEFAULT_MODE = 'cypher';
const DEFAULT_UNDODEPTH = 20; 
const DEFAULT_AUTOFOCUS = true; 
const DEFAULT_WIDTH = 'auto';
const DEFAULT_HEIGHT ='200';
const DEFAULT_TABINDEX = 4;
// 支持的属性的默认值
interface State {
  codeMioorInstance: CodeMirror.EditorFromTextArea;
  editorValue: any;
}

interface Props {
  editorConfig: EditorConfig; // 编辑器配置对象
  initValue: string; // 初始值
  getEditorValue: (value: any) => void; // 获取编辑器输入内容函数
}

class CodeEditor extends React.Component<Props, State>{
  constructor(props: Props) {
    super(props);
    this.state = {
      codeMioorInstance: {} as CodeMirror.EditorFromTextArea,
      editorValue: '',
    };
  }

  componentDidMount() {
    this.initCodeMioor();
  }

  initCodeMioor() {
    // 获取初始化配置参数
    const { editorConfig: {
      lineNumbers=DEFAULT_LINENUMBERS,
      theme=DEFAULT_THEME,
      undoDepth=DEFAULT_UNDODEPTH,
      tabindex=DEFAULT_TABINDEX,
      mode=DEFAULT_MODE,
      autofocus=DEFAULT_AUTOFOCUS,
      width=DEFAULT_WIDTH,
      height=DEFAULT_HEIGHT
    } } = this.props;
    const id = document.getElementById('transwarp-code-editor');
    // 创建编辑器实例
    const instance = CodeMirror.fromTextArea(id as HTMLTextAreaElement, {
      lineNumbers,
      undoDepth, // 最大回退次数
      tabindex,
      autofocus,
      theme: ThemeMap[theme], // 主题
      mode: ModeMap[mode], // 语言模式
      // extraKeys: {
      //   "Ctrl+": function(cm) {
      //     cm.setOption("fullScreen", !cm.getOption("fullScreen"));
      //   },
      //   "Esc+": function(cm) {
      //     if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
      //   },
      //   "Ctrl-Q": function(cm){ cm.foldCode(cm.getCursor()); }
      // },
      showCursorWhenSelecting: true,
      lineWiseCopyCut: true, // 复制
      // autocorrect: true,
      // spellcheck: true,
      // fullScreen:true, // 全屏
      matchBrackets: true, // 自动匹配括号
      autoCloseBrackets: true, // 自动闭合括号
      hintOptions: {
        completeSingle: false // 自动补全
      },
      scrollbarStyle: "simple",
      viewportMargin: Infinity,
      foldGutter: true,
      gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
    } as any);
    instance.setSize(width, height);
    instance.on('keypress', () => {
      //编译器内容更改事件
      instance.showHint();
    });

    const { initValue } = this.props;

    // 设置初始值
    instance.setValue(this.formatQuery(initValue));

    // 监听改变事件
    instance.on('change', () => {
      // 将值传出去
      let value = instance.getValue();
      if (value) {
        // 回车换行用空格代替
        value =  value.replace(/(\r\n\t|\n|\r\t)/gm," ").trim();
      }
      this.props.getEditorValue(value);
    });
    instance.on('dblclick', () => {
      this.updateEditorValue();
    });
    // 失去焦点时自动格式化代码
    instance.on('blur', () => {
      this.updateEditorValue();
      
    });
    this.setState({
      codeMioorInstance: instance
    });
  }

  updateEditorValue() {
    const { codeMioorInstance } = this.state;
    const formatWalue = this.formatQuery(codeMioorInstance.getValue());
    codeMioorInstance.setValue(formatWalue);
  }

  // 格式化cypher代码
  formatQuery(query: any) {
    // a primitive regex approach, based loosely on the Cypher style guide at: https://neo4j.com/developer/cypher-style-guide/

    // "Keywords, similar to clauses, should be styled in all capital letters and are not case-sensitive, but do not need to be placed on a separate line."
    query = query.replace(/\b(WHEN|CASE|AND|OR|XOR|DISTINCT|AS|IN|STARTS WITH|ENDS WITH|CONTAINS|NOT|SET|ORDER BY)\b/gi, function(match: any) {
        return ' ' + match.toUpperCase().trim() + ' '
    });

    // "The null value and boolean literals should be written in lower case in a query."
    query = query.replace(/\b(NULL|TRUE|FALSE)\b/gi, function(match: any) {
        return ' ' + match.toLowerCase().trim() + ' '
    });

    // Now ensure that all 'main' Cypher keywords are on a new line
    query = query.replace(/\b(CASE|DETACH DELETE|DELETE|MATCH|MERGE|LIMIT|OPTIONAL MATCH|RETURN|UNWIND|UNION|WHERE|WITH|GROUP BY)\b/gi, function(match: any) {
        // ".replace(/^\s+/,"")" removes whitespace from the start of the line (safer than using "trimStart()" right now)
        return '\n' + match.toUpperCase().replace(/^\s+/,"") + ' '
    });

    // some whitespace clean-up
    query = query.replace(/^\s+/gm, ''); // remove whitespace from start of lines

    query = query.replace(/\s+$/gm, ''); // remove whitespace from end of lines

    // "One space after each comma in lists and enumerations."
    query = query.replace(/,([^\s])/g, function(match: any) {
        return ', ' + match.replace(/,/g, '');
    });

    query = query.replace(/ +/g, ' '); // replace multiple spaces with single space

    // "We can also make queries a bit easier to read by indenting ON CREATE or ON MATCH and any subqueries. Each of these blocks is indented with 2 spaces on a new line."
    query = query.replace(/\b(ON CREATE|ON MATCH)\b/gi, function(match: any) {
        return '\n  ' + match.toUpperCase().replace(/^\s+/,"") + ' '
    });
    query = query.replace(/ {([\S\s]*?)}/g, function(match: any) {
        let block = match.trim().substring(1, match.trim().length - 1).trim();
        return ' {\n  ' + block.replace(/(\r\n|\n|\r)/gm, '\n  ') + '\n}';
    });

    query = query.replace(/\n\s*\n/g, '\n'); // remove multiple empty newlines

    return query.trim();
  }

  render() {
    return  <div className='container'>
    <textarea
      id="transwarp-code-editor"
      defaultValue={'match (n) return n limit 10'}
      placeholder="请输入代码"
    >
    </textarea>
    </div>
  }
}

export default CodeEditor;
